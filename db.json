{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/very-simple/source/css/highlight.scss","path":"css/highlight.scss","modified":1,"renderable":1},{"_id":"themes/very-simple/source/css/normalize.css","path":"css/normalize.css","modified":1,"renderable":1},{"_id":"themes/very-simple/source/css/very-simple.scss","path":"css/very-simple.scss","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1513085340361},{"_id":"themes/very-simple/.travis.yml","hash":"564794f27c53c27fc5b59ce33ec6ea297fd05a75","modified":1510373118569},{"_id":"themes/very-simple/LICENSE","hash":"68a4bd4855a0540b1c0ecbdcec96192ac7c7c3d9","modified":1510373118569},{"_id":"themes/very-simple/README.md","hash":"8646e3da8dad8210b690f11f4d90056263f04b39","modified":1510373118569},{"_id":"themes/very-simple/_config.yml","hash":"93d8755a9cdb08e73b0f27c291717db690b2e44e","modified":1513085279288},{"_id":"source/_posts/android/.DS_Store","hash":"f276eafef3fbdad3ac372581548989bc85c9aebd","modified":1516151582408},{"_id":"source/_posts/android/00-EnvironmentStructure.md","hash":"576131d5bc769247d5ab8d43fe01c458d56aa301","modified":1513894131093},{"_id":"source/_posts/android/01-CurrentStatus.md","hash":"e26ae69d2b253e6b15b21426261b5fb21652aee6","modified":1513219720888},{"_id":"source/_posts/android/02-AndroidConcept.md","hash":"0842aaeeb64524b51bef066f1ebb8d8be17ea601","modified":1513894131094},{"_id":"source/_posts/android/03-StartAndroidDevelopment.md","hash":"36d295b4076d6a8c9ee539dd77b545189f0eb038","modified":1513894131095},{"_id":"source/_posts/android/04-MakeLayoutDesign.md","hash":"23a91575eed380f85958e77d9c32bc07e348c007","modified":1516718496957},{"_id":"source/_posts/android/05-ButtonAction.md","hash":"6fe58fa34e538aef16a5ee2c09b2ddcad652c070","modified":1516719506339},{"_id":"source/_posts/android/06-AsyncProcess.md","hash":"364c4f2a0c91c15856aa021a783458b4dbe25b0f","modified":1516720967041},{"_id":"source/_posts/android/07-AppDataBase.md","hash":"42286a23c59eb64bf8a85f497f05810191f7933c","modified":1515713674811},{"_id":"source/_posts/android/99-RegisterAPI.md","hash":"052bd160a0262c32552165a1015ae3f0f7af25e9","modified":1516699795080},{"_id":"themes/very-simple/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510373118564},{"_id":"themes/very-simple/.git/config","hash":"abbada40b44d77eb8fc3a8d641563b0198a4e61d","modified":1510373118565},{"_id":"themes/very-simple/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510373116227},{"_id":"themes/very-simple/.git/index","hash":"149baedeeacf3ab4e955f73033305bee983868a5","modified":1510373118572},{"_id":"themes/very-simple/.git/packed-refs","hash":"a55cb28543af36f6e62107e18239049a2c74bd3c","modified":1510373118562},{"_id":"themes/very-simple/layout/archive.jade","hash":"0a39cb52325e52ef0e2270e60e8af359b12b2389","modified":1510373118570},{"_id":"themes/very-simple/layout/base.jade","hash":"ce2c623c8a690d9219f0d6769b9f22017c888d76","modified":1510373118570},{"_id":"themes/very-simple/layout/index.jade","hash":"b119546739db39c9e6020945ff6a58eb53d5d6a6","modified":1513085279289},{"_id":"themes/very-simple/layout/page.jade","hash":"c782c9d41d20b5e0910e89e46cb85b4bbb7f0f66","modified":1510373118571},{"_id":"themes/very-simple/layout/post.jade","hash":"7afbd3ec3f8f56d3c7cefd46e662d92807dddcd0","modified":1513085279290},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_04.png","hash":"1376f170ebde15ca41661496c7b3ea1ce95b89be","modified":1513219720837},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_06.png","hash":"a161a5ddcefd9d387556d76ae7c2a095b29c60a9","modified":1513219720839},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_05.png","hash":"3559fadd5cc1166fa3abb825c78b004ae175ba88","modified":1513219720838},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_08.png","hash":"f9985d541aa2ee5ad9ad6e245692fdc66239c8d0","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_07.png","hash":"b67af31502be72dc8443f0b20bd572d85ffbee54","modified":1513219720839},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_11.png","hash":"e3391e065b228a70401fd95b58454eebeb101a43","modified":1513219720841},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_09.png","hash":"db4b752c540885f3443afb7ce08dbee98cc5e349","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_10.png","hash":"ac2ac0fc192205bf66c513dfea1e348e5c52ed68","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_02.png","hash":"b12026c07fc7c001fbdd85f08bd5861da9c916b0","modified":1513219720880},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_03.png","hash":"dc79e7af8d0f3a8224b7b6f5f816b8ec680656d3","modified":1513219720880},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_05.png","hash":"bd041b172206c4688b95790ad89c71b14c63f9c8","modified":1513219720881},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_04.png","hash":"a12e363fd0e1c0a82a7bdfec5d2f03ea4032927c","modified":1513219720881},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_06.png","hash":"3f1f88d8ba5a3310387087658cd90f13ca9f615f","modified":1513219720882},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_08.png","hash":"610c6fe8fa6523308cf75d99308dcae97d62b929","modified":1513219720887},{"_id":"source/_posts/android/01-CurrentStatus/JapanShare.png","hash":"c7faf6b196bc40ebbfa76f895f269a3b980f4c8e","modified":1513219720889},{"_id":"source/_posts/android/01-CurrentStatus/WorldShare.png","hash":"4d95ca7d7e28e8960de945a1ae1a86908e0bf7cc","modified":1513219720890},{"_id":"source/_posts/android/02-AndroidConcept/viewinlifecycle.png","hash":"17ab79d944b919dcf84660f3815dd008bae85154","modified":1513219720888},{"_id":"source/_posts/android/04-MakeLayoutDesign/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516331740559},{"_id":"source/_posts/android/05-ButtonAction/.DS_Store","hash":"ff544d7ae96074f07e922c8ab30538065f38f551","modified":1516719147860},{"_id":"source/_posts/android/05-ButtonAction/LoadLayout.png","hash":"ebdbed7cb162e4c20e011a3d4d77e1cdb0f539b0","modified":1515723632126},{"_id":"source/_posts/android/06-AsyncProcess/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516695461167},{"_id":"source/_posts/android/06-AsyncProcess/APISequence.svg","hash":"edfb39308bb1ce189ad70061eb4a5797e16b048d","modified":1516150651782},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_01.png","hash":"55c83f94c94265acaeb8f830b962d55a1231f126","modified":1513219720843},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_03.png","hash":"4c16652a2b21556ae9c5215261bf6fffb9a12b1c","modified":1513219720846},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_02.png","hash":"5fc87dfb11c6d76702de50d8baec8d4fe7f02523","modified":1513219720844},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_06.png","hash":"30afad1a0df3a3c4d4e8667f1d78dc0fd0c87a3c","modified":1513219720853},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_05.png","hash":"7fcbee5d3bc9fa6158c9a562f6bf09d143779bc6","modified":1513219720852},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_02.png","hash":"00cb5c7135bb5a5b158f988525ed965346a017ca","modified":1513219720874},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_01.png","hash":"5eb7acda0d7dd47bd07f8f5c31d26557fb4fed35","modified":1513219720879},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad02.png","hash":"e34287cea93240a5ed2373529ae82e74e9a0d6bd","modified":1513219720906},{"_id":"source/_posts/android/04-MakeLayoutDesign/le0.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1513894131098},{"_id":"source/_posts/android/04-MakeLayoutDesign/le1.png","hash":"13cf740932b7341fbd2745789cc9b9dd3cbb91e6","modified":1513894131100},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate02.png","hash":"40998d06a7f43e0a005d64e09132bd2b98825771","modified":1513894131139},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate06.png","hash":"9e52f846b1118c9bdb0d084881f11909aeff02e4","modified":1513894131145},{"_id":"source/_posts/android/05-ButtonAction/DesignCode.png","hash":"10fea11983f13e61eaa45ac88bec8cd5d609a6b0","modified":1515851327204},{"_id":"source/_posts/android/05-ButtonAction/rerationcode01.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1513894131150},{"_id":"source/_posts/android/05-ButtonAction/setid01.png","hash":"3c409597e97cacbbd0b99c95bba7bb3acac4fa6a","modified":1516719046554},{"_id":"source/_posts/android/05-ButtonAction/setid07.png","hash":"f8702ae0668b3e50eec12c8885e25790fa1baa21","modified":1514705661396},{"_id":"source/_posts/android/05-ButtonAction/setid02.png","hash":"3bcfcdaa9b3945547a3e9af1f88d859c9ee97ca8","modified":1513894131156},{"_id":"themes/very-simple/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510373116229},{"_id":"themes/very-simple/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1510373116226},{"_id":"themes/very-simple/.git/logs/HEAD","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118565},{"_id":"themes/very-simple/layout/_partial/comments.jade","hash":"1c3c5bbd929a78d88578e2adab905531a4a87419","modified":1510373118569},{"_id":"themes/very-simple/layout/_partial/paginator.jade","hash":"7327f32b5b9e6b224c58dcff5942dbba8dfe5582","modified":1510373118570},{"_id":"themes/very-simple/layout/_partial/helpers.jade","hash":"1b08c2dcdd59507ea4be1526e40b5cc75de6f750","modified":1510373118570},{"_id":"themes/very-simple/source/css/_variables.scss","hash":"1de53890b087afc0df8d137c4df8ec50ba12bddb","modified":1510373118571},{"_id":"themes/very-simple/source/css/highlight.scss","hash":"7b47a0c16e2a12c6a8867037e6ee4226f2b4736e","modified":1510373118571},{"_id":"themes/very-simple/source/css/normalize.css","hash":"d0fbef3dd405f26a5fdc896ca1f7875901782c6f","modified":1510373118572},{"_id":"themes/very-simple/source/css/very-simple.scss","hash":"674b56f0c226df7d22ca6050abf300c29fe59062","modified":1510373118572},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_03.png","hash":"162bf284406eb0451abf61648529556492ff73dc","modified":1513219720837},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_07.png","hash":"00e956a773d6ee0f7e9fd70c9ac97402654b4e32","modified":1513219720855},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_07.png","hash":"0a2cd6a444c3c589eab112c2c8948d5116fead4c","modified":1513219720885},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad03.png","hash":"242e8f0149ea15a940e982b108bd29eb4726a7d3","modified":1513219720909},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad05.png","hash":"36742f6ef6922d97f5f0eccc085b2137bacc32e5","modified":1513219720914},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad06.png","hash":"2f6ea65d8aa8fdaf1d6db494ba59354d44ec275f","modified":1513219720916},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad10.png","hash":"f8ac2bcb263b3dc648288019c741929da7e9045a","modified":1513219720928},{"_id":"source/_posts/android/04-MakeLayoutDesign/le11.png","hash":"d5d97146fe4817539a6c391b3ebfc487e1a7f173","modified":1516717199073},{"_id":"source/_posts/android/04-MakeLayoutDesign/le13.png","hash":"e3c1b4a646507dfaad037a05a03dc3c4d7e64fd0","modified":1516717361931},{"_id":"source/_posts/android/04-MakeLayoutDesign/le6.png","hash":"8d77bfe0125c1d8738fe44dec27a85cf9aa378c2","modified":1513894131128},{"_id":"source/_posts/android/04-MakeLayoutDesign/le7.png","hash":"74e9ec8623248d6d1d4316402f8304f46f016057","modified":1516716704827},{"_id":"source/_posts/android/04-MakeLayoutDesign/le9.png","hash":"b0781588b9fd19c1c2593119f11b6378516b3595","modified":1516717025750},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate01.png","hash":"4bcb4adebf432211d3263f8e28bbd460b6446203","modified":1513894131138},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate08.png","hash":"110fe42869410d4911960bc6159e69a0bc5e2999","modified":1516718408434},{"_id":"source/_posts/android/05-ButtonAction/setid04.png","hash":"daee38d424ff03c8de429bf27175b336dbde0d66","modified":1513894131164},{"_id":"source/_posts/android/05-ButtonAction/setid05.png","hash":"6affea06d209e1c9e4f6f24fb316fa1ee92ef464","modified":1516342724517},{"_id":"source/_posts/android/05-ButtonAction/setid08.png","hash":"88fe73310965fd030285f50a495a43aad5202664","modified":1516720104405},{"_id":"source/_posts/android/06-AsyncProcess/AsyncTimerToast.png","hash":"3cbc91dcac923f121b8ad2c1f7265829f2f5f3e6","modified":1516720359443},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad04.png","hash":"1ccfe02fbf00607d4f194c1f614c37122a1a134e","modified":1513219720912},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad07.png","hash":"0540988dccb9601f813128fa137b41c408575dcf","modified":1513219720919},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad11.png","hash":"d2d151c4c1b5a0731e93fe73cbf5461729fb1e34","modified":1513219720930},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad12.png","hash":"2ee2a3f63ad9c31a199ca2f4b4c63e685e49c4fc","modified":1513219720933},{"_id":"source/_posts/android/04-MakeLayoutDesign/le10.png","hash":"6d171ac59859a16c3b0ede092e2c4dfc44afb184","modified":1516717138576},{"_id":"source/_posts/android/04-MakeLayoutDesign/le12.png","hash":"97918c2f60857d7f8efdf451a88e691d890d8a94","modified":1516717313673},{"_id":"source/_posts/android/04-MakeLayoutDesign/le2.png","hash":"a0168eb31c2a3e78f3a6d255f7bc04e8dffbf1d3","modified":1513894131117},{"_id":"source/_posts/android/04-MakeLayoutDesign/le3.png","hash":"2444e132abcb7c841e2e50ee94ec31b0d17b7374","modified":1513894131119},{"_id":"source/_posts/android/04-MakeLayoutDesign/le4.png","hash":"a4992462f9368e81906c8a57c7faf0c1e1daae13","modified":1513894131122},{"_id":"source/_posts/android/04-MakeLayoutDesign/le5.png","hash":"5173e0aa22215ae8b2f6ac375ca15d68b7d0e004","modified":1513894131125},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate03.png","hash":"a3b62dadf8dbae9bfa5b2efb99e510ccf05553aa","modified":1513894131141},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate05.png","hash":"ff23a5db8718dfd054b3680cbf74bbe70b7f1037","modified":1513894131144},{"_id":"source/_posts/android/05-ButtonAction/setid06.png","hash":"5d6e37dcb9b477666f056443ec7e2cc31a867035","modified":1516343034419},{"_id":"themes/very-simple/.git/objects/pack/pack-deedf889bad5b5fe600d93dfdb5f6ee78f270250.idx","hash":"3b34a71ea755323dc07c37feb6c0db5aaa45f2c8","modified":1510373118551},{"_id":"themes/very-simple/.git/refs/heads/master","hash":"b10f3f948777054eb2c59c65bfc35083b3c60884","modified":1510373118564},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_02.png","hash":"285eff03a474e2baeecc883923dcc1fc0818d85e","modified":1513219720836},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad09.png","hash":"20ea707b0ef11f7263a5f9cb819552ed128d72e8","modified":1513219720925},{"_id":"source/_posts/android/04-MakeLayoutDesign/le8.png","hash":"b0fbc4cc8f14018b820637d380fb931b4713286a","modified":1516716827242},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate04.png","hash":"93f4aedac2c4a4b466a56583f2d2903c2f96ce1f","modified":1513894131143},{"_id":"source/_posts/android/05-ButtonAction/setid03.png","hash":"98f0acc3918efe7779f96605d6004622758828bd","modified":1516719332319},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate07.png","hash":"d4b4325b6495b3bb07c92c8b287de9cfad233ae6","modified":1513894131147},{"_id":"source/_posts/android/06-AsyncProcess/MainThreadError.png","hash":"9a5a070351828d297a3ecdb8c9cc5fe6dedd0d34","modified":1516241884308},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI03.png","hash":"aa5c1499679cfdbf61180d11fb977849357f8adf","modified":1512799243570},{"_id":"themes/very-simple/.git/logs/refs/heads/master","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118565},{"_id":"themes/very-simple/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510373118563},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_dl.png","hash":"7e5a0ba98efa7991d94aab2ad923468020b50617","modified":1513219720877},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad08.png","hash":"c23d8ee1ef45fdbf3a52d75f215f572b01f4af54","modified":1513219720923},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_04.png","hash":"373400bcaa15332feb1752d0732e85b4aeab7e8f","modified":1513219720849},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI08.png","hash":"8a56170e886b9de937c9d8a5c3f1597dd183405f","modified":1512810187650},{"_id":"themes/very-simple/.git/logs/refs/remotes/origin/HEAD","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118563},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_01.png","hash":"8c81e042850bb7d1a369ed5431fc525a6175eb9c","modified":1513219720834},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_01.png","hash":"69225fd50b09618f313ae8308a2f5dd61ad9f849","modified":1513219720873},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI09.png","hash":"1c28dfcdfc32bb8be34ec073a194255b6c706159","modified":1512810278059},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI01.png","hash":"50b025c12deaaca4fa8e33c43a09da27145c78e1","modified":1516696242441},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI10.png","hash":"f8dd35d3fe1e6c9e6246bb9710bc2211e23e3a56","modified":1512810288665},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI12.png","hash":"4e2306b198c04d160b4b0d46f9c6c1c54b32be17","modified":1512810377386},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI11.png","hash":"76713f963fc637f6e3f4c43100084bb5290f8216","modified":1512810364959},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI06.png","hash":"bcf6ffebfea5179a20419ad8e8ff8bcc7ed18490","modified":1512810108070},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI07.png","hash":"5593e809dbdcfd685a8487f92c8ae75792afb35c","modified":1512810112872},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI05.png","hash":"acfb3f86ca886e5f8869e96a7a95e2469936f9f4","modified":1512810093578},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI02.png","hash":"11f20d322c8179e77ab415603c1e8320ebfc5094","modified":1512799230494},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI04.png","hash":"13ac140d8ba8d8aae4761b895167e9e573c47717","modified":1512799252979},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_08.png","hash":"4ccad4b554ef47f431ab29e8df5a9eb1045b19bf","modified":1513219720867},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad01.png","hash":"cc4128fbbdcce7bb161dd260cb4be83dd9d32836","modified":1513219720903},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI13.png","hash":"b9261619c996fbef7788db2c6485ce895aadc30d","modified":1512907366916},{"_id":"themes/very-simple/.git/objects/pack/pack-deedf889bad5b5fe600d93dfdb5f6ee78f270250.pack","hash":"193fcefacc738a33c5432952ecdd9fd39afc947c","modified":1510373118550}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android アプリ開発の環境構築","date":"2017-10-31T15:00:00.000Z","_content":"Androidアプリの開発を行うための環境構築をおこないます。\n\n<!-- toc -->\n\nWindows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。\n\n# 環境構築(Windows PC)\nAndroid アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。\nこれ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。\n* java(JDK)\n* Android Studio\n\n## java(JDK)\n\nまずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、\njava(JDK)をインストールします。\n\n### JDKのダウンロード\nインストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。\n\n**java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います**\n\n下記リンクをクリックしJDKダウンロードページにアクセスします。\n[JDK8 ダウンロードページ](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n※ 資料作成時の最新版**java 8u152**バージョンのダウンロード手順で記載していきます。\n\n下図の通り```Java SE Development Kit 8u152```の項目から\n```Accept License Agreement```にチェックを入れ、```Windows x64```のDownload列のリンクをクリックしてexeファイルをダウンロードします。\n<img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\">\n\n### JDKのインストール\nダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。\n\n1. ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。\n<img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\">\n2. 確認ダイアログが表示された場合は、```はい```をクリックします。\n<img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n3. JDKのインストール開始画面が表示されたら```次(N) >```をクリックし、その後も画面に従いインストールを進めます。\n<img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n4. **開発ツール**が選択されていることを確認し、```次(N) >```をクリックします\n<img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n5. JDKの保存先を設定できます、変更は不要なので```次(N) >```をクリックします\n<img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n6. インストールが始まります、完了して画面が変わるのを待ちます\n<img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n7. インストールの完了画面が表示されたら```閉じる(C)```をクリックします\n<img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\">\n\n以上でJDKのインストールが完了です。\n\n\n---\n\n### JDKのインストール 確認\n次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。\n\n1. Windows ホーム画面の左下にある```検索欄```に```cmd```と入力し**コマンドプロンプト**をクリックし起動します。\n<img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\">\n2. コマンドプロンプトに```java -version```と入力しエンターキーを押します。\n<img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\">\n\n以上でjava(JDK)のインストールの確認ができました\n\n---\n\n## Android Studio\n最後にAndroid Studioの環境構築を行います。\nAndroid Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。\n\n[Android Studio ダウンロードページ](https://developer.android.com/studio/index.html?hl=ja)\n※ 資料作成時の最新版は Android Studio 3.0.1\n\n1. **Android Studio Androidの公式 IDE**下にある```Android Studio 3.0.1 FOR WINDOWS...```のボタンをクリックしexeファイルをダウンロードします。\n<img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n2. ダウンロードの確認画面が表示されたら**利用規約**を確認の上、チェックをクリックし、```ANDROID STUDIO FOR WINDOWS ダウンロード```をクリックします。\n<img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n3. ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。\n<img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n4. 確認ダイアログが表示された場合は```はい```をクリックします\n<img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n5. インストーラの起動画面が表示されたら```Next >```をクリックします\n<img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n6. インストールするコンポーネント設定が表示されたら\"Android Virtual Device\"がチェックされていることを確認し、```Next >```をクリックします\n<img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n7. Android Studioの保存先を設定します、変更の必要がなければ```Next >```をクリックりします\n<img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n8. ```Install```をクリックします\n<img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n9. インストールの完了を待ちます\n<img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n10. インストールが終わったら```Next >```をクリックします\n<img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n11. ```Finish```をクリックすると、Android Studioが起動します。\n引き続き、Android Studioの初回セットアップを行います\n<img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n12. Android Studioが起動しAndroid SDK Componentのインストールが開始されます\n<img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n13. Welcom画面が表示されたら```Next```をクリック\n<img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n14. Install Type画面では**Standard**が選択されていることを確認し```Next```をクリックします\n<img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n15. Android Studioのテーマ、色合いを好みで選択し、```Next```をクリックします\n<img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n16. 確認画面が表示されたら```Finish```をクリックします\n<img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n17. Androidアプリの開発に必要なComponentのダウンロードを待ちます\n<img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n18. ダウンロードが終了したら、```Finish```をクリックします\n<img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n19. Android Studioの起動画面が表示されたら完了です\n<img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\">\n\n以上でAndroid Studioのインストール、セットアップ作業は完了です。\nAndroidアプリの開発環境が整いましたので早速開発に入っていきましょう！\n\n# 環境構築(Mac PC)\n\n## java(JDK)のインストール\n\n## Android Studioのインストール\n\n","source":"_posts/android/00-EnvironmentStructure.md","raw":"---\ntitle: Android アプリ開発の環境構築\ndate: 2017-11-01\n---\nAndroidアプリの開発を行うための環境構築をおこないます。\n\n<!-- toc -->\n\nWindows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。\n\n# 環境構築(Windows PC)\nAndroid アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。\nこれ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。\n* java(JDK)\n* Android Studio\n\n## java(JDK)\n\nまずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、\njava(JDK)をインストールします。\n\n### JDKのダウンロード\nインストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。\n\n**java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います**\n\n下記リンクをクリックしJDKダウンロードページにアクセスします。\n[JDK8 ダウンロードページ](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n※ 資料作成時の最新版**java 8u152**バージョンのダウンロード手順で記載していきます。\n\n下図の通り```Java SE Development Kit 8u152```の項目から\n```Accept License Agreement```にチェックを入れ、```Windows x64```のDownload列のリンクをクリックしてexeファイルをダウンロードします。\n<img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\">\n\n### JDKのインストール\nダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。\n\n1. ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。\n<img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\">\n2. 確認ダイアログが表示された場合は、```はい```をクリックします。\n<img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n3. JDKのインストール開始画面が表示されたら```次(N) >```をクリックし、その後も画面に従いインストールを進めます。\n<img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n4. **開発ツール**が選択されていることを確認し、```次(N) >```をクリックします\n<img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n5. JDKの保存先を設定できます、変更は不要なので```次(N) >```をクリックします\n<img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n6. インストールが始まります、完了して画面が変わるのを待ちます\n<img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n7. インストールの完了画面が表示されたら```閉じる(C)```をクリックします\n<img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\">\n\n以上でJDKのインストールが完了です。\n\n\n---\n\n### JDKのインストール 確認\n次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。\n\n1. Windows ホーム画面の左下にある```検索欄```に```cmd```と入力し**コマンドプロンプト**をクリックし起動します。\n<img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\">\n2. コマンドプロンプトに```java -version```と入力しエンターキーを押します。\n<img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\">\n\n以上でjava(JDK)のインストールの確認ができました\n\n---\n\n## Android Studio\n最後にAndroid Studioの環境構築を行います。\nAndroid Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。\n\n[Android Studio ダウンロードページ](https://developer.android.com/studio/index.html?hl=ja)\n※ 資料作成時の最新版は Android Studio 3.0.1\n\n1. **Android Studio Androidの公式 IDE**下にある```Android Studio 3.0.1 FOR WINDOWS...```のボタンをクリックしexeファイルをダウンロードします。\n<img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n2. ダウンロードの確認画面が表示されたら**利用規約**を確認の上、チェックをクリックし、```ANDROID STUDIO FOR WINDOWS ダウンロード```をクリックします。\n<img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n3. ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。\n<img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n4. 確認ダイアログが表示された場合は```はい```をクリックします\n<img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n5. インストーラの起動画面が表示されたら```Next >```をクリックします\n<img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n6. インストールするコンポーネント設定が表示されたら\"Android Virtual Device\"がチェックされていることを確認し、```Next >```をクリックします\n<img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n7. Android Studioの保存先を設定します、変更の必要がなければ```Next >```をクリックりします\n<img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n8. ```Install```をクリックします\n<img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n9. インストールの完了を待ちます\n<img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n10. インストールが終わったら```Next >```をクリックします\n<img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n11. ```Finish```をクリックすると、Android Studioが起動します。\n引き続き、Android Studioの初回セットアップを行います\n<img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n12. Android Studioが起動しAndroid SDK Componentのインストールが開始されます\n<img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n13. Welcom画面が表示されたら```Next```をクリック\n<img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n14. Install Type画面では**Standard**が選択されていることを確認し```Next```をクリックします\n<img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n15. Android Studioのテーマ、色合いを好みで選択し、```Next```をクリックします\n<img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n16. 確認画面が表示されたら```Finish```をクリックします\n<img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n17. Androidアプリの開発に必要なComponentのダウンロードを待ちます\n<img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n18. ダウンロードが終了したら、```Finish```をクリックします\n<img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n19. Android Studioの起動画面が表示されたら完了です\n<img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\">\n\n以上でAndroid Studioのインストール、セットアップ作業は完了です。\nAndroidアプリの開発環境が整いましたので早速開発に入っていきましょう！\n\n# 環境構築(Mac PC)\n\n## java(JDK)のインストール\n\n## Android Studioのインストール\n\n","slug":"00-EnvironmentStructure","published":1,"updated":"2017-12-21T22:08:51.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2500005t610f4udez4","content":"<p>Androidアプリの開発を行うための環境構築をおこないます。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#環境構築windows-pc\">環境構築(Windows PC)</a><ul>\n<li><a href=\"#javajdk\">java(JDK)</a><ul>\n<li><a href=\"#jdkのダウンロード\">JDKのダウンロード</a></li>\n<li><a href=\"#jdkのインストール\">JDKのインストール</a></li>\n<li><a href=\"#jdkのインストール-確認\">JDKのインストール 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#android-studio\">Android Studio</a></li>\n</ul>\n</li>\n<li><a href=\"#環境構築mac-pc\">環境構築(Mac PC)</a><ul>\n<li><a href=\"#javajdkのインストール\">java(JDK)のインストール</a></li>\n<li><a href=\"#android-studioのインストール\">Android Studioのインストール</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>Windows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。</p>\n<h1><span id=\"環境構築windows-pc\">環境構築(Windows PC)</span></h1><p>Android アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。<br>これ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。</p>\n<ul>\n<li>java(JDK)</li>\n<li>Android Studio</li>\n</ul>\n<h2><span id=\"javajdk\">java(JDK)</span></h2><p>まずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、<br>java(JDK)をインストールします。</p>\n<h3><span id=\"jdkのダウンロード\">JDKのダウンロード</span></h3><p>インストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。</p>\n<p><strong>java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います</strong></p>\n<p>下記リンクをクリックしJDKダウンロードページにアクセスします。<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK8 ダウンロードページ</a><br>※ 資料作成時の最新版<strong>java 8u152</strong>バージョンのダウンロード手順で記載していきます。</p>\n<p>下図の通り<code>Java SE Development Kit 8u152</code>の項目から<br><code>Accept License Agreement</code>にチェックを入れ、<code>Windows x64</code>のDownload列のリンクをクリックしてexeファイルをダウンロードします。<br><img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\"></p>\n<h3><span id=\"jdkのインストール\">JDKのインストール</span></h3><p>ダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。</p>\n<ol>\n<li>ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。<br><img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は、<code>はい</code>をクリックします。<br><img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKのインストール開始画面が表示されたら<code>次(N) &gt;</code>をクリックし、その後も画面に従いインストールを進めます。<br><img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li><strong>開発ツール</strong>が選択されていることを確認し、<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKの保存先を設定できます、変更は不要なので<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールが始まります、完了して画面が変わるのを待ちます<br><img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールの完了画面が表示されたら<code>閉じる(C)</code>をクリックします<br><img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\"></li>\n</ol>\n<p>以上でJDKのインストールが完了です。</p>\n<hr>\n<h3><span id=\"jdkのインストール-確認\">JDKのインストール 確認</span></h3><p>次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。</p>\n<ol>\n<li>Windows ホーム画面の左下にある<code>検索欄</code>に<code>cmd</code>と入力し<strong>コマンドプロンプト</strong>をクリックし起動します。<br><img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\"></li>\n<li>コマンドプロンプトに<code>java -version</code>と入力しエンターキーを押します。<br><img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\"></li>\n</ol>\n<p>以上でjava(JDK)のインストールの確認ができました</p>\n<hr>\n<h2><span id=\"android-studio\">Android Studio</span></h2><p>最後にAndroid Studioの環境構築を行います。<br>Android Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。</p>\n<p><a href=\"https://developer.android.com/studio/index.html?hl=ja\" target=\"_blank\" rel=\"external\">Android Studio ダウンロードページ</a><br>※ 資料作成時の最新版は Android Studio 3.0.1</p>\n<ol>\n<li><strong>Android Studio Androidの公式 IDE</strong>下にある<code>Android Studio 3.0.1 FOR WINDOWS...</code>のボタンをクリックしexeファイルをダウンロードします。<br><img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードの確認画面が表示されたら<strong>利用規約</strong>を確認の上、チェックをクリックし、<code>ANDROID STUDIO FOR WINDOWS ダウンロード</code>をクリックします。<br><img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。<br><img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は<code>はい</code>をクリックします<br><img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストーラの起動画面が表示されたら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールするコンポーネント設定が表示されたら”Android Virtual Device”がチェックされていることを確認し、<code>Next &gt;</code>をクリックします<br><img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioの保存先を設定します、変更の必要がなければ<code>Next &gt;</code>をクリックりします<br><img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Install</code>をクリックします<br><img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールの完了を待ちます<br><img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールが終わったら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Finish</code>をクリックすると、Android Studioが起動します。<br>引き続き、Android Studioの初回セットアップを行います<br><img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioが起動しAndroid SDK Componentのインストールが開始されます<br><img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Welcom画面が表示されたら<code>Next</code>をクリック<br><img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Install Type画面では<strong>Standard</strong>が選択されていることを確認し<code>Next</code>をクリックします<br><img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioのテーマ、色合いを好みで選択し、<code>Next</code>をクリックします<br><img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>確認画面が表示されたら<code>Finish</code>をクリックします<br><img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Androidアプリの開発に必要なComponentのダウンロードを待ちます<br><img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>ダウンロードが終了したら、<code>Finish</code>をクリックします<br><img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioの起動画面が表示されたら完了です<br><img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\"></li>\n</ol>\n<p>以上でAndroid Studioのインストール、セットアップ作業は完了です。<br>Androidアプリの開発環境が整いましたので早速開発に入っていきましょう！</p>\n<h1><span id=\"環境構築mac-pc\">環境構築(Mac PC)</span></h1><h2><span id=\"javajdkのインストール\">java(JDK)のインストール</span></h2><h2><span id=\"android-studioのインストール\">Android Studioのインストール</span></h2>","site":{"data":{}},"excerpt":"","more":"<p>Androidアプリの開発を行うための環境構築をおこないます。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#環境構築windows-pc\">環境構築(Windows PC)</a><ul>\n<li><a href=\"#javajdk\">java(JDK)</a><ul>\n<li><a href=\"#jdkのダウンロード\">JDKのダウンロード</a></li>\n<li><a href=\"#jdkのインストール\">JDKのインストール</a></li>\n<li><a href=\"#jdkのインストール-確認\">JDKのインストール 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#android-studio\">Android Studio</a></li>\n</ul>\n</li>\n<li><a href=\"#環境構築mac-pc\">環境構築(Mac PC)</a><ul>\n<li><a href=\"#javajdkのインストール\">java(JDK)のインストール</a></li>\n<li><a href=\"#android-studioのインストール\">Android Studioのインストール</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>Windows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。</p>\n<h1 id=\"環境構築-Windows-PC\"><a href=\"#環境構築-Windows-PC\" class=\"headerlink\" title=\"環境構築(Windows PC)\"></a>環境構築(Windows PC)</h1><p>Android アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。<br>これ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。</p>\n<ul>\n<li>java(JDK)</li>\n<li>Android Studio</li>\n</ul>\n<h2 id=\"java-JDK\"><a href=\"#java-JDK\" class=\"headerlink\" title=\"java(JDK)\"></a>java(JDK)</h2><p>まずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、<br>java(JDK)をインストールします。</p>\n<h3 id=\"JDKのダウンロード\"><a href=\"#JDKのダウンロード\" class=\"headerlink\" title=\"JDKのダウンロード\"></a>JDKのダウンロード</h3><p>インストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。</p>\n<p><strong>java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います</strong></p>\n<p>下記リンクをクリックしJDKダウンロードページにアクセスします。<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK8 ダウンロードページ</a><br>※ 資料作成時の最新版<strong>java 8u152</strong>バージョンのダウンロード手順で記載していきます。</p>\n<p>下図の通り<code>Java SE Development Kit 8u152</code>の項目から<br><code>Accept License Agreement</code>にチェックを入れ、<code>Windows x64</code>のDownload列のリンクをクリックしてexeファイルをダウンロードします。<br><img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\"></p>\n<h3 id=\"JDKのインストール\"><a href=\"#JDKのインストール\" class=\"headerlink\" title=\"JDKのインストール\"></a>JDKのインストール</h3><p>ダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。</p>\n<ol>\n<li>ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。<br><img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は、<code>はい</code>をクリックします。<br><img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKのインストール開始画面が表示されたら<code>次(N) &gt;</code>をクリックし、その後も画面に従いインストールを進めます。<br><img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li><strong>開発ツール</strong>が選択されていることを確認し、<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKの保存先を設定できます、変更は不要なので<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールが始まります、完了して画面が変わるのを待ちます<br><img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールの完了画面が表示されたら<code>閉じる(C)</code>をクリックします<br><img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\"></li>\n</ol>\n<p>以上でJDKのインストールが完了です。</p>\n<hr>\n<h3 id=\"JDKのインストール-確認\"><a href=\"#JDKのインストール-確認\" class=\"headerlink\" title=\"JDKのインストール 確認\"></a>JDKのインストール 確認</h3><p>次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。</p>\n<ol>\n<li>Windows ホーム画面の左下にある<code>検索欄</code>に<code>cmd</code>と入力し<strong>コマンドプロンプト</strong>をクリックし起動します。<br><img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\"></li>\n<li>コマンドプロンプトに<code>java -version</code>と入力しエンターキーを押します。<br><img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\"></li>\n</ol>\n<p>以上でjava(JDK)のインストールの確認ができました</p>\n<hr>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><p>最後にAndroid Studioの環境構築を行います。<br>Android Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。</p>\n<p><a href=\"https://developer.android.com/studio/index.html?hl=ja\" target=\"_blank\" rel=\"external\">Android Studio ダウンロードページ</a><br>※ 資料作成時の最新版は Android Studio 3.0.1</p>\n<ol>\n<li><strong>Android Studio Androidの公式 IDE</strong>下にある<code>Android Studio 3.0.1 FOR WINDOWS...</code>のボタンをクリックしexeファイルをダウンロードします。<br><img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードの確認画面が表示されたら<strong>利用規約</strong>を確認の上、チェックをクリックし、<code>ANDROID STUDIO FOR WINDOWS ダウンロード</code>をクリックします。<br><img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。<br><img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は<code>はい</code>をクリックします<br><img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストーラの起動画面が表示されたら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールするコンポーネント設定が表示されたら”Android Virtual Device”がチェックされていることを確認し、<code>Next &gt;</code>をクリックします<br><img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioの保存先を設定します、変更の必要がなければ<code>Next &gt;</code>をクリックりします<br><img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Install</code>をクリックします<br><img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールの完了を待ちます<br><img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールが終わったら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Finish</code>をクリックすると、Android Studioが起動します。<br>引き続き、Android Studioの初回セットアップを行います<br><img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioが起動しAndroid SDK Componentのインストールが開始されます<br><img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Welcom画面が表示されたら<code>Next</code>をクリック<br><img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Install Type画面では<strong>Standard</strong>が選択されていることを確認し<code>Next</code>をクリックします<br><img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioのテーマ、色合いを好みで選択し、<code>Next</code>をクリックします<br><img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>確認画面が表示されたら<code>Finish</code>をクリックします<br><img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Androidアプリの開発に必要なComponentのダウンロードを待ちます<br><img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>ダウンロードが終了したら、<code>Finish</code>をクリックします<br><img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioの起動画面が表示されたら完了です<br><img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\"></li>\n</ol>\n<p>以上でAndroid Studioのインストール、セットアップ作業は完了です。<br>Androidアプリの開発環境が整いましたので早速開発に入っていきましょう！</p>\n<h1 id=\"環境構築-Mac-PC\"><a href=\"#環境構築-Mac-PC\" class=\"headerlink\" title=\"環境構築(Mac PC)\"></a>環境構築(Mac PC)</h1><h2 id=\"java-JDK-のインストール\"><a href=\"#java-JDK-のインストール\" class=\"headerlink\" title=\"java(JDK)のインストール\"></a>java(JDK)のインストール</h2><h2 id=\"Android-Studioのインストール\"><a href=\"#Android-Studioのインストール\" class=\"headerlink\" title=\"Android Studioのインストール\"></a>Android Studioのインストール</h2>"},{"title":"Android OS とは","date":"2017-11-01T15:00:00.000Z","_content":"Android OSの現在のシェアや動向を紹介します。\n\n<!-- toc -->\n\n# Android OSとは\n\n* google社が作ったスマートフォン向け OS(オペレーションシステム)\n* 無料で世界中の人が使えるオープンソースOS\n* 世界で一番普及しているプログラミング言語 「Java」を使って開発する\n* Google I/O 2017にてモダン言語 「Kotlin」を正式採用\n\n## スマートフォン OSのシェア\n\n現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは\niOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。\n2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が\nありましたが現在では開発を終了してしまっています。\n\n|OS               |開発者       |最新のバージョン|\n|:----------------|:----------:|:------------:|\n|Android          |Google      |8.0           |\n|iOS              |Apple       |11.1          |\n|Windows 10 Mobile|Microsoft   |1607          |\n\n\n### 世界のスマートフォン OS シェア\n世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。\n\nNet Market Share参照[※1]\n<img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |70.47%        |\n|iOS              |Apple       |28.55%        |\n|Series 40        |NOKIA       |0.32%         |\n|Windows 10 Mobile|Microsoft   |0.22%         |\n\n### 日本のスマートフォン OS シェア\nマーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。\nこれはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に\n伴ってAndroid端末を購入する利用者が増えたものと考えられます。\n\nKANTAR WORLDPANEL参照[※2]\n<img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |55.00%        |\n|iOS              |Apple       |44.80%        |\n|Windows 10 Mobile|Microsoft   |0.10%         |\n\n## Android アプリの開発環境\n\nAndroid アプリの開発には **Android Studio**というソフトウェアを使います。\n> Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。\n> 2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。\n\nAndroidアプリの開発は主に**java**や**Kotlin**と言うプログラミング言語で開発を行います。\nそれぞれのプログラミング言語の特徴を紹介します。\n\n* java\n\t* Oracle(オラクル)社が開発したプログラミング言語\n\t* どんなOS環境での実行も可能なプログラミング言語\n\t* JVM(Java Virtual Machine)と言う仮想マシン上で動く\n* Kotlin\n\t* JET BRAINS社が \"java\" をベースに開発したプログラミング言語\n\t* javaよりコード量を少なくAndroidアプリを開発できる\n\t* javaの動作環境があれば実行可能\n\n## Android OSプラットフォーム\n\n現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。\n販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。\nそのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。\n\n現在であれば**6.0(Marshmallow)**から2つ前のコードネームなので***4.4(KitKat)***までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。\n\nAndroid Developers参照[※3]\n\n|Version    |CodeName    |API  |User     |\n|:----------|:-----------|:----|:--------|\n|6.0        |Marshmallow |23   |30.9%    |\n|5.0~5.1    |Lollipop    |21-22|27.2%    |\n|7.0~7.1    |Nougat      |24-25|20.6%    |\n|4.4        |KitKat      |19   |13.8%    |\n|4.1.x~4.2.x|Jelly Bean  |16-17|5.3%     |\n|4.3        |Jelly Bean  |18   |0.9%     |\n|8.0        |Oreo        |26   |0.3%     |\n\n\n## Android アーキテクチャ\n\nAndroid OSのアーキテクチャはLinux Kernelを基盤に作られています。\n実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。\n\nAndroid Developers参照[※4]\n<img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\">\n\n[※1]: https://netmarketshare.com/\n[※2]: https://www.kantarworldpanel.com/global/smartphone-os-market-share\n[※3]: https://developer.android.com/about/dashboards/index.html#Platform\n[※4]: https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\n","source":"_posts/android/01-CurrentStatus.md","raw":"---\ntitle: Android OS とは\ndate: 2017-11-02\n---\nAndroid OSの現在のシェアや動向を紹介します。\n\n<!-- toc -->\n\n# Android OSとは\n\n* google社が作ったスマートフォン向け OS(オペレーションシステム)\n* 無料で世界中の人が使えるオープンソースOS\n* 世界で一番普及しているプログラミング言語 「Java」を使って開発する\n* Google I/O 2017にてモダン言語 「Kotlin」を正式採用\n\n## スマートフォン OSのシェア\n\n現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは\niOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。\n2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が\nありましたが現在では開発を終了してしまっています。\n\n|OS               |開発者       |最新のバージョン|\n|:----------------|:----------:|:------------:|\n|Android          |Google      |8.0           |\n|iOS              |Apple       |11.1          |\n|Windows 10 Mobile|Microsoft   |1607          |\n\n\n### 世界のスマートフォン OS シェア\n世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。\n\nNet Market Share参照[※1]\n<img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |70.47%        |\n|iOS              |Apple       |28.55%        |\n|Series 40        |NOKIA       |0.32%         |\n|Windows 10 Mobile|Microsoft   |0.22%         |\n\n### 日本のスマートフォン OS シェア\nマーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。\nこれはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に\n伴ってAndroid端末を購入する利用者が増えたものと考えられます。\n\nKANTAR WORLDPANEL参照[※2]\n<img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |55.00%        |\n|iOS              |Apple       |44.80%        |\n|Windows 10 Mobile|Microsoft   |0.10%         |\n\n## Android アプリの開発環境\n\nAndroid アプリの開発には **Android Studio**というソフトウェアを使います。\n> Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。\n> 2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。\n\nAndroidアプリの開発は主に**java**や**Kotlin**と言うプログラミング言語で開発を行います。\nそれぞれのプログラミング言語の特徴を紹介します。\n\n* java\n\t* Oracle(オラクル)社が開発したプログラミング言語\n\t* どんなOS環境での実行も可能なプログラミング言語\n\t* JVM(Java Virtual Machine)と言う仮想マシン上で動く\n* Kotlin\n\t* JET BRAINS社が \"java\" をベースに開発したプログラミング言語\n\t* javaよりコード量を少なくAndroidアプリを開発できる\n\t* javaの動作環境があれば実行可能\n\n## Android OSプラットフォーム\n\n現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。\n販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。\nそのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。\n\n現在であれば**6.0(Marshmallow)**から2つ前のコードネームなので***4.4(KitKat)***までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。\n\nAndroid Developers参照[※3]\n\n|Version    |CodeName    |API  |User     |\n|:----------|:-----------|:----|:--------|\n|6.0        |Marshmallow |23   |30.9%    |\n|5.0~5.1    |Lollipop    |21-22|27.2%    |\n|7.0~7.1    |Nougat      |24-25|20.6%    |\n|4.4        |KitKat      |19   |13.8%    |\n|4.1.x~4.2.x|Jelly Bean  |16-17|5.3%     |\n|4.3        |Jelly Bean  |18   |0.9%     |\n|8.0        |Oreo        |26   |0.3%     |\n\n\n## Android アーキテクチャ\n\nAndroid OSのアーキテクチャはLinux Kernelを基盤に作られています。\n実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。\n\nAndroid Developers参照[※4]\n<img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\">\n\n[※1]: https://netmarketshare.com/\n[※2]: https://www.kantarworldpanel.com/global/smartphone-os-market-share\n[※3]: https://developer.android.com/about/dashboards/index.html#Platform\n[※4]: https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\n","slug":"01-CurrentStatus","published":1,"updated":"2017-12-14T02:48:40.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2c00015t61bn2j3z2j","content":"<p>Android OSの現在のシェアや動向を紹介します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android-osとは\">Android OSとは</a><ul>\n<li><a href=\"#スマートフォン-osのシェア\">スマートフォン OSのシェア</a><ul>\n<li><a href=\"#世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</a></li>\n<li><a href=\"#日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</a></li>\n</ul>\n</li>\n<li><a href=\"#android-アプリの開発環境\">Android アプリの開発環境</a></li>\n<li><a href=\"#android-osプラットフォーム\">Android OSプラットフォーム</a></li>\n<li><a href=\"#android-アーキテクチャ\">Android アーキテクチャ</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"android-osとは\">Android OSとは</span></h1><ul>\n<li>google社が作ったスマートフォン向け OS(オペレーションシステム)</li>\n<li>無料で世界中の人が使えるオープンソースOS</li>\n<li>世界で一番普及しているプログラミング言語 「Java」を使って開発する</li>\n<li>Google I/O 2017にてモダン言語 「Kotlin」を正式採用</li>\n</ul>\n<h2><span id=\"スマートフォン-osのシェア\">スマートフォン OSのシェア</span></h2><p>現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは<br>iOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。<br>2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が<br>ありましたが現在では開発を終了してしまっています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:center\">最新のバージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\">8.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:center\">11.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:center\">1607</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</span></h3><p>世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。</p>\n<p>Net Market Share参照<a href=\"https://netmarketshare.com/\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">70.47%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">28.55%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Series 40</td>\n<td style=\"text-align:center\">NOKIA</td>\n<td style=\"text-align:left\">0.32%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.22%</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</span></h3><p>マーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。<br>これはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に<br>伴ってAndroid端末を購入する利用者が増えたものと考えられます。</p>\n<p>KANTAR WORLDPANEL参照<a href=\"https://www.kantarworldpanel.com/global/smartphone-os-market-share\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">55.00%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">44.80%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.10%</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"android-アプリの開発環境\">Android アプリの開発環境</span></h2><p>Android アプリの開発には <strong>Android Studio</strong>というソフトウェアを使います。</p>\n<blockquote>\n<p>Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。<br>2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。</p>\n</blockquote>\n<p>Androidアプリの開発は主に<strong>java</strong>や<strong>Kotlin</strong>と言うプログラミング言語で開発を行います。<br>それぞれのプログラミング言語の特徴を紹介します。</p>\n<ul>\n<li>java<ul>\n<li>Oracle(オラクル)社が開発したプログラミング言語</li>\n<li>どんなOS環境での実行も可能なプログラミング言語</li>\n<li>JVM(Java Virtual Machine)と言う仮想マシン上で動く</li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li>JET BRAINS社が “java” をベースに開発したプログラミング言語</li>\n<li>javaよりコード量を少なくAndroidアプリを開発できる</li>\n<li>javaの動作環境があれば実行可能</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"android-osプラットフォーム\">Android OSプラットフォーム</span></h2><p>現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。<br>販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。<br>そのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。</p>\n<p>現在であれば<strong>6.0(Marshmallow)</strong>から2つ前のコードネームなので<strong><em>4.4(KitKat)</em></strong>までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/about/dashboards/index.html#Platform\" target=\"_blank\" rel=\"external\">※3</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Version</th>\n<th style=\"text-align:left\">CodeName</th>\n<th style=\"text-align:left\">API</th>\n<th style=\"text-align:left\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">6.0</td>\n<td style=\"text-align:left\">Marshmallow</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">30.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.0~5.1</td>\n<td style=\"text-align:left\">Lollipop</td>\n<td style=\"text-align:left\">21-22</td>\n<td style=\"text-align:left\">27.2%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.0~7.1</td>\n<td style=\"text-align:left\">Nougat</td>\n<td style=\"text-align:left\">24-25</td>\n<td style=\"text-align:left\">20.6%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.4</td>\n<td style=\"text-align:left\">KitKat</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">13.8%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.1.x~4.2.x</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">16-17</td>\n<td style=\"text-align:left\">5.3%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.3</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">0.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.0</td>\n<td style=\"text-align:left\">Oreo</td>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">0.3%</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"android-アーキテクチャ\">Android アーキテクチャ</span></h2><p>Android OSのアーキテクチャはLinux Kernelを基盤に作られています。<br>実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\" target=\"_blank\" rel=\"external\">※4</a><br><img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android OSの現在のシェアや動向を紹介します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android-osとは\">Android OSとは</a><ul>\n<li><a href=\"#スマートフォン-osのシェア\">スマートフォン OSのシェア</a><ul>\n<li><a href=\"#世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</a></li>\n<li><a href=\"#日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</a></li>\n</ul>\n</li>\n<li><a href=\"#android-アプリの開発環境\">Android アプリの開発環境</a></li>\n<li><a href=\"#android-osプラットフォーム\">Android OSプラットフォーム</a></li>\n<li><a href=\"#android-アーキテクチャ\">Android アーキテクチャ</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"Android-OSとは\"><a href=\"#Android-OSとは\" class=\"headerlink\" title=\"Android OSとは\"></a>Android OSとは</h1><ul>\n<li>google社が作ったスマートフォン向け OS(オペレーションシステム)</li>\n<li>無料で世界中の人が使えるオープンソースOS</li>\n<li>世界で一番普及しているプログラミング言語 「Java」を使って開発する</li>\n<li>Google I/O 2017にてモダン言語 「Kotlin」を正式採用</li>\n</ul>\n<h2 id=\"スマートフォン-OSのシェア\"><a href=\"#スマートフォン-OSのシェア\" class=\"headerlink\" title=\"スマートフォン OSのシェア\"></a>スマートフォン OSのシェア</h2><p>現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは<br>iOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。<br>2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が<br>ありましたが現在では開発を終了してしまっています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:center\">最新のバージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\">8.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:center\">11.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:center\">1607</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"世界のスマートフォン-OS-シェア\"><a href=\"#世界のスマートフォン-OS-シェア\" class=\"headerlink\" title=\"世界のスマートフォン OS シェア\"></a>世界のスマートフォン OS シェア</h3><p>世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。</p>\n<p>Net Market Share参照<a href=\"https://netmarketshare.com/\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">70.47%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">28.55%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Series 40</td>\n<td style=\"text-align:center\">NOKIA</td>\n<td style=\"text-align:left\">0.32%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.22%</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日本のスマートフォン-OS-シェア\"><a href=\"#日本のスマートフォン-OS-シェア\" class=\"headerlink\" title=\"日本のスマートフォン OS シェア\"></a>日本のスマートフォン OS シェア</h3><p>マーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。<br>これはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に<br>伴ってAndroid端末を購入する利用者が増えたものと考えられます。</p>\n<p>KANTAR WORLDPANEL参照<a href=\"https://www.kantarworldpanel.com/global/smartphone-os-market-share\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">55.00%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">44.80%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.10%</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Android-アプリの開発環境\"><a href=\"#Android-アプリの開発環境\" class=\"headerlink\" title=\"Android アプリの開発環境\"></a>Android アプリの開発環境</h2><p>Android アプリの開発には <strong>Android Studio</strong>というソフトウェアを使います。</p>\n<blockquote>\n<p>Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。<br>2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。</p>\n</blockquote>\n<p>Androidアプリの開発は主に<strong>java</strong>や<strong>Kotlin</strong>と言うプログラミング言語で開発を行います。<br>それぞれのプログラミング言語の特徴を紹介します。</p>\n<ul>\n<li>java<ul>\n<li>Oracle(オラクル)社が開発したプログラミング言語</li>\n<li>どんなOS環境での実行も可能なプログラミング言語</li>\n<li>JVM(Java Virtual Machine)と言う仮想マシン上で動く</li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li>JET BRAINS社が “java” をベースに開発したプログラミング言語</li>\n<li>javaよりコード量を少なくAndroidアプリを開発できる</li>\n<li>javaの動作環境があれば実行可能</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Android-OSプラットフォーム\"><a href=\"#Android-OSプラットフォーム\" class=\"headerlink\" title=\"Android OSプラットフォーム\"></a>Android OSプラットフォーム</h2><p>現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。<br>販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。<br>そのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。</p>\n<p>現在であれば<strong>6.0(Marshmallow)</strong>から2つ前のコードネームなので<strong><em>4.4(KitKat)</em></strong>までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/about/dashboards/index.html#Platform\" target=\"_blank\" rel=\"external\">※3</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Version</th>\n<th style=\"text-align:left\">CodeName</th>\n<th style=\"text-align:left\">API</th>\n<th style=\"text-align:left\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">6.0</td>\n<td style=\"text-align:left\">Marshmallow</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">30.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.0~5.1</td>\n<td style=\"text-align:left\">Lollipop</td>\n<td style=\"text-align:left\">21-22</td>\n<td style=\"text-align:left\">27.2%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.0~7.1</td>\n<td style=\"text-align:left\">Nougat</td>\n<td style=\"text-align:left\">24-25</td>\n<td style=\"text-align:left\">20.6%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.4</td>\n<td style=\"text-align:left\">KitKat</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">13.8%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.1.x~4.2.x</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">16-17</td>\n<td style=\"text-align:left\">5.3%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.3</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">0.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.0</td>\n<td style=\"text-align:left\">Oreo</td>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">0.3%</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Android-アーキテクチャ\"><a href=\"#Android-アーキテクチャ\" class=\"headerlink\" title=\"Android アーキテクチャ\"></a>Android アーキテクチャ</h2><p>Android OSのアーキテクチャはLinux Kernelを基盤に作られています。<br>実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\" target=\"_blank\" rel=\"external\">※4</a><br><img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\"></p>\n"},{"title":"Androidの概念","date":"2017-11-02T15:00:00.000Z","_content":"Androidアプリ開発に必要になる概念を学んでいきます\n\n<!-- toc -->\n\n# Android開発における４大要素\nAndroid アプリの開発には重要に扱われている4大要素があります。\n各要素を一言で表すと以下４つになります。\n\n１. 画面\n２. アプリ/機能の呼び出し\n３. バックグラウンド実行\n４. 外部からの呼び出し受付\n\nまた上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。\n\n* Activity(1.画面)\n* Intent(2.アプリ/機能の呼び出し)\n* Service(3.バックグラウンド実行)\n* Broad Cast Receiver (4.外部からの呼び出し受付)\n\n## Activity\nアプリ開発における画面を指し、ユーザーからの操作の受付、ユーザーへの情報表示のために使用します。\nActivity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。\nまた画面単位の要素としてFragmentが存在し、Activity内に表示させて使うことが推奨されている。\n\n## Intent\nActivity間の呼び出しを行うための仕組み。\n画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、\n外部アプリの呼び出しを行う時に利用します。\n\n## Service\nバックグラウンドで長時間の作業を行うためのコンポーネントです。\n例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。\n\n## Content Provider\n構造化されたデータへのアクセスを管理する仕組み。\nアプリ内のデータベースとのやりとりや端末内の別アプリが管理しているデータへのアクセスを行う場合などに利用します。\n\n# その他の要素\n\n* Fragment\n* View\n\t* ViewGroup\n\t* Widget\n* Life cycle (ライフサイクル)\n\n## Fragment\nコンテンツやWidget,ライフサイクルを持ったView\n子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。\nまた、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。\n\n## View\nウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、\nActivityやFragmentとは違ったサイクルが存在する。\n**LifeCycle**項目で紹介します。\n\n### ViewGroup\n子要素を持つことができるView\nLinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。\n他にListViewやGridView、RecyclerViewもViewGroupに該当します。\nどのコンポーネントも内部にView要素を持つことができる要素になります。\n\nLinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、\nListViewなどは一覧データを並べて表示する機能があります。\n\n### Widget\n子要素を持つことができないView、これをViewと呼ぶことが多い気がします\nButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。\nコンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります\n\n## LifeCycle\nAndroidの画面要素にはLife cycleと言う概念を含んでおり、\nActivity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される\n\n各クラスのライフサイクルに関して\nActivityのライフサイクル[※1]\n<img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\">\n\nFragmentのライフサイクル[※2]\n<img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\">\n\nViewのライフサイクル[※3]\n<img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\">\n\n[※1]: https://developer.android.com/guide/components/activities.html?hl=ja\n[※2]: https://developer.android.com/guide/components/fragments.html?hl=ja\n[※3]: https://developer.android.com/reference/android/view/View.html#pubmethods","source":"_posts/android/02-AndroidConcept.md","raw":"---\ntitle: Androidの概念\ndate: 2017-11-03\n---\nAndroidアプリ開発に必要になる概念を学んでいきます\n\n<!-- toc -->\n\n# Android開発における４大要素\nAndroid アプリの開発には重要に扱われている4大要素があります。\n各要素を一言で表すと以下４つになります。\n\n１. 画面\n２. アプリ/機能の呼び出し\n３. バックグラウンド実行\n４. 外部からの呼び出し受付\n\nまた上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。\n\n* Activity(1.画面)\n* Intent(2.アプリ/機能の呼び出し)\n* Service(3.バックグラウンド実行)\n* Broad Cast Receiver (4.外部からの呼び出し受付)\n\n## Activity\nアプリ開発における画面を指し、ユーザーからの操作の受付、ユーザーへの情報表示のために使用します。\nActivity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。\nまた画面単位の要素としてFragmentが存在し、Activity内に表示させて使うことが推奨されている。\n\n## Intent\nActivity間の呼び出しを行うための仕組み。\n画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、\n外部アプリの呼び出しを行う時に利用します。\n\n## Service\nバックグラウンドで長時間の作業を行うためのコンポーネントです。\n例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。\n\n## Content Provider\n構造化されたデータへのアクセスを管理する仕組み。\nアプリ内のデータベースとのやりとりや端末内の別アプリが管理しているデータへのアクセスを行う場合などに利用します。\n\n# その他の要素\n\n* Fragment\n* View\n\t* ViewGroup\n\t* Widget\n* Life cycle (ライフサイクル)\n\n## Fragment\nコンテンツやWidget,ライフサイクルを持ったView\n子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。\nまた、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。\n\n## View\nウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、\nActivityやFragmentとは違ったサイクルが存在する。\n**LifeCycle**項目で紹介します。\n\n### ViewGroup\n子要素を持つことができるView\nLinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。\n他にListViewやGridView、RecyclerViewもViewGroupに該当します。\nどのコンポーネントも内部にView要素を持つことができる要素になります。\n\nLinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、\nListViewなどは一覧データを並べて表示する機能があります。\n\n### Widget\n子要素を持つことができないView、これをViewと呼ぶことが多い気がします\nButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。\nコンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります\n\n## LifeCycle\nAndroidの画面要素にはLife cycleと言う概念を含んでおり、\nActivity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される\n\n各クラスのライフサイクルに関して\nActivityのライフサイクル[※1]\n<img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\">\n\nFragmentのライフサイクル[※2]\n<img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\">\n\nViewのライフサイクル[※3]\n<img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\">\n\n[※1]: https://developer.android.com/guide/components/activities.html?hl=ja\n[※2]: https://developer.android.com/guide/components/fragments.html?hl=ja\n[※3]: https://developer.android.com/reference/android/view/View.html#pubmethods","slug":"02-AndroidConcept","published":1,"updated":"2017-12-21T22:08:51.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2h00025t61q268rykx","content":"<p>Androidアプリ開発に必要になる概念を学んでいきます</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android開発における4大要素\">Android開発における４大要素</a><ul>\n<li><a href=\"#activity\">Activity</a></li>\n<li><a href=\"#intent\">Intent</a></li>\n<li><a href=\"#service\">Service</a></li>\n<li><a href=\"#content-provider\">Content Provider</a></li>\n</ul>\n</li>\n<li><a href=\"#その他の要素\">その他の要素</a><ul>\n<li><a href=\"#fragment\">Fragment</a></li>\n<li><a href=\"#view\">View</a><ul>\n<li><a href=\"#viewgroup\">ViewGroup</a></li>\n<li><a href=\"#widget\">Widget</a></li>\n</ul>\n</li>\n<li><a href=\"#lifecycle\">LifeCycle</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"android開発における4大要素\">Android開発における４大要素</span></h1><p>Android アプリの開発には重要に扱われている4大要素があります。<br>各要素を一言で表すと以下４つになります。</p>\n<p>１. 画面<br>２. アプリ/機能の呼び出し<br>３. バックグラウンド実行<br>４. 外部からの呼び出し受付</p>\n<p>また上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。</p>\n<ul>\n<li>Activity(1.画面)</li>\n<li>Intent(2.アプリ/機能の呼び出し)</li>\n<li>Service(3.バックグラウンド実行)</li>\n<li>Broad Cast Receiver (4.外部からの呼び出し受付)</li>\n</ul>\n<h2><span id=\"activity\">Activity</span></h2><p>アプリ開発における画面を指し、ユーザーからの操作の受付、ユーザーへの情報表示のために使用します。<br>Activity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。<br>また画面単位の要素としてFragmentが存在し、Activity内に表示させて使うことが推奨されている。</p>\n<h2><span id=\"intent\">Intent</span></h2><p>Activity間の呼び出しを行うための仕組み。<br>画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、<br>外部アプリの呼び出しを行う時に利用します。</p>\n<h2><span id=\"service\">Service</span></h2><p>バックグラウンドで長時間の作業を行うためのコンポーネントです。<br>例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。</p>\n<h2><span id=\"content-provider\">Content Provider</span></h2><p>構造化されたデータへのアクセスを管理する仕組み。<br>アプリ内のデータベースとのやりとりや端末内の別アプリが管理しているデータへのアクセスを行う場合などに利用します。</p>\n<h1><span id=\"その他の要素\">その他の要素</span></h1><ul>\n<li>Fragment</li>\n<li>View<ul>\n<li>ViewGroup</li>\n<li>Widget</li>\n</ul>\n</li>\n<li>Life cycle (ライフサイクル)</li>\n</ul>\n<h2><span id=\"fragment\">Fragment</span></h2><p>コンテンツやWidget,ライフサイクルを持ったView<br>子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。<br>また、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。</p>\n<h2><span id=\"view\">View</span></h2><p>ウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、<br>ActivityやFragmentとは違ったサイクルが存在する。<br><strong>LifeCycle</strong>項目で紹介します。</p>\n<h3><span id=\"viewgroup\">ViewGroup</span></h3><p>子要素を持つことができるView<br>LinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。<br>他にListViewやGridView、RecyclerViewもViewGroupに該当します。<br>どのコンポーネントも内部にView要素を持つことができる要素になります。</p>\n<p>LinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、<br>ListViewなどは一覧データを並べて表示する機能があります。</p>\n<h3><span id=\"widget\">Widget</span></h3><p>子要素を持つことができないView、これをViewと呼ぶことが多い気がします<br>ButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。<br>コンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります</p>\n<h2><span id=\"lifecycle\">LifeCycle</span></h2><p>Androidの画面要素にはLife cycleと言う概念を含んでおり、<br>Activity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される</p>\n<p>各クラスのライフサイクルに関して<br>Activityのライフサイクル<a href=\"https://developer.android.com/guide/components/activities.html?hl=ja\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\"></p>\n<p>Fragmentのライフサイクル<a href=\"https://developer.android.com/guide/components/fragments.html?hl=ja\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\"></p>\n<p>Viewのライフサイクル<a href=\"https://developer.android.com/reference/android/view/View.html#pubmethods\" target=\"_blank\" rel=\"external\">※3</a><br><img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Androidアプリ開発に必要になる概念を学んでいきます</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android開発における4大要素\">Android開発における４大要素</a><ul>\n<li><a href=\"#activity\">Activity</a></li>\n<li><a href=\"#intent\">Intent</a></li>\n<li><a href=\"#service\">Service</a></li>\n<li><a href=\"#content-provider\">Content Provider</a></li>\n</ul>\n</li>\n<li><a href=\"#その他の要素\">その他の要素</a><ul>\n<li><a href=\"#fragment\">Fragment</a></li>\n<li><a href=\"#view\">View</a><ul>\n<li><a href=\"#viewgroup\">ViewGroup</a></li>\n<li><a href=\"#widget\">Widget</a></li>\n</ul>\n</li>\n<li><a href=\"#lifecycle\">LifeCycle</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"Android開発における４大要素\"><a href=\"#Android開発における４大要素\" class=\"headerlink\" title=\"Android開発における４大要素\"></a>Android開発における４大要素</h1><p>Android アプリの開発には重要に扱われている4大要素があります。<br>各要素を一言で表すと以下４つになります。</p>\n<p>１. 画面<br>２. アプリ/機能の呼び出し<br>３. バックグラウンド実行<br>４. 外部からの呼び出し受付</p>\n<p>また上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。</p>\n<ul>\n<li>Activity(1.画面)</li>\n<li>Intent(2.アプリ/機能の呼び出し)</li>\n<li>Service(3.バックグラウンド実行)</li>\n<li>Broad Cast Receiver (4.外部からの呼び出し受付)</li>\n</ul>\n<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><p>アプリ開発における画面を指し、ユーザーからの操作の受付、ユーザーへの情報表示のために使用します。<br>Activity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。<br>また画面単位の要素としてFragmentが存在し、Activity内に表示させて使うことが推奨されている。</p>\n<h2 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h2><p>Activity間の呼び出しを行うための仕組み。<br>画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、<br>外部アプリの呼び出しを行う時に利用します。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>バックグラウンドで長時間の作業を行うためのコンポーネントです。<br>例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。</p>\n<h2 id=\"Content-Provider\"><a href=\"#Content-Provider\" class=\"headerlink\" title=\"Content Provider\"></a>Content Provider</h2><p>構造化されたデータへのアクセスを管理する仕組み。<br>アプリ内のデータベースとのやりとりや端末内の別アプリが管理しているデータへのアクセスを行う場合などに利用します。</p>\n<h1 id=\"その他の要素\"><a href=\"#その他の要素\" class=\"headerlink\" title=\"その他の要素\"></a>その他の要素</h1><ul>\n<li>Fragment</li>\n<li>View<ul>\n<li>ViewGroup</li>\n<li>Widget</li>\n</ul>\n</li>\n<li>Life cycle (ライフサイクル)</li>\n</ul>\n<h2 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h2><p>コンテンツやWidget,ライフサイクルを持ったView<br>子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。<br>また、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。</p>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>ウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、<br>ActivityやFragmentとは違ったサイクルが存在する。<br><strong>LifeCycle</strong>項目で紹介します。</p>\n<h3 id=\"ViewGroup\"><a href=\"#ViewGroup\" class=\"headerlink\" title=\"ViewGroup\"></a>ViewGroup</h3><p>子要素を持つことができるView<br>LinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。<br>他にListViewやGridView、RecyclerViewもViewGroupに該当します。<br>どのコンポーネントも内部にView要素を持つことができる要素になります。</p>\n<p>LinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、<br>ListViewなどは一覧データを並べて表示する機能があります。</p>\n<h3 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h3><p>子要素を持つことができないView、これをViewと呼ぶことが多い気がします<br>ButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。<br>コンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります</p>\n<h2 id=\"LifeCycle\"><a href=\"#LifeCycle\" class=\"headerlink\" title=\"LifeCycle\"></a>LifeCycle</h2><p>Androidの画面要素にはLife cycleと言う概念を含んでおり、<br>Activity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される</p>\n<p>各クラスのライフサイクルに関して<br>Activityのライフサイクル<a href=\"https://developer.android.com/guide/components/activities.html?hl=ja\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\"></p>\n<p>Fragmentのライフサイクル<a href=\"https://developer.android.com/guide/components/fragments.html?hl=ja\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\"></p>\n<p>Viewのライフサイクル<a href=\"https://developer.android.com/reference/android/view/View.html#pubmethods\" target=\"_blank\" rel=\"external\">※3</a><br><img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\"></p>\n"},{"title":"Android アプリ開発を始める","date":"2017-11-03T15:00:00.000Z","_content":"講座で解説のために作成するアプリの紹介とプロジェクトの作成\n\n<!-- toc -->\n\n# 蔵館検索アプリ\n今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。\n機能として以下\n\n* 図書館で管理されている蔵書の検索機能\n* 蔵書名からレンタルできる図書館の検索機能\n* 蔵書検索した履歴管理機能\n\n検索機能に利用するサービス\n[カーリル 図書館 API](https://calil.jp/doc/api.html)\n[Google Books API](https://developers.google.com/books/)\n\nネットワーク通信処理に利用するライブラリ\n[okHttp](http://square.github.io/okhttp/)\n\n検索履歴を保存するアプリ内データベースに利用するライブラリ\n[Realm](https://realm.io/jp/)\n\n# 新しいプロジェクトを作る\n\n1.Windows ホーム画面の左下にある```検索欄```に```Android```と入力し**Android Studio**をクリックし起動します。\n<img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\">\n2.```Start a new Android Studio project```をクリック\n<img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n3.新規プロジェクト作成時にはアプリ名などを入力します\n以下の表の通りに項目を設定して```Next```をクリックします。\n\n|項目名                 |説明                |入力内容        |\n|:---------------------|:-----------------:|:------------:|\n|Application name      |アプリ名             |BookDiscovery |\n|Company domain        |全世界の独自ドメイン   |example.com   |\n|Project location      |プロジェクトの保存先   |任意設定        |\n|include C++ support   |C++ライブラリ取込み   |チェックを外す   |\n|include Kotlin support|Kotlinライブラリ取込み|チェックを外す   |\n\n**Company domain**は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。\n今回の講義ではC++での実装はありませんのでチェックを外しておきます。\nまた、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。\n<img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います\n**Phone and Tablet**のみチェックをつけ、```API 23: Android 6.0 (Marshmallow)```を選択したら、```Next```をクリックします\n<img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n5.**Empty Activity**を選択し```Next```をクリックします\n<img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n6.初期画面となるActivity設定を行います\n以下の表の通りに項目を設定して```Next```をクリックします\n\n|項目名                             |説明                |入力内容       |\n|:---------------------------------|:-----------------:|:------------:|\n|Activity Name                     |画面名              |MainActivity  |\n|Generate Layout File              |デザインファイル作成有無|チェックを入れる|\n|Layout Name                       |デザインファイル名    |activity_main |\n|Backwards Compatibility(AppCompat)|下方互換性の有無      |チェックを入れる |\n\n<img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます\nインストールが終了し**done**の文字が表示されたら```Finish```をクリックします。\n<img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n8.構築が終了すると開発画面に遷移します\n**Messages**エリアにエラーとリンクが表示されている場合はリンクをクリックします\n<img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n9.不足しているComponentのインストールを行います\n**android-sdk-license**が選択された状態で**Accept**にチェックをいれ```Next```をクリックします\n<img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n10.Componentのインストール状況が表示されるので終了を待ちます\n<img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n11.インストールが終わったら```Finish```をクリックします\n<img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です\n<img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n","source":"_posts/android/03-StartAndroidDevelopment.md","raw":"---\ntitle: Android アプリ開発を始める\ndate: 2017-11-04\n---\n講座で解説のために作成するアプリの紹介とプロジェクトの作成\n\n<!-- toc -->\n\n# 蔵館検索アプリ\n今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。\n機能として以下\n\n* 図書館で管理されている蔵書の検索機能\n* 蔵書名からレンタルできる図書館の検索機能\n* 蔵書検索した履歴管理機能\n\n検索機能に利用するサービス\n[カーリル 図書館 API](https://calil.jp/doc/api.html)\n[Google Books API](https://developers.google.com/books/)\n\nネットワーク通信処理に利用するライブラリ\n[okHttp](http://square.github.io/okhttp/)\n\n検索履歴を保存するアプリ内データベースに利用するライブラリ\n[Realm](https://realm.io/jp/)\n\n# 新しいプロジェクトを作る\n\n1.Windows ホーム画面の左下にある```検索欄```に```Android```と入力し**Android Studio**をクリックし起動します。\n<img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\">\n2.```Start a new Android Studio project```をクリック\n<img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n3.新規プロジェクト作成時にはアプリ名などを入力します\n以下の表の通りに項目を設定して```Next```をクリックします。\n\n|項目名                 |説明                |入力内容        |\n|:---------------------|:-----------------:|:------------:|\n|Application name      |アプリ名             |BookDiscovery |\n|Company domain        |全世界の独自ドメイン   |example.com   |\n|Project location      |プロジェクトの保存先   |任意設定        |\n|include C++ support   |C++ライブラリ取込み   |チェックを外す   |\n|include Kotlin support|Kotlinライブラリ取込み|チェックを外す   |\n\n**Company domain**は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。\n今回の講義ではC++での実装はありませんのでチェックを外しておきます。\nまた、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。\n<img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います\n**Phone and Tablet**のみチェックをつけ、```API 23: Android 6.0 (Marshmallow)```を選択したら、```Next```をクリックします\n<img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n5.**Empty Activity**を選択し```Next```をクリックします\n<img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n6.初期画面となるActivity設定を行います\n以下の表の通りに項目を設定して```Next```をクリックします\n\n|項目名                             |説明                |入力内容       |\n|:---------------------------------|:-----------------:|:------------:|\n|Activity Name                     |画面名              |MainActivity  |\n|Generate Layout File              |デザインファイル作成有無|チェックを入れる|\n|Layout Name                       |デザインファイル名    |activity_main |\n|Backwards Compatibility(AppCompat)|下方互換性の有無      |チェックを入れる |\n\n<img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます\nインストールが終了し**done**の文字が表示されたら```Finish```をクリックします。\n<img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n8.構築が終了すると開発画面に遷移します\n**Messages**エリアにエラーとリンクが表示されている場合はリンクをクリックします\n<img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n9.不足しているComponentのインストールを行います\n**android-sdk-license**が選択された状態で**Accept**にチェックをいれ```Next```をクリックします\n<img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n10.Componentのインストール状況が表示されるので終了を待ちます\n<img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n11.インストールが終わったら```Finish```をクリックします\n<img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です\n<img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n","slug":"03-StartAndroidDevelopment","published":1,"updated":"2017-12-21T22:08:51.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2i00035t61g5nv0cv8","content":"<p>講座で解説のために作成するアプリの紹介とプロジェクトの作成</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#蔵館検索アプリ\">蔵館検索アプリ</a></li>\n<li><a href=\"#新しいプロジェクトを作る\">新しいプロジェクトを作る</a></li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"蔵館検索アプリ\">蔵館検索アプリ</span></h1><p>今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。<br>機能として以下</p>\n<ul>\n<li>図書館で管理されている蔵書の検索機能</li>\n<li>蔵書名からレンタルできる図書館の検索機能</li>\n<li>蔵書検索した履歴管理機能</li>\n</ul>\n<p>検索機能に利用するサービス<br><a href=\"https://calil.jp/doc/api.html\" target=\"_blank\" rel=\"external\">カーリル 図書館 API</a><br><a href=\"https://developers.google.com/books/\" target=\"_blank\" rel=\"external\">Google Books API</a></p>\n<p>ネットワーク通信処理に利用するライブラリ<br><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">okHttp</a></p>\n<p>検索履歴を保存するアプリ内データベースに利用するライブラリ<br><a href=\"https://realm.io/jp/\" target=\"_blank\" rel=\"external\">Realm</a></p>\n<h1><span id=\"新しいプロジェクトを作る\">新しいプロジェクトを作る</span></h1><p>1.Windows ホーム画面の左下にある<code>検索欄</code>に<code>Android</code>と入力し<strong>Android Studio</strong>をクリックし起動します。<br><img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\"><br>2.<code>Start a new Android Studio project</code>をクリック<br><img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>3.新規プロジェクト作成時にはアプリ名などを入力します<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Application name</td>\n<td style=\"text-align:center\">アプリ名</td>\n<td style=\"text-align:center\">BookDiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Company domain</td>\n<td style=\"text-align:center\">全世界の独自ドメイン</td>\n<td style=\"text-align:center\">example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Project location</td>\n<td style=\"text-align:center\">プロジェクトの保存先</td>\n<td style=\"text-align:center\">任意設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include C++ support</td>\n<td style=\"text-align:center\">C++ライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include Kotlin support</td>\n<td style=\"text-align:center\">Kotlinライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Company domain</strong>は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。<br>今回の講義ではC++での実装はありませんのでチェックを外しておきます。<br>また、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。<br><img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います<br><strong>Phone and Tablet</strong>のみチェックをつけ、<code>API 23: Android 6.0 (Marshmallow)</code>を選択したら、<code>Next</code>をクリックします<br><img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>5.<strong>Empty Activity</strong>を選択し<code>Next</code>をクリックします<br><img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>6.初期画面となるActivity設定を行います<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Activity Name</td>\n<td style=\"text-align:center\">画面名</td>\n<td style=\"text-align:center\">MainActivity</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Generate Layout File</td>\n<td style=\"text-align:center\">デザインファイル作成有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Layout Name</td>\n<td style=\"text-align:center\">デザインファイル名</td>\n<td style=\"text-align:center\">activity_main</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Backwards Compatibility(AppCompat)</td>\n<td style=\"text-align:center\">下方互換性の有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます<br>インストールが終了し<strong>done</strong>の文字が表示されたら<code>Finish</code>をクリックします。<br><img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>8.構築が終了すると開発画面に遷移します<br><strong>Messages</strong>エリアにエラーとリンクが表示されている場合はリンクをクリックします<br><img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>9.不足しているComponentのインストールを行います<br><strong>android-sdk-license</strong>が選択された状態で<strong>Accept</strong>にチェックをいれ<code>Next</code>をクリックします<br><img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>10.Componentのインストール状況が表示されるので終了を待ちます<br><img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>11.インストールが終わったら<code>Finish</code>をクリックします<br><img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です<br><img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>講座で解説のために作成するアプリの紹介とプロジェクトの作成</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#蔵館検索アプリ\">蔵館検索アプリ</a></li>\n<li><a href=\"#新しいプロジェクトを作る\">新しいプロジェクトを作る</a></li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"蔵館検索アプリ\"><a href=\"#蔵館検索アプリ\" class=\"headerlink\" title=\"蔵館検索アプリ\"></a>蔵館検索アプリ</h1><p>今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。<br>機能として以下</p>\n<ul>\n<li>図書館で管理されている蔵書の検索機能</li>\n<li>蔵書名からレンタルできる図書館の検索機能</li>\n<li>蔵書検索した履歴管理機能</li>\n</ul>\n<p>検索機能に利用するサービス<br><a href=\"https://calil.jp/doc/api.html\" target=\"_blank\" rel=\"external\">カーリル 図書館 API</a><br><a href=\"https://developers.google.com/books/\" target=\"_blank\" rel=\"external\">Google Books API</a></p>\n<p>ネットワーク通信処理に利用するライブラリ<br><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">okHttp</a></p>\n<p>検索履歴を保存するアプリ内データベースに利用するライブラリ<br><a href=\"https://realm.io/jp/\" target=\"_blank\" rel=\"external\">Realm</a></p>\n<h1 id=\"新しいプロジェクトを作る\"><a href=\"#新しいプロジェクトを作る\" class=\"headerlink\" title=\"新しいプロジェクトを作る\"></a>新しいプロジェクトを作る</h1><p>1.Windows ホーム画面の左下にある<code>検索欄</code>に<code>Android</code>と入力し<strong>Android Studio</strong>をクリックし起動します。<br><img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\"><br>2.<code>Start a new Android Studio project</code>をクリック<br><img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>3.新規プロジェクト作成時にはアプリ名などを入力します<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Application name</td>\n<td style=\"text-align:center\">アプリ名</td>\n<td style=\"text-align:center\">BookDiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Company domain</td>\n<td style=\"text-align:center\">全世界の独自ドメイン</td>\n<td style=\"text-align:center\">example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Project location</td>\n<td style=\"text-align:center\">プロジェクトの保存先</td>\n<td style=\"text-align:center\">任意設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include C++ support</td>\n<td style=\"text-align:center\">C++ライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include Kotlin support</td>\n<td style=\"text-align:center\">Kotlinライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Company domain</strong>は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。<br>今回の講義ではC++での実装はありませんのでチェックを外しておきます。<br>また、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。<br><img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います<br><strong>Phone and Tablet</strong>のみチェックをつけ、<code>API 23: Android 6.0 (Marshmallow)</code>を選択したら、<code>Next</code>をクリックします<br><img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>5.<strong>Empty Activity</strong>を選択し<code>Next</code>をクリックします<br><img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>6.初期画面となるActivity設定を行います<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Activity Name</td>\n<td style=\"text-align:center\">画面名</td>\n<td style=\"text-align:center\">MainActivity</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Generate Layout File</td>\n<td style=\"text-align:center\">デザインファイル作成有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Layout Name</td>\n<td style=\"text-align:center\">デザインファイル名</td>\n<td style=\"text-align:center\">activity_main</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Backwards Compatibility(AppCompat)</td>\n<td style=\"text-align:center\">下方互換性の有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます<br>インストールが終了し<strong>done</strong>の文字が表示されたら<code>Finish</code>をクリックします。<br><img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>8.構築が終了すると開発画面に遷移します<br><strong>Messages</strong>エリアにエラーとリンクが表示されている場合はリンクをクリックします<br><img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>9.不足しているComponentのインストールを行います<br><strong>android-sdk-license</strong>が選択された状態で<strong>Accept</strong>にチェックをいれ<code>Next</code>をクリックします<br><img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>10.Componentのインストール状況が表示されるので終了を待ちます<br><img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>11.インストールが終わったら<code>Finish</code>をクリックします<br><img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です<br><img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"></p>\n"},{"title":"レイアウト作成","date":"2017-11-04T15:00:00.000Z","_content":"Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認\n\n<!-- toc -->\n\n当ページではAnrdoidアプリのプロジェクト作成完了から検索画面のレイアウト完了まで解説しています。\n[前のメージでAndroidアプリのプロジェクト作成に関して解説しています](/AndroidCourse/android/03-StartAndroidDevelopment)\n次のページで検索画面のプログラム実装、REST API通信に関して解説します。\n\n# Layout Editor / ConstraintLayout\nLayout Editor、ConstraintLayoutの使い方を学びながら画面のレイアウトを作成していきます。\nこのページで作成する画面には最終的に以下の機能を実装していきます。\n* 文字入力機能\n* 画面遷移\n* 蔵書/図書館検索結果取得\n\nAndroidアプリのプロジェクト開始時に生成されたxmlレイアウトファイルにウィジェットなどを配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。\n\n**ここに完成画面を表示**\n\n## Layout Editor\n視覚的にViewやWidgetを配置することができるようになった、特にConstrainsLayoutと\n合わせて使うことで画面のレイアウトを行う際にxmlによるプログラムを記述する手間が\n省きながら実際に配置を確認できるようになった。\n\n<img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\">\n各領域の名称は以下の通りです\n\n|No.  |領域名                 |説明                                             |\n|:---:|:---------------------|:-----------------------------------------------|\n|①   |Palette               |レイアウトに配置できるウィジェットとレイアウトリストを表示されています |\n|②   |Component Tree        |レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します |\n|③   |ツールバー              |レイアウトの外観設定やプロパティを編集するためのボタンが表示されています |\n|④   |デザイン エディタ        |実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる |\n|⑤   |Properties             |現在選択されているビューの詳細な情報が表示されます |\n\n\n## ConstraintLayout\nAndroid 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能。\nconstraint(制約)をViewやWidgetに設けることでレイアウトを決めることができる。\n従来の\"Linear Layout\"や\"Relative Layout\"に比べネスト構造を減らした実装を行うことができるようになった。\n\n**ConstraintLayoutの画像を表示**\n\n制約という単語ですがgoogle翻訳としては\n> ある条件を課して、自由にはさせないこと。その物事のために必要な条件\n\nとあります、Layoutに当てはめるとコンポーネント同士を隣接させるという制約を\n\n## レイアウト作成\nでは検索画面のレイアウト作成にはいっていきます\nまずは以下のxmlレイアウトファイルを開きましょう\n> app -> res -> layout -> activity_main.xml\n\n<img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている**\"Hello World\"**をクリックして```delete```キーで削除します\n<img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\nこれで画面上に何もなくなりスッキリしました。\nまず検索を行うためには何かしらの情報が必要になります今回は、**蔵書検索**を行いたいので、そのために蔵書名の一部が知りたいです、検索する蔵書は利用者によって違いますので、検索したい本の一部を入力してもらえると検索の情報になりそうです。\n\n文字入力をアプリで受け付けるためには文字入力を受け付けるためのウィジェットを使う必要があり、\nその場合は```EditText```というウィジェットを使います、ではこれをデザインビューに配置していきます。\n\nLayout Editor内にある<font color=\"red\">Palette</font>から```Plain Text```をクリックしたまま引っ張ってデザインビューでクリックを離すと**editText**が表示されます\n<img src=\"le2.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置します、そのために\"editText\"に制約をつけていきます。\nまずは\"editText\"は画面左隅と隣合うように配置させるため、\"editText\"左枠に表示されている **◯**をクリックしたまま画面の左端まで引っ張って放します\n<img src=\"le3.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\"editText\"が以下の画面のように画面左隅に近づいたと思います。\n<img src=\"le4.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n先ほどの手順により画面左端とeditTextを隣り合わせる\"制約\"が設定されたことになります。\nでは上下と右辺も同じように各画面端と隣接する制約を設定してみましょう。\n<img src=\"le5.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n上下左右に制約を付けるとeditTextは画面の真ん中に表示されると思います\n<img src=\"le6.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n続いて一つ目のeditTextを中央より少し左上に配置するために縦横の\"バイアス\"を以下の通り調整します\nバイアスを動かすと対象の方向に制約の範囲で動かすことができます\n<img src=\"le7.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|25   |\n\n続いて検索を実行するためのボタンを配置していきます\n\"Plain Text\"の時と同じように今度は<font color=\"red\">Palette</font>から```Button```をクリックしたまま引っ張りデザインビュー上で放します\n<img src=\"le8.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\"蔵書検索\"用のボタンを配置のため制約を設定していきます\n<img src=\"le9.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|Buttonの辺|隣り合わせる箇所  |\n|:---------|:-------------|\n|上辺       |画面上端       |\n|左辺       |\"editText\"右端 |\n|下辺       |画面下端       |\n|右辺       |画面右端       |\n\n上の\"editText\"と同じ高さに調整するため、バイアスを調整します\n<img src=\"le10.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|50   |\n\n残りの\"検索履歴\"ボタンを画面の通り制約を使って配置してみましょう\n<img src=\"le11.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n> レイアウト完成時にはComponent Treeに**Button2**が追加されます\n\n\n\n\n最後に各ボタンに表示される文字を修正します\n右上の**Button**をクリックし、右に表示される<font color=\"red\">Attributes</font>エリアから\"text\"項目を探し、**蔵書検索**と入力します\n<img src=\"le12.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n同じ様に\"Button2\"ボタンの表示文言を修正してみましょう、\n<img src=\"le13.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n修正後にボタンに表示される文字列は**検索履歴**です\n\nこれで検索画面のレイアウトは完成です、変更された画面を確認してみましょう。\n\n---\n\n# 動作確認\n配置したレイアウトで実行されることを確認してみましょう、\n今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って動作確認を行います。\n\nアプリを実行するためには下記画面の`Run`ボタンをクリックします\n<img src=\"runemurate01.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\n実行するデバイスかエミュレータの選択画面が表示されますが、以下のように何も表示されないか、\nAndroidデバイスをPCに繋いでいる場合はデバイスが表示されているかもしれません。\n\n今回はエミュレータを使用しますので、`Create New Virtual Device`をクリックしてエミュレータを作成します。\n<img src=\"runemurate02.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\n作成するエミュレータを選びますので<font color=\"red\">**Pixel**</font>を選択して`Next`をクリックします\n<img src=\"runemurate03.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータにインストールするAndorid OSのバージョンを選択します。\n<font color=\"red\">**Marshmallow**</font>を選択して`Next`をクリックします\n<img src=\"runemurate04.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータの名前や設定変更画面では変更は行わずに`Finish`をクリックします\n<img src=\"runemurate05.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータの作成が終わり実行するデバイスの選択画面に戻ります\n今回は作成したエミュレータの名前が表示されるので、<font color=\"red\">**Pixel API 23**</font>を選択して`OK`をクリックします\n<img src=\"runemurate06.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nAndroidのエミュレータが起動し\n<img src=\"runemurate07.png\" alt=\"alt\" title=\"Run Project\" width=\"300\">\n\"layout_main.xml\"で作成したレイアウトが表示されれば成功です！\n<img src=\"runemurate08.png\" alt=\"alt\" title=\"Run Project\" width=\"250\">\n\nこれで検索画面のレイアウト作成が完了です、次のページで今回作成したレイアウトのボタンやEditTextにプログラムでイベントを\n実装していきます。 [ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)","source":"_posts/android/04-MakeLayoutDesign.md","raw":"---\ntitle: レイアウト作成\ndate: 2017-11-05\n---\nLayout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認\n\n<!-- toc -->\n\n当ページではAnrdoidアプリのプロジェクト作成完了から検索画面のレイアウト完了まで解説しています。\n[前のメージでAndroidアプリのプロジェクト作成に関して解説しています](/AndroidCourse/android/03-StartAndroidDevelopment)\n次のページで検索画面のプログラム実装、REST API通信に関して解説します。\n\n# Layout Editor / ConstraintLayout\nLayout Editor、ConstraintLayoutの使い方を学びながら画面のレイアウトを作成していきます。\nこのページで作成する画面には最終的に以下の機能を実装していきます。\n* 文字入力機能\n* 画面遷移\n* 蔵書/図書館検索結果取得\n\nAndroidアプリのプロジェクト開始時に生成されたxmlレイアウトファイルにウィジェットなどを配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。\n\n**ここに完成画面を表示**\n\n## Layout Editor\n視覚的にViewやWidgetを配置することができるようになった、特にConstrainsLayoutと\n合わせて使うことで画面のレイアウトを行う際にxmlによるプログラムを記述する手間が\n省きながら実際に配置を確認できるようになった。\n\n<img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\">\n各領域の名称は以下の通りです\n\n|No.  |領域名                 |説明                                             |\n|:---:|:---------------------|:-----------------------------------------------|\n|①   |Palette               |レイアウトに配置できるウィジェットとレイアウトリストを表示されています |\n|②   |Component Tree        |レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します |\n|③   |ツールバー              |レイアウトの外観設定やプロパティを編集するためのボタンが表示されています |\n|④   |デザイン エディタ        |実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる |\n|⑤   |Properties             |現在選択されているビューの詳細な情報が表示されます |\n\n\n## ConstraintLayout\nAndroid 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能。\nconstraint(制約)をViewやWidgetに設けることでレイアウトを決めることができる。\n従来の\"Linear Layout\"や\"Relative Layout\"に比べネスト構造を減らした実装を行うことができるようになった。\n\n**ConstraintLayoutの画像を表示**\n\n制約という単語ですがgoogle翻訳としては\n> ある条件を課して、自由にはさせないこと。その物事のために必要な条件\n\nとあります、Layoutに当てはめるとコンポーネント同士を隣接させるという制約を\n\n## レイアウト作成\nでは検索画面のレイアウト作成にはいっていきます\nまずは以下のxmlレイアウトファイルを開きましょう\n> app -> res -> layout -> activity_main.xml\n\n<img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている**\"Hello World\"**をクリックして```delete```キーで削除します\n<img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\nこれで画面上に何もなくなりスッキリしました。\nまず検索を行うためには何かしらの情報が必要になります今回は、**蔵書検索**を行いたいので、そのために蔵書名の一部が知りたいです、検索する蔵書は利用者によって違いますので、検索したい本の一部を入力してもらえると検索の情報になりそうです。\n\n文字入力をアプリで受け付けるためには文字入力を受け付けるためのウィジェットを使う必要があり、\nその場合は```EditText```というウィジェットを使います、ではこれをデザインビューに配置していきます。\n\nLayout Editor内にある<font color=\"red\">Palette</font>から```Plain Text```をクリックしたまま引っ張ってデザインビューでクリックを離すと**editText**が表示されます\n<img src=\"le2.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置します、そのために\"editText\"に制約をつけていきます。\nまずは\"editText\"は画面左隅と隣合うように配置させるため、\"editText\"左枠に表示されている **◯**をクリックしたまま画面の左端まで引っ張って放します\n<img src=\"le3.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\"editText\"が以下の画面のように画面左隅に近づいたと思います。\n<img src=\"le4.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n先ほどの手順により画面左端とeditTextを隣り合わせる\"制約\"が設定されたことになります。\nでは上下と右辺も同じように各画面端と隣接する制約を設定してみましょう。\n<img src=\"le5.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n上下左右に制約を付けるとeditTextは画面の真ん中に表示されると思います\n<img src=\"le6.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n続いて一つ目のeditTextを中央より少し左上に配置するために縦横の\"バイアス\"を以下の通り調整します\nバイアスを動かすと対象の方向に制約の範囲で動かすことができます\n<img src=\"le7.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|25   |\n\n続いて検索を実行するためのボタンを配置していきます\n\"Plain Text\"の時と同じように今度は<font color=\"red\">Palette</font>から```Button```をクリックしたまま引っ張りデザインビュー上で放します\n<img src=\"le8.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\"蔵書検索\"用のボタンを配置のため制約を設定していきます\n<img src=\"le9.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|Buttonの辺|隣り合わせる箇所  |\n|:---------|:-------------|\n|上辺       |画面上端       |\n|左辺       |\"editText\"右端 |\n|下辺       |画面下端       |\n|右辺       |画面右端       |\n\n上の\"editText\"と同じ高さに調整するため、バイアスを調整します\n<img src=\"le10.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|50   |\n\n残りの\"検索履歴\"ボタンを画面の通り制約を使って配置してみましょう\n<img src=\"le11.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n> レイアウト完成時にはComponent Treeに**Button2**が追加されます\n\n\n\n\n最後に各ボタンに表示される文字を修正します\n右上の**Button**をクリックし、右に表示される<font color=\"red\">Attributes</font>エリアから\"text\"項目を探し、**蔵書検索**と入力します\n<img src=\"le12.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n\n同じ様に\"Button2\"ボタンの表示文言を修正してみましょう、\n<img src=\"le13.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n修正後にボタンに表示される文字列は**検索履歴**です\n\nこれで検索画面のレイアウトは完成です、変更された画面を確認してみましょう。\n\n---\n\n# 動作確認\n配置したレイアウトで実行されることを確認してみましょう、\n今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って動作確認を行います。\n\nアプリを実行するためには下記画面の`Run`ボタンをクリックします\n<img src=\"runemurate01.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\n実行するデバイスかエミュレータの選択画面が表示されますが、以下のように何も表示されないか、\nAndroidデバイスをPCに繋いでいる場合はデバイスが表示されているかもしれません。\n\n今回はエミュレータを使用しますので、`Create New Virtual Device`をクリックしてエミュレータを作成します。\n<img src=\"runemurate02.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\n作成するエミュレータを選びますので<font color=\"red\">**Pixel**</font>を選択して`Next`をクリックします\n<img src=\"runemurate03.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータにインストールするAndorid OSのバージョンを選択します。\n<font color=\"red\">**Marshmallow**</font>を選択して`Next`をクリックします\n<img src=\"runemurate04.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータの名前や設定変更画面では変更は行わずに`Finish`をクリックします\n<img src=\"runemurate05.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nエミュレータの作成が終わり実行するデバイスの選択画面に戻ります\n今回は作成したエミュレータの名前が表示されるので、<font color=\"red\">**Pixel API 23**</font>を選択して`OK`をクリックします\n<img src=\"runemurate06.png\" alt=\"alt\" title=\"Run Project\" width=\"500\">\nAndroidのエミュレータが起動し\n<img src=\"runemurate07.png\" alt=\"alt\" title=\"Run Project\" width=\"300\">\n\"layout_main.xml\"で作成したレイアウトが表示されれば成功です！\n<img src=\"runemurate08.png\" alt=\"alt\" title=\"Run Project\" width=\"250\">\n\nこれで検索画面のレイアウト作成が完了です、次のページで今回作成したレイアウトのボタンやEditTextにプログラムでイベントを\n実装していきます。 [ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)","slug":"04-MakeLayoutDesign","published":1,"updated":"2018-01-23T14:41:36.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2i00045t61gpf1uags","content":"<p>Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</a><ul>\n<li><a href=\"#layout-editor\">Layout Editor</a></li>\n<li><a href=\"#constraintlayout\">ConstraintLayout</a></li>\n<li><a href=\"#レイアウト作成\">レイアウト作成</a></li>\n</ul>\n</li>\n<li><a href=\"#動作確認\">動作確認</a></li>\n</ul>\n<!-- tocstop -->\n<p>当ページではAnrdoidアプリのプロジェクト作成完了から検索画面のレイアウト完了まで解説しています。<br><a href=\"/AndroidCourse/android/03-StartAndroidDevelopment\">前のメージでAndroidアプリのプロジェクト作成に関して解説しています</a><br>次のページで検索画面のプログラム実装、REST API通信に関して解説します。</p>\n<h1><span id=\"layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</span></h1><p>Layout Editor、ConstraintLayoutの使い方を学びながら画面のレイアウトを作成していきます。<br>このページで作成する画面には最終的に以下の機能を実装していきます。</p>\n<ul>\n<li>文字入力機能</li>\n<li>画面遷移</li>\n<li>蔵書/図書館検索結果取得</li>\n</ul>\n<p>Androidアプリのプロジェクト開始時に生成されたxmlレイアウトファイルにウィジェットなどを配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。</p>\n<p><strong>ここに完成画面を表示</strong></p>\n<h2><span id=\"layout-editor\">Layout Editor</span></h2><p>視覚的にViewやWidgetを配置することができるようになった、特にConstrainsLayoutと<br>合わせて使うことで画面のレイアウトを行う際にxmlによるプログラムを記述する手間が<br>省きながら実際に配置を確認できるようになった。</p>\n<p><img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\"><br>各領域の名称は以下の通りです</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">領域名</th>\n<th style=\"text-align:left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">Palette</td>\n<td style=\"text-align:left\">レイアウトに配置できるウィジェットとレイアウトリストを表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">Component Tree</td>\n<td style=\"text-align:left\">レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">ツールバー</td>\n<td style=\"text-align:left\">レイアウトの外観設定やプロパティを編集するためのボタンが表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">デザイン エディタ</td>\n<td style=\"text-align:left\">実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">Properties</td>\n<td style=\"text-align:left\">現在選択されているビューの詳細な情報が表示されます</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"constraintlayout\">ConstraintLayout</span></h2><p>Android 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能。<br>constraint(制約)をViewやWidgetに設けることでレイアウトを決めることができる。<br>従来の”Linear Layout”や”Relative Layout”に比べネスト構造を減らした実装を行うことができるようになった。</p>\n<p><strong>ConstraintLayoutの画像を表示</strong></p>\n<p>制約という単語ですがgoogle翻訳としては</p>\n<blockquote>\n<p>ある条件を課して、自由にはさせないこと。その物事のために必要な条件</p>\n</blockquote>\n<p>とあります、Layoutに当てはめるとコンポーネント同士を隣接させるという制約を</p>\n<h2><span id=\"レイアウト作成\">レイアウト作成</span></h2><p>では検索画面のレイアウト作成にはいっていきます<br>まずは以下のxmlレイアウトファイルを開きましょう</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_main.xml</p>\n</blockquote>\n<p><img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている<strong>“Hello World”</strong>をクリックして<code>delete</code>キーで削除します<br><img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>これで画面上に何もなくなりスッキリしました。<br>まず検索を行うためには何かしらの情報が必要になります今回は、<strong>蔵書検索</strong>を行いたいので、そのために蔵書名の一部が知りたいです、検索する蔵書は利用者によって違いますので、検索したい本の一部を入力してもらえると検索の情報になりそうです。</p>\n<p>文字入力をアプリで受け付けるためには文字入力を受け付けるためのウィジェットを使う必要があり、<br>その場合は<code>EditText</code>というウィジェットを使います、ではこれをデザインビューに配置していきます。</p>\n<p>Layout Editor内にある<font color=\"red\">Palette</font>から<code>Plain Text</code>をクリックしたまま引っ張ってデザインビューでクリックを離すと<strong>editText</strong>が表示されます<br><img src=\"le2.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置します、そのために”editText”に制約をつけていきます。<br>まずは”editText”は画面左隅と隣合うように配置させるため、”editText”左枠に表示されている <strong>◯</strong>をクリックしたまま画面の左端まで引っ張って放します<br><img src=\"le3.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>“editText”が以下の画面のように画面左隅に近づいたと思います。<br><img src=\"le4.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>先ほどの手順により画面左端とeditTextを隣り合わせる”制約”が設定されたことになります。<br>では上下と右辺も同じように各画面端と隣接する制約を設定してみましょう。<br><img src=\"le5.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>上下左右に制約を付けるとeditTextは画面の真ん中に表示されると思います<br><img src=\"le6.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>続いて一つ目のeditTextを中央より少し左上に配置するために縦横の”バイアス”を以下の通り調整します<br>バイアスを動かすと対象の方向に制約の範囲で動かすことができます<br><img src=\"le7.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<p>続いて検索を実行するためのボタンを配置していきます<br>“Plain Text”の時と同じように今度は<font color=\"red\">Palette</font>から<code>Button</code>をクリックしたまま引っ張りデザインビュー上で放します<br><img src=\"le8.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>“蔵書検索”用のボタンを配置のため制約を設定していきます<br><img src=\"le9.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Buttonの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">“editText”右端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p>上の”editText”と同じ高さに調整するため、バイアスを調整します<br><img src=\"le10.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">50</td>\n</tr>\n</tbody>\n</table>\n<p>残りの”検索履歴”ボタンを画面の通り制約を使って配置してみましょう<br><img src=\"le11.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<blockquote>\n<p>レイアウト完成時にはComponent Treeに<strong>Button2</strong>が追加されます</p>\n</blockquote>\n<p>最後に各ボタンに表示される文字を修正します<br>右上の<strong>Button</strong>をクリックし、右に表示される<font color=\"red\">Attributes</font>エリアから”text”項目を探し、<strong>蔵書検索</strong>と入力します<br><img src=\"le12.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<p>同じ様に”Button2”ボタンの表示文言を修正してみましょう、<br><img src=\"le13.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>修正後にボタンに表示される文字列は<strong>検索履歴</strong>です</p>\n<p>これで検索画面のレイアウトは完成です、変更された画面を確認してみましょう。</p>\n<hr>\n<h1><span id=\"動作確認\">動作確認</span></h1><p>配置したレイアウトで実行されることを確認してみましょう、<br>今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って動作確認を行います。</p>\n<p>アプリを実行するためには下記画面の<code>Run</code>ボタンをクリックします<br><img src=\"runemurate01.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>実行するデバイスかエミュレータの選択画面が表示されますが、以下のように何も表示されないか、<br>AndroidデバイスをPCに繋いでいる場合はデバイスが表示されているかもしれません。</p>\n<p>今回はエミュレータを使用しますので、<code>Create New Virtual Device</code>をクリックしてエミュレータを作成します。<br><img src=\"runemurate02.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>作成するエミュレータを選びますので<font color=\"red\"><strong>Pixel</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"runemurate03.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータにインストールするAndorid OSのバージョンを選択します。</p>\n<p><font color=\"red\"><strong>Marshmallow</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"runemurate04.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータの名前や設定変更画面では変更は行わずに<code>Finish</code>をクリックします<br><img src=\"runemurate05.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータの作成が終わり実行するデバイスの選択画面に戻ります<br>今回は作成したエミュレータの名前が表示されるので、<font color=\"red\"><strong>Pixel API 23</strong></font>を選択して<code>OK</code>をクリックします<br><img src=\"runemurate06.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>Androidのエミュレータが起動し<br><img src=\"runemurate07.png\" alt=\"alt\" title=\"Run Project\" width=\"300\"><br>“layout_main.xml”で作成したレイアウトが表示されれば成功です！<br><img src=\"runemurate08.png\" alt=\"alt\" title=\"Run Project\" width=\"250\"></p>\n<p>これで検索画面のレイアウト作成が完了です、次のページで今回作成したレイアウトのボタンやEditTextにプログラムでイベントを<br>実装していきます。 <a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</a><ul>\n<li><a href=\"#layout-editor\">Layout Editor</a></li>\n<li><a href=\"#constraintlayout\">ConstraintLayout</a></li>\n<li><a href=\"#レイアウト作成\">レイアウト作成</a></li>\n</ul>\n</li>\n<li><a href=\"#動作確認\">動作確認</a></li>\n</ul>\n<!-- tocstop -->\n<p>当ページではAnrdoidアプリのプロジェクト作成完了から検索画面のレイアウト完了まで解説しています。<br><a href=\"/AndroidCourse/android/03-StartAndroidDevelopment\">前のメージでAndroidアプリのプロジェクト作成に関して解説しています</a><br>次のページで検索画面のプログラム実装、REST API通信に関して解説します。</p>\n<h1 id=\"Layout-Editor-ConstraintLayout\"><a href=\"#Layout-Editor-ConstraintLayout\" class=\"headerlink\" title=\"Layout Editor / ConstraintLayout\"></a>Layout Editor / ConstraintLayout</h1><p>Layout Editor、ConstraintLayoutの使い方を学びながら画面のレイアウトを作成していきます。<br>このページで作成する画面には最終的に以下の機能を実装していきます。</p>\n<ul>\n<li>文字入力機能</li>\n<li>画面遷移</li>\n<li>蔵書/図書館検索結果取得</li>\n</ul>\n<p>Androidアプリのプロジェクト開始時に生成されたxmlレイアウトファイルにウィジェットなどを配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。</p>\n<p><strong>ここに完成画面を表示</strong></p>\n<h2 id=\"Layout-Editor\"><a href=\"#Layout-Editor\" class=\"headerlink\" title=\"Layout Editor\"></a>Layout Editor</h2><p>視覚的にViewやWidgetを配置することができるようになった、特にConstrainsLayoutと<br>合わせて使うことで画面のレイアウトを行う際にxmlによるプログラムを記述する手間が<br>省きながら実際に配置を確認できるようになった。</p>\n<p><img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\"><br>各領域の名称は以下の通りです</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">領域名</th>\n<th style=\"text-align:left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">Palette</td>\n<td style=\"text-align:left\">レイアウトに配置できるウィジェットとレイアウトリストを表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">Component Tree</td>\n<td style=\"text-align:left\">レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">ツールバー</td>\n<td style=\"text-align:left\">レイアウトの外観設定やプロパティを編集するためのボタンが表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">デザイン エディタ</td>\n<td style=\"text-align:left\">実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">Properties</td>\n<td style=\"text-align:left\">現在選択されているビューの詳細な情報が表示されます</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ConstraintLayout\"><a href=\"#ConstraintLayout\" class=\"headerlink\" title=\"ConstraintLayout\"></a>ConstraintLayout</h2><p>Android 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能。<br>constraint(制約)をViewやWidgetに設けることでレイアウトを決めることができる。<br>従来の”Linear Layout”や”Relative Layout”に比べネスト構造を減らした実装を行うことができるようになった。</p>\n<p><strong>ConstraintLayoutの画像を表示</strong></p>\n<p>制約という単語ですがgoogle翻訳としては</p>\n<blockquote>\n<p>ある条件を課して、自由にはさせないこと。その物事のために必要な条件</p>\n</blockquote>\n<p>とあります、Layoutに当てはめるとコンポーネント同士を隣接させるという制約を</p>\n<h2 id=\"レイアウト作成\"><a href=\"#レイアウト作成\" class=\"headerlink\" title=\"レイアウト作成\"></a>レイアウト作成</h2><p>では検索画面のレイアウト作成にはいっていきます<br>まずは以下のxmlレイアウトファイルを開きましょう</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_main.xml</p>\n</blockquote>\n<p><img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている<strong>“Hello World”</strong>をクリックして<code>delete</code>キーで削除します<br><img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>これで画面上に何もなくなりスッキリしました。<br>まず検索を行うためには何かしらの情報が必要になります今回は、<strong>蔵書検索</strong>を行いたいので、そのために蔵書名の一部が知りたいです、検索する蔵書は利用者によって違いますので、検索したい本の一部を入力してもらえると検索の情報になりそうです。</p>\n<p>文字入力をアプリで受け付けるためには文字入力を受け付けるためのウィジェットを使う必要があり、<br>その場合は<code>EditText</code>というウィジェットを使います、ではこれをデザインビューに配置していきます。</p>\n<p>Layout Editor内にある<font color=\"red\">Palette</font>から<code>Plain Text</code>をクリックしたまま引っ張ってデザインビューでクリックを離すと<strong>editText</strong>が表示されます<br><img src=\"le2.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置します、そのために”editText”に制約をつけていきます。<br>まずは”editText”は画面左隅と隣合うように配置させるため、”editText”左枠に表示されている <strong>◯</strong>をクリックしたまま画面の左端まで引っ張って放します<br><img src=\"le3.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>“editText”が以下の画面のように画面左隅に近づいたと思います。<br><img src=\"le4.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>先ほどの手順により画面左端とeditTextを隣り合わせる”制約”が設定されたことになります。<br>では上下と右辺も同じように各画面端と隣接する制約を設定してみましょう。<br><img src=\"le5.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>上下左右に制約を付けるとeditTextは画面の真ん中に表示されると思います<br><img src=\"le6.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>続いて一つ目のeditTextを中央より少し左上に配置するために縦横の”バイアス”を以下の通り調整します<br>バイアスを動かすと対象の方向に制約の範囲で動かすことができます<br><img src=\"le7.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<p>続いて検索を実行するためのボタンを配置していきます<br>“Plain Text”の時と同じように今度は<font color=\"red\">Palette</font>から<code>Button</code>をクリックしたまま引っ張りデザインビュー上で放します<br><img src=\"le8.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>“蔵書検索”用のボタンを配置のため制約を設定していきます<br><img src=\"le9.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Buttonの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">“editText”右端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p>上の”editText”と同じ高さに調整するため、バイアスを調整します<br><img src=\"le10.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">50</td>\n</tr>\n</tbody>\n</table>\n<p>残りの”検索履歴”ボタンを画面の通り制約を使って配置してみましょう<br><img src=\"le11.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<blockquote>\n<p>レイアウト完成時にはComponent Treeに<strong>Button2</strong>が追加されます</p>\n</blockquote>\n<p>最後に各ボタンに表示される文字を修正します<br>右上の<strong>Button</strong>をクリックし、右に表示される<font color=\"red\">Attributes</font>エリアから”text”項目を探し、<strong>蔵書検索</strong>と入力します<br><img src=\"le12.png\" alt=\"alt\" title=\"create layout\" width=\"500\"></p>\n<p>同じ様に”Button2”ボタンの表示文言を修正してみましょう、<br><img src=\"le13.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>修正後にボタンに表示される文字列は<strong>検索履歴</strong>です</p>\n<p>これで検索画面のレイアウトは完成です、変更された画面を確認してみましょう。</p>\n<hr>\n<h1 id=\"動作確認\"><a href=\"#動作確認\" class=\"headerlink\" title=\"動作確認\"></a>動作確認</h1><p>配置したレイアウトで実行されることを確認してみましょう、<br>今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って動作確認を行います。</p>\n<p>アプリを実行するためには下記画面の<code>Run</code>ボタンをクリックします<br><img src=\"runemurate01.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>実行するデバイスかエミュレータの選択画面が表示されますが、以下のように何も表示されないか、<br>AndroidデバイスをPCに繋いでいる場合はデバイスが表示されているかもしれません。</p>\n<p>今回はエミュレータを使用しますので、<code>Create New Virtual Device</code>をクリックしてエミュレータを作成します。<br><img src=\"runemurate02.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>作成するエミュレータを選びますので<font color=\"red\"><strong>Pixel</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"runemurate03.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータにインストールするAndorid OSのバージョンを選択します。</p>\n<p><font color=\"red\"><strong>Marshmallow</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"runemurate04.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータの名前や設定変更画面では変更は行わずに<code>Finish</code>をクリックします<br><img src=\"runemurate05.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>エミュレータの作成が終わり実行するデバイスの選択画面に戻ります<br>今回は作成したエミュレータの名前が表示されるので、<font color=\"red\"><strong>Pixel API 23</strong></font>を選択して<code>OK</code>をクリックします<br><img src=\"runemurate06.png\" alt=\"alt\" title=\"Run Project\" width=\"500\"><br>Androidのエミュレータが起動し<br><img src=\"runemurate07.png\" alt=\"alt\" title=\"Run Project\" width=\"300\"><br>“layout_main.xml”で作成したレイアウトが表示されれば成功です！<br><img src=\"runemurate08.png\" alt=\"alt\" title=\"Run Project\" width=\"250\"></p>\n<p>これで検索画面のレイアウト作成が完了です、次のページで今回作成したレイアウトのボタンやEditTextにプログラムでイベントを<br>実装していきます。 <a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a></p>\n"},{"title":"ボタンイベントの実装","date":"2017-11-05T15:00:00.000Z","_content":"アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。\n合わせてコンソールログの出力、Toast(トースト)の機能を試します\n\n<!-- toc -->\n\n当ページではアプリのボタンが押下された時のプログラム実装を学習します。\nまたボタンや画面の裏で値を保持しておく機能として変数という概念を学習します。\n[前のページで検索画面のレイアウト実装を解説しています](/AndroidCourse/android/04-MakeLayoutDesign)\n次のページでは非同期処理やAPI通信機能を使い実際に蔵書検索の機能の作り込みを解説します。\n\n# ボタン押下処理\nアプリを作る上で一つは必ず存在するボタン。\n普段何気なく使っているボタンが押された時、プログラムが実行され別の画面を表示したり、何か計算を行なってユーザに向けて画面に表示するなど\n見えないところで色々なプログラムが動いています。\n当ページでは画面の操作としてボタンを押した時にログを表示したり、Toast(トースト)と呼ばれるユーザに向けて情報を表示するプログラムの実装を解説していきます。\n\n今回プログラムは「MainActivity.java」というファイルにボタンが押された時のプログラムを記述していきます。\nですが、前のページで画面レイアウトを作成したのが`activity_main.xml`というファイルでした。\n別のファイルです...なので「MainActivity.java」に`activity_main.xml`ファイルを取り込む必要があります。\n「MainActivity.java」で`activity_main.xml`内のボタンを使う準備を行います。\n\n## javaプログラムとxmlレイアウトの関連付け\n一つ前の[レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)の内容で作成したxmlレイアウトですが、\n今回プログラムを記述する\"MainActivity.java\"が処理された時に表示されるプログラムがすでに記述されています。\nそれが以下のコード内矢印に囲まれてるプログラムでMainActivity.javaが処理された時にレイアウトの読み込みを行なっています。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓\n        setContentView(R.layout.activity_main);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n必ず書かないといけないコードを紹介する時に<font color=\"red\">「おまじない」</font>という言葉で紹介されることもありますが、このコードが書かれていないと画面には何も表示されず、真っ白な画面で止まってしまうので必ず記述しましょう。\n\n簡単に図にしてみます。\n<img src=\"LoadLayout.png\" alt=\"alt\" title=\"loadlayout\" width=\"550\">\n\n上記のコードが記述されることで画面にレイアウトが表示されていることがわかりました、次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど**javaファイルでクリックされた時のプログラムを書く**必要があります。\nただ、レイアウトを作成したのは\"activity_main.xml\"ファイルですので別のファイルです、ですがjavaファイルのプログラムからxmlファイルのボタンなどを関連付けることができます。\n\nそのためには\"activity_main.xml\"に配置したButtonをMainActivity.javaで関連付け、操作するための名前をつける必要があります。\n\nButtonやEditTextなどのウィジェットをjavaプログラムから関連付けるにはいくつかの方法があります、一番よく使う方法として<font color=\"red\">**findViewById()**</font>を使う方法です、\"setContentView\"で読み込んだレイアウトの中からウィジェットやビューを関連付けることができます。\n\nウィジェットやビューを関連づけるために`activity_main.xml`内のButtonやEditTextなどにユニークID(名称)を設定する必要があります。\nユニークIDの設定はレイアウトファイルで行いますので**activity_main.xml**を開いてください。\n<img src=\"rerationcode01.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\nはじめに\"蔵書検索\"ボタンをjavaプログラムから関連づけるためのユニークID(名称)を設定します、\n\"蔵書検索\"ボタンをクリックしAttributesエリアから<font color=\"red\">**\"ID\"**</font>項目を以下のように修正します\n<img src=\"setid01.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\n> button -> BookSearchBtn\n\nこのAttributesの<font color=\"red\">**\"ID\"**</font>という項目がjavaプログラムから関連づける時に必要な情報になります。\n\nでは他の項目も同じように<font color=\"red\">**\"ID\"**</font>項目を変更していきます。\n※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください\n<img src=\"setid03.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\n|No.  |変更前のID |変更後ID         |\n|:---:|:---------|:--------------|\n|①   |button    |BookSearchBtn  |\n|②   |editText  |BookSearchEdit |\n|③   |button2   |HistoryBtn     |\n\nIDを変更するとComponent Treeの内容も変更が反映されます\n各ウィジェットにIDが設定できたら\"MainActivity.java\"にプログラムを追加してウィジェットを`activity_main.xml`内のWidgetなどと関連付け、MainActivity.javaで使う時の名前をつけていきます。\n\nMainActivity.javaを編集します。\n<img src=\"setid04.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\nでは**findViewById**メソッドと**\"activity_main.xml\"に設定したID**を使ってButtonウィジェットを探します\n\nコード記述する中でIDの入力中に小さいリスト表示がされると思いますので十字キーの上下を押して選択し、`Enter`キーを押せばプログラムに反映されます。\n\n<img src=\"setid05.png\" alt=\"alt\" title=\"reration code\" width=\"650\">\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記追加した２行で<font color=\"red\">activity_main.xmlの\"BookSearchBtn\"（\"蔵書検索\"ボタン）を、MainActivityで使う時の名前として`buttonSearch`という名前を設定する</font>というプログラムを記述することができました。\n２行の内訳としては以下です\n<img src=\"setid06.png\" alt=\"alt\" title=\"reration code\" width=\"600\">\n\n|No.  |各No.のコードの説明                                     |\n|:---:|:----------------------------------------------------|\n|①   |activity_main.xml内のウィジェットと関連づける型            |\n|②   |MainActivity.javaで使う時のユニークな名前                 |\n|③   |①〜②で宣言したウィジェットに情報を登録する時の記述方法       |\n|④   |④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム |\n|⑤   |activity_main.xml内から取得するウィジェット/ビューのユニークID |\n\nこれで\"蔵書検索\"ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。\n\n今後プログラムを開発していく上で重要な箇所ですので更に深掘りした解説を以下にまとめます\n> この①〜⑤の工程はプログラムで表示するデータを動的に保持したり、表示したりする上で大事なクラス（変数）の宣言から初期化を行なっています。\n \n> ①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うために\nわかりやすい名前をつけて準備をしています。\n\n> 本来ボタンオブジェクトは\"ボタンの色\"、\"ボタンに表示する文字\"など情報を持っていますが、\n①〜②の工程だけでは名前が準備されただけで`bookSearchBtn`は全く情報を持っていません。\n\n> `bookSearchBtn `に情報を登録するには<font color=\"blue\">**オブジェクト化（インスタンス化とも呼ばれます）**</font>という工程が必要になります、\nその工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に`bookSearchBtn`がもつ\"ボタンの色\"、\"ボタンに表示する文字\"などの情報を\n参照したり変更したりすることが可能になります。\n\n## ボタンクリックアクションの実装\n次に\"蔵書検索\"ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。\nプログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、データを確認するためにも使われるので使い方を覚えていきましょう。\n\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記まで実装が完了したら動作確認をしてみましょう、`Run`アイコンをクリックしてエミュレータを起動します。\nアプリ画面が表示されたら**蔵書検索**ボタンをクリックしてみてください。\n以下のようにAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。\n<img src=\"setid07.png\" alt=\"alt\" title=\"reration code\" width=\"650\">\n上記で表示させたログですが、出力するためには以下のようにコードを記述する必要があります。\nログはプログラム不具合の原因を調査したり、期待するデータが取得できていることなどに活用しますのでログを出力させるための\nテンプレートとして以下の書き方を覚えておきましょう。\n```\nLog.d(\"tag name\", \"message\");\n```\n\nボタンを押した時に何か処理を行うためのプログラムを実装できたので工程などをおさらいしてみましょう。\n<img src=\"DesignCode.png\" alt=\"alt\" title=\"DesignCode\" width=\"450\">\n\n文字の色分けなどは以下の通りです\n* <font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題\n* <font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順\n* また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題\n* <font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所\n\n\n次はToast機能を使って**蔵書検索**ボタンの横に配置したEditTextに入力された文字を画面に表示するプログラムを作っていきます。\nMainActivity.javaのコードを修正していきます。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\nコードの修正が終わったら`Run`アイコンをクリックしてエミュレータにアプリをインストールし直します。\nアプリ画面が表示されたら文字を入力してから**蔵書検索**ボタンをクリックしてみましょう。\n前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？\n<img src=\"setid08.png\" alt=\"alt\" title=\"reration code\" width=\"300\">\n\nこの画面上に現れる機能がToastです、ボタンが押された時にユーザに何か情報を伝える時などに利用します。\nまたToastは一定時間で自動的に非表示になりますのでユーザが確認ボタンを押す必要もなく簡易なプログラムで利用することができます。\n\n# 色々なボタンイベントの実装\n\nボタンが押された時のプログラムの実装解説としては以上になります。\nしかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。\nその例をいくつか紹介します。\n\nここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。\n\n## パターン１\nボタンが押された時のプログラムをボタンに登録しながら実装するパターンです\nボタンが押された時のプログラムが短いものなど多く使われるパターンです\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンが押された時のプログラム\n            }\n        });\n    }\n}\n```\n\n\n## パターン２\n`bookSearchBtn`の宣言場所が違う実装方法\nパターン２は`bookSearchBtn`インスタンスの宣言スコープが違う実装方法です\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンが押された時のプログラム\n            }\n        });\n    }\n}\n```\n\n## パターン３\n当ページで紹介したプログラムとボタンイベントのプログラムのスコープを`MainActivityクラス`全体で使えるようにした実装方法です\n当ページで紹介したパターンと違い`MainActivityクラス`全体で使うことができます\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // ボタンが押された時のプログラム      \n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\n\n## パターン４\n`View.OnClickLister`インターフェースをMainActivityクラスに付与した実装方法\nパターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です\n\n```\n...\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        // ボタンが押された時のプログラム\n    }\n}\n```\n\n## パターン５\n新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法\nこの方法はリスト表示されている時などに使うことが多いです\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new ButtonClick());\n    }\n    \n    class ButtonClick implements View.OnClickListener {\n        @Override\n        public void onClick(View view) {\n            // ボタンが押された時のプログラム\n        }\n    }\n}\n```\n\n他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。\nボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが\n記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。\n\nですが、<font color=\"red\">**プログラムを細かく見る（読む）**</font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで\nプログラムを深く理解することができるようになります。\n\n以上でボタンが押された時のプログラム実装ができました、次のページでいよいよ本を検索するプログラムを記述していきます。\n[非同期処理、REST API通信の実装](/AndroidCourse/android/05-ButtonAction)\n","source":"_posts/android/05-ButtonAction.md","raw":"---\ntitle: ボタンイベントの実装\ndate: 2017-11-06\n---\nアプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。\n合わせてコンソールログの出力、Toast(トースト)の機能を試します\n\n<!-- toc -->\n\n当ページではアプリのボタンが押下された時のプログラム実装を学習します。\nまたボタンや画面の裏で値を保持しておく機能として変数という概念を学習します。\n[前のページで検索画面のレイアウト実装を解説しています](/AndroidCourse/android/04-MakeLayoutDesign)\n次のページでは非同期処理やAPI通信機能を使い実際に蔵書検索の機能の作り込みを解説します。\n\n# ボタン押下処理\nアプリを作る上で一つは必ず存在するボタン。\n普段何気なく使っているボタンが押された時、プログラムが実行され別の画面を表示したり、何か計算を行なってユーザに向けて画面に表示するなど\n見えないところで色々なプログラムが動いています。\n当ページでは画面の操作としてボタンを押した時にログを表示したり、Toast(トースト)と呼ばれるユーザに向けて情報を表示するプログラムの実装を解説していきます。\n\n今回プログラムは「MainActivity.java」というファイルにボタンが押された時のプログラムを記述していきます。\nですが、前のページで画面レイアウトを作成したのが`activity_main.xml`というファイルでした。\n別のファイルです...なので「MainActivity.java」に`activity_main.xml`ファイルを取り込む必要があります。\n「MainActivity.java」で`activity_main.xml`内のボタンを使う準備を行います。\n\n## javaプログラムとxmlレイアウトの関連付け\n一つ前の[レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)の内容で作成したxmlレイアウトですが、\n今回プログラムを記述する\"MainActivity.java\"が処理された時に表示されるプログラムがすでに記述されています。\nそれが以下のコード内矢印に囲まれてるプログラムでMainActivity.javaが処理された時にレイアウトの読み込みを行なっています。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓\n        setContentView(R.layout.activity_main);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n必ず書かないといけないコードを紹介する時に<font color=\"red\">「おまじない」</font>という言葉で紹介されることもありますが、このコードが書かれていないと画面には何も表示されず、真っ白な画面で止まってしまうので必ず記述しましょう。\n\n簡単に図にしてみます。\n<img src=\"LoadLayout.png\" alt=\"alt\" title=\"loadlayout\" width=\"550\">\n\n上記のコードが記述されることで画面にレイアウトが表示されていることがわかりました、次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど**javaファイルでクリックされた時のプログラムを書く**必要があります。\nただ、レイアウトを作成したのは\"activity_main.xml\"ファイルですので別のファイルです、ですがjavaファイルのプログラムからxmlファイルのボタンなどを関連付けることができます。\n\nそのためには\"activity_main.xml\"に配置したButtonをMainActivity.javaで関連付け、操作するための名前をつける必要があります。\n\nButtonやEditTextなどのウィジェットをjavaプログラムから関連付けるにはいくつかの方法があります、一番よく使う方法として<font color=\"red\">**findViewById()**</font>を使う方法です、\"setContentView\"で読み込んだレイアウトの中からウィジェットやビューを関連付けることができます。\n\nウィジェットやビューを関連づけるために`activity_main.xml`内のButtonやEditTextなどにユニークID(名称)を設定する必要があります。\nユニークIDの設定はレイアウトファイルで行いますので**activity_main.xml**を開いてください。\n<img src=\"rerationcode01.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\nはじめに\"蔵書検索\"ボタンをjavaプログラムから関連づけるためのユニークID(名称)を設定します、\n\"蔵書検索\"ボタンをクリックしAttributesエリアから<font color=\"red\">**\"ID\"**</font>項目を以下のように修正します\n<img src=\"setid01.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\n> button -> BookSearchBtn\n\nこのAttributesの<font color=\"red\">**\"ID\"**</font>という項目がjavaプログラムから関連づける時に必要な情報になります。\n\nでは他の項目も同じように<font color=\"red\">**\"ID\"**</font>項目を変更していきます。\n※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください\n<img src=\"setid03.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\n\n|No.  |変更前のID |変更後ID         |\n|:---:|:---------|:--------------|\n|①   |button    |BookSearchBtn  |\n|②   |editText  |BookSearchEdit |\n|③   |button2   |HistoryBtn     |\n\nIDを変更するとComponent Treeの内容も変更が反映されます\n各ウィジェットにIDが設定できたら\"MainActivity.java\"にプログラムを追加してウィジェットを`activity_main.xml`内のWidgetなどと関連付け、MainActivity.javaで使う時の名前をつけていきます。\n\nMainActivity.javaを編集します。\n<img src=\"setid04.png\" alt=\"alt\" title=\"reration code\" width=\"500\">\nでは**findViewById**メソッドと**\"activity_main.xml\"に設定したID**を使ってButtonウィジェットを探します\n\nコード記述する中でIDの入力中に小さいリスト表示がされると思いますので十字キーの上下を押して選択し、`Enter`キーを押せばプログラムに反映されます。\n\n<img src=\"setid05.png\" alt=\"alt\" title=\"reration code\" width=\"650\">\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記追加した２行で<font color=\"red\">activity_main.xmlの\"BookSearchBtn\"（\"蔵書検索\"ボタン）を、MainActivityで使う時の名前として`buttonSearch`という名前を設定する</font>というプログラムを記述することができました。\n２行の内訳としては以下です\n<img src=\"setid06.png\" alt=\"alt\" title=\"reration code\" width=\"600\">\n\n|No.  |各No.のコードの説明                                     |\n|:---:|:----------------------------------------------------|\n|①   |activity_main.xml内のウィジェットと関連づける型            |\n|②   |MainActivity.javaで使う時のユニークな名前                 |\n|③   |①〜②で宣言したウィジェットに情報を登録する時の記述方法       |\n|④   |④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム |\n|⑤   |activity_main.xml内から取得するウィジェット/ビューのユニークID |\n\nこれで\"蔵書検索\"ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。\n\n今後プログラムを開発していく上で重要な箇所ですので更に深掘りした解説を以下にまとめます\n> この①〜⑤の工程はプログラムで表示するデータを動的に保持したり、表示したりする上で大事なクラス（変数）の宣言から初期化を行なっています。\n \n> ①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うために\nわかりやすい名前をつけて準備をしています。\n\n> 本来ボタンオブジェクトは\"ボタンの色\"、\"ボタンに表示する文字\"など情報を持っていますが、\n①〜②の工程だけでは名前が準備されただけで`bookSearchBtn`は全く情報を持っていません。\n\n> `bookSearchBtn `に情報を登録するには<font color=\"blue\">**オブジェクト化（インスタンス化とも呼ばれます）**</font>という工程が必要になります、\nその工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に`bookSearchBtn`がもつ\"ボタンの色\"、\"ボタンに表示する文字\"などの情報を\n参照したり変更したりすることが可能になります。\n\n## ボタンクリックアクションの実装\n次に\"蔵書検索\"ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。\nプログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、データを確認するためにも使われるので使い方を覚えていきましょう。\n\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記まで実装が完了したら動作確認をしてみましょう、`Run`アイコンをクリックしてエミュレータを起動します。\nアプリ画面が表示されたら**蔵書検索**ボタンをクリックしてみてください。\n以下のようにAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。\n<img src=\"setid07.png\" alt=\"alt\" title=\"reration code\" width=\"650\">\n上記で表示させたログですが、出力するためには以下のようにコードを記述する必要があります。\nログはプログラム不具合の原因を調査したり、期待するデータが取得できていることなどに活用しますのでログを出力させるための\nテンプレートとして以下の書き方を覚えておきましょう。\n```\nLog.d(\"tag name\", \"message\");\n```\n\nボタンを押した時に何か処理を行うためのプログラムを実装できたので工程などをおさらいしてみましょう。\n<img src=\"DesignCode.png\" alt=\"alt\" title=\"DesignCode\" width=\"450\">\n\n文字の色分けなどは以下の通りです\n* <font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題\n* <font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順\n* また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題\n* <font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所\n\n\n次はToast機能を使って**蔵書検索**ボタンの横に配置したEditTextに入力された文字を画面に表示するプログラムを作っていきます。\nMainActivity.javaのコードを修正していきます。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\nコードの修正が終わったら`Run`アイコンをクリックしてエミュレータにアプリをインストールし直します。\nアプリ画面が表示されたら文字を入力してから**蔵書検索**ボタンをクリックしてみましょう。\n前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？\n<img src=\"setid08.png\" alt=\"alt\" title=\"reration code\" width=\"300\">\n\nこの画面上に現れる機能がToastです、ボタンが押された時にユーザに何か情報を伝える時などに利用します。\nまたToastは一定時間で自動的に非表示になりますのでユーザが確認ボタンを押す必要もなく簡易なプログラムで利用することができます。\n\n# 色々なボタンイベントの実装\n\nボタンが押された時のプログラムの実装解説としては以上になります。\nしかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。\nその例をいくつか紹介します。\n\nここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。\n\n## パターン１\nボタンが押された時のプログラムをボタンに登録しながら実装するパターンです\nボタンが押された時のプログラムが短いものなど多く使われるパターンです\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンが押された時のプログラム\n            }\n        });\n    }\n}\n```\n\n\n## パターン２\n`bookSearchBtn`の宣言場所が違う実装方法\nパターン２は`bookSearchBtn`インスタンスの宣言スコープが違う実装方法です\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンが押された時のプログラム\n            }\n        });\n    }\n}\n```\n\n## パターン３\n当ページで紹介したプログラムとボタンイベントのプログラムのスコープを`MainActivityクラス`全体で使えるようにした実装方法です\n当ページで紹介したパターンと違い`MainActivityクラス`全体で使うことができます\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // ボタンが押された時のプログラム      \n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\n\n## パターン４\n`View.OnClickLister`インターフェースをMainActivityクラスに付与した実装方法\nパターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です\n\n```\n...\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        // ボタンが押された時のプログラム\n    }\n}\n```\n\n## パターン５\n新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法\nこの方法はリスト表示されている時などに使うことが多いです\n\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new ButtonClick());\n    }\n    \n    class ButtonClick implements View.OnClickListener {\n        @Override\n        public void onClick(View view) {\n            // ボタンが押された時のプログラム\n        }\n    }\n}\n```\n\n他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。\nボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが\n記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。\n\nですが、<font color=\"red\">**プログラムを細かく見る（読む）**</font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで\nプログラムを深く理解することができるようになります。\n\n以上でボタンが押された時のプログラム実装ができました、次のページでいよいよ本を検索するプログラムを記述していきます。\n[非同期処理、REST API通信の実装](/AndroidCourse/android/05-ButtonAction)\n","slug":"05-ButtonAction","published":1,"updated":"2018-01-23T14:58:26.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2m00055t61un45srfx","content":"<p>アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。<br>合わせてコンソールログの出力、Toast(トースト)の機能を試します</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#ボタン押下処理\">ボタン押下処理</a><ul>\n<li><a href=\"#javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</a></li>\n<li><a href=\"#ボタンクリックアクションの実装\">ボタンクリックアクションの実装</a></li>\n</ul>\n</li>\n<li><a href=\"#色々なボタンイベントの実装\">色々なボタンイベントの実装</a><ul>\n<li><a href=\"#パターン1\">パターン１</a></li>\n<li><a href=\"#パターン2\">パターン２</a></li>\n<li><a href=\"#パターン3\">パターン３</a></li>\n<li><a href=\"#パターン4\">パターン４</a></li>\n<li><a href=\"#パターン5\">パターン５</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>当ページではアプリのボタンが押下された時のプログラム実装を学習します。<br>またボタンや画面の裏で値を保持しておく機能として変数という概念を学習します。<br><a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">前のページで検索画面のレイアウト実装を解説しています</a><br>次のページでは非同期処理やAPI通信機能を使い実際に蔵書検索の機能の作り込みを解説します。</p>\n<h1><span id=\"ボタン押下処理\">ボタン押下処理</span></h1><p>アプリを作る上で一つは必ず存在するボタン。<br>普段何気なく使っているボタンが押された時、プログラムが実行され別の画面を表示したり、何か計算を行なってユーザに向けて画面に表示するなど<br>見えないところで色々なプログラムが動いています。<br>当ページでは画面の操作としてボタンを押した時にログを表示したり、Toast(トースト)と呼ばれるユーザに向けて情報を表示するプログラムの実装を解説していきます。</p>\n<p>今回プログラムは「MainActivity.java」というファイルにボタンが押された時のプログラムを記述していきます。<br>ですが、前のページで画面レイアウトを作成したのが<code>activity_main.xml</code>というファイルでした。<br>別のファイルです…なので「MainActivity.java」に<code>activity_main.xml</code>ファイルを取り込む必要があります。<br>「MainActivity.java」で<code>activity_main.xml</code>内のボタンを使う準備を行います。</p>\n<h2><span id=\"javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</span></h2><p>一つ前の<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">レイアウト作成</a>の内容で作成したxmlレイアウトですが、<br>今回プログラムを記述する”MainActivity.java”が処理された時に表示されるプログラムがすでに記述されています。<br>それが以下のコード内矢印に囲まれてるプログラムでMainActivity.javaが処理された時にレイアウトの読み込みを行なっています。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>必ず書かないといけないコードを紹介する時に<font color=\"red\">「おまじない」</font>という言葉で紹介されることもありますが、このコードが書かれていないと画面には何も表示されず、真っ白な画面で止まってしまうので必ず記述しましょう。</p>\n<p>簡単に図にしてみます。<br><img src=\"LoadLayout.png\" alt=\"alt\" title=\"loadlayout\" width=\"550\"></p>\n<p>上記のコードが記述されることで画面にレイアウトが表示されていることがわかりました、次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど<strong>javaファイルでクリックされた時のプログラムを書く</strong>必要があります。<br>ただ、レイアウトを作成したのは”activity_main.xml”ファイルですので別のファイルです、ですがjavaファイルのプログラムからxmlファイルのボタンなどを関連付けることができます。</p>\n<p>そのためには”activity_main.xml”に配置したButtonをMainActivity.javaで関連付け、操作するための名前をつける必要があります。</p>\n<p>ButtonやEditTextなどのウィジェットをjavaプログラムから関連付けるにはいくつかの方法があります、一番よく使う方法として<font color=\"red\"><strong>findViewById()</strong></font>を使う方法です、”setContentView”で読み込んだレイアウトの中からウィジェットやビューを関連付けることができます。</p>\n<p>ウィジェットやビューを関連づけるために<code>activity_main.xml</code>内のButtonやEditTextなどにユニークID(名称)を設定する必要があります。<br>ユニークIDの設定はレイアウトファイルで行いますので<strong>activity_main.xml</strong>を開いてください。<br><img src=\"rerationcode01.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<p>はじめに”蔵書検索”ボタンをjavaプログラムから関連づけるためのユニークID(名称)を設定します、<br>“蔵書検索”ボタンをクリックしAttributesエリアから<font color=\"red\"><strong>“ID”</strong></font>項目を以下のように修正します<br><img src=\"setid01.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<blockquote>\n<p>button -&gt; BookSearchBtn</p>\n</blockquote>\n<p>このAttributesの<font color=\"red\"><strong>“ID”</strong></font>という項目がjavaプログラムから関連づける時に必要な情報になります。</p>\n<p>では他の項目も同じように<font color=\"red\"><strong>“ID”</strong></font>項目を変更していきます。<br>※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください<br><img src=\"setid03.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">変更前のID</th>\n<th style=\"text-align:left\">変更後ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">button</td>\n<td style=\"text-align:left\">BookSearchBtn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">editText</td>\n<td style=\"text-align:left\">BookSearchEdit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">button2</td>\n<td style=\"text-align:left\">HistoryBtn</td>\n</tr>\n</tbody>\n</table>\n<p>IDを変更するとComponent Treeの内容も変更が反映されます<br>各ウィジェットにIDが設定できたら”MainActivity.java”にプログラムを追加してウィジェットを<code>activity_main.xml</code>内のWidgetなどと関連付け、MainActivity.javaで使う時の名前をつけていきます。</p>\n<p>MainActivity.javaを編集します。<br><img src=\"setid04.png\" alt=\"alt\" title=\"reration code\" width=\"500\"><br>では<strong>findViewById</strong>メソッドと<strong>“activity_main.xml”に設定したID</strong>を使ってButtonウィジェットを探します</p>\n<p>コード記述する中でIDの入力中に小さいリスト表示がされると思いますので十字キーの上下を押して選択し、<code>Enter</code>キーを押せばプログラムに反映されます。</p>\n<p><img src=\"setid05.png\" alt=\"alt\" title=\"reration code\" width=\"650\"></p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記追加した２行で<font color=\"red\">activity_main.xmlの”BookSearchBtn”（”蔵書検索”ボタン）を、MainActivityで使う時の名前として<code>buttonSearch</code>という名前を設定する</font>というプログラムを記述することができました。<br>２行の内訳としては以下です<br><img src=\"setid06.png\" alt=\"alt\" title=\"reration code\" width=\"600\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">各No.のコードの説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">activity_main.xml内のウィジェットと関連づける型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">MainActivity.javaで使う時のユニークな名前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">①〜②で宣言したウィジェットに情報を登録する時の記述方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">activity_main.xml内から取得するウィジェット/ビューのユニークID</td>\n</tr>\n</tbody>\n</table>\n<p>これで”蔵書検索”ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。</p>\n<p>今後プログラムを開発していく上で重要な箇所ですので更に深掘りした解説を以下にまとめます</p>\n<blockquote>\n<p>この①〜⑤の工程はプログラムで表示するデータを動的に保持したり、表示したりする上で大事なクラス（変数）の宣言から初期化を行なっています。</p>\n<p>①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うために<br>わかりやすい名前をつけて準備をしています。</p>\n<p>本来ボタンオブジェクトは”ボタンの色”、”ボタンに表示する文字”など情報を持っていますが、<br>①〜②の工程だけでは名前が準備されただけで<code>bookSearchBtn</code>は全く情報を持っていません。</p>\n<p><code>bookSearchBtn</code>に情報を登録するには<font color=\"blue\"><strong>オブジェクト化（インスタンス化とも呼ばれます）</strong></font>という工程が必要になります、<br>その工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に<code>bookSearchBtn</code>がもつ”ボタンの色”、”ボタンに表示する文字”などの情報を<br>参照したり変更したりすることが可能になります。</p>\n</blockquote>\n<h2><span id=\"ボタンクリックアクションの実装\">ボタンクリックアクションの実装</span></h2><p>次に”蔵書検索”ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。<br>プログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、データを確認するためにも使われるので使い方を覚えていきましょう。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記まで実装が完了したら動作確認をしてみましょう、<code>Run</code>アイコンをクリックしてエミュレータを起動します。<br>アプリ画面が表示されたら<strong>蔵書検索</strong>ボタンをクリックしてみてください。<br>以下のようにAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。<br><img src=\"setid07.png\" alt=\"alt\" title=\"reration code\" width=\"650\"><br>上記で表示させたログですが、出力するためには以下のようにコードを記述する必要があります。<br>ログはプログラム不具合の原因を調査したり、期待するデータが取得できていることなどに活用しますのでログを出力させるための<br>テンプレートとして以下の書き方を覚えておきましょう。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.d(&quot;tag name&quot;, &quot;message&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>ボタンを押した時に何か処理を行うためのプログラムを実装できたので工程などをおさらいしてみましょう。<br><img src=\"DesignCode.png\" alt=\"alt\" title=\"DesignCode\" width=\"450\"></p>\n<p>文字の色分けなどは以下の通りです</p>\n<ul>\n<li><font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題</li>\n<li><font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順</li>\n<li>また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題</li>\n<li><font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所</li>\n</ul>\n<p>次はToast機能を使って<strong>蔵書検索</strong>ボタンの横に配置したEditTextに入力された文字を画面に表示するプログラムを作っていきます。<br>MainActivity.javaのコードを修正していきます。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                // 入力された文字をToast(トースト)に表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;入力された文字は [&quot; + bookSearchEditor.getText().toString() + &quot;]です。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったら<code>Run</code>アイコンをクリックしてエミュレータにアプリをインストールし直します。<br>アプリ画面が表示されたら文字を入力してから<strong>蔵書検索</strong>ボタンをクリックしてみましょう。<br>前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？<br><img src=\"setid08.png\" alt=\"alt\" title=\"reration code\" width=\"300\"></p>\n<p>この画面上に現れる機能がToastです、ボタンが押された時にユーザに何か情報を伝える時などに利用します。<br>またToastは一定時間で自動的に非表示になりますのでユーザが確認ボタンを押す必要もなく簡易なプログラムで利用することができます。</p>\n<h1><span id=\"色々なボタンイベントの実装\">色々なボタンイベントの実装</span></h1><p>ボタンが押された時のプログラムの実装解説としては以上になります。<br>しかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。<br>その例をいくつか紹介します。</p>\n<p>ここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。</p>\n<h2><span id=\"パターン1\">パターン１</span></h2><p>ボタンが押された時のプログラムをボタンに登録しながら実装するパターンです<br>ボタンが押された時のプログラムが短いものなど多く使われるパターンです</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                // ボタンが押された時のプログラム</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン2\">パターン２</span></h2><p><code>bookSearchBtn</code>の宣言場所が違う実装方法<br>パターン２は<code>bookSearchBtn</code>インスタンスの宣言スコープが違う実装方法です</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                // ボタンが押された時のプログラム</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン3\">パターン３</span></h2><p>当ページで紹介したプログラムとボタンイベントのプログラムのスコープを<code>MainActivityクラス</code>全体で使えるようにした実装方法です<br>当ページで紹介したパターンと違い<code>MainActivityクラス</code>全体で使うことができます</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view) &#123;</span><br><span class=\"line\">            // ボタンが押された時のプログラム      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン4\">パターン４</span></h2><p><code>View.OnClickLister</code>インターフェースをMainActivityクラスに付与した実装方法<br>パターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View view) &#123;</span><br><span class=\"line\">        // ボタンが押された時のプログラム</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン5\">パターン５</span></h2><p>新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法<br>この方法はリスト表示されている時などに使うことが多いです</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new ButtonClick());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class ButtonClick implements View.OnClickListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view) &#123;</span><br><span class=\"line\">            // ボタンが押された時のプログラム</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。<br>ボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが<br>記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。</p>\n<p>ですが、<font color=\"red\"><strong>プログラムを細かく見る（読む）</strong></font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで<br>プログラムを深く理解することができるようになります。</p>\n<p>以上でボタンが押された時のプログラム実装ができました、次のページでいよいよ本を検索するプログラムを記述していきます。<br><a href=\"/AndroidCourse/android/05-ButtonAction\">非同期処理、REST API通信の実装</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。<br>合わせてコンソールログの出力、Toast(トースト)の機能を試します</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#ボタン押下処理\">ボタン押下処理</a><ul>\n<li><a href=\"#javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</a></li>\n<li><a href=\"#ボタンクリックアクションの実装\">ボタンクリックアクションの実装</a></li>\n</ul>\n</li>\n<li><a href=\"#色々なボタンイベントの実装\">色々なボタンイベントの実装</a><ul>\n<li><a href=\"#パターン1\">パターン１</a></li>\n<li><a href=\"#パターン2\">パターン２</a></li>\n<li><a href=\"#パターン3\">パターン３</a></li>\n<li><a href=\"#パターン4\">パターン４</a></li>\n<li><a href=\"#パターン5\">パターン５</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>当ページではアプリのボタンが押下された時のプログラム実装を学習します。<br>またボタンや画面の裏で値を保持しておく機能として変数という概念を学習します。<br><a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">前のページで検索画面のレイアウト実装を解説しています</a><br>次のページでは非同期処理やAPI通信機能を使い実際に蔵書検索の機能の作り込みを解説します。</p>\n<h1 id=\"ボタン押下処理\"><a href=\"#ボタン押下処理\" class=\"headerlink\" title=\"ボタン押下処理\"></a>ボタン押下処理</h1><p>アプリを作る上で一つは必ず存在するボタン。<br>普段何気なく使っているボタンが押された時、プログラムが実行され別の画面を表示したり、何か計算を行なってユーザに向けて画面に表示するなど<br>見えないところで色々なプログラムが動いています。<br>当ページでは画面の操作としてボタンを押した時にログを表示したり、Toast(トースト)と呼ばれるユーザに向けて情報を表示するプログラムの実装を解説していきます。</p>\n<p>今回プログラムは「MainActivity.java」というファイルにボタンが押された時のプログラムを記述していきます。<br>ですが、前のページで画面レイアウトを作成したのが<code>activity_main.xml</code>というファイルでした。<br>別のファイルです…なので「MainActivity.java」に<code>activity_main.xml</code>ファイルを取り込む必要があります。<br>「MainActivity.java」で<code>activity_main.xml</code>内のボタンを使う準備を行います。</p>\n<h2 id=\"javaプログラムとxmlレイアウトの関連付け\"><a href=\"#javaプログラムとxmlレイアウトの関連付け\" class=\"headerlink\" title=\"javaプログラムとxmlレイアウトの関連付け\"></a>javaプログラムとxmlレイアウトの関連付け</h2><p>一つ前の<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">レイアウト作成</a>の内容で作成したxmlレイアウトですが、<br>今回プログラムを記述する”MainActivity.java”が処理された時に表示されるプログラムがすでに記述されています。<br>それが以下のコード内矢印に囲まれてるプログラムでMainActivity.javaが処理された時にレイアウトの読み込みを行なっています。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>必ず書かないといけないコードを紹介する時に<font color=\"red\">「おまじない」</font>という言葉で紹介されることもありますが、このコードが書かれていないと画面には何も表示されず、真っ白な画面で止まってしまうので必ず記述しましょう。</p>\n<p>簡単に図にしてみます。<br><img src=\"LoadLayout.png\" alt=\"alt\" title=\"loadlayout\" width=\"550\"></p>\n<p>上記のコードが記述されることで画面にレイアウトが表示されていることがわかりました、次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど<strong>javaファイルでクリックされた時のプログラムを書く</strong>必要があります。<br>ただ、レイアウトを作成したのは”activity_main.xml”ファイルですので別のファイルです、ですがjavaファイルのプログラムからxmlファイルのボタンなどを関連付けることができます。</p>\n<p>そのためには”activity_main.xml”に配置したButtonをMainActivity.javaで関連付け、操作するための名前をつける必要があります。</p>\n<p>ButtonやEditTextなどのウィジェットをjavaプログラムから関連付けるにはいくつかの方法があります、一番よく使う方法として<font color=\"red\"><strong>findViewById()</strong></font>を使う方法です、”setContentView”で読み込んだレイアウトの中からウィジェットやビューを関連付けることができます。</p>\n<p>ウィジェットやビューを関連づけるために<code>activity_main.xml</code>内のButtonやEditTextなどにユニークID(名称)を設定する必要があります。<br>ユニークIDの設定はレイアウトファイルで行いますので<strong>activity_main.xml</strong>を開いてください。<br><img src=\"rerationcode01.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<p>はじめに”蔵書検索”ボタンをjavaプログラムから関連づけるためのユニークID(名称)を設定します、<br>“蔵書検索”ボタンをクリックしAttributesエリアから<font color=\"red\"><strong>“ID”</strong></font>項目を以下のように修正します<br><img src=\"setid01.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<blockquote>\n<p>button -&gt; BookSearchBtn</p>\n</blockquote>\n<p>このAttributesの<font color=\"red\"><strong>“ID”</strong></font>という項目がjavaプログラムから関連づける時に必要な情報になります。</p>\n<p>では他の項目も同じように<font color=\"red\"><strong>“ID”</strong></font>項目を変更していきます。<br>※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください<br><img src=\"setid03.png\" alt=\"alt\" title=\"reration code\" width=\"500\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">変更前のID</th>\n<th style=\"text-align:left\">変更後ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">button</td>\n<td style=\"text-align:left\">BookSearchBtn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">editText</td>\n<td style=\"text-align:left\">BookSearchEdit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">button2</td>\n<td style=\"text-align:left\">HistoryBtn</td>\n</tr>\n</tbody>\n</table>\n<p>IDを変更するとComponent Treeの内容も変更が反映されます<br>各ウィジェットにIDが設定できたら”MainActivity.java”にプログラムを追加してウィジェットを<code>activity_main.xml</code>内のWidgetなどと関連付け、MainActivity.javaで使う時の名前をつけていきます。</p>\n<p>MainActivity.javaを編集します。<br><img src=\"setid04.png\" alt=\"alt\" title=\"reration code\" width=\"500\"><br>では<strong>findViewById</strong>メソッドと<strong>“activity_main.xml”に設定したID</strong>を使ってButtonウィジェットを探します</p>\n<p>コード記述する中でIDの入力中に小さいリスト表示がされると思いますので十字キーの上下を押して選択し、<code>Enter</code>キーを押せばプログラムに反映されます。</p>\n<p><img src=\"setid05.png\" alt=\"alt\" title=\"reration code\" width=\"650\"></p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記追加した２行で<font color=\"red\">activity_main.xmlの”BookSearchBtn”（”蔵書検索”ボタン）を、MainActivityで使う時の名前として<code>buttonSearch</code>という名前を設定する</font>というプログラムを記述することができました。<br>２行の内訳としては以下です<br><img src=\"setid06.png\" alt=\"alt\" title=\"reration code\" width=\"600\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">各No.のコードの説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">activity_main.xml内のウィジェットと関連づける型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">MainActivity.javaで使う時のユニークな名前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">①〜②で宣言したウィジェットに情報を登録する時の記述方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">activity_main.xml内から取得するウィジェット/ビューのユニークID</td>\n</tr>\n</tbody>\n</table>\n<p>これで”蔵書検索”ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。</p>\n<p>今後プログラムを開発していく上で重要な箇所ですので更に深掘りした解説を以下にまとめます</p>\n<blockquote>\n<p>この①〜⑤の工程はプログラムで表示するデータを動的に保持したり、表示したりする上で大事なクラス（変数）の宣言から初期化を行なっています。</p>\n<p>①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うために<br>わかりやすい名前をつけて準備をしています。</p>\n<p>本来ボタンオブジェクトは”ボタンの色”、”ボタンに表示する文字”など情報を持っていますが、<br>①〜②の工程だけでは名前が準備されただけで<code>bookSearchBtn</code>は全く情報を持っていません。</p>\n<p><code>bookSearchBtn</code>に情報を登録するには<font color=\"blue\"><strong>オブジェクト化（インスタンス化とも呼ばれます）</strong></font>という工程が必要になります、<br>その工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に<code>bookSearchBtn</code>がもつ”ボタンの色”、”ボタンに表示する文字”などの情報を<br>参照したり変更したりすることが可能になります。</p>\n</blockquote>\n<h2 id=\"ボタンクリックアクションの実装\"><a href=\"#ボタンクリックアクションの実装\" class=\"headerlink\" title=\"ボタンクリックアクションの実装\"></a>ボタンクリックアクションの実装</h2><p>次に”蔵書検索”ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。<br>プログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、データを確認するためにも使われるので使い方を覚えていきましょう。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記まで実装が完了したら動作確認をしてみましょう、<code>Run</code>アイコンをクリックしてエミュレータを起動します。<br>アプリ画面が表示されたら<strong>蔵書検索</strong>ボタンをクリックしてみてください。<br>以下のようにAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。<br><img src=\"setid07.png\" alt=\"alt\" title=\"reration code\" width=\"650\"><br>上記で表示させたログですが、出力するためには以下のようにコードを記述する必要があります。<br>ログはプログラム不具合の原因を調査したり、期待するデータが取得できていることなどに活用しますのでログを出力させるための<br>テンプレートとして以下の書き方を覚えておきましょう。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.d(&quot;tag name&quot;, &quot;message&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>ボタンを押した時に何か処理を行うためのプログラムを実装できたので工程などをおさらいしてみましょう。<br><img src=\"DesignCode.png\" alt=\"alt\" title=\"DesignCode\" width=\"450\"></p>\n<p>文字の色分けなどは以下の通りです</p>\n<ul>\n<li><font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題</li>\n<li><font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順</li>\n<li>また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題</li>\n<li><font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所</li>\n</ul>\n<p>次はToast機能を使って<strong>蔵書検索</strong>ボタンの横に配置したEditTextに入力された文字を画面に表示するプログラムを作っていきます。<br>MainActivity.javaのコードを修正していきます。</p>\n<p><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                // 入力された文字をToast(トースト)に表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;入力された文字は [&quot; + bookSearchEditor.getText().toString() + &quot;]です。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったら<code>Run</code>アイコンをクリックしてエミュレータにアプリをインストールし直します。<br>アプリ画面が表示されたら文字を入力してから<strong>蔵書検索</strong>ボタンをクリックしてみましょう。<br>前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？<br><img src=\"setid08.png\" alt=\"alt\" title=\"reration code\" width=\"300\"></p>\n<p>この画面上に現れる機能がToastです、ボタンが押された時にユーザに何か情報を伝える時などに利用します。<br>またToastは一定時間で自動的に非表示になりますのでユーザが確認ボタンを押す必要もなく簡易なプログラムで利用することができます。</p>\n<h1 id=\"色々なボタンイベントの実装\"><a href=\"#色々なボタンイベントの実装\" class=\"headerlink\" title=\"色々なボタンイベントの実装\"></a>色々なボタンイベントの実装</h1><p>ボタンが押された時のプログラムの実装解説としては以上になります。<br>しかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。<br>その例をいくつか紹介します。</p>\n<p>ここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。</p>\n<h2 id=\"パターン１\"><a href=\"#パターン１\" class=\"headerlink\" title=\"パターン１\"></a>パターン１</h2><p>ボタンが押された時のプログラムをボタンに登録しながら実装するパターンです<br>ボタンが押された時のプログラムが短いものなど多く使われるパターンです</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                // ボタンが押された時のプログラム</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン２\"><a href=\"#パターン２\" class=\"headerlink\" title=\"パターン２\"></a>パターン２</h2><p><code>bookSearchBtn</code>の宣言場所が違う実装方法<br>パターン２は<code>bookSearchBtn</code>インスタンスの宣言スコープが違う実装方法です</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View v) &#123;</span><br><span class=\"line\">                // ボタンが押された時のプログラム</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン３\"><a href=\"#パターン３\" class=\"headerlink\" title=\"パターン３\"></a>パターン３</h2><p>当ページで紹介したプログラムとボタンイベントのプログラムのスコープを<code>MainActivityクラス</code>全体で使えるようにした実装方法です<br>当ページで紹介したパターンと違い<code>MainActivityクラス</code>全体で使うことができます</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view) &#123;</span><br><span class=\"line\">            // ボタンが押された時のプログラム      </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン４\"><a href=\"#パターン４\" class=\"headerlink\" title=\"パターン４\"></a>パターン４</h2><p><code>View.OnClickLister</code>インターフェースをMainActivityクラスに付与した実装方法<br>パターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View view) &#123;</span><br><span class=\"line\">        // ボタンが押された時のプログラム</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン５\"><a href=\"#パターン５\" class=\"headerlink\" title=\"パターン５\"></a>パターン５</h2><p>新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法<br>この方法はリスト表示されている時などに使うことが多いです</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(new ButtonClick());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    class ButtonClick implements View.OnClickListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onClick(View view) &#123;</span><br><span class=\"line\">            // ボタンが押された時のプログラム</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。<br>ボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが<br>記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。</p>\n<p>ですが、<font color=\"red\"><strong>プログラムを細かく見る（読む）</strong></font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで<br>プログラムを深く理解することができるようになります。</p>\n<p>以上でボタンが押された時のプログラム実装ができました、次のページでいよいよ本を検索するプログラムを記述していきます。<br><a href=\"/AndroidCourse/android/05-ButtonAction\">非同期処理、REST API通信の実装</a></p>\n"},{"title":"非同期処理、REST API通信の実装","date":"2017-12-12T07:55:01.000Z","_content":"非同期処理の使い方と解説、APIを利用したインターネット通信処理ライブラリの実装と確認を行います\n\n<!-- toc -->\n\n当ページでは検索画面でボタンを押した後、蔵書/図書館検索の結果をAPIを利用して取得し、ログに出力するまでを解説します。\n[前のページでは蔵書検索などボタンが押下された時の実装に関して解説しています](/AndroidCourse/android/05-ButtonAction)\n次のページで検索結果の表示、アプリ内データベースの利用に関して解説します。\n\n# 非同期処理\nAndroidアプリを開発するのに気を付けなければいけない概念として**スレッド(Thread)**という概念があります。\nスレッドとは\n> 脈絡、筋道。電子メールなどでは、ある一つの話題に関連した投稿の集まり\n\nなどの意味合いがあります。\n身近なものでは飲み会や待ち合わせを行う時にLINEなどで作成したグループなどはスレッドと似ていると思います。\n\nAndroidのアプリが起動された時に画面に`activity_main.xml`のレイアウトが表示されるのも一つのスレッドでプログラムを実行された結果になります。\n\nこの画面にレイアウトを表示するスレッドを**メインスレッド**と呼びます。\nメインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。\n\nメインスレッドはウィジェットやビューを更新、操作できる唯一のスレッドとなっているため**UIスレッド**と呼ばれることもあります。\n\n非同期処理とは主に**メインスレッド**のプログラムには影響が無いようにプログラムを実行することを指します、\nそのためにはメインスレッドに対して**サブスレッド**と呼ばれる別のスレッドを<font color=\"red\">自分で作成</font>し、その中でプログラムを実行します。\n\n今回は非同期処理を学習するために、もともと準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。\nプログラムは前回までのコードを元に修正していきます。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 準備されているTimerスレッドをインスタンス化\n        Timer timer = new Timer();\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        // 3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 0, 3000);\n\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n...\n```\n\n上記の追加プログラムが記述できたらエミュレータで確認してみてください。\nAndroid Studioの**Logcat**で確認すると3秒毎にログが出力されていることがわかります。\n\n次に画面が表示されてから3秒後から3秒毎にトーストを表示させてみましょう。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n\t\t...\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 準備されているTimerスレッドをインスタンス化\n        Timer timer = new Timer();\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n\t\t\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 更新された内容をトーストに表示\n                Toast.makeText(getBaseContext()\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                        , Toast.LENGTH_SHORT).show();\n\t\t\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 3000, 3000);\n\t\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n...\n```\n\n上記のコードを入力したら`Run`ボタンを押して実行してみましょう。\n\n・\n・\n・\n・\n・\n・\n・\n・\n・\n・\n\nアプリが強制終了してしまったのではないでしょうか？\n最初に紹介した通り**メインスレッド**以外のスレッドでは画面を操作することができません。\n上記で追加したコードはタイマースレッド内でToastを画面に表示する操作を実行しようとして強制終了してしまいました。\n異常終了した際のエラーログはログ出力を行なっていた`Logcat`内に表示されているので確認してみましょう。\n<img src=\"MainThreadError.png\" alt=\"alt\" title=\"Thread Sequence\" width=\"750\"/>\n\n上記の通りエラーのメッセージ箇所は赤文字で表示されます。\n\n今回のエラーの原因を説明している箇所は以下の一文\n「 <font color=\"red\">java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()</font> 」\n\n以降の行で\"at ...\"と説明されているのは実行されたプログラムが順に表示されます。。\n各行後半の`()`内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。\n以下の行のエラーメッセージ上で`()`内が青くなっていますが、これは自分で書いたプログラムファイルであることを表しており、\n多くの場合にエラーの原因になったプログラムの行を示している箇所となります。\n「 <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\n\t\"blue\">MainActivity.java:53</font><font color=\"red\">)</font> 」\n\n今後エラーが発生した時に原因や問題を解析する時にはまずここを見るよう癖付けましょう！\n\nタイマースレッド(サブスレッド)で画面操作できないことを確認できました、今度は正常にトーストが画面に表示されるように修正していきましょう。\nコードを修正する前に新しく使う`Handler`クラスと`Runnable`クラスを紹介します。\n\n### Handler クラス\nHandlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。\n今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。\n通信とは記述していますが、今回の通信では<font color=\"red\">MainThreadでToastを表示する</font>ことが目的になるため、\nデータを渡すことが目的の通信では無いことを意識してみてみてください。\n\n### Runnable クラス\nRunnableクラスは実際にThreadで処理するプログラムを実行するためのクラスです。\n<font color=\"red\">**Thread = Runnable**</font>と認識して問題ありません。\n今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableクラスを使用しています。\n\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    EditText bookSearchEditor;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに帰って来るためのハンドラー\n    Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n\n        ...\n\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                handler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        // 更新された内容をトーストに表示\n                        Toast.makeText(getBaseContext()\n                                , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                                , Toast.LENGTH_SHORT).show();\n                    }\n                });\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n...\n```\n\n上記のコードを実装できたら、`Run`ボタンからエミュレータで動作確認してみましょう。\n以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？\n<img src=\"AsyncTimerToast.png\" alt=\"alt\" title=\"TimerThreadTest\" width=\"300\"/>\n\n実際に使ってみた`Handler`クラスですが、正しくMainThreadで実行するにはコツが必要です、\nコツというのは`Handler`クラスをインスタンス化するタイミングです。\n深く理解できればこのタイミングの調整は不要になりますが、全てを一度に覚えきるのは難しいです、\nですので他の非同期処理後にMainThreadで処理を行うのにHandlerを利用する場合はまず、**onCreateメソッドのsetContetView(...)**の次行でインスタンス化するよう意識付けてください。\n> ※サブスレッド間の通信に関してはこの一連の記事では紹介していないので別途調査が必要です。\n\n以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみましょう。\n続いてはインターネット通信処理を通しでデータを取得するAPIの使い方を実装していきます。\n\n---\n\n# REST API通信処理\n\n非同期処理が作れる様になったらインターネット上にあるデータを取得するプログラムを作っていきます、\nそのためにはインターネット上にあるデータを開発するアプリから取得して使う方法があります。\nこれを多くの場合にAPI通信などと呼びます。\n\n今回のアプリでは蔵書を検索する機能を実装するためにこのAPI通信が必要になります。\n\nREST APIとは**Representational State Transfer Application Programming Interface**の略称で\nそれぞれ\"REST\"と\"API\"で使われることもあります。\n\n## REST\nWebサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。\n\nRESTの設計条件として以下が該当します。\n* アドレス指定可能なURLで公開されていること\n* インターフェースが統一されていること(HTTPメソッドに準じていること)\n* ステートレスであること\n* 処理結果がHTTPステータスコードで通知されること\n\n> *キュレーションサイトQiitaより引用[※1]*\n\n## API\nウィキペディアには以下の様にあります。\n<font color=\"red\">**ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様**</font>\n\n...文章からイメージするのは難しそうです。。。\nですので、まずは以下の様な認識で使っていきましょう。\n<font color=\"blue\">**インターネット上に公開された、URLを知っていれば誰でも使えるデータ**</font>\n\n例として実際にAPIのデータをgoogle ChromeなどWebブラウザの画面で確認できるもので確認してみましょう。\n以下のurlはgoogleが一般公開している\"google books API\"というAPIで、蔵書の情報を取得するAPIです。\n> https://www.googleapis.com/books/v1/volumes\n\nこの画面に表示されているデータは`json`という形式でまとめられたデータになっており、上記urlにアプリからアクセスすると\n画面に表示されているデータを取得することができます。\n多くのアプリではこの様にデータを取得して画面に表示させることで様々なデータを表示しています。\n\n次に指定の本を検索してみましょう、Webブラウザのurlに少し付け加えてみます。\n先ほどと結果の違いがわかる様に新しくタブを開いて以下のurlを表示してみましょう。\n> https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\n\nWebブラウザを確認すると、表示される内容が変わっているのがわかります。\n追加した、\"?q=ほんきで学ぶAndroidアプリ開発入門\"と文字の部分一致で検索した結果が表示されました。\n\nWebブラウザで結果を確認していただいた通り、APIというのはURLや設定されているパラメータの値によって検索結果が変わります、\nこれはホームページと同じくサーバがURLを受け取りプログラムによって表示する`json`情報を返しているからです。\n\n上記で紹介したAPIの検索条件等は[Google Books APIs](https://developers.google.com/books/docs/v1/using#WorkingVolumes)に記載されています。（全て英語です）\n\n下図はAPII通信を行うプログラムの流れとして、\nAPI通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを図にしています。\n<img src=\"APISequence.svg\" alt=\"alt\" title=\"API Sequence\" width=\"550\"/>\n\n上記で解説していた非同期処理ですが、こちらでも利用します。\nむしろAPI通信を行いデータを画面に反映するために使用すると言っても過言ではありません。\n\nというのもAndoridアプリ開発の上で画面更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\">**MainThreadは時間のかかる処理を行なってはいけない**</font>という制約も持ち合わせているため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。\n（サブスレッドで画面を操作しようとした時と同じ様に終了します）\n\n<font color=\"red\">**そのためAPI通信を実行し、画面に反映するためには大まかに以下の手順が必要になります**</font>\n1. メインスレッドでハンドラーをインスタンス化\n1. メインスレッドからサブスレッドを起動\n1. サブスレッドでAPI通信処理を実行\n1. ハンドラーを使いサブスレッドで取得したAPIデータをメインスレッドへ連携\n1. メインスレッドでAPIデータを使い画面を操作\n\n\n\n# まとめ\n非同期通信やスレッドに関する概念は最初イメージするのが難しく整理しにくい内容だと思いますが、以下のポイントだけ\n抑えておきましょう！\n\n* Androidアプリ開発においては画面の更新、操作を行う場合はメインスレッドを使う必要がある\n* Androidアプリ開発ではネットワーク通信処理を行う場合はサブスレッド（メインスレッド以外）で行う必要がある\n* Threadクラスはインスタンス化したスレッドと同じスレッドとして処理を行うことができる\n* HandlerクラスはThreadを起動させる時に利用する\n\n[※1]: https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\n\n","source":"_posts/android/06-AsyncProcess.md","raw":"---\ntitle: 非同期処理、REST API通信の実装\ndate: 2017-12-12 16:55:01\ntags:\n---\n非同期処理の使い方と解説、APIを利用したインターネット通信処理ライブラリの実装と確認を行います\n\n<!-- toc -->\n\n当ページでは検索画面でボタンを押した後、蔵書/図書館検索の結果をAPIを利用して取得し、ログに出力するまでを解説します。\n[前のページでは蔵書検索などボタンが押下された時の実装に関して解説しています](/AndroidCourse/android/05-ButtonAction)\n次のページで検索結果の表示、アプリ内データベースの利用に関して解説します。\n\n# 非同期処理\nAndroidアプリを開発するのに気を付けなければいけない概念として**スレッド(Thread)**という概念があります。\nスレッドとは\n> 脈絡、筋道。電子メールなどでは、ある一つの話題に関連した投稿の集まり\n\nなどの意味合いがあります。\n身近なものでは飲み会や待ち合わせを行う時にLINEなどで作成したグループなどはスレッドと似ていると思います。\n\nAndroidのアプリが起動された時に画面に`activity_main.xml`のレイアウトが表示されるのも一つのスレッドでプログラムを実行された結果になります。\n\nこの画面にレイアウトを表示するスレッドを**メインスレッド**と呼びます。\nメインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。\n\nメインスレッドはウィジェットやビューを更新、操作できる唯一のスレッドとなっているため**UIスレッド**と呼ばれることもあります。\n\n非同期処理とは主に**メインスレッド**のプログラムには影響が無いようにプログラムを実行することを指します、\nそのためにはメインスレッドに対して**サブスレッド**と呼ばれる別のスレッドを<font color=\"red\">自分で作成</font>し、その中でプログラムを実行します。\n\n今回は非同期処理を学習するために、もともと準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。\nプログラムは前回までのコードを元に修正していきます。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 準備されているTimerスレッドをインスタンス化\n        Timer timer = new Timer();\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        // 3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 0, 3000);\n\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n...\n```\n\n上記の追加プログラムが記述できたらエミュレータで確認してみてください。\nAndroid Studioの**Logcat**で確認すると3秒毎にログが出力されていることがわかります。\n\n次に画面が表示されてから3秒後から3秒毎にトーストを表示させてみましょう。\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n\t\t...\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 準備されているTimerスレッドをインスタンス化\n        Timer timer = new Timer();\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n\t\t\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 更新された内容をトーストに表示\n                Toast.makeText(getBaseContext()\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                        , Toast.LENGTH_SHORT).show();\n\t\t\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 3000, 3000);\n\t\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n...\n```\n\n上記のコードを入力したら`Run`ボタンを押して実行してみましょう。\n\n・\n・\n・\n・\n・\n・\n・\n・\n・\n・\n\nアプリが強制終了してしまったのではないでしょうか？\n最初に紹介した通り**メインスレッド**以外のスレッドでは画面を操作することができません。\n上記で追加したコードはタイマースレッド内でToastを画面に表示する操作を実行しようとして強制終了してしまいました。\n異常終了した際のエラーログはログ出力を行なっていた`Logcat`内に表示されているので確認してみましょう。\n<img src=\"MainThreadError.png\" alt=\"alt\" title=\"Thread Sequence\" width=\"750\"/>\n\n上記の通りエラーのメッセージ箇所は赤文字で表示されます。\n\n今回のエラーの原因を説明している箇所は以下の一文\n「 <font color=\"red\">java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()</font> 」\n\n以降の行で\"at ...\"と説明されているのは実行されたプログラムが順に表示されます。。\n各行後半の`()`内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。\n以下の行のエラーメッセージ上で`()`内が青くなっていますが、これは自分で書いたプログラムファイルであることを表しており、\n多くの場合にエラーの原因になったプログラムの行を示している箇所となります。\n「 <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\n\t\"blue\">MainActivity.java:53</font><font color=\"red\">)</font> 」\n\n今後エラーが発生した時に原因や問題を解析する時にはまずここを見るよう癖付けましょう！\n\nタイマースレッド(サブスレッド)で画面操作できないことを確認できました、今度は正常にトーストが画面に表示されるように修正していきましょう。\nコードを修正する前に新しく使う`Handler`クラスと`Runnable`クラスを紹介します。\n\n### Handler クラス\nHandlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。\n今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。\n通信とは記述していますが、今回の通信では<font color=\"red\">MainThreadでToastを表示する</font>ことが目的になるため、\nデータを渡すことが目的の通信では無いことを意識してみてみてください。\n\n### Runnable クラス\nRunnableクラスは実際にThreadで処理するプログラムを実行するためのクラスです。\n<font color=\"red\">**Thread = Runnable**</font>と認識して問題ありません。\n今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableクラスを使用しています。\n\n<font color=\"RoyalBlue\">***MainActivity.java***</font>\n```\n...\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    EditText bookSearchEditor;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに帰って来るためのハンドラー\n    Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n\n        ...\n\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                handler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        // 更新された内容をトーストに表示\n                        Toast.makeText(getBaseContext()\n                                , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                                , Toast.LENGTH_SHORT).show();\n                    }\n                });\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n...\n```\n\n上記のコードを実装できたら、`Run`ボタンからエミュレータで動作確認してみましょう。\n以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？\n<img src=\"AsyncTimerToast.png\" alt=\"alt\" title=\"TimerThreadTest\" width=\"300\"/>\n\n実際に使ってみた`Handler`クラスですが、正しくMainThreadで実行するにはコツが必要です、\nコツというのは`Handler`クラスをインスタンス化するタイミングです。\n深く理解できればこのタイミングの調整は不要になりますが、全てを一度に覚えきるのは難しいです、\nですので他の非同期処理後にMainThreadで処理を行うのにHandlerを利用する場合はまず、**onCreateメソッドのsetContetView(...)**の次行でインスタンス化するよう意識付けてください。\n> ※サブスレッド間の通信に関してはこの一連の記事では紹介していないので別途調査が必要です。\n\n以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみましょう。\n続いてはインターネット通信処理を通しでデータを取得するAPIの使い方を実装していきます。\n\n---\n\n# REST API通信処理\n\n非同期処理が作れる様になったらインターネット上にあるデータを取得するプログラムを作っていきます、\nそのためにはインターネット上にあるデータを開発するアプリから取得して使う方法があります。\nこれを多くの場合にAPI通信などと呼びます。\n\n今回のアプリでは蔵書を検索する機能を実装するためにこのAPI通信が必要になります。\n\nREST APIとは**Representational State Transfer Application Programming Interface**の略称で\nそれぞれ\"REST\"と\"API\"で使われることもあります。\n\n## REST\nWebサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。\n\nRESTの設計条件として以下が該当します。\n* アドレス指定可能なURLで公開されていること\n* インターフェースが統一されていること(HTTPメソッドに準じていること)\n* ステートレスであること\n* 処理結果がHTTPステータスコードで通知されること\n\n> *キュレーションサイトQiitaより引用[※1]*\n\n## API\nウィキペディアには以下の様にあります。\n<font color=\"red\">**ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様**</font>\n\n...文章からイメージするのは難しそうです。。。\nですので、まずは以下の様な認識で使っていきましょう。\n<font color=\"blue\">**インターネット上に公開された、URLを知っていれば誰でも使えるデータ**</font>\n\n例として実際にAPIのデータをgoogle ChromeなどWebブラウザの画面で確認できるもので確認してみましょう。\n以下のurlはgoogleが一般公開している\"google books API\"というAPIで、蔵書の情報を取得するAPIです。\n> https://www.googleapis.com/books/v1/volumes\n\nこの画面に表示されているデータは`json`という形式でまとめられたデータになっており、上記urlにアプリからアクセスすると\n画面に表示されているデータを取得することができます。\n多くのアプリではこの様にデータを取得して画面に表示させることで様々なデータを表示しています。\n\n次に指定の本を検索してみましょう、Webブラウザのurlに少し付け加えてみます。\n先ほどと結果の違いがわかる様に新しくタブを開いて以下のurlを表示してみましょう。\n> https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\n\nWebブラウザを確認すると、表示される内容が変わっているのがわかります。\n追加した、\"?q=ほんきで学ぶAndroidアプリ開発入門\"と文字の部分一致で検索した結果が表示されました。\n\nWebブラウザで結果を確認していただいた通り、APIというのはURLや設定されているパラメータの値によって検索結果が変わります、\nこれはホームページと同じくサーバがURLを受け取りプログラムによって表示する`json`情報を返しているからです。\n\n上記で紹介したAPIの検索条件等は[Google Books APIs](https://developers.google.com/books/docs/v1/using#WorkingVolumes)に記載されています。（全て英語です）\n\n下図はAPII通信を行うプログラムの流れとして、\nAPI通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを図にしています。\n<img src=\"APISequence.svg\" alt=\"alt\" title=\"API Sequence\" width=\"550\"/>\n\n上記で解説していた非同期処理ですが、こちらでも利用します。\nむしろAPI通信を行いデータを画面に反映するために使用すると言っても過言ではありません。\n\nというのもAndoridアプリ開発の上で画面更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\">**MainThreadは時間のかかる処理を行なってはいけない**</font>という制約も持ち合わせているため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。\n（サブスレッドで画面を操作しようとした時と同じ様に終了します）\n\n<font color=\"red\">**そのためAPI通信を実行し、画面に反映するためには大まかに以下の手順が必要になります**</font>\n1. メインスレッドでハンドラーをインスタンス化\n1. メインスレッドからサブスレッドを起動\n1. サブスレッドでAPI通信処理を実行\n1. ハンドラーを使いサブスレッドで取得したAPIデータをメインスレッドへ連携\n1. メインスレッドでAPIデータを使い画面を操作\n\n\n\n# まとめ\n非同期通信やスレッドに関する概念は最初イメージするのが難しく整理しにくい内容だと思いますが、以下のポイントだけ\n抑えておきましょう！\n\n* Androidアプリ開発においては画面の更新、操作を行う場合はメインスレッドを使う必要がある\n* Androidアプリ開発ではネットワーク通信処理を行う場合はサブスレッド（メインスレッド以外）で行う必要がある\n* Threadクラスはインスタンス化したスレッドと同じスレッドとして処理を行うことができる\n* HandlerクラスはThreadを起動させる時に利用する\n\n[※1]: https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\n\n","slug":"06-AsyncProcess","published":1,"updated":"2018-01-23T15:22:47.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2w00065t617vrpsdl7","content":"<p>非同期処理の使い方と解説、APIを利用したインターネット通信処理ライブラリの実装と確認を行います</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#非同期処理\">非同期処理</a><ul>\n<li><a href=\"#handler-クラス\">Handler クラス</a></li>\n<li><a href=\"#runnable-クラス\">Runnable クラス</a></li>\n</ul>\n</li>\n<li><a href=\"#rest-api通信処理\">REST API通信処理</a><ul>\n<li><a href=\"#rest\">REST</a></li>\n<li><a href=\"#api\">API</a></li>\n</ul>\n</li>\n<li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n<!-- tocstop -->\n<p>当ページでは検索画面でボタンを押した後、蔵書/図書館検索の結果をAPIを利用して取得し、ログに出力するまでを解説します。<br><a href=\"/AndroidCourse/android/05-ButtonAction\">前のページでは蔵書検索などボタンが押下された時の実装に関して解説しています</a><br>次のページで検索結果の表示、アプリ内データベースの利用に関して解説します。</p>\n<h1><span id=\"非同期処理\">非同期処理</span></h1><p>Androidアプリを開発するのに気を付けなければいけない概念として<strong>スレッド(Thread)</strong>という概念があります。<br>スレッドとは</p>\n<blockquote>\n<p>脈絡、筋道。電子メールなどでは、ある一つの話題に関連した投稿の集まり</p>\n</blockquote>\n<p>などの意味合いがあります。<br>身近なものでは飲み会や待ち合わせを行う時にLINEなどで作成したグループなどはスレッドと似ていると思います。</p>\n<p>Androidのアプリが起動された時に画面に<code>activity_main.xml</code>のレイアウトが表示されるのも一つのスレッドでプログラムを実行された結果になります。</p>\n<p>この画面にレイアウトを表示するスレッドを<strong>メインスレッド</strong>と呼びます。<br>メインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。</p>\n<p>メインスレッドはウィジェットやビューを更新、操作できる唯一のスレッドとなっているため<strong>UIスレッド</strong>と呼ばれることもあります。</p>\n<p>非同期処理とは主に<strong>メインスレッド</strong>のプログラムには影響が無いようにプログラムを実行することを指します、<br>そのためにはメインスレッドに対して<strong>サブスレッド</strong>と呼ばれる別のスレッドを<font color=\"red\">自分で作成</font>し、その中でプログラムを実行します。</p>\n<p>今回は非同期処理を学習するために、もともと準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。<br>プログラムは前回までのコードを元に修正していきます。</p>\n<font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">                // 入力された文字をToast(トースト)に表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;入力された文字は [&quot; + bookSearchEditor.getText().toString() + &quot;]です。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 準備されているTimerスレッドをインスタンス化</span><br><span class=\"line\">        Timer timer = new Timer();</span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Timerスレッドの実行スケジュールを設定</span><br><span class=\"line\">        // 3秒毎にtimerTaskのプログラムを実行</span><br><span class=\"line\">        timer.schedule(timerTask, 0, 3000);</span><br><span class=\"line\">\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記の追加プログラムが記述できたらエミュレータで確認してみてください。<br>Android Studioの<strong>Logcat</strong>で確認すると3秒毎にログが出力されていることがわかります。<br><br>次に画面が表示されてから3秒後から3秒毎にトーストを表示させてみましょう。<br><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 準備されているTimerスレッドをインスタンス化</span><br><span class=\"line\">        Timer timer = new Timer();</span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">\t\t\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                // 更新された内容をトーストに表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t\t\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Timerスレッドの実行スケジュールを設定</span><br><span class=\"line\">\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行</span><br><span class=\"line\">        timer.schedule(timerTask, 3000, 3000);</span><br><span class=\"line\">\t\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記のコードを入力したら<code>Run</code>ボタンを押して実行してみましょう。<br><br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br><br>アプリが強制終了してしまったのではないでしょうか？<br>最初に紹介した通り<strong>メインスレッド</strong>以外のスレッドでは画面を操作することができません。<br>上記で追加したコードはタイマースレッド内でToastを画面に表示する操作を実行しようとして強制終了してしまいました。<br>異常終了した際のエラーログはログ出力を行なっていた<code>Logcat</code>内に表示されているので確認してみましょう。<br><img src=\"MainThreadError.png\" alt=\"alt\" title=\"Thread Sequence\" width=\"750\"><br><br>上記の通りエラーのメッセージ箇所は赤文字で表示されます。<br><br>今回のエラーの原因を説明している箇所は以下の一文<br>「 <font color=\"red\">java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</font> 」<br><br>以降の行で”at …”と説明されているのは実行されたプログラムが順に表示されます。。<br>各行後半の<code>()</code>内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。<br>以下の行のエラーメッセージ上で<code>()</code>内が青くなっていますが、これは自分で書いたプログラムファイルであることを表しており、<br>多くの場合にエラーの原因になったプログラムの行を示している箇所となります。<br>「 <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\"blue\">MainActivity.java:53</font><font color=\"red\">)</font> 」<br><br>今後エラーが発生した時に原因や問題を解析する時にはまずここを見るよう癖付けましょう！<br><br>タイマースレッド(サブスレッド)で画面操作できないことを確認できました、今度は正常にトーストが画面に表示されるように修正していきましょう。<br>コードを修正する前に新しく使う<code>Handler</code>クラスと<code>Runnable</code>クラスを紹介します。<br><br>### Handler クラス<br>Handlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。<br>今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。<br>通信とは記述していますが、今回の通信では<font color=\"red\">MainThreadでToastを表示する</font>ことが目的になるため、<br>データを渡すことが目的の通信では無いことを意識してみてみてください。<br><br>### Runnable クラス<br>Runnableクラスは実際にThreadで処理するプログラムを実行するためのクラスです。<br><font color=\"red\"><strong>Thread = Runnable</strong></font>と認識して問題ありません。<br>今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableクラスを使用しています。<br><br><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    // メインスレッドに帰って来るためのハンドラー</span><br><span class=\"line\">    Handler handler;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // ハンドラーオブジェクトをMainThreadでインスタンス化</span><br><span class=\"line\">        handler = new Handler();</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                handler.post(new Runnable() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void run() &#123;</span><br><span class=\"line\">                        // 更新された内容をトーストに表示</span><br><span class=\"line\">                        Toast.makeText(getBaseContext()</span><br><span class=\"line\">                                , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;</span><br><span class=\"line\">                                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記のコードを実装できたら、<code>Run</code>ボタンからエミュレータで動作確認してみましょう。<br>以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？<br><img src=\"AsyncTimerToast.png\" alt=\"alt\" title=\"TimerThreadTest\" width=\"300\"><br><br>実際に使ってみた<code>Handler</code>クラスですが、正しくMainThreadで実行するにはコツが必要です、<br>コツというのは<code>Handler</code>クラスをインスタンス化するタイミングです。<br>深く理解できればこのタイミングの調整は不要になりますが、全てを一度に覚えきるのは難しいです、<br>ですので他の非同期処理後にMainThreadで処理を行うのにHandlerを利用する場合はまず、<strong>onCreateメソッドのsetContetView(…)</strong>の次行でインスタンス化するよう意識付けてください。<br>&gt; ※サブスレッド間の通信に関してはこの一連の記事では紹介していないので別途調査が必要です。<br><br>以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみましょう。<br>続いてはインターネット通信処理を通しでデータを取得するAPIの使い方を実装していきます。<br><br>—<br><br># REST API通信処理<br><br>非同期処理が作れる様になったらインターネット上にあるデータを取得するプログラムを作っていきます、<br>そのためにはインターネット上にあるデータを開発するアプリから取得して使う方法があります。<br>これを多くの場合にAPI通信などと呼びます。<br><br>今回のアプリでは蔵書を検索する機能を実装するためにこのAPI通信が必要になります。<br><br>REST APIとは<strong>Representational State Transfer Application Programming Interface</strong>の略称で<br>それぞれ”REST”と”API”で使われることもあります。<br><br>## REST<br>Webサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。<br><br>RESTの設計条件として以下が該当します。<br><em> アドレス指定可能なURLで公開されていること\n</em> インターフェースが統一されていること(HTTPメソッドに準じていること)<br><em> ステートレスであること\n</em> 処理結果がHTTPステータスコードで通知されること<br><br>&gt; <em>キュレーションサイトQiitaより引用<a href=\"https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\" target=\"_blank\" rel=\"external\">※1</a></em><br><br>## API<br>ウィキペディアには以下の様にあります。<br><font color=\"red\"><strong>ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様</strong></font>\n\n<p>…文章からイメージするのは難しそうです。。。<br>ですので、まずは以下の様な認識で使っていきましょう。</p>\n<font color=\"blue\"><strong>インターネット上に公開された、URLを知っていれば誰でも使えるデータ</strong></font>\n\n<p>例として実際にAPIのデータをgoogle ChromeなどWebブラウザの画面で確認できるもので確認してみましょう。<br>以下のurlはgoogleが一般公開している”google books API”というAPIで、蔵書の情報を取得するAPIです。</p>\n<blockquote>\n<p><a href=\"https://www.googleapis.com/books/v1/volumes\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes</a></p>\n</blockquote>\n<p>この画面に表示されているデータは<code>json</code>という形式でまとめられたデータになっており、上記urlにアプリからアクセスすると<br>画面に表示されているデータを取得することができます。<br>多くのアプリではこの様にデータを取得して画面に表示させることで様々なデータを表示しています。</p>\n<p>次に指定の本を検索してみましょう、Webブラウザのurlに少し付け加えてみます。<br>先ほどと結果の違いがわかる様に新しくタブを開いて以下のurlを表示してみましょう。</p>\n<blockquote>\n<p><a href=\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門</a></p>\n</blockquote>\n<p>Webブラウザを確認すると、表示される内容が変わっているのがわかります。<br>追加した、”?q=ほんきで学ぶAndroidアプリ開発入門”と文字の部分一致で検索した結果が表示されました。</p>\n<p>Webブラウザで結果を確認していただいた通り、APIというのはURLや設定されているパラメータの値によって検索結果が変わります、<br>これはホームページと同じくサーバがURLを受け取りプログラムによって表示する<code>json</code>情報を返しているからです。</p>\n<p>上記で紹介したAPIの検索条件等は<a href=\"https://developers.google.com/books/docs/v1/using#WorkingVolumes\" target=\"_blank\" rel=\"external\">Google Books APIs</a>に記載されています。（全て英語です）</p>\n<p>下図はAPII通信を行うプログラムの流れとして、<br>API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを図にしています。<br><img src=\"APISequence.svg\" alt=\"alt\" title=\"API Sequence\" width=\"550\"></p>\n<p>上記で解説していた非同期処理ですが、こちらでも利用します。<br>むしろAPI通信を行いデータを画面に反映するために使用すると言っても過言ではありません。</p>\n<p>というのもAndoridアプリ開発の上で画面更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\"><strong>MainThreadは時間のかかる処理を行なってはいけない</strong></font>という制約も持ち合わせているため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。<br>（サブスレッドで画面を操作しようとした時と同じ様に終了します）</p>\n<p><font color=\"red\"><strong>そのためAPI通信を実行し、画面に反映するためには大まかに以下の手順が必要になります</strong></font></p>\n<ol>\n<li>メインスレッドでハンドラーをインスタンス化</li>\n<li>メインスレッドからサブスレッドを起動</li>\n<li>サブスレッドでAPI通信処理を実行</li>\n<li>ハンドラーを使いサブスレッドで取得したAPIデータをメインスレッドへ連携</li>\n<li>メインスレッドでAPIデータを使い画面を操作</li>\n</ol>\n<h1><span id=\"まとめ\">まとめ</span></h1><p>非同期通信やスレッドに関する概念は最初イメージするのが難しく整理しにくい内容だと思いますが、以下のポイントだけ<br>抑えておきましょう！</p>\n<ul>\n<li>Androidアプリ開発においては画面の更新、操作を行う場合はメインスレッドを使う必要がある</li>\n<li>Androidアプリ開発ではネットワーク通信処理を行う場合はサブスレッド（メインスレッド以外）で行う必要がある</li>\n<li>Threadクラスはインスタンス化したスレッドと同じスレッドとして処理を行うことができる</li>\n<li>HandlerクラスはThreadを起動させる時に利用する</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>非同期処理の使い方と解説、APIを利用したインターネット通信処理ライブラリの実装と確認を行います</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#非同期処理\">非同期処理</a><ul>\n<li><a href=\"#handler-クラス\">Handler クラス</a></li>\n<li><a href=\"#runnable-クラス\">Runnable クラス</a></li>\n</ul>\n</li>\n<li><a href=\"#rest-api通信処理\">REST API通信処理</a><ul>\n<li><a href=\"#rest\">REST</a></li>\n<li><a href=\"#api\">API</a></li>\n</ul>\n</li>\n<li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n<!-- tocstop -->\n<p>当ページでは検索画面でボタンを押した後、蔵書/図書館検索の結果をAPIを利用して取得し、ログに出力するまでを解説します。<br><a href=\"/AndroidCourse/android/05-ButtonAction\">前のページでは蔵書検索などボタンが押下された時の実装に関して解説しています</a><br>次のページで検索結果の表示、アプリ内データベースの利用に関して解説します。</p>\n<h1 id=\"非同期処理\"><a href=\"#非同期処理\" class=\"headerlink\" title=\"非同期処理\"></a>非同期処理</h1><p>Androidアプリを開発するのに気を付けなければいけない概念として<strong>スレッド(Thread)</strong>という概念があります。<br>スレッドとは</p>\n<blockquote>\n<p>脈絡、筋道。電子メールなどでは、ある一つの話題に関連した投稿の集まり</p>\n</blockquote>\n<p>などの意味合いがあります。<br>身近なものでは飲み会や待ち合わせを行う時にLINEなどで作成したグループなどはスレッドと似ていると思います。</p>\n<p>Androidのアプリが起動された時に画面に<code>activity_main.xml</code>のレイアウトが表示されるのも一つのスレッドでプログラムを実行された結果になります。</p>\n<p>この画面にレイアウトを表示するスレッドを<strong>メインスレッド</strong>と呼びます。<br>メインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。</p>\n<p>メインスレッドはウィジェットやビューを更新、操作できる唯一のスレッドとなっているため<strong>UIスレッド</strong>と呼ばれることもあります。</p>\n<p>非同期処理とは主に<strong>メインスレッド</strong>のプログラムには影響が無いようにプログラムを実行することを指します、<br>そのためにはメインスレッドに対して<strong>サブスレッド</strong>と呼ばれる別のスレッドを<font color=\"red\">自分で作成</font>し、その中でプログラムを実行します。</p>\n<p>今回は非同期処理を学習するために、もともと準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。<br>プログラムは前回までのコードを元に修正していきます。</p>\n<font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時の処理を実装</span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                // コンソールログにボタンが押されたことを出力(表示)</span><br><span class=\"line\">                Log.d(&quot;BookSearchBtn&quot;, &quot;onClick: BookSearch Button&quot;);</span><br><span class=\"line\">                // 入力された文字をToast(トースト)に表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;入力された文字は [&quot; + bookSearchEditor.getText().toString() + &quot;]です。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 準備されているTimerスレッドをインスタンス化</span><br><span class=\"line\">        Timer timer = new Timer();</span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Timerスレッドの実行スケジュールを設定</span><br><span class=\"line\">        // 3秒毎にtimerTaskのプログラムを実行</span><br><span class=\"line\">        timer.schedule(timerTask, 0, 3000);</span><br><span class=\"line\">\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記の追加プログラムが記述できたらエミュレータで確認してみてください。<br>Android Studioの<strong>Logcat</strong>で確認すると3秒毎にログが出力されていることがわかります。<br><br>次に画面が表示されてから3秒後から3秒毎にトーストを表示させてみましょう。<br><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 準備されているTimerスレッドをインスタンス化</span><br><span class=\"line\">        Timer timer = new Timer();</span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">\t\t\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                // 更新された内容をトーストに表示</span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;</span><br><span class=\"line\">                        , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">\t\t\t    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Timerスレッドの実行スケジュールを設定</span><br><span class=\"line\">\t    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行</span><br><span class=\"line\">        timer.schedule(timerTask, 3000, 3000);</span><br><span class=\"line\">\t\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記のコードを入力したら<code>Run</code>ボタンを押して実行してみましょう。<br><br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br><br>アプリが強制終了してしまったのではないでしょうか？<br>最初に紹介した通り<strong>メインスレッド</strong>以外のスレッドでは画面を操作することができません。<br>上記で追加したコードはタイマースレッド内でToastを画面に表示する操作を実行しようとして強制終了してしまいました。<br>異常終了した際のエラーログはログ出力を行なっていた<code>Logcat</code>内に表示されているので確認してみましょう。<br><img src=\"MainThreadError.png\" alt=\"alt\" title=\"Thread Sequence\" width=\"750\"><br><br>上記の通りエラーのメッセージ箇所は赤文字で表示されます。<br><br>今回のエラーの原因を説明している箇所は以下の一文<br>「 <font color=\"red\">java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</font> 」<br><br>以降の行で”at …”と説明されているのは実行されたプログラムが順に表示されます。。<br>各行後半の<code>()</code>内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。<br>以下の行のエラーメッセージ上で<code>()</code>内が青くなっていますが、これは自分で書いたプログラムファイルであることを表しており、<br>多くの場合にエラーの原因になったプログラムの行を示している箇所となります。<br>「 <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\"blue\">MainActivity.java:53</font><font color=\"red\">)</font> 」<br><br>今後エラーが発生した時に原因や問題を解析する時にはまずここを見るよう癖付けましょう！<br><br>タイマースレッド(サブスレッド)で画面操作できないことを確認できました、今度は正常にトーストが画面に表示されるように修正していきましょう。<br>コードを修正する前に新しく使う<code>Handler</code>クラスと<code>Runnable</code>クラスを紹介します。<br><br>### Handler クラス<br>Handlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。<br>今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。<br>通信とは記述していますが、今回の通信では<font color=\"red\">MainThreadでToastを表示する</font>ことが目的になるため、<br>データを渡すことが目的の通信では無いことを意識してみてみてください。<br><br>### Runnable クラス<br>Runnableクラスは実際にThreadで処理するプログラムを実行するためのクラスです。<br><font color=\"red\"><strong>Thread = Runnable</strong></font>と認識して問題ありません。<br>今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableクラスを使用しています。<br><br><font color=\"RoyalBlue\"><strong><em>MainActivity.java</em></strong></font><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // レイアウトxmlと関連付けるWidget</span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">    // メインスレッドに帰って来るためのハンドラー</span><br><span class=\"line\">    Handler handler;</span><br><span class=\"line\">    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">        // ハンドラーオブジェクトをMainThreadでインスタンス化</span><br><span class=\"line\">        handler = new Handler();</span><br><span class=\"line\">        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        // 定期実行するタスク(TimerTask)をインスタンス化</span><br><span class=\"line\">        TimerTask timerTask = new TimerTask() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                // コンソールログに更新された内容を出力</span><br><span class=\"line\">                Log.d(&quot;SubThread Process&quot;</span><br><span class=\"line\">                        , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;);</span><br><span class=\"line\">                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class=\"line\">                handler.post(new Runnable() &#123;</span><br><span class=\"line\">                    @Override</span><br><span class=\"line\">                    public void run() &#123;</span><br><span class=\"line\">                        // 更新された内容をトーストに表示</span><br><span class=\"line\">                        Toast.makeText(getBaseContext()</span><br><span class=\"line\">                                , &quot;「&quot; +  bookSearchEditor.getText().toString() + &quot;」に更新されました。&quot;</span><br><span class=\"line\">                                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><br><br>上記のコードを実装できたら、<code>Run</code>ボタンからエミュレータで動作確認してみましょう。<br>以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？<br><img src=\"AsyncTimerToast.png\" alt=\"alt\" title=\"TimerThreadTest\" width=\"300\"><br><br>実際に使ってみた<code>Handler</code>クラスですが、正しくMainThreadで実行するにはコツが必要です、<br>コツというのは<code>Handler</code>クラスをインスタンス化するタイミングです。<br>深く理解できればこのタイミングの調整は不要になりますが、全てを一度に覚えきるのは難しいです、<br>ですので他の非同期処理後にMainThreadで処理を行うのにHandlerを利用する場合はまず、<strong>onCreateメソッドのsetContetView(…)</strong>の次行でインスタンス化するよう意識付けてください。<br>&gt; ※サブスレッド間の通信に関してはこの一連の記事では紹介していないので別途調査が必要です。<br><br>以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみましょう。<br>続いてはインターネット通信処理を通しでデータを取得するAPIの使い方を実装していきます。<br><br>—<br><br># REST API通信処理<br><br>非同期処理が作れる様になったらインターネット上にあるデータを取得するプログラムを作っていきます、<br>そのためにはインターネット上にあるデータを開発するアプリから取得して使う方法があります。<br>これを多くの場合にAPI通信などと呼びます。<br><br>今回のアプリでは蔵書を検索する機能を実装するためにこのAPI通信が必要になります。<br><br>REST APIとは<strong>Representational State Transfer Application Programming Interface</strong>の略称で<br>それぞれ”REST”と”API”で使われることもあります。<br><br>## REST<br>Webサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。<br><br>RESTの設計条件として以下が該当します。<br><em> アドレス指定可能なURLで公開されていること\n</em> インターフェースが統一されていること(HTTPメソッドに準じていること)<br><em> ステートレスであること\n</em> 処理結果がHTTPステータスコードで通知されること<br><br>&gt; <em>キュレーションサイトQiitaより引用<a href=\"https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\" target=\"_blank\" rel=\"external\">※1</a></em><br><br>## API<br>ウィキペディアには以下の様にあります。<br><font color=\"red\"><strong>ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様</strong></font>\n\n<p>…文章からイメージするのは難しそうです。。。<br>ですので、まずは以下の様な認識で使っていきましょう。</p>\n<font color=\"blue\"><strong>インターネット上に公開された、URLを知っていれば誰でも使えるデータ</strong></font>\n\n<p>例として実際にAPIのデータをgoogle ChromeなどWebブラウザの画面で確認できるもので確認してみましょう。<br>以下のurlはgoogleが一般公開している”google books API”というAPIで、蔵書の情報を取得するAPIです。</p>\n<blockquote>\n<p><a href=\"https://www.googleapis.com/books/v1/volumes\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes</a></p>\n</blockquote>\n<p>この画面に表示されているデータは<code>json</code>という形式でまとめられたデータになっており、上記urlにアプリからアクセスすると<br>画面に表示されているデータを取得することができます。<br>多くのアプリではこの様にデータを取得して画面に表示させることで様々なデータを表示しています。</p>\n<p>次に指定の本を検索してみましょう、Webブラウザのurlに少し付け加えてみます。<br>先ほどと結果の違いがわかる様に新しくタブを開いて以下のurlを表示してみましょう。</p>\n<blockquote>\n<p><a href=\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門</a></p>\n</blockquote>\n<p>Webブラウザを確認すると、表示される内容が変わっているのがわかります。<br>追加した、”?q=ほんきで学ぶAndroidアプリ開発入門”と文字の部分一致で検索した結果が表示されました。</p>\n<p>Webブラウザで結果を確認していただいた通り、APIというのはURLや設定されているパラメータの値によって検索結果が変わります、<br>これはホームページと同じくサーバがURLを受け取りプログラムによって表示する<code>json</code>情報を返しているからです。</p>\n<p>上記で紹介したAPIの検索条件等は<a href=\"https://developers.google.com/books/docs/v1/using#WorkingVolumes\" target=\"_blank\" rel=\"external\">Google Books APIs</a>に記載されています。（全て英語です）</p>\n<p>下図はAPII通信を行うプログラムの流れとして、<br>API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを図にしています。<br><img src=\"APISequence.svg\" alt=\"alt\" title=\"API Sequence\" width=\"550\"></p>\n<p>上記で解説していた非同期処理ですが、こちらでも利用します。<br>むしろAPI通信を行いデータを画面に反映するために使用すると言っても過言ではありません。</p>\n<p>というのもAndoridアプリ開発の上で画面更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\"><strong>MainThreadは時間のかかる処理を行なってはいけない</strong></font>という制約も持ち合わせているため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。<br>（サブスレッドで画面を操作しようとした時と同じ様に終了します）</p>\n<p><font color=\"red\"><strong>そのためAPI通信を実行し、画面に反映するためには大まかに以下の手順が必要になります</strong></font></p>\n<ol>\n<li>メインスレッドでハンドラーをインスタンス化</li>\n<li>メインスレッドからサブスレッドを起動</li>\n<li>サブスレッドでAPI通信処理を実行</li>\n<li>ハンドラーを使いサブスレッドで取得したAPIデータをメインスレッドへ連携</li>\n<li>メインスレッドでAPIデータを使い画面を操作</li>\n</ol>\n<h1 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h1><p>非同期通信やスレッドに関する概念は最初イメージするのが難しく整理しにくい内容だと思いますが、以下のポイントだけ<br>抑えておきましょう！</p>\n<ul>\n<li>Androidアプリ開発においては画面の更新、操作を行う場合はメインスレッドを使う必要がある</li>\n<li>Androidアプリ開発ではネットワーク通信処理を行う場合はサブスレッド（メインスレッド以外）で行う必要がある</li>\n<li>Threadクラスはインスタンス化したスレッドと同じスレッドとして処理を行うことができる</li>\n<li>HandlerクラスはThreadを起動させる時に利用する</li>\n</ul>\n"},{"title":"アプリ内データベースの使用","lang":"android","date":"2017-12-13T02:26:28.000Z","_content":"アプリ内データベースを学習し、過去に検索した蔵書などをすぐに確認できる機能を追加します。","source":"_posts/android/07-AppDataBase.md","raw":"---\ntitle: アプリ内データベースの使用\nlang: android\ndate: 2017-12-13 11:26:28\ntags:\n---\nアプリ内データベースを学習し、過去に検索した蔵書などをすぐに確認できる機能を追加します。","slug":"07-AppDataBase","published":1,"updated":"2018-01-11T23:34:34.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig2y00075t614bqbuphr","content":"<p>アプリ内データベースを学習し、過去に検索した蔵書などをすぐに確認できる機能を追加します。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>アプリ内データベースを学習し、過去に検索した蔵書などをすぐに確認できる機能を追加します。</p>\n"},{"title":"使用API利用登録","date":"2017-12-30T15:00:00.000Z","_content":"講座で開発するアプリに導入するカーリル 図書館APIの利用登録手順を解説\n\n\n講座の[非同期通信、REST API 通信](/AndroidCourse/android/06-AsyncProcess)の解説ページで利用するAPIの登録手順です。\n\n図書館や図書館でレンタルできる蔵書の検索などが行えます。\n\nまずは[カーリル 図書館 API](https://calil.jp/doc/api.html)にアクセスします。\n\n<img src=\"RegistAPI01.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI02.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI03.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI04.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI05.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI06.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI07.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI08.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI09.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI10.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI11.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI12.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI13.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">","source":"_posts/android/99-RegisterAPI.md","raw":"---\ntitle: 使用API利用登録\ndate: 2017-12-31\ntags:\n---\n講座で開発するアプリに導入するカーリル 図書館APIの利用登録手順を解説\n\n\n講座の[非同期通信、REST API 通信](/AndroidCourse/android/06-AsyncProcess)の解説ページで利用するAPIの登録手順です。\n\n図書館や図書館でレンタルできる蔵書の検索などが行えます。\n\nまずは[カーリル 図書館 API](https://calil.jp/doc/api.html)にアクセスします。\n\n<img src=\"RegistAPI01.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI02.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI03.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI04.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI05.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI06.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI07.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI08.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI09.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI10.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI11.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI12.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">\n\n<img src=\"RegistAPI13.png\" alt=\"alt\" title=\"registration API account\" width=\"500\">","slug":"99-RegisterAPI","published":1,"updated":"2018-01-23T09:29:55.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcrsig3400085t61jsmlaoaz","content":"<p>講座で開発するアプリに導入するカーリル 図書館APIの利用登録手順を解説</p>\n<p>講座の<a href=\"/AndroidCourse/android/06-AsyncProcess\">非同期通信、REST API 通信</a>の解説ページで利用するAPIの登録手順です。</p>\n<p>図書館や図書館でレンタルできる蔵書の検索などが行えます。</p>\n<p>まずは<a href=\"https://calil.jp/doc/api.html\" target=\"_blank\" rel=\"external\">カーリル 図書館 API</a>にアクセスします。</p>\n<p><img src=\"RegistAPI01.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI02.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI03.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI04.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI05.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI06.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI07.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI08.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI09.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI10.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI11.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI12.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI13.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>講座で開発するアプリに導入するカーリル 図書館APIの利用登録手順を解説</p>\n<p>講座の<a href=\"/AndroidCourse/android/06-AsyncProcess\">非同期通信、REST API 通信</a>の解説ページで利用するAPIの登録手順です。</p>\n<p>図書館や図書館でレンタルできる蔵書の検索などが行えます。</p>\n<p>まずは<a href=\"https://calil.jp/doc/api.html\" target=\"_blank\" rel=\"external\">カーリル 図書館 API</a>にアクセスします。</p>\n<p><img src=\"RegistAPI01.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI02.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI03.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI04.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI05.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI06.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI07.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI08.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI09.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI10.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI11.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI12.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n<p><img src=\"RegistAPI13.png\" alt=\"alt\" title=\"registration API account\" width=\"500\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_03.png","slug":"as_i_03.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_07.png","slug":"as_s_07.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_07.png","slug":"j8_i_07.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad03.png","slug":"sad03.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad05.png","slug":"sad05.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad06.png","slug":"sad06.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad10.png","slug":"sad10.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le11.png","slug":"le11.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le13.png","slug":"le13.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le6.png","slug":"le6.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le7.png","slug":"le7.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le9.png","slug":"le9.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate01.png","slug":"runemurate01.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate08.png","slug":"runemurate08.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid04.png","slug":"setid04.png","post":"cjcrsig2m00055t61un45srfx","modified":1,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid05.png","slug":"setid05.png","post":"cjcrsig2m00055t61un45srfx","modified":1,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid08.png","slug":"setid08.png","post":"cjcrsig2m00055t61un45srfx","modified":1,"renderable":0},{"_id":"source/_posts/android/06-AsyncProcess/AsyncTimerToast.png","slug":"AsyncTimerToast.png","post":"cjcrsig2w00065t617vrpsdl7","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad04.png","slug":"sad04.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad07.png","slug":"sad07.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad11.png","slug":"sad11.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad12.png","slug":"sad12.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le10.png","slug":"le10.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le12.png","slug":"le12.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le2.png","slug":"le2.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le3.png","slug":"le3.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le4.png","slug":"le4.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le5.png","slug":"le5.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate03.png","slug":"runemurate03.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate05.png","slug":"runemurate05.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid06.png","slug":"setid06.png","post":"cjcrsig2m00055t61un45srfx","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_02.png","slug":"as_i_02.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad09.png","slug":"sad09.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le8.png","slug":"le8.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate04.png","slug":"runemurate04.png","post":"cjcrsig2i00045t61gpf1uags","modified":1,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid03.png","slug":"setid03.png","post":"cjcrsig2m00055t61un45srfx","modified":1,"renderable":0},{"_id":"source/_posts/android/02-AndroidConcept/viewinlifecycle.png","post":"cjcrsig2h00025t61q268rykx","slug":"viewinlifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/android/01-CurrentStatus/JapanShare.png","post":"cjcrsig2c00015t61bn2j3z2j","slug":"JapanShare.png","modified":1,"renderable":1},{"_id":"source/_posts/android/01-CurrentStatus/WorldShare.png","post":"cjcrsig2c00015t61bn2j3z2j","slug":"WorldShare.png","modified":1,"renderable":1},{"_id":"source/_posts/android/06-AsyncProcess/APISequence.svg","post":"cjcrsig2w00065t617vrpsdl7","slug":"APISequence.svg","modified":1,"renderable":1},{"_id":"source/_posts/android/06-AsyncProcess/MainThreadError.png","slug":"MainThreadError.png","post":"cjcrsig2w00065t617vrpsdl7","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate07.png","post":"cjcrsig2i00045t61gpf1uags","slug":"runemurate07.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/DesignCode.png","post":"cjcrsig2m00055t61un45srfx","slug":"DesignCode.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/LoadLayout.png","post":"cjcrsig2m00055t61un45srfx","slug":"LoadLayout.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/rerationcode01.png","post":"cjcrsig2m00055t61un45srfx","slug":"rerationcode01.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/setid01.png","post":"cjcrsig2m00055t61un45srfx","slug":"setid01.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/setid02.png","post":"cjcrsig2m00055t61un45srfx","slug":"setid02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/05-ButtonAction/setid07.png","post":"cjcrsig2m00055t61un45srfx","slug":"setid07.png","modified":1,"renderable":1},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad01.png","slug":"sad01.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad02.png","post":"cjcrsig2i00035t61g5nv0cv8","slug":"sad02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad08.png","slug":"sad08.png","post":"cjcrsig2i00035t61g5nv0cv8","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI01.png","slug":"RegistAPI01.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI02.png","slug":"RegistAPI02.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI03.png","slug":"RegistAPI03.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI04.png","slug":"RegistAPI04.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI05.png","slug":"RegistAPI05.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI06.png","slug":"RegistAPI06.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI07.png","slug":"RegistAPI07.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI08.png","slug":"RegistAPI08.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI09.png","slug":"RegistAPI09.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI10.png","slug":"RegistAPI10.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI11.png","slug":"RegistAPI11.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI12.png","slug":"RegistAPI12.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/99-RegisterAPI/RegistAPI13.png","slug":"RegistAPI13.png","post":"cjcrsig3400085t61jsmlaoaz","modified":1,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le0.png","post":"cjcrsig2i00045t61gpf1uags","slug":"le0.png","modified":1,"renderable":1},{"_id":"source/_posts/android/04-MakeLayoutDesign/le1.png","post":"cjcrsig2i00045t61gpf1uags","slug":"le1.png","modified":1,"renderable":1},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate02.png","post":"cjcrsig2i00045t61gpf1uags","slug":"runemurate02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemurate06.png","post":"cjcrsig2i00045t61gpf1uags","slug":"runemurate06.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_01.png","slug":"as_i_01.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_04.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_04.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_05.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_05.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_06.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_06.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_07.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_07.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_08.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_08.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_09.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_09.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_10.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_10.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_11.png","post":"cjcrsig2500005t610f4udez4","slug":"as_i_11.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_01.png","post":"cjcrsig2500005t610f4udez4","slug":"as_s_01.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_02.png","post":"cjcrsig2500005t610f4udez4","slug":"as_s_02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_03.png","post":"cjcrsig2500005t610f4udez4","slug":"as_s_03.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_04.png","slug":"as_s_04.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_05.png","post":"cjcrsig2500005t610f4udez4","slug":"as_s_05.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_06.png","post":"cjcrsig2500005t610f4udez4","slug":"as_s_06.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_08.png","slug":"as_s_08.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_01.png","slug":"j8_c_01.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_02.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_c_02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_dl.png","slug":"j8_dl.png","post":"cjcrsig2500005t610f4udez4","modified":1,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_01.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_01.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_02.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_02.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_03.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_03.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_04.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_04.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_05.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_05.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_06.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_06.png","modified":1,"renderable":1},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_08.png","post":"cjcrsig2500005t610f4udez4","slug":"j8_i_08.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}
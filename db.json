{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/very-simple/source/css/highlight.scss","path":"css/highlight.scss","modified":0,"renderable":1},{"_id":"themes/very-simple/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/very-simple/source/css/very-simple.scss","path":"css/very-simple.scss","modified":0,"renderable":1}],"Cache":[{"_id":"themes/very-simple/.travis.yml","hash":"564794f27c53c27fc5b59ce33ec6ea297fd05a75","modified":1510373118569},{"_id":"themes/very-simple/LICENSE","hash":"68a4bd4855a0540b1c0ecbdcec96192ac7c7c3d9","modified":1510373118569},{"_id":"themes/very-simple/README.md","hash":"8646e3da8dad8210b690f11f4d90056263f04b39","modified":1510373118569},{"_id":"themes/very-simple/_config.yml","hash":"61baa97e9315292ad3ed2160b9146221ac6aff0b","modified":1519884613347},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1513085340361},{"_id":"themes/very-simple/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1510373118564},{"_id":"themes/very-simple/.git/config","hash":"abbada40b44d77eb8fc3a8d641563b0198a4e61d","modified":1510373118565},{"_id":"themes/very-simple/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1510373116227},{"_id":"themes/very-simple/.git/index","hash":"149baedeeacf3ab4e955f73033305bee983868a5","modified":1510373118572},{"_id":"themes/very-simple/.git/packed-refs","hash":"a55cb28543af36f6e62107e18239049a2c74bd3c","modified":1510373118562},{"_id":"themes/very-simple/layout/archive.jade","hash":"0a39cb52325e52ef0e2270e60e8af359b12b2389","modified":1510373118570},{"_id":"themes/very-simple/layout/base.jade","hash":"ce2c623c8a690d9219f0d6769b9f22017c888d76","modified":1510373118570},{"_id":"themes/very-simple/layout/index.jade","hash":"b119546739db39c9e6020945ff6a58eb53d5d6a6","modified":1513085279289},{"_id":"themes/very-simple/layout/page.jade","hash":"c782c9d41d20b5e0910e89e46cb85b4bbb7f0f66","modified":1510373118571},{"_id":"themes/very-simple/layout/post.jade","hash":"7afbd3ec3f8f56d3c7cefd46e662d92807dddcd0","modified":1513085279290},{"_id":"source/_posts/android/.DS_Store","hash":"1e3091e3239b79508779df7164efa5fc5329cb15","modified":1518478614476},{"_id":"source/_posts/android/00-EnvironmentStructure.md","hash":"576131d5bc769247d5ab8d43fe01c458d56aa301","modified":1513894131093},{"_id":"source/_posts/android/01-CurrentStatus.md","hash":"e26ae69d2b253e6b15b21426261b5fb21652aee6","modified":1513219720888},{"_id":"source/_posts/android/02-AndroidConcept.md","hash":"88a3a5c586384945dd204f99815eef24addb860f","modified":1518104238289},{"_id":"source/_posts/android/03-StartAndroidDevelopment.md","hash":"166b2c262a520605c07a84daf877c10548bfcf03","modified":1518498135917},{"_id":"source/_posts/android/04-MakeLayoutDesign.md","hash":"b1144c1fa1885673fecd92026a58368eea81d9a3","modified":1518498135919},{"_id":"source/_posts/android/05-ButtonAction.md","hash":"f66c9c6f2598fa4f3f4f5bc2aefd945f54ed6701","modified":1518104238290},{"_id":"source/_posts/android/06-TransitionScreen.md","hash":"7226c76c0fc7eb89075f0a46f1fa29313b2434d5","modified":1519884613324},{"_id":"source/_posts/android/07-AsyncProcess.md","hash":"b46c3e910f9958525703bc55d3d0738804217be4","modified":1519884613326},{"_id":"source/_posts/android/08-AppDataBase.md","hash":"5db43f69e95d3e59e096661eefa6491c83cce71e","modified":1525783960747},{"_id":"source/_posts/android/10-OrganizeExperience.md","hash":"e901028e55b3047a1a93bf8801f61983c9d65224","modified":1520342224014},{"_id":"source/_posts/android/11-BrowseWebPage.md","hash":"59a0254ac4128a1aa6ef483278f4cd4bf53cd155","modified":1520389576736},{"_id":"source/_posts/android/12-KotlinBasic.md","hash":"a04abfe8dc4fbfe0269e33f5873b1d151dc91c68","modified":1526713873935},{"_id":"themes/very-simple/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1510373116227},{"_id":"themes/very-simple/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1510373116228},{"_id":"themes/very-simple/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1510373116229},{"_id":"themes/very-simple/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1510373116226},{"_id":"themes/very-simple/.git/logs/HEAD","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118565},{"_id":"themes/very-simple/layout/_partial/comments.jade","hash":"1c3c5bbd929a78d88578e2adab905531a4a87419","modified":1510373118569},{"_id":"themes/very-simple/layout/_partial/helpers.jade","hash":"1b08c2dcdd59507ea4be1526e40b5cc75de6f750","modified":1510373118570},{"_id":"themes/very-simple/layout/_partial/paginator.jade","hash":"7327f32b5b9e6b224c58dcff5942dbba8dfe5582","modified":1510373118570},{"_id":"themes/very-simple/source/css/_variables.scss","hash":"88842b279b6fb43bceab105daaa03bf200eb3734","modified":1516759799255},{"_id":"themes/very-simple/source/css/highlight.scss","hash":"555e20b29e643837d546e1419afe2015f9b7de8d","modified":1516764778202},{"_id":"themes/very-simple/source/css/normalize.css","hash":"d0fbef3dd405f26a5fdc896ca1f7875901782c6f","modified":1510373118572},{"_id":"themes/very-simple/source/css/very-simple.scss","hash":"674b56f0c226df7d22ca6050abf300c29fe59062","modified":1510373118572},{"_id":"source/_posts/android/09-RefactorFragment.md","hash":"051a3d9ac6c20eef9cc5a630c488bfef323a3d7d","modified":1526027070094},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_04.png","hash":"1376f170ebde15ca41661496c7b3ea1ce95b89be","modified":1513219720837},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_06.png","hash":"a161a5ddcefd9d387556d76ae7c2a095b29c60a9","modified":1513219720839},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_05.png","hash":"3559fadd5cc1166fa3abb825c78b004ae175ba88","modified":1513219720838},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_07.png","hash":"b67af31502be72dc8443f0b20bd572d85ffbee54","modified":1513219720839},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_08.png","hash":"f9985d541aa2ee5ad9ad6e245692fdc66239c8d0","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_09.png","hash":"db4b752c540885f3443afb7ce08dbee98cc5e349","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_10.png","hash":"ac2ac0fc192205bf66c513dfea1e348e5c52ed68","modified":1513219720840},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_11.png","hash":"e3391e065b228a70401fd95b58454eebeb101a43","modified":1513219720841},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_02.png","hash":"b12026c07fc7c001fbdd85f08bd5861da9c916b0","modified":1513219720880},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_03.png","hash":"dc79e7af8d0f3a8224b7b6f5f816b8ec680656d3","modified":1513219720880},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_05.png","hash":"bd041b172206c4688b95790ad89c71b14c63f9c8","modified":1513219720881},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_04.png","hash":"a12e363fd0e1c0a82a7bdfec5d2f03ea4032927c","modified":1513219720881},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_06.png","hash":"3f1f88d8ba5a3310387087658cd90f13ca9f615f","modified":1513219720882},{"_id":"source/_posts/android/01-CurrentStatus/JapanShare.png","hash":"c7faf6b196bc40ebbfa76f895f269a3b980f4c8e","modified":1513219720889},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_08.png","hash":"610c6fe8fa6523308cf75d99308dcae97d62b929","modified":1513219720887},{"_id":"source/_posts/android/01-CurrentStatus/WorldShare.png","hash":"4d95ca7d7e28e8960de945a1ae1a86908e0bf7cc","modified":1513219720890},{"_id":"source/_posts/android/02-AndroidConcept/viewinlifecycle.png","hash":"17ab79d944b919dcf84660f3815dd008bae85154","modified":1513219720888},{"_id":"source/_posts/android/03-StartAndroidDevelopment/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1518241062434},{"_id":"source/_posts/android/04-MakeLayoutDesign/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517633251685},{"_id":"source/_posts/android/05-ButtonAction/.DS_Store","hash":"ff544d7ae96074f07e922c8ab30538065f38f551","modified":1516719147860},{"_id":"source/_posts/android/05-ButtonAction/LoadLayout.png","hash":"ebdbed7cb162e4c20e011a3d4d77e1cdb0f539b0","modified":1515723632126},{"_id":"source/_posts/android/05-ButtonAction/importclass02.png","hash":"ad5d7095dd9632d009dc42928121a163998adbdf","modified":1518104238294},{"_id":"source/_posts/android/06-TransitionScreen/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517203263284},{"_id":"source/_posts/android/06-TransitionScreen/BackScreen.png","hash":"98cae98547f7ba0598856a5a16230cdaa77cce39","modified":1517123962465},{"_id":"source/_posts/android/06-TransitionScreen/createrow04.png","hash":"22724dbecabc693f707c6421f1c094d52b02300c","modified":1517296138340},{"_id":"source/_posts/android/06-TransitionScreen/re_le03.png","hash":"4773131be56d077e74f24f3d986d319e8c1f64c9","modified":1517202773749},{"_id":"source/_posts/android/07-AsyncProcess/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1517031312535},{"_id":"source/_posts/android/07-AsyncProcess/APISequence.svg","hash":"edfb39308bb1ce189ad70061eb4a5797e16b048d","modified":1516150651782},{"_id":"source/_posts/android/08-AppDataBase/addrecycler03.png","hash":"c8dd1f9e75a37cda796b6ad2da306412d40edde3","modified":1518104238305},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm02.png","hash":"4d88b8b552c8f439112fb2b86b6a27c72baa4371","modified":1518104238346},{"_id":"source/_posts/android/08-AppDataBase/initialrealm02.png","hash":"e140d27240813d785cf2aec56f03d24f0714101d","modified":1518104238371},{"_id":"source/_posts/android/09-RefactorFragment/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1518443481944},{"_id":"source/_posts/android/09-RefactorFragment/addDetail07.png","hash":"aa2e0b3646cdc65f3106da212430bb6a05bffcd6","modified":1518498135932},{"_id":"source/_posts/android/10-OrganizeExperience/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1519882450633},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage02.png","hash":"f97c9eca969ef4a099fec4d6270c440ee94e4cb0","modified":1519884613332},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout01.png","hash":"5b37549a9c8b2039f86493738678d69cb9d5d299","modified":1520327165529},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout02.png","hash":"efa02dfb4c537b8a8ac8369928ff91996d0b06e4","modified":1520389507502},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage08.png","hash":"990b0164414cb9565ae5ff83fa5b79feeec30ecb","modified":1519884613341},{"_id":"themes/very-simple/.git/objects/pack/pack-deedf889bad5b5fe600d93dfdb5f6ee78f270250.idx","hash":"3b34a71ea755323dc07c37feb6c0db5aaa45f2c8","modified":1510373118551},{"_id":"themes/very-simple/.git/refs/heads/master","hash":"b10f3f948777054eb2c59c65bfc35083b3c60884","modified":1510373118564},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_01.png","hash":"55c83f94c94265acaeb8f830b962d55a1231f126","modified":1513219720843},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_03.png","hash":"4c16652a2b21556ae9c5215261bf6fffb9a12b1c","modified":1513219720846},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_02.png","hash":"5fc87dfb11c6d76702de50d8baec8d4fe7f02523","modified":1513219720844},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_05.png","hash":"7fcbee5d3bc9fa6158c9a562f6bf09d143779bc6","modified":1513219720852},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_06.png","hash":"30afad1a0df3a3c4d4e8667f1d78dc0fd0c87a3c","modified":1513219720853},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_02.png","hash":"00cb5c7135bb5a5b158f988525ed965346a017ca","modified":1513219720874},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_01.png","hash":"5eb7acda0d7dd47bd07f8f5c31d26557fb4fed35","modified":1513219720879},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad02.png","hash":"e34287cea93240a5ed2373529ae82e74e9a0d6bd","modified":1513219720906},{"_id":"source/_posts/android/04-MakeLayoutDesign/CompleteScreen.png","hash":"51cebffc093d782d9bb62e5696bb69c210c054cf","modified":1517031297702},{"_id":"source/_posts/android/04-MakeLayoutDesign/MakeLayoutTask.png","hash":"6532dee3726d512f8ed6227aa5070825a844d95a","modified":1517640676635},{"_id":"source/_posts/android/04-MakeLayoutDesign/le0.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1513894131098},{"_id":"source/_posts/android/04-MakeLayoutDesign/le1.png","hash":"13cf740932b7341fbd2745789cc9b9dd3cbb91e6","modified":1513894131100},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu02.png","hash":"40998d06a7f43e0a005d64e09132bd2b98825771","modified":1513894131139},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu09.png","hash":"126cca9779e69f3db6e7fecf9fdfc2a20504327c","modified":1517585982733},{"_id":"source/_posts/android/05-ButtonAction/DesignCode.png","hash":"10fea11983f13e61eaa45ac88bec8cd5d609a6b0","modified":1515851327204},{"_id":"source/_posts/android/05-ButtonAction/rerationcode01.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1513894131150},{"_id":"source/_posts/android/05-ButtonAction/setid01.png","hash":"3c409597e97cacbbd0b99c95bba7bb3acac4fa6a","modified":1516719046554},{"_id":"source/_posts/android/05-ButtonAction/addClickEvent02.png","hash":"20be8df33f0b9a917c97793258216f2cd4acd28e","modified":1518104238292},{"_id":"source/_posts/android/05-ButtonAction/setid02.png","hash":"3bcfcdaa9b3945547a3e9af1f88d859c9ee97ca8","modified":1513894131156},{"_id":"source/_posts/android/05-ButtonAction/setid07.png","hash":"f8702ae0668b3e50eec12c8885e25790fa1baa21","modified":1514705661396},{"_id":"source/_posts/android/06-TransitionScreen/additemclick03.png","hash":"d8b019602acb29f6cb1cf902aa76276b40d52d9e","modified":1517637901184},{"_id":"source/_posts/android/06-TransitionScreen/createactivity04.png","hash":"5df11c002657e49aeb078119546e9ffa46e6fa28","modified":1517121259385},{"_id":"source/_posts/android/06-TransitionScreen/createadpt02.png","hash":"a99418d832437e9f63dfc276393aebfc901d0471","modified":1517299034751},{"_id":"source/_posts/android/06-TransitionScreen/createadpt03.png","hash":"3557d1fadb913632835be446e094ccb423dca37f","modified":1517300701276},{"_id":"source/_posts/android/06-TransitionScreen/createadpt05.png","hash":"3519eae14f207ed645db92555aa8435d6314b2f8","modified":1517300844601},{"_id":"source/_posts/android/06-TransitionScreen/createrow05.png","hash":"8ba02ddb829627723264c2dc6de6a52a74116887","modified":1517296471369},{"_id":"source/_posts/android/06-TransitionScreen/createrow06.png","hash":"89014d571624cec434227324a0fda4c7c88348ac","modified":1517296811119},{"_id":"source/_posts/android/06-TransitionScreen/createrow07.png","hash":"982060324ec250cf5890ee13bb4f7ece2a6c39bc","modified":1517296968775},{"_id":"source/_posts/android/06-TransitionScreen/createrow10.png","hash":"5b23da41e92a0c495fd0077a924885a3d53907e1","modified":1517297353372},{"_id":"source/_posts/android/08-AppDataBase/addadapter02.png","hash":"4e4f1b1d37fbba3a91cbb51bdf01ba5dd7f4a8de","modified":1518104238299},{"_id":"source/_posts/android/07-AsyncProcess/jsonparse.png","hash":"6ec110487ee1fcd1ada472a6a309b701482eac1a","modified":1517630776815},{"_id":"source/_posts/android/08-AppDataBase/addadapter05.png","hash":"1a228b7dd408225d708454bb2cdef5d8dac485d7","modified":1518104238302},{"_id":"source/_posts/android/08-AppDataBase/addadapter04.png","hash":"99ab51a8b6a223492ed60efb17266c2a57a1f732","modified":1518104238301},{"_id":"source/_posts/android/08-AppDataBase/addadapter03.png","hash":"3d169577febc54de5f4fb32aa2ccb3fdd4fdaf90","modified":1518104238300},{"_id":"source/_posts/android/08-AppDataBase/addrecycler02.png","hash":"227d6f331de012d695c0d344b5a82d06d2b5d073","modified":1518104238305},{"_id":"source/_posts/android/08-AppDataBase/addrecycler05.png","hash":"ea7f13dfc45d8c5cfe95fc8c2ae9f0b78a43a975","modified":1518104238308},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm03.png","hash":"0e2e0443e83a9e8f61812fe7b3e0564940448718","modified":1518104238348},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler02.png","hash":"c4dc89bed486b46b28164483aa1c1a651cee6192","modified":1518104238314},{"_id":"source/_posts/android/08-AppDataBase/includeRealm01-1.png","hash":"9b3d4fe5c87e2ebd3db2434e0fb99536a87925a7","modified":1518104238355},{"_id":"source/_posts/android/08-AppDataBase/initialrealm04.png","hash":"6cefa02de9c09995dbb12c563d8090deb0367a2c","modified":1518104238375},{"_id":"source/_posts/android/08-AppDataBase/initialrealm05.png","hash":"1d3d7e3ddba286c0766cf149b689668bf9f4ad72","modified":1518104238376},{"_id":"source/_posts/android/08-AppDataBase/realmtable01.png","hash":"e0e5bb3ccc842c304df196eefba3b568b3b55831","modified":1518104238377},{"_id":"source/_posts/android/08-AppDataBase/realmtable02.png","hash":"476e6e08b06fe0a6ae5a2c59c9bf542e05b45cec","modified":1518104238378},{"_id":"source/_posts/android/08-AppDataBase/realmtable03.png","hash":"928cdb4d2ca01ae64b4c3c5195085abfc68ee1db","modified":1518104238380},{"_id":"source/_posts/android/08-AppDataBase/initialrealm01.png","hash":"4f6759bb5422a8228a2948efd9ea789b71c5616c","modified":1518104238370},{"_id":"source/_posts/android/09-RefactorFragment/addDetail08.png","hash":"0cd87197d4acec63a413825d70a088d03dc84e01","modified":1518498135933},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage04.png","hash":"558ffd4d807bc496177171bdad9a02fb28209faf","modified":1519884613337},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage05.png","hash":"17155f5ae914210b718dd3bb2e4b0abb15bd1a12","modified":1519884613338},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage06.png","hash":"f67a253abd8c923542faf6ecad0687780e059101","modified":1519884613339},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage09.png","hash":"9879cf4aff716383848bfde0992c778f5b1bdab3","modified":1519884613342},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout03.png","hash":"674b663a2613e082d607c8b6ba87be306163eba1","modified":1520389507472},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_03.png","hash":"162bf284406eb0451abf61648529556492ff73dc","modified":1513219720837},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_07.png","hash":"00e956a773d6ee0f7e9fd70c9ac97402654b4e32","modified":1513219720855},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_07.png","hash":"0a2cd6a444c3c589eab112c2c8948d5116fead4c","modified":1513219720885},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad03.png","hash":"242e8f0149ea15a940e982b108bd29eb4726a7d3","modified":1513219720909},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad06.png","hash":"2f6ea65d8aa8fdaf1d6db494ba59354d44ec275f","modified":1513219720916},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad05.png","hash":"36742f6ef6922d97f5f0eccc085b2137bacc32e5","modified":1513219720914},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad10.png","hash":"f8ac2bcb263b3dc648288019c741929da7e9045a","modified":1513219720928},{"_id":"source/_posts/android/04-MakeLayoutDesign/le12.png","hash":"735ab631c04fdcb41c02e2f57279b8e7b9a3415e","modified":1517039615713},{"_id":"source/_posts/android/04-MakeLayoutDesign/le6.png","hash":"8d77bfe0125c1d8738fe44dec27a85cf9aa378c2","modified":1513894131128},{"_id":"source/_posts/android/04-MakeLayoutDesign/le7.png","hash":"74e9ec8623248d6d1d4316402f8304f46f016057","modified":1516716704827},{"_id":"source/_posts/android/04-MakeLayoutDesign/le9.png","hash":"b0781588b9fd19c1c2593119f11b6378516b3595","modified":1516717025750},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu01.png","hash":"4bcb4adebf432211d3263f8e28bbd460b6446203","modified":1513894131138},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu05.png","hash":"d3a0fd902ff44813f559e2f96bda0987cf3211a7","modified":1517584617138},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu11.png","hash":"110fe42869410d4911960bc6159e69a0bc5e2999","modified":1516718408434},{"_id":"source/_posts/android/05-ButtonAction/importclass01.png","hash":"71dfec5538f3e7b3bffd5b9951cb57c32fe05490","modified":1518104238294},{"_id":"source/_posts/android/05-ButtonAction/setid04.png","hash":"daee38d424ff03c8de429bf27175b336dbde0d66","modified":1513894131164},{"_id":"source/_posts/android/05-ButtonAction/setid05.png","hash":"6affea06d209e1c9e4f6f24fb316fa1ee92ef464","modified":1516342724517},{"_id":"source/_posts/android/05-ButtonAction/setid08.png","hash":"88fe73310965fd030285f50a495a43aad5202664","modified":1516720104405},{"_id":"source/_posts/android/06-TransitionScreen/additemclick02.png","hash":"165ae138f075e931951fa5b887b52fd42c6313be","modified":1517637737266},{"_id":"source/_posts/android/06-TransitionScreen/createactivity02.png","hash":"b739e9e33546b5d14fb30e82b79b57ca14780db8","modified":1517120565968},{"_id":"source/_posts/android/06-TransitionScreen/createactivity03.png","hash":"c55d9eeb3c4c5f46f2a73932a7c2749da36fc6a2","modified":1517120874765},{"_id":"source/_posts/android/06-TransitionScreen/createadpt04.png","hash":"8c9eaaa4d93cc4ca77ce6f1eb6f1697c8d2b9d5d","modified":1517300799269},{"_id":"source/_posts/android/06-TransitionScreen/createadpt06.png","hash":"8b3fec6578f0a290e3648f5ce484ae7d1d9ed838","modified":1517301060838},{"_id":"source/_posts/android/06-TransitionScreen/createrow02.png","hash":"68886fbc528fea1c06b519569e22b386132ece11","modified":1517295129938},{"_id":"source/_posts/android/06-TransitionScreen/createrow09.png","hash":"cc6709b68cb185d943908681fdde0aa3eb039f49","modified":1517297161068},{"_id":"source/_posts/android/06-TransitionScreen/re_le02.png","hash":"1365644292afbea8f5c4f1642a535ae2ea1a805d","modified":1517201469701},{"_id":"source/_posts/android/06-TransitionScreen/re_le01.png","hash":"a05b5daf143bc806f354c8a31653078e9d4d6f71","modified":1517201248271},{"_id":"source/_posts/android/06-TransitionScreen/re_le00.png","hash":"5f297bd6a6c7063b87a6148e9abf9a9864550143","modified":1517358629389},{"_id":"source/_posts/android/06-TransitionScreen/scopedetail.png","hash":"3a9020301d7e09791a3dedbb4abbd91097368ba9","modified":1518498135921},{"_id":"source/_posts/android/07-AsyncProcess/AsyncTimerToast.png","hash":"3cbc91dcac923f121b8ad2c1f7265829f2f5f3e6","modified":1516720359443},{"_id":"source/_posts/android/06-TransitionScreen/custom_list00.png","hash":"eaf2e081f337abad8c6b73be57bc73e17e95b5e4","modified":1517366820727},{"_id":"source/_posts/android/07-AsyncProcess/includeokHttp01.png","hash":"99d36ae20c967afee59e3f45b8ac8b1c080deb88","modified":1516951889197},{"_id":"source/_posts/android/08-AppDataBase/addrecycler01.png","hash":"2358f8163acc8a4070602c56668e65c1a0f6672c","modified":1518104238304},{"_id":"source/_posts/android/08-AppDataBase/addadapter06.png","hash":"cf4400952c333937deac2c47ad4d8ae490131a8a","modified":1518104238303},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler03.png","hash":"63c6bc16b429e8f4cce22a3d88a8631c6c853f8f","modified":1518104238316},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler04.png","hash":"d0c15767ff805e7e30101140f3affe5b05c81bd7","modified":1518104238342},{"_id":"source/_posts/android/08-AppDataBase/crehistactivity.png","hash":"6900ce8e2a0e6d637aabfe68c4c8b28581de586c","modified":1518104238353},{"_id":"source/_posts/android/08-AppDataBase/includeRealm02-1.png","hash":"d22fb31b5926571df65d8d245220db454786e025","modified":1518104238361},{"_id":"source/_posts/android/09-RefactorFragment/addDetail01.png","hash":"1d32b46d45c8daa2d98559b9f9f15826282ac506","modified":1518498135924},{"_id":"source/_posts/android/09-RefactorFragment/addDetail03.png","hash":"59aca2d718738ed38e34d332a6bd3c6abe517675","modified":1518498135927},{"_id":"source/_posts/android/09-RefactorFragment/addDetail04.png","hash":"74fe215dbbc32ecad1b7b102cd19354974a7970a","modified":1518498135928},{"_id":"source/_posts/android/09-RefactorFragment/addDetail05.png","hash":"68eb135ae1d4cfd5cf5b70ff40d567dc8dda15a5","modified":1518498135930},{"_id":"source/_posts/android/09-RefactorFragment/addfragment02.png","hash":"a80436f3fc1283793c4f18a686273c46815eab80","modified":1518498135938},{"_id":"source/_posts/android/09-RefactorFragment/chngimport03.png","hash":"865d2c56f60e7c3a6d2a3d505e0f1553b4cf202c","modified":1518498135945},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg02.png","hash":"65b3c313a2f489fa85c1a61cf8ac249315d87aa1","modified":1518498135954},{"_id":"source/_posts/android/10-OrganizeExperience/cdialogfrag01.png","hash":"e1a4f474a8f15dcd0d7273e6065854aec930a82e","modified":1519884613328},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage07.png","hash":"f7267a1fefaf0d3b73c22f0cae2f86984517ae99","modified":1519884613340},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage11.png","hash":"c2adb1067dddb8a1e2a34a23254050a1409a97e0","modified":1519884613345},{"_id":"source/_posts/android/10-OrganizeExperience/prevtextmode.png","hash":"035a05347d458ebc698638c318c57b50699cf9a7","modified":1519884613347},{"_id":"source/_posts/android/11-BrowseWebPage/CrWebViewFragment.png","hash":"213d1084e47e016a6678dafb152fe94267b30b7f","modified":1520327165495},{"_id":"themes/very-simple/.git/logs/refs/heads/master","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118565},{"_id":"themes/very-simple/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1510373118563},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad04.png","hash":"326204f78d4bccf1e99d4759d3da68716c94f0aa","modified":1518498135919},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad11.png","hash":"d2d151c4c1b5a0731e93fe73cbf5461729fb1e34","modified":1513219720930},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad12.png","hash":"2ee2a3f63ad9c31a199ca2f4b4c63e685e49c4fc","modified":1513219720933},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad07.png","hash":"0540988dccb9601f813128fa137b41c408575dcf","modified":1513219720919},{"_id":"source/_posts/android/04-MakeLayoutDesign/le10.png","hash":"6d171ac59859a16c3b0ede092e2c4dfc44afb184","modified":1516717138576},{"_id":"source/_posts/android/04-MakeLayoutDesign/le11.png","hash":"9d9f8e1daec85f9fd7867b2436de93d102d96315","modified":1517038993546},{"_id":"source/_posts/android/04-MakeLayoutDesign/le2.png","hash":"a0168eb31c2a3e78f3a6d255f7bc04e8dffbf1d3","modified":1513894131117},{"_id":"source/_posts/android/04-MakeLayoutDesign/le3.png","hash":"2444e132abcb7c841e2e50ee94ec31b0d17b7374","modified":1513894131119},{"_id":"source/_posts/android/04-MakeLayoutDesign/le4.png","hash":"a4992462f9368e81906c8a57c7faf0c1e1daae13","modified":1513894131122},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu03.png","hash":"a3b62dadf8dbae9bfa5b2efb99e510ccf05553aa","modified":1513894131141},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu06.png","hash":"c88da32cb4dc72df3d2ce0bddf8b9067973f7e05","modified":1517584723987},{"_id":"source/_posts/android/04-MakeLayoutDesign/le5.png","hash":"5173e0aa22215ae8b2f6ac375ca15d68b7d0e004","modified":1513894131125},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu08.png","hash":"966aba90551213d2880364ce1c53daa65de96d6f","modified":1517585466242},{"_id":"source/_posts/android/05-ButtonAction/addClickEvent01.png","hash":"62817a41a8f414ad84ebd1791554c15c87b4f3f7","modified":1518104238292},{"_id":"source/_posts/android/05-ButtonAction/setid06.png","hash":"5d6e37dcb9b477666f056443ec7e2cc31a867035","modified":1516343034419},{"_id":"source/_posts/android/06-TransitionScreen/additemclick01.png","hash":"a80bfbfac7e1a5c0fa361c3827c08d027fdb4478","modified":1517637125750},{"_id":"source/_posts/android/06-TransitionScreen/additemclick04.png","hash":"5c044d342563758454e7ab404b4b9a3f2ab040f1","modified":1517638203683},{"_id":"source/_posts/android/06-TransitionScreen/createactivity05.png","hash":"99b9e1676bfde459a40fe913a990631ee221dbf2","modified":1517121304294},{"_id":"source/_posts/android/06-TransitionScreen/createadpt01.png","hash":"cd5d454decaa762b8517407da682d414aae0b76e","modified":1517298958660},{"_id":"source/_posts/android/06-TransitionScreen/createrow03.png","hash":"e228d4c4fdc59048869420a03f0a9e1bf761d20b","modified":1517295956079},{"_id":"source/_posts/android/06-TransitionScreen/createrow08.png","hash":"31abb9c1fd184b3f29d380b4cc5c30f9a96d4b74","modified":1517297081673},{"_id":"source/_posts/android/07-AsyncProcess/includeokHttp02.png","hash":"89d3901252d5923acfe49e169bd960f404b6e2f4","modified":1516952506313},{"_id":"source/_posts/android/08-AppDataBase/addrecycler04.png","hash":"dc1629de908d18eddec4266dcf601b876ef81dd3","modified":1518104238307},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm01.png","hash":"1facfd8e81ceb912201a15c02b7e3f2bf64110a9","modified":1518104238345},{"_id":"source/_posts/android/08-AppDataBase/includeRealm01.png","hash":"9d0577bb3cffe6fe30efe503a5542ebd5eb0690c","modified":1518104238358},{"_id":"source/_posts/android/08-AppDataBase/includeRealm02.png","hash":"0f206f42b34db1b408debacf488ad946fcb55aa3","modified":1518104238364},{"_id":"source/_posts/android/08-AppDataBase/initialrealm03.png","hash":"2e4bc62d303195796fa16076404330b03f6084ea","modified":1518104238373},{"_id":"source/_posts/android/08-AppDataBase/refactvalid03.png","hash":"89c6dcc4a60e7de1912dc4842a2fd3dfcea022b9","modified":1518104238387},{"_id":"source/_posts/android/09-RefactorFragment/addDetail02.png","hash":"aba8e4ddf2affd3ef44bbde13c458a82ceafff6f","modified":1518498135926},{"_id":"source/_posts/android/09-RefactorFragment/addDetail06.png","hash":"b983e569fd6e0873039f12cde80e010358e42cba","modified":1518498135931},{"_id":"source/_posts/android/08-AppDataBase/refactvalid02.png","hash":"5bb745e29104fa5695503958671631d219f9ee12","modified":1518104238385},{"_id":"source/_posts/android/09-RefactorFragment/addfragment03.png","hash":"29a026dbeddacb7e488ae840b702640bdff053a3","modified":1518498135940},{"_id":"source/_posts/android/09-RefactorFragment/chngimport02.png","hash":"a5aec4f064027f23b7ce3231d9a296a22db7136f","modified":1518498135943},{"_id":"source/_posts/android/09-RefactorFragment/editRLfrg01.png","hash":"bc90300d40c1f67c6897cd7c045f4a6a8d5073e5","modified":1518498135950},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg03.png","hash":"578d2cfead419af40fef1be06da128d56338bc1c","modified":1518498135956},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage10.png","hash":"9196b85a8af9a939efd66518df054c8d5e19a345","modified":1519884613343},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_02.png","hash":"285eff03a474e2baeecc883923dcc1fc0818d85e","modified":1513219720836},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad09.png","hash":"20ea707b0ef11f7263a5f9cb819552ed128d72e8","modified":1513219720925},{"_id":"source/_posts/android/04-MakeLayoutDesign/le8.png","hash":"b0fbc4cc8f14018b820637d380fb931b4713286a","modified":1516716827242},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu04.png","hash":"7c57413cf7928eb6d42122a16d4524faabc2f24f","modified":1517584454125},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu07.png","hash":"9c4c1b18ea81f74104ce9b7bbc6b5597213a251a","modified":1517585277226},{"_id":"source/_posts/android/05-ButtonAction/setid03.png","hash":"98f0acc3918efe7779f96605d6004622758828bd","modified":1516719332319},{"_id":"source/_posts/android/07-AsyncProcess/timerexample.png","hash":"9a832b37e937e627e8213945edab7349a1660a9d","modified":1517461339989},{"_id":"source/_posts/android/07-AsyncProcess/reflectresult.png","hash":"d70f0070083603635b68ff9de1684317e24dbe89","modified":1517758938953},{"_id":"source/_posts/android/09-RefactorFragment/chngimport01.png","hash":"1585b7b2d4c90879776bb5e4727e4a492c926cc2","modified":1518498135941},{"_id":"themes/very-simple/.git/logs/refs/remotes/origin/HEAD","hash":"732d501a387f6dbcae4b8e89087b150b90a98e2a","modified":1510373118563},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu10.png","hash":"d4b4325b6495b3bb07c92c8b287de9cfad233ae6","modified":1513894131147},{"_id":"source/_posts/android/07-AsyncProcess/MainThreadError.png","hash":"9a5a070351828d297a3ecdb8c9cc5fe6dedd0d34","modified":1516241884308},{"_id":"source/_posts/android/07-AsyncProcess/apiresponse.png","hash":"c6079ff69ee2d0dc4bb378b4c8ec6cb87adf5e7e","modified":1517539891478},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler01.png","hash":"2d7af01bfbfc55a6c2670645ab865d6a447611b7","modified":1518104238312},{"_id":"source/_posts/android/08-AppDataBase/includeRealm03.png","hash":"e9ed115b2426c8ff2634d2f26f5d09684e1c8f3f","modified":1518104238369},{"_id":"source/_posts/android/08-AppDataBase/refactvalid01.png","hash":"e3df49adf97db80926cd15264d4585dec304795f","modified":1518104238383},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg01.png","hash":"0601e8c52815679a56a4f364d47ef892209ba4b7","modified":1518498135952},{"_id":"source/_posts/android/09-RefactorFragment/detailExample.png","hash":"3f7ace67c56584916194b7aaf1a748e28dece5c4","modified":1518498135948},{"_id":"source/_posts/android/11-BrowseWebPage/ConfirmParams.png","hash":"971cb19f651fe7c72f0752d1f5afc2b410ec5d14","modified":1520327165618},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_dl.png","hash":"7e5a0ba98efa7991d94aab2ad923468020b50617","modified":1513219720877},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad08.png","hash":"c23d8ee1ef45fdbf3a52d75f215f572b01f4af54","modified":1513219720923},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_04.png","hash":"373400bcaa15332feb1752d0732e85b4aeab7e8f","modified":1513219720849},{"_id":"source/_posts/android/08-AppDataBase/addadapter01.png","hash":"d327ccf0b3d78afdff347f57184bae58afcb434f","modified":1518104238298},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage01.png","hash":"23d6570f617166d6b56bbcf2346df44f5744f889","modified":1519884613331},{"_id":"source/_posts/android/06-TransitionScreen/createrow01.png","hash":"ff0f50b227f084f895cfb4661cfabf75b88cafaa","modified":1517294835921},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_01.png","hash":"8c81e042850bb7d1a369ed5431fc525a6175eb9c","modified":1513219720834},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage03.png","hash":"ef3ffa6dfba626e78f7475205a909f68da3e64de","modified":1519884613336},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_01.png","hash":"69225fd50b09618f313ae8308a2f5dd61ad9f849","modified":1513219720873},{"_id":"source/_posts/android/06-TransitionScreen/createactivity01_2.png","hash":"24c338aa325b706b83bad97132326e0447421393","modified":1517119420087},{"_id":"source/_posts/android/09-RefactorFragment/addfragment01.png","hash":"768573ce45f76868e664ff2c99cd0750e95d3aa2","modified":1518498135937},{"_id":"source/_posts/android/06-TransitionScreen/createactivity01_1.png","hash":"1e772d375b1b07129c1de3c31be3c3adce9c054a","modified":1517114273917},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_08.png","hash":"4ccad4b554ef47f431ab29e8df5a9eb1045b19bf","modified":1513219720867},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad01.png","hash":"cc4128fbbdcce7bb161dd260cb4be83dd9d32836","modified":1513219720903},{"_id":"themes/very-simple/.git/objects/pack/pack-deedf889bad5b5fe600d93dfdb5f6ee78f270250.pack","hash":"193fcefacc738a33c5432952ecdd9fd39afc947c","modified":1510373118550},{"_id":"source/_posts/android/06-TransitionScreen/TransitionScreen.gif","hash":"a950b477407b9640e88cfa186efdc04d925dc4c3","modified":1517123788337},{"_id":"public/android/03-StartAndroidDevelopment/index.html","hash":"51aa4d8e4be9d8f809429bd1787f5c39ab22ce9b","modified":1526217513384},{"_id":"public/android/02-AndroidConcept/index.html","hash":"2e6fe32b82512c39eaf4c3e4f2cbd9c40e89dc31","modified":1526217513385},{"_id":"public/android/01-CurrentStatus/index.html","hash":"b0226aa3e844d560d76ee668bd6fa0944e8c24d1","modified":1526217513385},{"_id":"public/android/00-EnvironmentStructure/index.html","hash":"5b8f50a30d6ebac20c91774b099f48faa33fae02","modified":1526217513385},{"_id":"public/archives/index.html","hash":"a907df0020c72fbe289cbc7931e01d077a40bb7e","modified":1526217513385},{"_id":"public/archives/page/2/index.html","hash":"fb347b62082673f72b15cdf0c86b04b3527e18a9","modified":1526217513385},{"_id":"public/archives/2017/index.html","hash":"63b17b57499df2c93ccf6bea2f78afcedc29581c","modified":1526217513385},{"_id":"public/archives/2017/page/2/index.html","hash":"71d73e3f1af30197b5293ff1f7e4c9c6fc0642b9","modified":1526217513385},{"_id":"public/archives/2017/11/index.html","hash":"6f90c9ec210f81bc4d41db41436c4f5323f3e903","modified":1526217513385},{"_id":"public/archives/2017/11/page/2/index.html","hash":"10318980343f02b6b3e5b408dd491d31c6330a32","modified":1526217513387},{"_id":"public/archives/2018/index.html","hash":"b529ea59fc9f6572e0c71e82f1c09b651822bcee","modified":1526217513387},{"_id":"public/archives/2018/03/index.html","hash":"451fb09cfd977ee8d5e56b818f6e90b5a115970a","modified":1526217513387},{"_id":"public/index.html","hash":"952e141e8235093fbf4bb2e729ee7167aa6cb7b3","modified":1526217513387},{"_id":"public/page/2/index.html","hash":"1d4ee13a35510d0bc3480847b383724f698ce3f2","modified":1526217513387},{"_id":"public/android/12-KotlinBasic/index.html","hash":"519cb0867634b599cd03366cfbfce4ff74e87627","modified":1526217513387},{"_id":"public/android/11-BrowseWebPage/index.html","hash":"9212fdd649902528bbfcba4c50d80fdf4b1bf9a6","modified":1526217513387},{"_id":"public/android/10-OrganizeExperience/index.html","hash":"da7b561b546b79392569e2fb4609550b92eeee8c","modified":1526217513387},{"_id":"public/android/09-RefactorFragment/index.html","hash":"e6ccdca0861e1e669b118f8f52f64059ebf54571","modified":1526217513387},{"_id":"public/android/08-AppDataBase/index.html","hash":"3c57d2c72d7759adc7fb2a83b010ca94a2bf5f74","modified":1526217513387},{"_id":"public/android/07-AsyncProcess/index.html","hash":"447969c0911d248c0c250b6f96a1332740ea18ef","modified":1526217513387},{"_id":"public/android/06-TransitionScreen/index.html","hash":"33348719a8f66351ca6aa46d592cffda304f0673","modified":1526217513387},{"_id":"public/android/05-ButtonAction/index.html","hash":"689a8a779cbdbcad7fdede8052b38436e25ec390","modified":1526217513388},{"_id":"public/android/04-MakeLayoutDesign/index.html","hash":"0fbecb6d7f5e67e366c9b733932f06c3ea264a38","modified":1526217513388},{"_id":"public/android/02-AndroidConcept/viewinlifecycle.png","hash":"17ab79d944b919dcf84660f3815dd008bae85154","modified":1526217513413},{"_id":"public/android/01-CurrentStatus/JapanShare.png","hash":"c7faf6b196bc40ebbfa76f895f269a3b980f4c8e","modified":1526217513413},{"_id":"public/android/01-CurrentStatus/WorldShare.png","hash":"4d95ca7d7e28e8960de945a1ae1a86908e0bf7cc","modified":1526217513413},{"_id":"public/android/11-BrowseWebPage/UpdateDetailLayout01.png","hash":"5b37549a9c8b2039f86493738678d69cb9d5d299","modified":1526217513413},{"_id":"public/android/11-BrowseWebPage/UpdateDetailLayout02.png","hash":"efa02dfb4c537b8a8ac8369928ff91996d0b06e4","modified":1526217513413},{"_id":"public/android/07-AsyncProcess/APISequence.svg","hash":"edfb39308bb1ce189ad70061eb4a5797e16b048d","modified":1526217513413},{"_id":"public/android/10-OrganizeExperience/orgpackage02.png","hash":"f97c9eca969ef4a099fec4d6270c440ee94e4cb0","modified":1526217513413},{"_id":"public/android/10-OrganizeExperience/orgpackage08.png","hash":"990b0164414cb9565ae5ff83fa5b79feeec30ecb","modified":1526217513414},{"_id":"public/android/05-ButtonAction/LoadLayout.png","hash":"ebdbed7cb162e4c20e011a3d4d77e1cdb0f539b0","modified":1526217513414},{"_id":"public/android/05-ButtonAction/importclass02.png","hash":"ad5d7095dd9632d009dc42928121a163998adbdf","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_05.png","hash":"3559fadd5cc1166fa3abb825c78b004ae175ba88","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_06.png","hash":"a161a5ddcefd9d387556d76ae7c2a095b29c60a9","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_04.png","hash":"1376f170ebde15ca41661496c7b3ea1ce95b89be","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_07.png","hash":"b67af31502be72dc8443f0b20bd572d85ffbee54","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_08.png","hash":"f9985d541aa2ee5ad9ad6e245692fdc66239c8d0","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_09.png","hash":"db4b752c540885f3443afb7ce08dbee98cc5e349","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_10.png","hash":"ac2ac0fc192205bf66c513dfea1e348e5c52ed68","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/as_i_11.png","hash":"e3391e065b228a70401fd95b58454eebeb101a43","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/j8_i_02.png","hash":"b12026c07fc7c001fbdd85f08bd5861da9c916b0","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/j8_i_03.png","hash":"dc79e7af8d0f3a8224b7b6f5f816b8ec680656d3","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/j8_i_04.png","hash":"a12e363fd0e1c0a82a7bdfec5d2f03ea4032927c","modified":1526217513414},{"_id":"public/android/00-EnvironmentStructure/j8_i_05.png","hash":"bd041b172206c4688b95790ad89c71b14c63f9c8","modified":1526217513415},{"_id":"public/android/00-EnvironmentStructure/j8_i_06.png","hash":"3f1f88d8ba5a3310387087658cd90f13ca9f615f","modified":1526217513415},{"_id":"public/android/00-EnvironmentStructure/j8_i_08.png","hash":"610c6fe8fa6523308cf75d99308dcae97d62b929","modified":1526217513415},{"_id":"public/android/06-TransitionScreen/BackScreen.png","hash":"98cae98547f7ba0598856a5a16230cdaa77cce39","modified":1526217513415},{"_id":"public/android/06-TransitionScreen/createrow04.png","hash":"22724dbecabc693f707c6421f1c094d52b02300c","modified":1526217513415},{"_id":"public/android/06-TransitionScreen/re_le03.png","hash":"4773131be56d077e74f24f3d986d319e8c1f64c9","modified":1526217513415},{"_id":"public/android/08-AppDataBase/addrecycler03.png","hash":"c8dd1f9e75a37cda796b6ad2da306412d40edde3","modified":1526217513415},{"_id":"public/android/08-AppDataBase/confirmrealm02.png","hash":"4d88b8b552c8f439112fb2b86b6a27c72baa4371","modified":1526217513415},{"_id":"public/android/08-AppDataBase/initialrealm02.png","hash":"e140d27240813d785cf2aec56f03d24f0714101d","modified":1526217513416},{"_id":"public/android/09-RefactorFragment/addDetail07.png","hash":"aa2e0b3646cdc65f3106da212430bb6a05bffcd6","modified":1526217513416},{"_id":"public/android/11-BrowseWebPage/UpdateDetailLayout03.png","hash":"674b663a2613e082d607c8b6ba87be306163eba1","modified":1526217513453},{"_id":"public/android/07-AsyncProcess/jsonparse.png","hash":"6ec110487ee1fcd1ada472a6a309b701482eac1a","modified":1526217513453},{"_id":"public/android/03-StartAndroidDevelopment/sad02.png","hash":"e34287cea93240a5ed2373529ae82e74e9a0d6bd","modified":1526217513454},{"_id":"public/android/10-OrganizeExperience/orgpackage04.png","hash":"558ffd4d807bc496177171bdad9a02fb28209faf","modified":1526217513454},{"_id":"public/android/10-OrganizeExperience/orgpackage06.png","hash":"f67a253abd8c923542faf6ecad0687780e059101","modified":1526217513454},{"_id":"public/android/10-OrganizeExperience/orgpackage05.png","hash":"17155f5ae914210b718dd3bb2e4b0abb15bd1a12","modified":1526217513454},{"_id":"public/android/10-OrganizeExperience/orgpackage09.png","hash":"9879cf4aff716383848bfde0992c778f5b1bdab3","modified":1526217513454},{"_id":"public/android/05-ButtonAction/DesignCode.png","hash":"10fea11983f13e61eaa45ac88bec8cd5d609a6b0","modified":1526217513454},{"_id":"public/android/05-ButtonAction/addClickEvent02.png","hash":"20be8df33f0b9a917c97793258216f2cd4acd28e","modified":1526217513454},{"_id":"public/android/05-ButtonAction/rerationcode01.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1526217513454},{"_id":"public/android/05-ButtonAction/setid01.png","hash":"3c409597e97cacbbd0b99c95bba7bb3acac4fa6a","modified":1526217513454},{"_id":"public/android/05-ButtonAction/setid02.png","hash":"3bcfcdaa9b3945547a3e9af1f88d859c9ee97ca8","modified":1526217513455},{"_id":"public/android/05-ButtonAction/setid07.png","hash":"f8702ae0668b3e50eec12c8885e25790fa1baa21","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/CompleteScreen.png","hash":"51cebffc093d782d9bb62e5696bb69c210c054cf","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/MakeLayoutTask.png","hash":"6532dee3726d512f8ed6227aa5070825a844d95a","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/le0.png","hash":"751c96450bc08c67e54ea57718cf8fb3072e5d02","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/runemu09.png","hash":"126cca9779e69f3db6e7fecf9fdfc2a20504327c","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/le1.png","hash":"13cf740932b7341fbd2745789cc9b9dd3cbb91e6","modified":1526217513455},{"_id":"public/android/04-MakeLayoutDesign/runemu02.png","hash":"40998d06a7f43e0a005d64e09132bd2b98825771","modified":1526217513455},{"_id":"public/android/00-EnvironmentStructure/as_s_01.png","hash":"55c83f94c94265acaeb8f830b962d55a1231f126","modified":1526217513455},{"_id":"public/android/00-EnvironmentStructure/as_s_03.png","hash":"4c16652a2b21556ae9c5215261bf6fffb9a12b1c","modified":1526217513455},{"_id":"public/android/00-EnvironmentStructure/as_s_05.png","hash":"7fcbee5d3bc9fa6158c9a562f6bf09d143779bc6","modified":1526217513456},{"_id":"public/android/00-EnvironmentStructure/as_s_02.png","hash":"5fc87dfb11c6d76702de50d8baec8d4fe7f02523","modified":1526217513456},{"_id":"public/android/00-EnvironmentStructure/as_s_06.png","hash":"30afad1a0df3a3c4d4e8667f1d78dc0fd0c87a3c","modified":1526217513456},{"_id":"public/android/00-EnvironmentStructure/j8_c_02.png","hash":"00cb5c7135bb5a5b158f988525ed965346a017ca","modified":1526217513456},{"_id":"public/android/00-EnvironmentStructure/j8_i_01.png","hash":"5eb7acda0d7dd47bd07f8f5c31d26557fb4fed35","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/additemclick03.png","hash":"d8b019602acb29f6cb1cf902aa76276b40d52d9e","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/createactivity04.png","hash":"5df11c002657e49aeb078119546e9ffa46e6fa28","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/createadpt02.png","hash":"a99418d832437e9f63dfc276393aebfc901d0471","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/createadpt03.png","hash":"3557d1fadb913632835be446e094ccb423dca37f","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/createadpt05.png","hash":"3519eae14f207ed645db92555aa8435d6314b2f8","modified":1526217513456},{"_id":"public/android/06-TransitionScreen/createrow05.png","hash":"8ba02ddb829627723264c2dc6de6a52a74116887","modified":1526217513457},{"_id":"public/android/06-TransitionScreen/createrow07.png","hash":"982060324ec250cf5890ee13bb4f7ece2a6c39bc","modified":1526217513457},{"_id":"public/android/06-TransitionScreen/createrow06.png","hash":"89014d571624cec434227324a0fda4c7c88348ac","modified":1526217513457},{"_id":"public/android/06-TransitionScreen/createrow10.png","hash":"5b23da41e92a0c495fd0077a924885a3d53907e1","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addadapter02.png","hash":"4e4f1b1d37fbba3a91cbb51bdf01ba5dd7f4a8de","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addadapter03.png","hash":"3d169577febc54de5f4fb32aa2ccb3fdd4fdaf90","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addadapter05.png","hash":"1a228b7dd408225d708454bb2cdef5d8dac485d7","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addadapter04.png","hash":"99ab51a8b6a223492ed60efb17266c2a57a1f732","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addrecycler02.png","hash":"227d6f331de012d695c0d344b5a82d06d2b5d073","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addrecycler05.png","hash":"ea7f13dfc45d8c5cfe95fc8c2ae9f0b78a43a975","modified":1526217513457},{"_id":"public/android/08-AppDataBase/addrowrecycler02.png","hash":"c4dc89bed486b46b28164483aa1c1a651cee6192","modified":1526217513458},{"_id":"public/android/08-AppDataBase/confirmrealm03.png","hash":"0e2e0443e83a9e8f61812fe7b3e0564940448718","modified":1526217513458},{"_id":"public/android/08-AppDataBase/includeRealm01-1.png","hash":"9b3d4fe5c87e2ebd3db2434e0fb99536a87925a7","modified":1526217513458},{"_id":"public/android/08-AppDataBase/initialrealm01.png","hash":"4f6759bb5422a8228a2948efd9ea789b71c5616c","modified":1526217513458},{"_id":"public/android/08-AppDataBase/initialrealm04.png","hash":"6cefa02de9c09995dbb12c563d8090deb0367a2c","modified":1526217513458},{"_id":"public/android/08-AppDataBase/initialrealm05.png","hash":"1d3d7e3ddba286c0766cf149b689668bf9f4ad72","modified":1526217513458},{"_id":"public/android/08-AppDataBase/realmtable01.png","hash":"e0e5bb3ccc842c304df196eefba3b568b3b55831","modified":1526217513458},{"_id":"public/android/08-AppDataBase/realmtable02.png","hash":"476e6e08b06fe0a6ae5a2c59c9bf542e05b45cec","modified":1526217513458},{"_id":"public/android/08-AppDataBase/realmtable03.png","hash":"928cdb4d2ca01ae64b4c3c5195085abfc68ee1db","modified":1526217513458},{"_id":"public/android/09-RefactorFragment/addDetail08.png","hash":"0cd87197d4acec63a413825d70a088d03dc84e01","modified":1526217513458},{"_id":"public/css/normalize.css","hash":"d0fbef3dd405f26a5fdc896ca1f7875901782c6f","modified":1526217513472},{"_id":"public/css/highlight.css","hash":"007a1d271969e76783f783d4e3b84f76ebdec69d","modified":1526217513472},{"_id":"public/css/very-simple.css","hash":"7b1dd209a17e58382e8ca4b6700b5f94381a583d","modified":1526217513473},{"_id":"public/android/00-EnvironmentStructure/as_i_03.png","hash":"162bf284406eb0451abf61648529556492ff73dc","modified":1526217513473},{"_id":"public/android/00-EnvironmentStructure/as_s_07.png","hash":"00e956a773d6ee0f7e9fd70c9ac97402654b4e32","modified":1526217513473},{"_id":"public/android/03-StartAndroidDevelopment/sad03.png","hash":"242e8f0149ea15a940e982b108bd29eb4726a7d3","modified":1526217513473},{"_id":"public/android/00-EnvironmentStructure/j8_i_07.png","hash":"0a2cd6a444c3c589eab112c2c8948d5116fead4c","modified":1526217513473},{"_id":"public/android/03-StartAndroidDevelopment/sad06.png","hash":"2f6ea65d8aa8fdaf1d6db494ba59354d44ec275f","modified":1526217513473},{"_id":"public/android/03-StartAndroidDevelopment/sad05.png","hash":"36742f6ef6922d97f5f0eccc085b2137bacc32e5","modified":1526217513473},{"_id":"public/android/03-StartAndroidDevelopment/sad10.png","hash":"f8ac2bcb263b3dc648288019c741929da7e9045a","modified":1526217513473},{"_id":"public/android/04-MakeLayoutDesign/le12.png","hash":"735ab631c04fdcb41c02e2f57279b8e7b9a3415e","modified":1526217513473},{"_id":"public/android/04-MakeLayoutDesign/le6.png","hash":"8d77bfe0125c1d8738fe44dec27a85cf9aa378c2","modified":1526217513473},{"_id":"public/android/04-MakeLayoutDesign/le7.png","hash":"74e9ec8623248d6d1d4316402f8304f46f016057","modified":1526217513473},{"_id":"public/android/04-MakeLayoutDesign/le9.png","hash":"b0781588b9fd19c1c2593119f11b6378516b3595","modified":1526217513474},{"_id":"public/android/04-MakeLayoutDesign/runemu05.png","hash":"d3a0fd902ff44813f559e2f96bda0987cf3211a7","modified":1526217513474},{"_id":"public/android/04-MakeLayoutDesign/runemu11.png","hash":"110fe42869410d4911960bc6159e69a0bc5e2999","modified":1526217513474},{"_id":"public/android/04-MakeLayoutDesign/runemu01.png","hash":"4bcb4adebf432211d3263f8e28bbd460b6446203","modified":1526217513474},{"_id":"public/android/05-ButtonAction/importclass01.png","hash":"71dfec5538f3e7b3bffd5b9951cb57c32fe05490","modified":1526217513474},{"_id":"public/android/05-ButtonAction/setid04.png","hash":"daee38d424ff03c8de429bf27175b336dbde0d66","modified":1526217513474},{"_id":"public/android/05-ButtonAction/setid05.png","hash":"6affea06d209e1c9e4f6f24fb316fa1ee92ef464","modified":1526217513474},{"_id":"public/android/05-ButtonAction/setid08.png","hash":"88fe73310965fd030285f50a495a43aad5202664","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/additemclick02.png","hash":"165ae138f075e931951fa5b887b52fd42c6313be","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createactivity02.png","hash":"b739e9e33546b5d14fb30e82b79b57ca14780db8","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createactivity03.png","hash":"c55d9eeb3c4c5f46f2a73932a7c2749da36fc6a2","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createadpt04.png","hash":"8c9eaaa4d93cc4ca77ce6f1eb6f1697c8d2b9d5d","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createadpt06.png","hash":"8b3fec6578f0a290e3648f5ce484ae7d1d9ed838","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createrow02.png","hash":"68886fbc528fea1c06b519569e22b386132ece11","modified":1526217513475},{"_id":"public/android/06-TransitionScreen/createrow09.png","hash":"cc6709b68cb185d943908681fdde0aa3eb039f49","modified":1526217513476},{"_id":"public/android/06-TransitionScreen/re_le02.png","hash":"1365644292afbea8f5c4f1642a535ae2ea1a805d","modified":1526217513476},{"_id":"public/android/06-TransitionScreen/re_le01.png","hash":"a05b5daf143bc806f354c8a31653078e9d4d6f71","modified":1526217513476},{"_id":"public/android/06-TransitionScreen/re_le00.png","hash":"5f297bd6a6c7063b87a6148e9abf9a9864550143","modified":1526217513476},{"_id":"public/android/06-TransitionScreen/scopedetail.png","hash":"3a9020301d7e09791a3dedbb4abbd91097368ba9","modified":1526217513476},{"_id":"public/android/07-AsyncProcess/AsyncTimerToast.png","hash":"3cbc91dcac923f121b8ad2c1f7265829f2f5f3e6","modified":1526217513477},{"_id":"public/android/06-TransitionScreen/custom_list00.png","hash":"eaf2e081f337abad8c6b73be57bc73e17e95b5e4","modified":1526217513477},{"_id":"public/android/07-AsyncProcess/includeokHttp01.png","hash":"99d36ae20c967afee59e3f45b8ac8b1c080deb88","modified":1526217513477},{"_id":"public/android/08-AppDataBase/addrecycler01.png","hash":"2358f8163acc8a4070602c56668e65c1a0f6672c","modified":1526217513477},{"_id":"public/android/08-AppDataBase/addadapter06.png","hash":"cf4400952c333937deac2c47ad4d8ae490131a8a","modified":1526217513477},{"_id":"public/android/08-AppDataBase/addrowrecycler03.png","hash":"63c6bc16b429e8f4cce22a3d88a8631c6c853f8f","modified":1526217513477},{"_id":"public/android/08-AppDataBase/addrowrecycler04.png","hash":"d0c15767ff805e7e30101140f3affe5b05c81bd7","modified":1526217513478},{"_id":"public/android/08-AppDataBase/crehistactivity.png","hash":"6900ce8e2a0e6d637aabfe68c4c8b28581de586c","modified":1526217513478},{"_id":"public/android/08-AppDataBase/includeRealm02-1.png","hash":"d22fb31b5926571df65d8d245220db454786e025","modified":1526217513478},{"_id":"public/android/10-OrganizeExperience/cdialogfrag01.png","hash":"e1a4f474a8f15dcd0d7273e6065854aec930a82e","modified":1526217513478},{"_id":"public/android/10-OrganizeExperience/orgpackage11.png","hash":"c2adb1067dddb8a1e2a34a23254050a1409a97e0","modified":1526217513478},{"_id":"public/android/10-OrganizeExperience/orgpackage07.png","hash":"f7267a1fefaf0d3b73c22f0cae2f86984517ae99","modified":1526217513478},{"_id":"public/android/10-OrganizeExperience/prevtextmode.png","hash":"035a05347d458ebc698638c318c57b50699cf9a7","modified":1526217513479},{"_id":"public/android/11-BrowseWebPage/CrWebViewFragment.png","hash":"213d1084e47e016a6678dafb152fe94267b30b7f","modified":1526217513479},{"_id":"public/android/09-RefactorFragment/addDetail01.png","hash":"1d32b46d45c8daa2d98559b9f9f15826282ac506","modified":1526217513479},{"_id":"public/android/09-RefactorFragment/addDetail03.png","hash":"59aca2d718738ed38e34d332a6bd3c6abe517675","modified":1526217513479},{"_id":"public/android/09-RefactorFragment/addDetail04.png","hash":"74fe215dbbc32ecad1b7b102cd19354974a7970a","modified":1526217513479},{"_id":"public/android/09-RefactorFragment/addDetail05.png","hash":"68eb135ae1d4cfd5cf5b70ff40d567dc8dda15a5","modified":1526217513480},{"_id":"public/android/09-RefactorFragment/addfragment02.png","hash":"a80436f3fc1283793c4f18a686273c46815eab80","modified":1526217513480},{"_id":"public/android/09-RefactorFragment/chngimport03.png","hash":"865d2c56f60e7c3a6d2a3d505e0f1553b4cf202c","modified":1526217513480},{"_id":"public/android/09-RefactorFragment/migratefrg02.png","hash":"65b3c313a2f489fa85c1a61cf8ac249315d87aa1","modified":1526217513480},{"_id":"public/android/03-StartAndroidDevelopment/sad04.png","hash":"326204f78d4bccf1e99d4759d3da68716c94f0aa","modified":1526217513489},{"_id":"public/android/03-StartAndroidDevelopment/sad11.png","hash":"d2d151c4c1b5a0731e93fe73cbf5461729fb1e34","modified":1526217513489},{"_id":"public/android/03-StartAndroidDevelopment/sad12.png","hash":"2ee2a3f63ad9c31a199ca2f4b4c63e685e49c4fc","modified":1526217513489},{"_id":"public/android/04-MakeLayoutDesign/le10.png","hash":"6d171ac59859a16c3b0ede092e2c4dfc44afb184","modified":1526217513490},{"_id":"public/android/03-StartAndroidDevelopment/sad07.png","hash":"0540988dccb9601f813128fa137b41c408575dcf","modified":1526217513490},{"_id":"public/android/04-MakeLayoutDesign/le2.png","hash":"a0168eb31c2a3e78f3a6d255f7bc04e8dffbf1d3","modified":1526217513490},{"_id":"public/android/04-MakeLayoutDesign/le11.png","hash":"9d9f8e1daec85f9fd7867b2436de93d102d96315","modified":1526217513490},{"_id":"public/android/04-MakeLayoutDesign/le3.png","hash":"2444e132abcb7c841e2e50ee94ec31b0d17b7374","modified":1526217513490},{"_id":"public/android/04-MakeLayoutDesign/le4.png","hash":"a4992462f9368e81906c8a57c7faf0c1e1daae13","modified":1526217513491},{"_id":"public/android/04-MakeLayoutDesign/runemu03.png","hash":"a3b62dadf8dbae9bfa5b2efb99e510ccf05553aa","modified":1526217513491},{"_id":"public/android/04-MakeLayoutDesign/runemu06.png","hash":"c88da32cb4dc72df3d2ce0bddf8b9067973f7e05","modified":1526217513491},{"_id":"public/android/04-MakeLayoutDesign/le5.png","hash":"5173e0aa22215ae8b2f6ac375ca15d68b7d0e004","modified":1526217513491},{"_id":"public/android/04-MakeLayoutDesign/runemu08.png","hash":"966aba90551213d2880364ce1c53daa65de96d6f","modified":1526217513492},{"_id":"public/android/05-ButtonAction/addClickEvent01.png","hash":"62817a41a8f414ad84ebd1791554c15c87b4f3f7","modified":1526217513492},{"_id":"public/android/05-ButtonAction/setid06.png","hash":"5d6e37dcb9b477666f056443ec7e2cc31a867035","modified":1526217513492},{"_id":"public/android/06-TransitionScreen/additemclick01.png","hash":"a80bfbfac7e1a5c0fa361c3827c08d027fdb4478","modified":1526217513493},{"_id":"public/android/06-TransitionScreen/additemclick04.png","hash":"5c044d342563758454e7ab404b4b9a3f2ab040f1","modified":1526217513493},{"_id":"public/android/06-TransitionScreen/createactivity05.png","hash":"99b9e1676bfde459a40fe913a990631ee221dbf2","modified":1526217513493},{"_id":"public/android/06-TransitionScreen/createadpt01.png","hash":"cd5d454decaa762b8517407da682d414aae0b76e","modified":1526217513494},{"_id":"public/android/06-TransitionScreen/createrow08.png","hash":"31abb9c1fd184b3f29d380b4cc5c30f9a96d4b74","modified":1526217513494},{"_id":"public/android/06-TransitionScreen/createrow03.png","hash":"e228d4c4fdc59048869420a03f0a9e1bf761d20b","modified":1526217513494},{"_id":"public/android/07-AsyncProcess/includeokHttp02.png","hash":"89d3901252d5923acfe49e169bd960f404b6e2f4","modified":1526217513495},{"_id":"public/android/08-AppDataBase/confirmrealm01.png","hash":"1facfd8e81ceb912201a15c02b7e3f2bf64110a9","modified":1526217513495},{"_id":"public/android/08-AppDataBase/addrecycler04.png","hash":"dc1629de908d18eddec4266dcf601b876ef81dd3","modified":1526217513495},{"_id":"public/android/08-AppDataBase/includeRealm01.png","hash":"9d0577bb3cffe6fe30efe503a5542ebd5eb0690c","modified":1526217513495},{"_id":"public/android/08-AppDataBase/includeRealm02.png","hash":"0f206f42b34db1b408debacf488ad946fcb55aa3","modified":1526217513495},{"_id":"public/android/08-AppDataBase/initialrealm03.png","hash":"2e4bc62d303195796fa16076404330b03f6084ea","modified":1526217513496},{"_id":"public/android/08-AppDataBase/refactvalid03.png","hash":"89c6dcc4a60e7de1912dc4842a2fd3dfcea022b9","modified":1526217513496},{"_id":"public/android/09-RefactorFragment/addDetail02.png","hash":"aba8e4ddf2affd3ef44bbde13c458a82ceafff6f","modified":1526217513496},{"_id":"public/android/09-RefactorFragment/addDetail06.png","hash":"b983e569fd6e0873039f12cde80e010358e42cba","modified":1526217513496},{"_id":"public/android/08-AppDataBase/refactvalid02.png","hash":"5bb745e29104fa5695503958671631d219f9ee12","modified":1526217513496},{"_id":"public/android/09-RefactorFragment/chngimport02.png","hash":"a5aec4f064027f23b7ce3231d9a296a22db7136f","modified":1526217513497},{"_id":"public/android/09-RefactorFragment/addfragment03.png","hash":"29a026dbeddacb7e488ae840b702640bdff053a3","modified":1526217513497},{"_id":"public/android/09-RefactorFragment/editRLfrg01.png","hash":"bc90300d40c1f67c6897cd7c045f4a6a8d5073e5","modified":1526217513497},{"_id":"public/android/10-OrganizeExperience/orgpackage10.png","hash":"9196b85a8af9a939efd66518df054c8d5e19a345","modified":1526217513497},{"_id":"public/android/09-RefactorFragment/migratefrg03.png","hash":"578d2cfead419af40fef1be06da128d56338bc1c","modified":1526217513498},{"_id":"public/android/00-EnvironmentStructure/as_i_02.png","hash":"285eff03a474e2baeecc883923dcc1fc0818d85e","modified":1526217513515},{"_id":"public/android/03-StartAndroidDevelopment/sad09.png","hash":"20ea707b0ef11f7263a5f9cb819552ed128d72e8","modified":1526217513515},{"_id":"public/android/04-MakeLayoutDesign/le8.png","hash":"b0fbc4cc8f14018b820637d380fb931b4713286a","modified":1526217513516},{"_id":"public/android/04-MakeLayoutDesign/runemu04.png","hash":"7c57413cf7928eb6d42122a16d4524faabc2f24f","modified":1526217513516},{"_id":"public/android/04-MakeLayoutDesign/runemu07.png","hash":"9c4c1b18ea81f74104ce9b7bbc6b5597213a251a","modified":1526217513516},{"_id":"public/android/05-ButtonAction/setid03.png","hash":"98f0acc3918efe7779f96605d6004622758828bd","modified":1526217513516},{"_id":"public/android/07-AsyncProcess/timerexample.png","hash":"9a832b37e937e627e8213945edab7349a1660a9d","modified":1526217513516},{"_id":"public/android/07-AsyncProcess/reflectresult.png","hash":"d70f0070083603635b68ff9de1684317e24dbe89","modified":1526217513517},{"_id":"public/android/09-RefactorFragment/chngimport01.png","hash":"1585b7b2d4c90879776bb5e4727e4a492c926cc2","modified":1526217513517},{"_id":"public/android/11-BrowseWebPage/ConfirmParams.png","hash":"971cb19f651fe7c72f0752d1f5afc2b410ec5d14","modified":1526217513538},{"_id":"public/android/07-AsyncProcess/MainThreadError.png","hash":"9a5a070351828d297a3ecdb8c9cc5fe6dedd0d34","modified":1526217513539},{"_id":"public/android/04-MakeLayoutDesign/runemu10.png","hash":"d4b4325b6495b3bb07c92c8b287de9cfad233ae6","modified":1526217513539},{"_id":"public/android/07-AsyncProcess/apiresponse.png","hash":"c6079ff69ee2d0dc4bb378b4c8ec6cb87adf5e7e","modified":1526217513540},{"_id":"public/android/08-AppDataBase/addrowrecycler01.png","hash":"2d7af01bfbfc55a6c2670645ab865d6a447611b7","modified":1526217513541},{"_id":"public/android/08-AppDataBase/includeRealm03.png","hash":"e9ed115b2426c8ff2634d2f26f5d09684e1c8f3f","modified":1526217513541},{"_id":"public/android/08-AppDataBase/refactvalid01.png","hash":"e3df49adf97db80926cd15264d4585dec304795f","modified":1526217513541},{"_id":"public/android/09-RefactorFragment/migratefrg01.png","hash":"0601e8c52815679a56a4f364d47ef892209ba4b7","modified":1526217513542},{"_id":"public/android/09-RefactorFragment/detailExample.png","hash":"3f7ace67c56584916194b7aaf1a748e28dece5c4","modified":1526217513542},{"_id":"public/android/03-StartAndroidDevelopment/sad08.png","hash":"c23d8ee1ef45fdbf3a52d75f215f572b01f4af54","modified":1526217513546},{"_id":"public/android/00-EnvironmentStructure/j8_dl.png","hash":"7e5a0ba98efa7991d94aab2ad923468020b50617","modified":1526217513546},{"_id":"public/android/10-OrganizeExperience/orgpackage01.png","hash":"23d6570f617166d6b56bbcf2346df44f5744f889","modified":1526217513568},{"_id":"public/android/00-EnvironmentStructure/as_s_04.png","hash":"373400bcaa15332feb1752d0732e85b4aeab7e8f","modified":1526217513569},{"_id":"public/android/08-AppDataBase/addadapter01.png","hash":"d327ccf0b3d78afdff347f57184bae58afcb434f","modified":1526217513592},{"_id":"public/android/06-TransitionScreen/createrow01.png","hash":"ff0f50b227f084f895cfb4661cfabf75b88cafaa","modified":1526217513603},{"_id":"public/android/10-OrganizeExperience/orgpackage03.png","hash":"ef3ffa6dfba626e78f7475205a909f68da3e64de","modified":1526217513609},{"_id":"public/android/00-EnvironmentStructure/as_i_01.png","hash":"8c81e042850bb7d1a369ed5431fc525a6175eb9c","modified":1526217513609},{"_id":"public/android/00-EnvironmentStructure/j8_c_01.png","hash":"69225fd50b09618f313ae8308a2f5dd61ad9f849","modified":1526217513615},{"_id":"public/android/06-TransitionScreen/createactivity01_2.png","hash":"24c338aa325b706b83bad97132326e0447421393","modified":1526217513615},{"_id":"public/android/09-RefactorFragment/addfragment01.png","hash":"768573ce45f76868e664ff2c99cd0750e95d3aa2","modified":1526217513616},{"_id":"public/android/06-TransitionScreen/createactivity01_1.png","hash":"1e772d375b1b07129c1de3c31be3c3adce9c054a","modified":1526217513620},{"_id":"public/android/00-EnvironmentStructure/as_s_08.png","hash":"4ccad4b554ef47f431ab29e8df5a9eb1045b19bf","modified":1526217513625},{"_id":"public/android/03-StartAndroidDevelopment/sad01.png","hash":"cc4128fbbdcce7bb161dd260cb4be83dd9d32836","modified":1526217513627},{"_id":"public/android/06-TransitionScreen/TransitionScreen.gif","hash":"a950b477407b9640e88cfa186efdc04d925dc4c3","modified":1526217513637}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android アプリ開発の環境構築","date":"2017-10-31T15:00:00.000Z","_content":"Androidアプリの開発を行うための環境構築をおこないます。\n\n<!-- toc -->\n\nWindows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。\n\n# 環境構築(Windows PC)\nAndroid アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。\nこれ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。\n* java(JDK)\n* Android Studio\n\n## java(JDK)\n\nまずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、\njava(JDK)をインストールします。\n\n### JDKのダウンロード\nインストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。\n\n**java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います**\n\n下記リンクをクリックしJDKダウンロードページにアクセスします。\n[JDK8 ダウンロードページ](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n※ 資料作成時の最新版**java 8u152**バージョンのダウンロード手順で記載していきます。\n\n下図の通り```Java SE Development Kit 8u152```の項目から\n```Accept License Agreement```にチェックを入れ、```Windows x64```のDownload列のリンクをクリックしてexeファイルをダウンロードします。\n<img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\">\n\n### JDKのインストール\nダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。\n\n1. ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。\n<img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\">\n2. 確認ダイアログが表示された場合は、```はい```をクリックします。\n<img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n3. JDKのインストール開始画面が表示されたら```次(N) >```をクリックし、その後も画面に従いインストールを進めます。\n<img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n4. **開発ツール**が選択されていることを確認し、```次(N) >```をクリックします\n<img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n5. JDKの保存先を設定できます、変更は不要なので```次(N) >```をクリックします\n<img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n6. インストールが始まります、完了して画面が変わるのを待ちます\n<img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n7. インストールの完了画面が表示されたら```閉じる(C)```をクリックします\n<img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\">\n\n以上でJDKのインストールが完了です。\n\n\n---\n\n### JDKのインストール 確認\n次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。\n\n1. Windows ホーム画面の左下にある```検索欄```に```cmd```と入力し**コマンドプロンプト**をクリックし起動します。\n<img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\">\n2. コマンドプロンプトに```java -version```と入力しエンターキーを押します。\n<img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\">\n\n以上でjava(JDK)のインストールの確認ができました\n\n---\n\n## Android Studio\n最後にAndroid Studioの環境構築を行います。\nAndroid Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。\n\n[Android Studio ダウンロードページ](https://developer.android.com/studio/index.html?hl=ja)\n※ 資料作成時の最新版は Android Studio 3.0.1\n\n1. **Android Studio Androidの公式 IDE**下にある```Android Studio 3.0.1 FOR WINDOWS...```のボタンをクリックしexeファイルをダウンロードします。\n<img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n2. ダウンロードの確認画面が表示されたら**利用規約**を確認の上、チェックをクリックし、```ANDROID STUDIO FOR WINDOWS ダウンロード```をクリックします。\n<img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n3. ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。\n<img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n4. 確認ダイアログが表示された場合は```はい```をクリックします\n<img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n5. インストーラの起動画面が表示されたら```Next >```をクリックします\n<img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n6. インストールするコンポーネント設定が表示されたら\"Android Virtual Device\"がチェックされていることを確認し、```Next >```をクリックします\n<img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n7. Android Studioの保存先を設定します、変更の必要がなければ```Next >```をクリックりします\n<img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n8. ```Install```をクリックします\n<img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n9. インストールの完了を待ちます\n<img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n10. インストールが終わったら```Next >```をクリックします\n<img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n11. ```Finish```をクリックすると、Android Studioが起動します。\n引き続き、Android Studioの初回セットアップを行います\n<img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n12. Android Studioが起動しAndroid SDK Componentのインストールが開始されます\n<img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n13. Welcom画面が表示されたら```Next```をクリック\n<img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n14. Install Type画面では**Standard**が選択されていることを確認し```Next```をクリックします\n<img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n15. Android Studioのテーマ、色合いを好みで選択し、```Next```をクリックします\n<img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n16. 確認画面が表示されたら```Finish```をクリックします\n<img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n17. Androidアプリの開発に必要なComponentのダウンロードを待ちます\n<img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n18. ダウンロードが終了したら、```Finish```をクリックします\n<img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n19. Android Studioの起動画面が表示されたら完了です\n<img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\">\n\n以上でAndroid Studioのインストール、セットアップ作業は完了です。\nAndroidアプリの開発環境が整いましたので早速開発に入っていきましょう！\n\n# 環境構築(Mac PC)\n\n## java(JDK)のインストール\n\n## Android Studioのインストール\n\n","source":"_posts/android/00-EnvironmentStructure.md","raw":"---\ntitle: Android アプリ開発の環境構築\ndate: 2017-11-01\n---\nAndroidアプリの開発を行うための環境構築をおこないます。\n\n<!-- toc -->\n\nWindows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。\n\n# 環境構築(Windows PC)\nAndroid アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。\nこれ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。\n* java(JDK)\n* Android Studio\n\n## java(JDK)\n\nまずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、\njava(JDK)をインストールします。\n\n### JDKのダウンロード\nインストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。\n\n**java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います**\n\n下記リンクをクリックしJDKダウンロードページにアクセスします。\n[JDK8 ダウンロードページ](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n※ 資料作成時の最新版**java 8u152**バージョンのダウンロード手順で記載していきます。\n\n下図の通り```Java SE Development Kit 8u152```の項目から\n```Accept License Agreement```にチェックを入れ、```Windows x64```のDownload列のリンクをクリックしてexeファイルをダウンロードします。\n<img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\">\n\n### JDKのインストール\nダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。\n\n1. ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。\n<img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\">\n2. 確認ダイアログが表示された場合は、```はい```をクリックします。\n<img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n3. JDKのインストール開始画面が表示されたら```次(N) >```をクリックし、その後も画面に従いインストールを進めます。\n<img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n4. **開発ツール**が選択されていることを確認し、```次(N) >```をクリックします\n<img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n5. JDKの保存先を設定できます、変更は不要なので```次(N) >```をクリックします\n<img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n6. インストールが始まります、完了して画面が変わるのを待ちます\n<img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\">\n7. インストールの完了画面が表示されたら```閉じる(C)```をクリックします\n<img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\">\n\n以上でJDKのインストールが完了です。\n\n\n---\n\n### JDKのインストール 確認\n次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。\n\n1. Windows ホーム画面の左下にある```検索欄```に```cmd```と入力し**コマンドプロンプト**をクリックし起動します。\n<img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\">\n2. コマンドプロンプトに```java -version```と入力しエンターキーを押します。\n<img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\">\n\n以上でjava(JDK)のインストールの確認ができました\n\n---\n\n## Android Studio\n最後にAndroid Studioの環境構築を行います。\nAndroid Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。\n\n[Android Studio ダウンロードページ](https://developer.android.com/studio/index.html?hl=ja)\n※ 資料作成時の最新版は Android Studio 3.0.1\n\n1. **Android Studio Androidの公式 IDE**下にある```Android Studio 3.0.1 FOR WINDOWS...```のボタンをクリックしexeファイルをダウンロードします。\n<img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n2. ダウンロードの確認画面が表示されたら**利用規約**を確認の上、チェックをクリックし、```ANDROID STUDIO FOR WINDOWS ダウンロード```をクリックします。\n<img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n3. ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。\n<img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\">\n4. 確認ダイアログが表示された場合は```はい```をクリックします\n<img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n5. インストーラの起動画面が表示されたら```Next >```をクリックします\n<img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n6. インストールするコンポーネント設定が表示されたら\"Android Virtual Device\"がチェックされていることを確認し、```Next >```をクリックします\n<img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n7. Android Studioの保存先を設定します、変更の必要がなければ```Next >```をクリックりします\n<img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n8. ```Install```をクリックします\n<img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n9. インストールの完了を待ちます\n<img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n10. インストールが終わったら```Next >```をクリックします\n<img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n11. ```Finish```をクリックすると、Android Studioが起動します。\n引き続き、Android Studioの初回セットアップを行います\n<img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\">\n12. Android Studioが起動しAndroid SDK Componentのインストールが開始されます\n<img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n13. Welcom画面が表示されたら```Next```をクリック\n<img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n14. Install Type画面では**Standard**が選択されていることを確認し```Next```をクリックします\n<img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n15. Android Studioのテーマ、色合いを好みで選択し、```Next```をクリックします\n<img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n16. 確認画面が表示されたら```Finish```をクリックします\n<img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n17. Androidアプリの開発に必要なComponentのダウンロードを待ちます\n<img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n18. ダウンロードが終了したら、```Finish```をクリックします\n<img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\">\n19. Android Studioの起動画面が表示されたら完了です\n<img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\">\n\n以上でAndroid Studioのインストール、セットアップ作業は完了です。\nAndroidアプリの開発環境が整いましたので早速開発に入っていきましょう！\n\n# 環境構築(Mac PC)\n\n## java(JDK)のインストール\n\n## Android Studioのインストール\n\n","slug":"00-EnvironmentStructure","published":1,"updated":"2017-12-21T22:08:51.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0pr00003l61pbskqwj9","content":"<p>Androidアプリの開発を行うための環境構築をおこないます。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#環境構築windows-pc\">環境構築(Windows PC)</a><ul>\n<li><a href=\"#javajdk\">java(JDK)</a><ul>\n<li><a href=\"#jdkのダウンロード\">JDKのダウンロード</a></li>\n<li><a href=\"#jdkのインストール\">JDKのインストール</a></li>\n<li><a href=\"#jdkのインストール-確認\">JDKのインストール 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#android-studio\">Android Studio</a></li>\n</ul>\n</li>\n<li><a href=\"#環境構築mac-pc\">環境構築(Mac PC)</a><ul>\n<li><a href=\"#javajdkのインストール\">java(JDK)のインストール</a></li>\n<li><a href=\"#android-studioのインストール\">Android Studioのインストール</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>Windows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。</p>\n<h1><span id=\"環境構築windows-pc\">環境構築(Windows PC)</span></h1><p>Android アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。<br>これ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。</p>\n<ul>\n<li>java(JDK)</li>\n<li>Android Studio</li>\n</ul>\n<h2><span id=\"javajdk\">java(JDK)</span></h2><p>まずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、<br>java(JDK)をインストールします。</p>\n<h3><span id=\"jdkのダウンロード\">JDKのダウンロード</span></h3><p>インストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。</p>\n<p><strong>java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います</strong></p>\n<p>下記リンクをクリックしJDKダウンロードページにアクセスします。<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK8 ダウンロードページ</a><br>※ 資料作成時の最新版<strong>java 8u152</strong>バージョンのダウンロード手順で記載していきます。</p>\n<p>下図の通り<code>Java SE Development Kit 8u152</code>の項目から<br><code>Accept License Agreement</code>にチェックを入れ、<code>Windows x64</code>のDownload列のリンクをクリックしてexeファイルをダウンロードします。<br><img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\"></p>\n<h3><span id=\"jdkのインストール\">JDKのインストール</span></h3><p>ダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。</p>\n<ol>\n<li>ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。<br><img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は、<code>はい</code>をクリックします。<br><img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKのインストール開始画面が表示されたら<code>次(N) &gt;</code>をクリックし、その後も画面に従いインストールを進めます。<br><img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li><strong>開発ツール</strong>が選択されていることを確認し、<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKの保存先を設定できます、変更は不要なので<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールが始まります、完了して画面が変わるのを待ちます<br><img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールの完了画面が表示されたら<code>閉じる(C)</code>をクリックします<br><img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\"></li>\n</ol>\n<p>以上でJDKのインストールが完了です。</p>\n<hr>\n<h3><span id=\"jdkのインストール-確認\">JDKのインストール 確認</span></h3><p>次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。</p>\n<ol>\n<li>Windows ホーム画面の左下にある<code>検索欄</code>に<code>cmd</code>と入力し<strong>コマンドプロンプト</strong>をクリックし起動します。<br><img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\"></li>\n<li>コマンドプロンプトに<code>java -version</code>と入力しエンターキーを押します。<br><img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\"></li>\n</ol>\n<p>以上でjava(JDK)のインストールの確認ができました</p>\n<hr>\n<h2><span id=\"android-studio\">Android Studio</span></h2><p>最後にAndroid Studioの環境構築を行います。<br>Android Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。</p>\n<p><a href=\"https://developer.android.com/studio/index.html?hl=ja\" target=\"_blank\" rel=\"external\">Android Studio ダウンロードページ</a><br>※ 資料作成時の最新版は Android Studio 3.0.1</p>\n<ol>\n<li><strong>Android Studio Androidの公式 IDE</strong>下にある<code>Android Studio 3.0.1 FOR WINDOWS...</code>のボタンをクリックしexeファイルをダウンロードします。<br><img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードの確認画面が表示されたら<strong>利用規約</strong>を確認の上、チェックをクリックし、<code>ANDROID STUDIO FOR WINDOWS ダウンロード</code>をクリックします。<br><img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。<br><img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は<code>はい</code>をクリックします<br><img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストーラの起動画面が表示されたら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールするコンポーネント設定が表示されたら”Android Virtual Device”がチェックされていることを確認し、<code>Next &gt;</code>をクリックします<br><img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioの保存先を設定します、変更の必要がなければ<code>Next &gt;</code>をクリックりします<br><img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Install</code>をクリックします<br><img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールの完了を待ちます<br><img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールが終わったら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Finish</code>をクリックすると、Android Studioが起動します。<br>引き続き、Android Studioの初回セットアップを行います<br><img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioが起動しAndroid SDK Componentのインストールが開始されます<br><img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Welcom画面が表示されたら<code>Next</code>をクリック<br><img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Install Type画面では<strong>Standard</strong>が選択されていることを確認し<code>Next</code>をクリックします<br><img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioのテーマ、色合いを好みで選択し、<code>Next</code>をクリックします<br><img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>確認画面が表示されたら<code>Finish</code>をクリックします<br><img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Androidアプリの開発に必要なComponentのダウンロードを待ちます<br><img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>ダウンロードが終了したら、<code>Finish</code>をクリックします<br><img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioの起動画面が表示されたら完了です<br><img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\"></li>\n</ol>\n<p>以上でAndroid Studioのインストール、セットアップ作業は完了です。<br>Androidアプリの開発環境が整いましたので早速開発に入っていきましょう！</p>\n<h1><span id=\"環境構築mac-pc\">環境構築(Mac PC)</span></h1><h2><span id=\"javajdkのインストール\">java(JDK)のインストール</span></h2><h2><span id=\"android-studioのインストール\">Android Studioのインストール</span></h2>","site":{"data":{}},"excerpt":"","more":"<p>Androidアプリの開発を行うための環境構築をおこないます。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#環境構築windows-pc\">環境構築(Windows PC)</a><ul>\n<li><a href=\"#javajdk\">java(JDK)</a><ul>\n<li><a href=\"#jdkのダウンロード\">JDKのダウンロード</a></li>\n<li><a href=\"#jdkのインストール\">JDKのインストール</a></li>\n<li><a href=\"#jdkのインストール-確認\">JDKのインストール 確認</a></li>\n</ul>\n</li>\n<li><a href=\"#android-studio\">Android Studio</a></li>\n</ul>\n</li>\n<li><a href=\"#環境構築mac-pc\">環境構築(Mac PC)</a><ul>\n<li><a href=\"#javajdkのインストール\">java(JDK)のインストール</a></li>\n<li><a href=\"#android-studioのインストール\">Android Studioのインストール</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p>Windows / Mac の各PCごとに手順が違うためそれぞれの環境構築手順を以下に記述します。</p>\n<h1 id=\"環境構築-Windows-PC\"><a href=\"#環境構築-Windows-PC\" class=\"headerlink\" title=\"環境構築(Windows PC)\"></a>環境構築(Windows PC)</h1><p>Android アプリの開発を始めるには最低限２つソフトウェアのインストールと設定を行う必要があります。<br>これ以降にwindows OS環境でのAndroid アプリ開発をおこなく準備作業を記載します。</p>\n<ul>\n<li>java(JDK)</li>\n<li>Android Studio</li>\n</ul>\n<h2 id=\"java-JDK\"><a href=\"#java-JDK\" class=\"headerlink\" title=\"java(JDK)\"></a>java(JDK)</h2><p>まずはAndroid アプリの開発を行うためのプログラミング言語javaを実行できるようにする必要があるため、<br>java(JDK)をインストールします。</p>\n<h3 id=\"JDKのダウンロード\"><a href=\"#JDKのダウンロード\" class=\"headerlink\" title=\"JDKのダウンロード\"></a>JDKのダウンロード</h3><p>インストールするにはまず、java(JDK)をダウンロードする必要があるため、以下のリンクからjava(JDK)をダウンロードします。</p>\n<p><strong>java(JDK)のバージョンとして動作保証がされているjava8系のダウンロードを行います</strong></p>\n<p>下記リンクをクリックしJDKダウンロードページにアクセスします。<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">JDK8 ダウンロードページ</a><br>※ 資料作成時の最新版<strong>java 8u152</strong>バージョンのダウンロード手順で記載していきます。</p>\n<p>下図の通り<code>Java SE Development Kit 8u152</code>の項目から<br><code>Accept License Agreement</code>にチェックを入れ、<code>Windows x64</code>のDownload列のリンクをクリックしてexeファイルをダウンロードします。<br><img src=\"j8_dl.png\" alt=\"alt\" title=\"java se download\" width=\"520\"></p>\n<h3 id=\"JDKのインストール\"><a href=\"#JDKのインストール\" class=\"headerlink\" title=\"JDKのインストール\"></a>JDKのインストール</h3><p>ダウンロードしたJDKのインストーラを起動してPCにJDKをインストールします。</p>\n<ol>\n<li>ダウンロードしたexeファイルをダブルクリックしインストーラーを起動します。<br><img src=\"j8_i_01.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は、<code>はい</code>をクリックします。<br><img src=\"j8_i_02.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKのインストール開始画面が表示されたら<code>次(N) &gt;</code>をクリックし、その後も画面に従いインストールを進めます。<br><img src=\"j8_i_03.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li><strong>開発ツール</strong>が選択されていることを確認し、<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_04.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>JDKの保存先を設定できます、変更は不要なので<code>次(N) &gt;</code>をクリックします<br><img src=\"j8_i_06.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールが始まります、完了して画面が変わるのを待ちます<br><img src=\"j8_i_07.png\" alt=\"alt\" title=\"java(JDK) install\" width=\"450\"></li>\n<li>インストールの完了画面が表示されたら<code>閉じる(C)</code>をクリックします<br><img src=\"j8_i_08.png\" alt=\"alt\" title=\"java(JDK) install complete\" width=\"450\"></li>\n</ol>\n<p>以上でJDKのインストールが完了です。</p>\n<hr>\n<h3 id=\"JDKのインストール-確認\"><a href=\"#JDKのインストール-確認\" class=\"headerlink\" title=\"JDKのインストール 確認\"></a>JDKのインストール 確認</h3><p>次にコマンドプロンプトを使いJDKが正しくインストールされたことを確認します。</p>\n<ol>\n<li>Windows ホーム画面の左下にある<code>検索欄</code>に<code>cmd</code>と入力し<strong>コマンドプロンプト</strong>をクリックし起動します。<br><img src=\"j8_c_01.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"520\"></li>\n<li>コマンドプロンプトに<code>java -version</code>と入力しエンターキーを押します。<br><img src=\"j8_c_02.png\" alt=\"alt\" title=\"java(JDK) install confirm\" width=\"600\"></li>\n</ol>\n<p>以上でjava(JDK)のインストールの確認ができました</p>\n<hr>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><p>最後にAndroid Studioの環境構築を行います。<br>Android Studioをインストールするため、exeファイルを下記リンクからダウンロードページにアクセスします。</p>\n<p><a href=\"https://developer.android.com/studio/index.html?hl=ja\" target=\"_blank\" rel=\"external\">Android Studio ダウンロードページ</a><br>※ 資料作成時の最新版は Android Studio 3.0.1</p>\n<ol>\n<li><strong>Android Studio Androidの公式 IDE</strong>下にある<code>Android Studio 3.0.1 FOR WINDOWS...</code>のボタンをクリックしexeファイルをダウンロードします。<br><img src=\"as_i_01.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードの確認画面が表示されたら<strong>利用規約</strong>を確認の上、チェックをクリックし、<code>ANDROID STUDIO FOR WINDOWS ダウンロード</code>をクリックします。<br><img src=\"as_i_02.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>ダウンロードしたexeファイルをダブルクリックし、Android Studioのインストーラーを起動します。<br><img src=\"as_i_03.png\" alt=\"alt\" title=\"Android Studio download\" width=\"520\"></li>\n<li>確認ダイアログが表示された場合は<code>はい</code>をクリックします<br><img src=\"as_i_04.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストーラの起動画面が表示されたら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_05.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールするコンポーネント設定が表示されたら”Android Virtual Device”がチェックされていることを確認し、<code>Next &gt;</code>をクリックします<br><img src=\"as_i_06.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioの保存先を設定します、変更の必要がなければ<code>Next &gt;</code>をクリックりします<br><img src=\"as_i_07.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Install</code>をクリックします<br><img src=\"as_i_08.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールの完了を待ちます<br><img src=\"as_i_09.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>インストールが終わったら<code>Next &gt;</code>をクリックします<br><img src=\"as_i_10.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li><code>Finish</code>をクリックすると、Android Studioが起動します。<br>引き続き、Android Studioの初回セットアップを行います<br><img src=\"as_i_11.png\" alt=\"alt\" title=\"Android Studio install\" width=\"450\"></li>\n<li>Android Studioが起動しAndroid SDK Componentのインストールが開始されます<br><img src=\"as_s_01.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Welcom画面が表示されたら<code>Next</code>をクリック<br><img src=\"as_s_02.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Install Type画面では<strong>Standard</strong>が選択されていることを確認し<code>Next</code>をクリックします<br><img src=\"as_s_03.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioのテーマ、色合いを好みで選択し、<code>Next</code>をクリックします<br><img src=\"as_s_04.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>確認画面が表示されたら<code>Finish</code>をクリックします<br><img src=\"as_s_05.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Androidアプリの開発に必要なComponentのダウンロードを待ちます<br><img src=\"as_s_06.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>ダウンロードが終了したら、<code>Finish</code>をクリックします<br><img src=\"as_s_07.png\" alt=\"alt\" title=\"Android Studio setup\" width=\"450\"></li>\n<li>Android Studioの起動画面が表示されたら完了です<br><img src=\"as_s_08.png\" alt=\"alt\" title=\"Android Studio setup complete\" width=\"450\"></li>\n</ol>\n<p>以上でAndroid Studioのインストール、セットアップ作業は完了です。<br>Androidアプリの開発環境が整いましたので早速開発に入っていきましょう！</p>\n<h1 id=\"環境構築-Mac-PC\"><a href=\"#環境構築-Mac-PC\" class=\"headerlink\" title=\"環境構築(Mac PC)\"></a>環境構築(Mac PC)</h1><h2 id=\"java-JDK-のインストール\"><a href=\"#java-JDK-のインストール\" class=\"headerlink\" title=\"java(JDK)のインストール\"></a>java(JDK)のインストール</h2><h2 id=\"Android-Studioのインストール\"><a href=\"#Android-Studioのインストール\" class=\"headerlink\" title=\"Android Studioのインストール\"></a>Android Studioのインストール</h2>"},{"title":"Android OS とは","date":"2017-11-01T15:00:00.000Z","_content":"Android OSの現在のシェアや動向を紹介します。\n\n<!-- toc -->\n\n# Android OSとは\n\n* google社が作ったスマートフォン向け OS(オペレーションシステム)\n* 無料で世界中の人が使えるオープンソースOS\n* 世界で一番普及しているプログラミング言語 「Java」を使って開発する\n* Google I/O 2017にてモダン言語 「Kotlin」を正式採用\n\n## スマートフォン OSのシェア\n\n現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは\niOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。\n2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が\nありましたが現在では開発を終了してしまっています。\n\n|OS               |開発者       |最新のバージョン|\n|:----------------|:----------:|:------------:|\n|Android          |Google      |8.0           |\n|iOS              |Apple       |11.1          |\n|Windows 10 Mobile|Microsoft   |1607          |\n\n\n### 世界のスマートフォン OS シェア\n世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。\n\nNet Market Share参照[※1]\n<img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |70.47%        |\n|iOS              |Apple       |28.55%        |\n|Series 40        |NOKIA       |0.32%         |\n|Windows 10 Mobile|Microsoft   |0.22%         |\n\n### 日本のスマートフォン OS シェア\nマーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。\nこれはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に\n伴ってAndroid端末を購入する利用者が増えたものと考えられます。\n\nKANTAR WORLDPANEL参照[※2]\n<img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |55.00%        |\n|iOS              |Apple       |44.80%        |\n|Windows 10 Mobile|Microsoft   |0.10%         |\n\n## Android アプリの開発環境\n\nAndroid アプリの開発には **Android Studio**というソフトウェアを使います。\n> Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。\n> 2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。\n\nAndroidアプリの開発は主に**java**や**Kotlin**と言うプログラミング言語で開発を行います。\nそれぞれのプログラミング言語の特徴を紹介します。\n\n* java\n\t* Oracle(オラクル)社が開発したプログラミング言語\n\t* どんなOS環境での実行も可能なプログラミング言語\n\t* JVM(Java Virtual Machine)と言う仮想マシン上で動く\n* Kotlin\n\t* JET BRAINS社が \"java\" をベースに開発したプログラミング言語\n\t* javaよりコード量を少なくAndroidアプリを開発できる\n\t* javaの動作環境があれば実行可能\n\n## Android OSプラットフォーム\n\n現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。\n販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。\nそのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。\n\n現在であれば**6.0(Marshmallow)**から2つ前のコードネームなので***4.4(KitKat)***までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。\n\nAndroid Developers参照[※3]\n\n|Version    |CodeName    |API  |User     |\n|:----------|:-----------|:----|:--------|\n|6.0        |Marshmallow |23   |30.9%    |\n|5.0~5.1    |Lollipop    |21-22|27.2%    |\n|7.0~7.1    |Nougat      |24-25|20.6%    |\n|4.4        |KitKat      |19   |13.8%    |\n|4.1.x~4.2.x|Jelly Bean  |16-17|5.3%     |\n|4.3        |Jelly Bean  |18   |0.9%     |\n|8.0        |Oreo        |26   |0.3%     |\n\n\n## Android アーキテクチャ\n\nAndroid OSのアーキテクチャはLinux Kernelを基盤に作られています。\n実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。\n\nAndroid Developers参照[※4]\n<img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\">\n\n[※1]: https://netmarketshare.com/\n[※2]: https://www.kantarworldpanel.com/global/smartphone-os-market-share\n[※3]: https://developer.android.com/about/dashboards/index.html#Platform\n[※4]: https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\n","source":"_posts/android/01-CurrentStatus.md","raw":"---\ntitle: Android OS とは\ndate: 2017-11-02\n---\nAndroid OSの現在のシェアや動向を紹介します。\n\n<!-- toc -->\n\n# Android OSとは\n\n* google社が作ったスマートフォン向け OS(オペレーションシステム)\n* 無料で世界中の人が使えるオープンソースOS\n* 世界で一番普及しているプログラミング言語 「Java」を使って開発する\n* Google I/O 2017にてモダン言語 「Kotlin」を正式採用\n\n## スマートフォン OSのシェア\n\n現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは\niOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。\n2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が\nありましたが現在では開発を終了してしまっています。\n\n|OS               |開発者       |最新のバージョン|\n|:----------------|:----------:|:------------:|\n|Android          |Google      |8.0           |\n|iOS              |Apple       |11.1          |\n|Windows 10 Mobile|Microsoft   |1607          |\n\n\n### 世界のスマートフォン OS シェア\n世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。\n\nNet Market Share参照[※1]\n<img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |70.47%        |\n|iOS              |Apple       |28.55%        |\n|Series 40        |NOKIA       |0.32%         |\n|Windows 10 Mobile|Microsoft   |0.22%         |\n\n### 日本のスマートフォン OS シェア\nマーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。\nこれはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に\n伴ってAndroid端末を購入する利用者が増えたものと考えられます。\n\nKANTAR WORLDPANEL参照[※2]\n<img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\">\n\n|OS               |開発者       |シェア         |\n|:----------------|:----------:|:-------------|\n|Android          |Google      |55.00%        |\n|iOS              |Apple       |44.80%        |\n|Windows 10 Mobile|Microsoft   |0.10%         |\n\n## Android アプリの開発環境\n\nAndroid アプリの開発には **Android Studio**というソフトウェアを使います。\n> Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。\n> 2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。\n\nAndroidアプリの開発は主に**java**や**Kotlin**と言うプログラミング言語で開発を行います。\nそれぞれのプログラミング言語の特徴を紹介します。\n\n* java\n\t* Oracle(オラクル)社が開発したプログラミング言語\n\t* どんなOS環境での実行も可能なプログラミング言語\n\t* JVM(Java Virtual Machine)と言う仮想マシン上で動く\n* Kotlin\n\t* JET BRAINS社が \"java\" をベースに開発したプログラミング言語\n\t* javaよりコード量を少なくAndroidアプリを開発できる\n\t* javaの動作環境があれば実行可能\n\n## Android OSプラットフォーム\n\n現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。\n販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。\nそのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。\n\n現在であれば**6.0(Marshmallow)**から2つ前のコードネームなので***4.4(KitKat)***までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。\n\nAndroid Developers参照[※3]\n\n|Version    |CodeName    |API  |User     |\n|:----------|:-----------|:----|:--------|\n|6.0        |Marshmallow |23   |30.9%    |\n|5.0~5.1    |Lollipop    |21-22|27.2%    |\n|7.0~7.1    |Nougat      |24-25|20.6%    |\n|4.4        |KitKat      |19   |13.8%    |\n|4.1.x~4.2.x|Jelly Bean  |16-17|5.3%     |\n|4.3        |Jelly Bean  |18   |0.9%     |\n|8.0        |Oreo        |26   |0.3%     |\n\n\n## Android アーキテクチャ\n\nAndroid OSのアーキテクチャはLinux Kernelを基盤に作られています。\n実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。\n\nAndroid Developers参照[※4]\n<img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\">\n\n[※1]: https://netmarketshare.com/\n[※2]: https://www.kantarworldpanel.com/global/smartphone-os-market-share\n[※3]: https://developer.android.com/about/dashboards/index.html#Platform\n[※4]: https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\n","slug":"01-CurrentStatus","published":1,"updated":"2017-12-14T02:48:40.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0pw00013l61lbwvc1f4","content":"<p>Android OSの現在のシェアや動向を紹介します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android-osとは\">Android OSとは</a><ul>\n<li><a href=\"#スマートフォン-osのシェア\">スマートフォン OSのシェア</a><ul>\n<li><a href=\"#世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</a></li>\n<li><a href=\"#日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</a></li>\n</ul>\n</li>\n<li><a href=\"#android-アプリの開発環境\">Android アプリの開発環境</a></li>\n<li><a href=\"#android-osプラットフォーム\">Android OSプラットフォーム</a></li>\n<li><a href=\"#android-アーキテクチャ\">Android アーキテクチャ</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"android-osとは\">Android OSとは</span></h1><ul>\n<li>google社が作ったスマートフォン向け OS(オペレーションシステム)</li>\n<li>無料で世界中の人が使えるオープンソースOS</li>\n<li>世界で一番普及しているプログラミング言語 「Java」を使って開発する</li>\n<li>Google I/O 2017にてモダン言語 「Kotlin」を正式採用</li>\n</ul>\n<h2><span id=\"スマートフォン-osのシェア\">スマートフォン OSのシェア</span></h2><p>現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは<br>iOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。<br>2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が<br>ありましたが現在では開発を終了してしまっています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:center\">最新のバージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\">8.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:center\">11.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:center\">1607</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</span></h3><p>世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。</p>\n<p>Net Market Share参照<a href=\"https://netmarketshare.com/\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">70.47%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">28.55%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Series 40</td>\n<td style=\"text-align:center\">NOKIA</td>\n<td style=\"text-align:left\">0.32%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.22%</td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</span></h3><p>マーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。<br>これはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に<br>伴ってAndroid端末を購入する利用者が増えたものと考えられます。</p>\n<p>KANTAR WORLDPANEL参照<a href=\"https://www.kantarworldpanel.com/global/smartphone-os-market-share\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">55.00%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">44.80%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.10%</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"android-アプリの開発環境\">Android アプリの開発環境</span></h2><p>Android アプリの開発には <strong>Android Studio</strong>というソフトウェアを使います。</p>\n<blockquote>\n<p>Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。<br>2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。</p>\n</blockquote>\n<p>Androidアプリの開発は主に<strong>java</strong>や<strong>Kotlin</strong>と言うプログラミング言語で開発を行います。<br>それぞれのプログラミング言語の特徴を紹介します。</p>\n<ul>\n<li>java<ul>\n<li>Oracle(オラクル)社が開発したプログラミング言語</li>\n<li>どんなOS環境での実行も可能なプログラミング言語</li>\n<li>JVM(Java Virtual Machine)と言う仮想マシン上で動く</li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li>JET BRAINS社が “java” をベースに開発したプログラミング言語</li>\n<li>javaよりコード量を少なくAndroidアプリを開発できる</li>\n<li>javaの動作環境があれば実行可能</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"android-osプラットフォーム\">Android OSプラットフォーム</span></h2><p>現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。<br>販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。<br>そのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。</p>\n<p>現在であれば<strong>6.0(Marshmallow)</strong>から2つ前のコードネームなので<strong><em>4.4(KitKat)</em></strong>までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/about/dashboards/index.html#Platform\" target=\"_blank\" rel=\"external\">※3</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Version</th>\n<th style=\"text-align:left\">CodeName</th>\n<th style=\"text-align:left\">API</th>\n<th style=\"text-align:left\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">6.0</td>\n<td style=\"text-align:left\">Marshmallow</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">30.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.0~5.1</td>\n<td style=\"text-align:left\">Lollipop</td>\n<td style=\"text-align:left\">21-22</td>\n<td style=\"text-align:left\">27.2%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.0~7.1</td>\n<td style=\"text-align:left\">Nougat</td>\n<td style=\"text-align:left\">24-25</td>\n<td style=\"text-align:left\">20.6%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.4</td>\n<td style=\"text-align:left\">KitKat</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">13.8%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.1.x~4.2.x</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">16-17</td>\n<td style=\"text-align:left\">5.3%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.3</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">0.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.0</td>\n<td style=\"text-align:left\">Oreo</td>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">0.3%</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"android-アーキテクチャ\">Android アーキテクチャ</span></h2><p>Android OSのアーキテクチャはLinux Kernelを基盤に作られています。<br>実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\" target=\"_blank\" rel=\"external\">※4</a><br><img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Android OSの現在のシェアや動向を紹介します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android-osとは\">Android OSとは</a><ul>\n<li><a href=\"#スマートフォン-osのシェア\">スマートフォン OSのシェア</a><ul>\n<li><a href=\"#世界のスマートフォン-os-シェア\">世界のスマートフォン OS シェア</a></li>\n<li><a href=\"#日本のスマートフォン-os-シェア\">日本のスマートフォン OS シェア</a></li>\n</ul>\n</li>\n<li><a href=\"#android-アプリの開発環境\">Android アプリの開発環境</a></li>\n<li><a href=\"#android-osプラットフォーム\">Android OSプラットフォーム</a></li>\n<li><a href=\"#android-アーキテクチャ\">Android アーキテクチャ</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"Android-OSとは\"><a href=\"#Android-OSとは\" class=\"headerlink\" title=\"Android OSとは\"></a>Android OSとは</h1><ul>\n<li>google社が作ったスマートフォン向け OS(オペレーションシステム)</li>\n<li>無料で世界中の人が使えるオープンソースOS</li>\n<li>世界で一番普及しているプログラミング言語 「Java」を使って開発する</li>\n<li>Google I/O 2017にてモダン言語 「Kotlin」を正式採用</li>\n</ul>\n<h2 id=\"スマートフォン-OSのシェア\"><a href=\"#スマートフォン-OSのシェア\" class=\"headerlink\" title=\"スマートフォン OSのシェア\"></a>スマートフォン OSのシェア</h2><p>現在世界で普及しているスマートフォン/タブレット端末に搭載されているOSは<br>iOSやAndroid OS,Windows Phoneの3つのOSが市場で多くのシェアを持っています。<br>2~3年前は Tizen, FireFox OS, ubuntu mobileなどいくつかのモバイルOSの開発が<br>ありましたが現在では開発を終了してしまっています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:center\">最新のバージョン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\">8.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:center\">11.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:center\">1607</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"世界のスマートフォン-OS-シェア\"><a href=\"#世界のスマートフォン-OS-シェア\" class=\"headerlink\" title=\"世界のスマートフォン OS シェア\"></a>世界のスマートフォン OS シェア</h3><p>世界をマーケットとした場合、Android OSが最も利用されているスマートフォンOSであることがわかります。</p>\n<p>Net Market Share参照<a href=\"https://netmarketshare.com/\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"WorldShare.png\" alt=\"alt\" title=\"Mobile Share in World\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">70.47%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">28.55%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Series 40</td>\n<td style=\"text-align:center\">NOKIA</td>\n<td style=\"text-align:left\">0.32%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.22%</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日本のスマートフォン-OS-シェア\"><a href=\"#日本のスマートフォン-OS-シェア\" class=\"headerlink\" title=\"日本のスマートフォン OS シェア\"></a>日本のスマートフォン OS シェア</h3><p>マーケットを日本に絞った場合でも最近はAndroid OSがiOSのシェアを上回るようになりました。<br>これはAndroid OSを多く扱う格安SIMの認知が広がりと、iOSのデバイスの購入価格の上昇に<br>伴ってAndroid端末を購入する利用者が増えたものと考えられます。</p>\n<p>KANTAR WORLDPANEL参照<a href=\"https://www.kantarworldpanel.com/global/smartphone-os-market-share\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"JapanShare.png\" alt=\"alt\" title=\"Mobile Share in Japan\" width=\"300\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">OS</th>\n<th style=\"text-align:center\">開発者</th>\n<th style=\"text-align:left\">シェア</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:left\">55.00%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">Apple</td>\n<td style=\"text-align:left\">44.80%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Windows 10 Mobile</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:left\">0.10%</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Android-アプリの開発環境\"><a href=\"#Android-アプリの開発環境\" class=\"headerlink\" title=\"Android アプリの開発環境\"></a>Android アプリの開発環境</h2><p>Android アプリの開発には <strong>Android Studio</strong>というソフトウェアを使います。</p>\n<blockquote>\n<p>Android StudioはJET BRAINS社が開発したフリーのAndroid開発ソフトウェアです。<br>2015年頃までEclipseというソフトウェアでの開発もサポートしていましたが、現在はサポートを終了しています。</p>\n</blockquote>\n<p>Androidアプリの開発は主に<strong>java</strong>や<strong>Kotlin</strong>と言うプログラミング言語で開発を行います。<br>それぞれのプログラミング言語の特徴を紹介します。</p>\n<ul>\n<li>java<ul>\n<li>Oracle(オラクル)社が開発したプログラミング言語</li>\n<li>どんなOS環境での実行も可能なプログラミング言語</li>\n<li>JVM(Java Virtual Machine)と言う仮想マシン上で動く</li>\n</ul>\n</li>\n<li>Kotlin<ul>\n<li>JET BRAINS社が “java” をベースに開発したプログラミング言語</li>\n<li>javaよりコード量を少なくAndroidアプリを開発できる</li>\n<li>javaの動作環境があれば実行可能</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Android-OSプラットフォーム\"><a href=\"#Android-OSプラットフォーム\" class=\"headerlink\" title=\"Android OSプラットフォーム\"></a>Android OSプラットフォーム</h2><p>現在(2017/11)で最も多く利用されている Android OSバージョンは6.0(Marshmallow)になります。<br>販売されているAndroidデバイスは各販売元の企業によってカスタマイズされた物となっていることが多く、デバイスのスペックを含めた環境から販売元の企業によってアップデートできるOSを管理されており、最新のOSにアップデートできないことが多いです。<br>そのため、多くのユーザにアプリを配信したい場合は最も多く利用されているプラットフォームのコードネームより2つ前のコードネームまでを配信の対象にすると良いと思われます。</p>\n<p>現在であれば<strong>6.0(Marshmallow)</strong>から2つ前のコードネームなので<strong><em>4.4(KitKat)</em></strong>までをサポート対象に含めることで、全世界のAndoroid OS ユーザの内、90%にアプリを配信することができることになります。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/about/dashboards/index.html#Platform\" target=\"_blank\" rel=\"external\">※3</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Version</th>\n<th style=\"text-align:left\">CodeName</th>\n<th style=\"text-align:left\">API</th>\n<th style=\"text-align:left\">User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">6.0</td>\n<td style=\"text-align:left\">Marshmallow</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">30.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.0~5.1</td>\n<td style=\"text-align:left\">Lollipop</td>\n<td style=\"text-align:left\">21-22</td>\n<td style=\"text-align:left\">27.2%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.0~7.1</td>\n<td style=\"text-align:left\">Nougat</td>\n<td style=\"text-align:left\">24-25</td>\n<td style=\"text-align:left\">20.6%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.4</td>\n<td style=\"text-align:left\">KitKat</td>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">13.8%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.1.x~4.2.x</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">16-17</td>\n<td style=\"text-align:left\">5.3%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.3</td>\n<td style=\"text-align:left\">Jelly Bean</td>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">0.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.0</td>\n<td style=\"text-align:left\">Oreo</td>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">0.3%</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Android-アーキテクチャ\"><a href=\"#Android-アーキテクチャ\" class=\"headerlink\" title=\"Android アーキテクチャ\"></a>Android アーキテクチャ</h2><p>Android OSのアーキテクチャはLinux Kernelを基盤に作られています。<br>実際の開発に必ず必要になる知識ではありませんので紹介までにとどめさせていただきます。</p>\n<p>Android Developers参照<a href=\"https://developer.android.com/guide/platform/index.html?hl=ja#system-apps\" target=\"_blank\" rel=\"external\">※4</a><br><img src=\"https://developer.android.com/guide/platform/images/android-stack_2x.png?hl=ja\" alt=\"alt\" title=\"Architecture\" width=\"400\"></p>\n"},{"title":"Androidの概念","date":"2017-11-02T15:00:00.000Z","_content":"Androidアプリ開発に必要になる概念を学んでいきます\n\n<!-- toc -->\n\n# Android開発における４大要素\nAndroid アプリの開発には重要に扱われている4大要素があります。\n各要素を一言で表すと以下４つになります。\n\n１. 画面\n２. アプリ/機能の呼び出し\n３. バックグラウンド実行\n４. 外部からの呼び出し受付\n\nまた上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。\n\n* Activity(1.画面)\n* Intent(2.アプリ/機能の呼び出し)\n* Service(3.バックグラウンド実行)\n* Broad Cast Receiver (4.外部からの呼び出し受付)\n\n## Activity\nアプリ開発における画面を指し、ユーザーの操作受付（ボタンタップやスワイプなど）、ユーザーへ向けた情報表示のために使用します。\nActivity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。\n類似するFragmentという画面コンポーネントも存在しますが大きな違いはFragmentを表示する為にはActivityが必要で、Activity内に複数のFragmentを表示することができます。\n\n## Intent\nActivity間の呼び出しを行うための仕組み。\n画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、\n外部アプリの呼び出しを行う時に利用します。\n\n## Service\nバックグラウンドで長時間の作業を行うためのコンポーネントです。\n例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。\n\n## Broad Cast Receiver\n他のアプリやPush通知を受信した時に応答するための仕組みです。\n外部のアプリやサービスからブロードキャスト（ある領域にデータを送信すること、Androidアプリでのある領域をとは端末にインストールされた全アプリが対象）を受けてその後の処理を請け負う機能を実装する。\n\n# その他の要素\n\n* Fragment\n* View\n\t* ViewGroup\n\t* Widget\n* Life cycle (ライフサイクル)\n\n## Fragment\nコンテンツやWidget,ライフサイクルを持ったView\n子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。\nまた、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。\n\n## View\nウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、\nActivityやFragmentとは違ったサイクルが存在する。\n**LifeCycle**項目で紹介します。\n\n### ViewGroup\n子要素を持つことができるView\nLinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。\n他にListViewやGridView、RecyclerViewもViewGroupに該当します。\nどのコンポーネントも内部にView要素を持つことができる要素になります。\n\nLinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、\nListViewなどは一覧データを並べて表示する機能があります。\n\n### Widget\n子要素を持つことができないView、これをViewと呼ぶことが多い気がします\nButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。\nコンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります\n\n## LifeCycle\nAndroidの画面要素にはLife cycleと言う概念を含んでおり、\nActivity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される\n\n各クラスのライフサイクルに関して\nActivityのライフサイクル[※1]\n<img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\">\n\nFragmentのライフサイクル[※2]\n<img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\">\n\nViewのライフサイクル[※3]\n<img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\">\n\n[※1]: https://developer.android.com/guide/components/activities.html?hl=ja\n[※2]: https://developer.android.com/guide/components/fragments.html?hl=ja\n[※3]: https://developer.android.com/reference/android/view/View.html#pubmethods","source":"_posts/android/02-AndroidConcept.md","raw":"---\ntitle: Androidの概念\ndate: 2017-11-03\n---\nAndroidアプリ開発に必要になる概念を学んでいきます\n\n<!-- toc -->\n\n# Android開発における４大要素\nAndroid アプリの開発には重要に扱われている4大要素があります。\n各要素を一言で表すと以下４つになります。\n\n１. 画面\n２. アプリ/機能の呼び出し\n３. バックグラウンド実行\n４. 外部からの呼び出し受付\n\nまた上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。\n\n* Activity(1.画面)\n* Intent(2.アプリ/機能の呼び出し)\n* Service(3.バックグラウンド実行)\n* Broad Cast Receiver (4.外部からの呼び出し受付)\n\n## Activity\nアプリ開発における画面を指し、ユーザーの操作受付（ボタンタップやスワイプなど）、ユーザーへ向けた情報表示のために使用します。\nActivity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。\n類似するFragmentという画面コンポーネントも存在しますが大きな違いはFragmentを表示する為にはActivityが必要で、Activity内に複数のFragmentを表示することができます。\n\n## Intent\nActivity間の呼び出しを行うための仕組み。\n画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、\n外部アプリの呼び出しを行う時に利用します。\n\n## Service\nバックグラウンドで長時間の作業を行うためのコンポーネントです。\n例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。\n\n## Broad Cast Receiver\n他のアプリやPush通知を受信した時に応答するための仕組みです。\n外部のアプリやサービスからブロードキャスト（ある領域にデータを送信すること、Androidアプリでのある領域をとは端末にインストールされた全アプリが対象）を受けてその後の処理を請け負う機能を実装する。\n\n# その他の要素\n\n* Fragment\n* View\n\t* ViewGroup\n\t* Widget\n* Life cycle (ライフサイクル)\n\n## Fragment\nコンテンツやWidget,ライフサイクルを持ったView\n子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。\nまた、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。\n\n## View\nウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、\nActivityやFragmentとは違ったサイクルが存在する。\n**LifeCycle**項目で紹介します。\n\n### ViewGroup\n子要素を持つことができるView\nLinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。\n他にListViewやGridView、RecyclerViewもViewGroupに該当します。\nどのコンポーネントも内部にView要素を持つことができる要素になります。\n\nLinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、\nListViewなどは一覧データを並べて表示する機能があります。\n\n### Widget\n子要素を持つことができないView、これをViewと呼ぶことが多い気がします\nButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。\nコンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります\n\n## LifeCycle\nAndroidの画面要素にはLife cycleと言う概念を含んでおり、\nActivity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される\n\n各クラスのライフサイクルに関して\nActivityのライフサイクル[※1]\n<img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\">\n\nFragmentのライフサイクル[※2]\n<img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\">\n\nViewのライフサイクル[※3]\n<img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\">\n\n[※1]: https://developer.android.com/guide/components/activities.html?hl=ja\n[※2]: https://developer.android.com/guide/components/fragments.html?hl=ja\n[※3]: https://developer.android.com/reference/android/view/View.html#pubmethods","slug":"02-AndroidConcept","published":1,"updated":"2018-02-08T15:37:18.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0q200023l61362llho6","content":"<p>Androidアプリ開発に必要になる概念を学んでいきます</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android開発における4大要素\">Android開発における４大要素</a><ul>\n<li><a href=\"#activity\">Activity</a></li>\n<li><a href=\"#intent\">Intent</a></li>\n<li><a href=\"#service\">Service</a></li>\n<li><a href=\"#broad-cast-receiver\">Broad Cast Receiver</a></li>\n</ul>\n</li>\n<li><a href=\"#その他の要素\">その他の要素</a><ul>\n<li><a href=\"#fragment\">Fragment</a></li>\n<li><a href=\"#view\">View</a><ul>\n<li><a href=\"#viewgroup\">ViewGroup</a></li>\n<li><a href=\"#widget\">Widget</a></li>\n</ul>\n</li>\n<li><a href=\"#lifecycle\">LifeCycle</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"android開発における4大要素\">Android開発における４大要素</span></h1><p>Android アプリの開発には重要に扱われている4大要素があります。<br>各要素を一言で表すと以下４つになります。</p>\n<p>１. 画面<br>２. アプリ/機能の呼び出し<br>３. バックグラウンド実行<br>４. 外部からの呼び出し受付</p>\n<p>また上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。</p>\n<ul>\n<li>Activity(1.画面)</li>\n<li>Intent(2.アプリ/機能の呼び出し)</li>\n<li>Service(3.バックグラウンド実行)</li>\n<li>Broad Cast Receiver (4.外部からの呼び出し受付)</li>\n</ul>\n<h2><span id=\"activity\">Activity</span></h2><p>アプリ開発における画面を指し、ユーザーの操作受付（ボタンタップやスワイプなど）、ユーザーへ向けた情報表示のために使用します。<br>Activity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。<br>類似するFragmentという画面コンポーネントも存在しますが大きな違いはFragmentを表示する為にはActivityが必要で、Activity内に複数のFragmentを表示することができます。</p>\n<h2><span id=\"intent\">Intent</span></h2><p>Activity間の呼び出しを行うための仕組み。<br>画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、<br>外部アプリの呼び出しを行う時に利用します。</p>\n<h2><span id=\"service\">Service</span></h2><p>バックグラウンドで長時間の作業を行うためのコンポーネントです。<br>例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。</p>\n<h2><span id=\"broad-cast-receiver\">Broad Cast Receiver</span></h2><p>他のアプリやPush通知を受信した時に応答するための仕組みです。<br>外部のアプリやサービスからブロードキャスト（ある領域にデータを送信すること、Androidアプリでのある領域をとは端末にインストールされた全アプリが対象）を受けてその後の処理を請け負う機能を実装する。</p>\n<h1><span id=\"その他の要素\">その他の要素</span></h1><ul>\n<li>Fragment</li>\n<li>View<ul>\n<li>ViewGroup</li>\n<li>Widget</li>\n</ul>\n</li>\n<li>Life cycle (ライフサイクル)</li>\n</ul>\n<h2><span id=\"fragment\">Fragment</span></h2><p>コンテンツやWidget,ライフサイクルを持ったView<br>子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。<br>また、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。</p>\n<h2><span id=\"view\">View</span></h2><p>ウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、<br>ActivityやFragmentとは違ったサイクルが存在する。<br><strong>LifeCycle</strong>項目で紹介します。</p>\n<h3><span id=\"viewgroup\">ViewGroup</span></h3><p>子要素を持つことができるView<br>LinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。<br>他にListViewやGridView、RecyclerViewもViewGroupに該当します。<br>どのコンポーネントも内部にView要素を持つことができる要素になります。</p>\n<p>LinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、<br>ListViewなどは一覧データを並べて表示する機能があります。</p>\n<h3><span id=\"widget\">Widget</span></h3><p>子要素を持つことができないView、これをViewと呼ぶことが多い気がします<br>ButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。<br>コンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります</p>\n<h2><span id=\"lifecycle\">LifeCycle</span></h2><p>Androidの画面要素にはLife cycleと言う概念を含んでおり、<br>Activity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される</p>\n<p>各クラスのライフサイクルに関して<br>Activityのライフサイクル<a href=\"https://developer.android.com/guide/components/activities.html?hl=ja\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\"></p>\n<p>Fragmentのライフサイクル<a href=\"https://developer.android.com/guide/components/fragments.html?hl=ja\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\"></p>\n<p>Viewのライフサイクル<a href=\"https://developer.android.com/reference/android/view/View.html#pubmethods\" target=\"_blank\" rel=\"external\">※3</a><br><img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Androidアプリ開発に必要になる概念を学んでいきます</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#android開発における4大要素\">Android開発における４大要素</a><ul>\n<li><a href=\"#activity\">Activity</a></li>\n<li><a href=\"#intent\">Intent</a></li>\n<li><a href=\"#service\">Service</a></li>\n<li><a href=\"#broad-cast-receiver\">Broad Cast Receiver</a></li>\n</ul>\n</li>\n<li><a href=\"#その他の要素\">その他の要素</a><ul>\n<li><a href=\"#fragment\">Fragment</a></li>\n<li><a href=\"#view\">View</a><ul>\n<li><a href=\"#viewgroup\">ViewGroup</a></li>\n<li><a href=\"#widget\">Widget</a></li>\n</ul>\n</li>\n<li><a href=\"#lifecycle\">LifeCycle</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"Android開発における４大要素\"><a href=\"#Android開発における４大要素\" class=\"headerlink\" title=\"Android開発における４大要素\"></a>Android開発における４大要素</h1><p>Android アプリの開発には重要に扱われている4大要素があります。<br>各要素を一言で表すと以下４つになります。</p>\n<p>１. 画面<br>２. アプリ/機能の呼び出し<br>３. バックグラウンド実行<br>４. 外部からの呼び出し受付</p>\n<p>また上記の要素をAndroidアプリの開発に当てはめると以下名称にて使われます。</p>\n<ul>\n<li>Activity(1.画面)</li>\n<li>Intent(2.アプリ/機能の呼び出し)</li>\n<li>Service(3.バックグラウンド実行)</li>\n<li>Broad Cast Receiver (4.外部からの呼び出し受付)</li>\n</ul>\n<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><p>アプリ開発における画面を指し、ユーザーの操作受付（ボタンタップやスワイプなど）、ユーザーへ向けた情報表示のために使用します。<br>Activity内にはwidgetまたはviewと呼ばれる要素（ボタンや画像）を配置して機能を追加する。<br>類似するFragmentという画面コンポーネントも存在しますが大きな違いはFragmentを表示する為にはActivityが必要で、Activity内に複数のFragmentを表示することができます。</p>\n<h2 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h2><p>Activity間の呼び出しを行うための仕組み。<br>画面遷移やActivity間でのデータのやりとり、他にもメールアプリやブラウザアプリなど、<br>外部アプリの呼び出しを行う時に利用します。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>バックグラウンドで長時間の作業を行うためのコンポーネントです。<br>例として、Content Providerや非同期通信によるデータのやりとり、画面を表示しないまま音楽再生をする場合などに利用します。</p>\n<h2 id=\"Broad-Cast-Receiver\"><a href=\"#Broad-Cast-Receiver\" class=\"headerlink\" title=\"Broad Cast Receiver\"></a>Broad Cast Receiver</h2><p>他のアプリやPush通知を受信した時に応答するための仕組みです。<br>外部のアプリやサービスからブロードキャスト（ある領域にデータを送信すること、Androidアプリでのある領域をとは端末にインストールされた全アプリが対象）を受けてその後の処理を請け負う機能を実装する。</p>\n<h1 id=\"その他の要素\"><a href=\"#その他の要素\" class=\"headerlink\" title=\"その他の要素\"></a>その他の要素</h1><ul>\n<li>Fragment</li>\n<li>View<ul>\n<li>ViewGroup</li>\n<li>Widget</li>\n</ul>\n</li>\n<li>Life cycle (ライフサイクル)</li>\n</ul>\n<h2 id=\"Fragment\"><a href=\"#Fragment\" class=\"headerlink\" title=\"Fragment\"></a>Fragment</h2><p>コンテンツやWidget,ライフサイクルを持ったView<br>子要素を持つことが可能なのでActivityと同じようにViewGroupやWidgetを配置することができる。<br>また、Activityと独立したライフサイクルを持っており、ライフサイクルはActivityに近い形で実装されている。</p>\n<h2 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h2><p>ウィジェットやViewGroupの総称、こちらにもライフサイクルに近い機能は存在しているが、<br>ActivityやFragmentとは違ったサイクルが存在する。<br><strong>LifeCycle</strong>項目で紹介します。</p>\n<h3 id=\"ViewGroup\"><a href=\"#ViewGroup\" class=\"headerlink\" title=\"ViewGroup\"></a>ViewGroup</h3><p>子要素を持つことができるView<br>LinearLayout,RelativeLayout、最近追加されたものとしてはConstraintLayoutが該当します。<br>他にListViewやGridView、RecyclerViewもViewGroupに該当します。<br>どのコンポーネントも内部にView要素を持つことができる要素になります。</p>\n<p>LinearLayoutやRelativeLayoutは画面内の配置を容易にしてくれる機能を持っていたり、<br>ListViewなどは一覧データを並べて表示する機能があります。</p>\n<h3 id=\"Widget\"><a href=\"#Widget\" class=\"headerlink\" title=\"Widget\"></a>Widget</h3><p>子要素を持つことができないView、これをViewと呼ぶことが多い気がします<br>ButtonやTextView、CheckBoxなどがWidgetと呼ばれる要素になります。<br>コンポーネント自体がユーザインターフェースの役割をこなすことができるViewになります</p>\n<h2 id=\"LifeCycle\"><a href=\"#LifeCycle\" class=\"headerlink\" title=\"LifeCycle\"></a>LifeCycle</h2><p>Androidの画面要素にはLife cycleと言う概念を含んでおり、<br>Activity / Fragment View要素にはそれぞれインスタンス化前、表示前、非表示前、破棄前など要素ごとに表示やアプリ内での状態が切り替わったタイミングで強制的に処理される</p>\n<p>各クラスのライフサイクルに関して<br>Activityのライフサイクル<a href=\"https://developer.android.com/guide/components/activities.html?hl=ja\" target=\"_blank\" rel=\"external\">※1</a><br><img src=\"https://developer.android.com/images/activity_lifecycle.png?hl=ja\" alt=\"alt\" title=\"activity life cycle\" width=\"350\"></p>\n<p>Fragmentのライフサイクル<a href=\"https://developer.android.com/guide/components/fragments.html?hl=ja\" target=\"_blank\" rel=\"external\">※2</a><br><img src=\"https://developer.android.com/images/fragment_lifecycle.png?hl=ja\" alt=\"alt\" title=\"fragment life cycle\" width=\"300\"></p>\n<p>Viewのライフサイクル<a href=\"https://developer.android.com/reference/android/view/View.html#pubmethods\" target=\"_blank\" rel=\"external\">※3</a><br><img src=\"viewinlifecycle.png\" alt=\"alt\" title=\"view life cycle\" width=\"450\"></p>\n"},{"title":"Androidアプリ開発を始める","date":"2017-11-03T15:00:00.000Z","_content":"講座で解説のために作成するアプリの紹介とプロジェクトの作成\n\n<!-- toc -->\n\n# 学習ポイント\n蔵書検索アプリの開発を始めるにあたり、\nAndroidアプリのプロジェクト作成について基本的な手順を学習します。\nまた、当記事全体を通して完成するアプリのイメージを把握していきます、\n\n# 蔵書検索アプリ\n今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。\n機能として以下\n\n* 蔵書名から部分一致、一致する蔵書の検索機能\n* 蔵書名から検索した結果を一覧で画面表示する機能\n* 蔵書検索した履歴管理機能\n\n検索機能に利用するサービス\n[Google Books API](https://developers.google.com/books/)\n\nネットワーク通信処理に利用するライブラリ\n[okHttp](http://square.github.io/okhttp/)\n\n検索履歴を保存するアプリ内データベースに利用するライブラリ\n[Realm](https://realm.io/jp/)\n\n## ライブラリとは\n便利な機能を纏め、アプリ開発を簡単にしてくれるプログラム。\n* okHttp：インターネット通信を行うプログラムを簡略化する機能を持ったライブラリ\n* Realm：データベースの作成から操作を簡略化する機能を持ったライブラリ\n\n# 新しいプロジェクトを作る\n\n1.Windows ホーム画面の左下にある```検索欄```に```Android```と入力し**Android Studio**をクリックし起動します。\n<img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\">\n2.```Start a new Android Studio project```をクリック\n<img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n3.新規プロジェクト作成時にはアプリ名などを入力します\n以下の表の通りに項目を設定して```Next```をクリックします。\n\n|項目名                 |説明                |入力内容        |\n|:---------------------|:-----------------:|:------------:|\n|Application name      |アプリ名             |BookDiscovery |\n|Company domain        |全世界の独自ドメイン   |example.com   |\n|Project location      |プロジェクトの保存先   |任意設定        |\n|include C++ support   |C++ライブラリ取込み   |チェックを外す   |\n|include Kotlin support|Kotlinライブラリ取込み|チェックを外す   |\n\n**Company domain**は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。\n今回の講義ではC++での実装はありませんのでチェックを外しておきます。\nまた、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。\n<img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います\n**Phone and Tablet**のみチェックをつけ、```API 24: Android 7.0 (Nougat)```を選択したら、```Next```をクリックします\n<img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n5.**Empty Activity**を選択し```Next```をクリックします\n<img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n6.初期画面となるActivity設定を行います\n以下の表の通りに項目を設定して```Next```をクリックします\n\n|項目名                             |説明                |入力内容       |\n|:---------------------------------|:-----------------:|:------------:|\n|Activity Name                     |画面名              |MainActivity  |\n|Generate Layout File              |デザインファイル作成有無|チェックを入れる|\n|Layout Name                       |デザインファイル名    |activity_main |\n|Backwards Compatibility(AppCompat)|下方互換性の有無      |チェックを入れる |\n\n<img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます\nインストールが終了し**done**の文字が表示されたら```Finish```をクリックします。\n<img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n8.構築が終了すると開発画面に遷移します\n**Messages**エリアにエラーとリンクが表示されている場合はリンクをクリックします\n<img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n9.不足しているComponentのインストールを行います\n**android-sdk-license**が選択された状態で**Accept**にチェックをいれ```Next```をクリックします\n<img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n10.Componentのインストール状況が表示されるので終了を待ちます\n<img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n11.インストールが終わったら```Finish```をクリックします\n<img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です\n<img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n\nAndroidStudioのエディタ画面でエラー（**Messages**エリアの<font color=\"red\">赤いメッセージ</font>）が消えない場合は声をかけてください。\n\n以上でAndroidアプリの新規プロジェクト作成が完了です。\n次の[検索画面レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)ページでは作成したプロジェクトが起動した時に表示される画面のレイアウトを実装していきます。","source":"_posts/android/03-StartAndroidDevelopment.md","raw":"---\ntitle: Androidアプリ開発を始める\ndate: 2017-11-04\n---\n講座で解説のために作成するアプリの紹介とプロジェクトの作成\n\n<!-- toc -->\n\n# 学習ポイント\n蔵書検索アプリの開発を始めるにあたり、\nAndroidアプリのプロジェクト作成について基本的な手順を学習します。\nまた、当記事全体を通して完成するアプリのイメージを把握していきます、\n\n# 蔵書検索アプリ\n今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。\n機能として以下\n\n* 蔵書名から部分一致、一致する蔵書の検索機能\n* 蔵書名から検索した結果を一覧で画面表示する機能\n* 蔵書検索した履歴管理機能\n\n検索機能に利用するサービス\n[Google Books API](https://developers.google.com/books/)\n\nネットワーク通信処理に利用するライブラリ\n[okHttp](http://square.github.io/okhttp/)\n\n検索履歴を保存するアプリ内データベースに利用するライブラリ\n[Realm](https://realm.io/jp/)\n\n## ライブラリとは\n便利な機能を纏め、アプリ開発を簡単にしてくれるプログラム。\n* okHttp：インターネット通信を行うプログラムを簡略化する機能を持ったライブラリ\n* Realm：データベースの作成から操作を簡略化する機能を持ったライブラリ\n\n# 新しいプロジェクトを作る\n\n1.Windows ホーム画面の左下にある```検索欄```に```Android```と入力し**Android Studio**をクリックし起動します。\n<img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\">\n2.```Start a new Android Studio project```をクリック\n<img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n3.新規プロジェクト作成時にはアプリ名などを入力します\n以下の表の通りに項目を設定して```Next```をクリックします。\n\n|項目名                 |説明                |入力内容        |\n|:---------------------|:-----------------:|:------------:|\n|Application name      |アプリ名             |BookDiscovery |\n|Company domain        |全世界の独自ドメイン   |example.com   |\n|Project location      |プロジェクトの保存先   |任意設定        |\n|include C++ support   |C++ライブラリ取込み   |チェックを外す   |\n|include Kotlin support|Kotlinライブラリ取込み|チェックを外す   |\n\n**Company domain**は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。\n今回の講義ではC++での実装はありませんのでチェックを外しておきます。\nまた、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。\n<img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います\n**Phone and Tablet**のみチェックをつけ、```API 24: Android 7.0 (Nougat)```を選択したら、```Next```をクリックします\n<img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n5.**Empty Activity**を選択し```Next```をクリックします\n<img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n6.初期画面となるActivity設定を行います\n以下の表の通りに項目を設定して```Next```をクリックします\n\n|項目名                             |説明                |入力内容       |\n|:---------------------------------|:-----------------:|:------------:|\n|Activity Name                     |画面名              |MainActivity  |\n|Generate Layout File              |デザインファイル作成有無|チェックを入れる|\n|Layout Name                       |デザインファイル名    |activity_main |\n|Backwards Compatibility(AppCompat)|下方互換性の有無      |チェックを入れる |\n\n<img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます\nインストールが終了し**done**の文字が表示されたら```Finish```をクリックします。\n<img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n8.構築が終了すると開発画面に遷移します\n**Messages**エリアにエラーとリンクが表示されている場合はリンクをクリックします\n<img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n9.不足しているComponentのインストールを行います\n**android-sdk-license**が選択された状態で**Accept**にチェックをいれ```Next```をクリックします\n<img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n10.Componentのインストール状況が表示されるので終了を待ちます\n<img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n11.インストールが終わったら```Finish```をクリックします\n<img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です\n<img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\">\n\nAndroidStudioのエディタ画面でエラー（**Messages**エリアの<font color=\"red\">赤いメッセージ</font>）が消えない場合は声をかけてください。\n\n以上でAndroidアプリの新規プロジェクト作成が完了です。\n次の[検索画面レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)ページでは作成したプロジェクトが起動した時に表示される画面のレイアウトを実装していきます。","slug":"03-StartAndroidDevelopment","published":1,"updated":"2018-02-13T05:02:15.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0q600033l61zp7231p7","content":"<p>講座で解説のために作成するアプリの紹介とプロジェクトの作成</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#蔵書検索アプリ\">蔵書検索アプリ</a><ul>\n<li><a href=\"#ライブラリとは\">ライブラリとは</a></li>\n</ul>\n</li>\n<li><a href=\"#新しいプロジェクトを作る\">新しいプロジェクトを作る</a></li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><p>蔵書検索アプリの開発を始めるにあたり、<br>Androidアプリのプロジェクト作成について基本的な手順を学習します。<br>また、当記事全体を通して完成するアプリのイメージを把握していきます、</p>\n<h1><span id=\"蔵書検索アプリ\">蔵書検索アプリ</span></h1><p>今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。<br>機能として以下</p>\n<ul>\n<li>蔵書名から部分一致、一致する蔵書の検索機能</li>\n<li>蔵書名から検索した結果を一覧で画面表示する機能</li>\n<li>蔵書検索した履歴管理機能</li>\n</ul>\n<p>検索機能に利用するサービス<br><a href=\"https://developers.google.com/books/\" target=\"_blank\" rel=\"external\">Google Books API</a></p>\n<p>ネットワーク通信処理に利用するライブラリ<br><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">okHttp</a></p>\n<p>検索履歴を保存するアプリ内データベースに利用するライブラリ<br><a href=\"https://realm.io/jp/\" target=\"_blank\" rel=\"external\">Realm</a></p>\n<h2><span id=\"ライブラリとは\">ライブラリとは</span></h2><p>便利な機能を纏め、アプリ開発を簡単にしてくれるプログラム。</p>\n<ul>\n<li>okHttp：インターネット通信を行うプログラムを簡略化する機能を持ったライブラリ</li>\n<li>Realm：データベースの作成から操作を簡略化する機能を持ったライブラリ</li>\n</ul>\n<h1><span id=\"新しいプロジェクトを作る\">新しいプロジェクトを作る</span></h1><p>1.Windows ホーム画面の左下にある<code>検索欄</code>に<code>Android</code>と入力し<strong>Android Studio</strong>をクリックし起動します。<br><img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\"><br>2.<code>Start a new Android Studio project</code>をクリック<br><img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>3.新規プロジェクト作成時にはアプリ名などを入力します<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Application name</td>\n<td style=\"text-align:center\">アプリ名</td>\n<td style=\"text-align:center\">BookDiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Company domain</td>\n<td style=\"text-align:center\">全世界の独自ドメイン</td>\n<td style=\"text-align:center\">example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Project location</td>\n<td style=\"text-align:center\">プロジェクトの保存先</td>\n<td style=\"text-align:center\">任意設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include C++ support</td>\n<td style=\"text-align:center\">C++ライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include Kotlin support</td>\n<td style=\"text-align:center\">Kotlinライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Company domain</strong>は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。<br>今回の講義ではC++での実装はありませんのでチェックを外しておきます。<br>また、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。<br><img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います<br><strong>Phone and Tablet</strong>のみチェックをつけ、<code>API 24: Android 7.0 (Nougat)</code>を選択したら、<code>Next</code>をクリックします<br><img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>5.<strong>Empty Activity</strong>を選択し<code>Next</code>をクリックします<br><img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>6.初期画面となるActivity設定を行います<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Activity Name</td>\n<td style=\"text-align:center\">画面名</td>\n<td style=\"text-align:center\">MainActivity</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Generate Layout File</td>\n<td style=\"text-align:center\">デザインファイル作成有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Layout Name</td>\n<td style=\"text-align:center\">デザインファイル名</td>\n<td style=\"text-align:center\">activity_main</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Backwards Compatibility(AppCompat)</td>\n<td style=\"text-align:center\">下方互換性の有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます<br>インストールが終了し<strong>done</strong>の文字が表示されたら<code>Finish</code>をクリックします。<br><img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>8.構築が終了すると開発画面に遷移します<br><strong>Messages</strong>エリアにエラーとリンクが表示されている場合はリンクをクリックします<br><img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>9.不足しているComponentのインストールを行います<br><strong>android-sdk-license</strong>が選択された状態で<strong>Accept</strong>にチェックをいれ<code>Next</code>をクリックします<br><img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>10.Componentのインストール状況が表示されるので終了を待ちます<br><img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>11.インストールが終わったら<code>Finish</code>をクリックします<br><img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です<br><img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"></p>\n<p>AndroidStudioのエディタ画面でエラー（<strong>Messages</strong>エリアの<font color=\"red\">赤いメッセージ</font>）が消えない場合は声をかけてください。</p>\n<p>以上でAndroidアプリの新規プロジェクト作成が完了です。<br>次の<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">検索画面レイアウト作成</a>ページでは作成したプロジェクトが起動した時に表示される画面のレイアウトを実装していきます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>講座で解説のために作成するアプリの紹介とプロジェクトの作成</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#蔵書検索アプリ\">蔵書検索アプリ</a><ul>\n<li><a href=\"#ライブラリとは\">ライブラリとは</a></li>\n</ul>\n</li>\n<li><a href=\"#新しいプロジェクトを作る\">新しいプロジェクトを作る</a></li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><p>蔵書検索アプリの開発を始めるにあたり、<br>Androidアプリのプロジェクト作成について基本的な手順を学習します。<br>また、当記事全体を通して完成するアプリのイメージを把握していきます、</p>\n<h1 id=\"蔵書検索アプリ\"><a href=\"#蔵書検索アプリ\" class=\"headerlink\" title=\"蔵書検索アプリ\"></a>蔵書検索アプリ</h1><p>今回の講座でAndroid アプリ開発を学ぶ上で１つのアプリを開発します。<br>機能として以下</p>\n<ul>\n<li>蔵書名から部分一致、一致する蔵書の検索機能</li>\n<li>蔵書名から検索した結果を一覧で画面表示する機能</li>\n<li>蔵書検索した履歴管理機能</li>\n</ul>\n<p>検索機能に利用するサービス<br><a href=\"https://developers.google.com/books/\" target=\"_blank\" rel=\"external\">Google Books API</a></p>\n<p>ネットワーク通信処理に利用するライブラリ<br><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">okHttp</a></p>\n<p>検索履歴を保存するアプリ内データベースに利用するライブラリ<br><a href=\"https://realm.io/jp/\" target=\"_blank\" rel=\"external\">Realm</a></p>\n<h2 id=\"ライブラリとは\"><a href=\"#ライブラリとは\" class=\"headerlink\" title=\"ライブラリとは\"></a>ライブラリとは</h2><p>便利な機能を纏め、アプリ開発を簡単にしてくれるプログラム。</p>\n<ul>\n<li>okHttp：インターネット通信を行うプログラムを簡略化する機能を持ったライブラリ</li>\n<li>Realm：データベースの作成から操作を簡略化する機能を持ったライブラリ</li>\n</ul>\n<h1 id=\"新しいプロジェクトを作る\"><a href=\"#新しいプロジェクトを作る\" class=\"headerlink\" title=\"新しいプロジェクトを作る\"></a>新しいプロジェクトを作る</h1><p>1.Windows ホーム画面の左下にある<code>検索欄</code>に<code>Android</code>と入力し<strong>Android Studio</strong>をクリックし起動します。<br><img src=\"sad01.png\" alt=\"alt\" title=\"SetUp\" width=\"600\"><br>2.<code>Start a new Android Studio project</code>をクリック<br><img src=\"sad02.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>3.新規プロジェクト作成時にはアプリ名などを入力します<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Application name</td>\n<td style=\"text-align:center\">アプリ名</td>\n<td style=\"text-align:center\">BookDiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Company domain</td>\n<td style=\"text-align:center\">全世界の独自ドメイン</td>\n<td style=\"text-align:center\">example.com</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Project location</td>\n<td style=\"text-align:center\">プロジェクトの保存先</td>\n<td style=\"text-align:center\">任意設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include C++ support</td>\n<td style=\"text-align:center\">C++ライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">include Kotlin support</td>\n<td style=\"text-align:center\">Kotlinライブラリ取込み</td>\n<td style=\"text-align:center\">チェックを外す</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Company domain</strong>は講義の説明で作成するアプリはリリースしませんので独自ドメインをお持ちでなければ初期値のままで問題ありません。<br>今回の講義ではC++での実装はありませんのでチェックを外しておきます。<br>また、Kotlinは後半で利用方法を紹介しますので一旦チェックを外しておいてください。<br><img src=\"sad03.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>4.今回作成するAndroidアプリでサポート対象とするOSバージョンの下限設定を行います<br><strong>Phone and Tablet</strong>のみチェックをつけ、<code>API 24: Android 7.0 (Nougat)</code>を選択したら、<code>Next</code>をクリックします<br><img src=\"sad04.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>5.<strong>Empty Activity</strong>を選択し<code>Next</code>をクリックします<br><img src=\"sad05.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>6.初期画面となるActivity設定を行います<br>以下の表の通りに項目を設定して<code>Next</code>をクリックします</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目名</th>\n<th style=\"text-align:center\">説明</th>\n<th style=\"text-align:center\">入力内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Activity Name</td>\n<td style=\"text-align:center\">画面名</td>\n<td style=\"text-align:center\">MainActivity</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Generate Layout File</td>\n<td style=\"text-align:center\">デザインファイル作成有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Layout Name</td>\n<td style=\"text-align:center\">デザインファイル名</td>\n<td style=\"text-align:center\">activity_main</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Backwards Compatibility(AppCompat)</td>\n<td style=\"text-align:center\">下方互換性の有無</td>\n<td style=\"text-align:center\">チェックを入れる</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"sad06.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>7.「6.」で設定した内容でAndroidアプリの開発のデフォルト環境を構築が実行されます<br>インストールが終了し<strong>done</strong>の文字が表示されたら<code>Finish</code>をクリックします。<br><img src=\"sad07.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>8.構築が終了すると開発画面に遷移します<br><strong>Messages</strong>エリアにエラーとリンクが表示されている場合はリンクをクリックします<br><img src=\"sad08.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>9.不足しているComponentのインストールを行います<br><strong>android-sdk-license</strong>が選択された状態で<strong>Accept</strong>にチェックをいれ<code>Next</code>をクリックします<br><img src=\"sad09.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>10.Componentのインストール状況が表示されるので終了を待ちます<br><img src=\"sad10.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>11.インストールが終わったら<code>Finish</code>をクリックします<br><img src=\"sad11.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"><br>12.Android Studioの開発画面に戻りエラーが消えていたらセットアップ完了です<br><img src=\"sad12.png\" alt=\"alt\" title=\"SetUp\" width=\"450\"></p>\n<p>AndroidStudioのエディタ画面でエラー（<strong>Messages</strong>エリアの<font color=\"red\">赤いメッセージ</font>）が消えない場合は声をかけてください。</p>\n<p>以上でAndroidアプリの新規プロジェクト作成が完了です。<br>次の<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">検索画面レイアウト作成</a>ページでは作成したプロジェクトが起動した時に表示される画面のレイアウトを実装していきます。</p>\n"},{"title":"検索画面レイアウト作成","date":"2017-11-04T15:00:00.000Z","_content":"Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認\n\n<!-- toc -->\n\n[Androidアプリ開発を始める](/AndroidCourse/android/03-StartAndroidDevelopment)から引き続きの学習ページです。\n# 学習ポイント\n* Layout Editor\n* Widget / View などのコンポーネント\n* エミュレータの起動、確認方法\n\n蔵書検索アプリ起動時に表示される検索画面のレイアウト構成を作りながら、\nLayout Editorや画面を構成する要素について学習します。\nまた、作成したレイアウトをエミュレータという仮想デバイスを使い表示確認を通して使い方を学習します。\n\n# Layout Editor / ConstraintLayout\nAndroidアプリに表示する画面のレイアウト構成を作るためにはLayout EditorというAndroid Studioの機能を使います。\n\nAndroidアプリのプロジェクト開始時に生成されたレイアウトxmlファイルにウィジェット(Widget)やビュー(View)を配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n\n## Layout Editor\nAndroid Studio 2.2で追加されたレイアウト構成の機能、以前までも類似する機能はあったが使いにくく、xmlファイルを直接修正することが多かったのですが、改善されたとこで視覚的にWidgetやViewを配置しやすくなった。\n特にConstrainsLayoutと合わせて使うことで画面のレイアウト作成でxmlファイルを直接修正する必要が無くなってきたことで初学者の学習コストやハードルも下がってきました。\n\nLayout Editor内、各領域の名称は以下の通りです。\n<img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\">\n\n|No.  |領域名                 |説明                                             |\n|:---:|:---------------------|:-----------------------------------------------|\n|①   |Palette               |レイアウトに配置できるウィジェットとレイアウトリストを表示されています |\n|②   |Component Tree        |レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します |\n|③   |ツールバー              |レイアウトの外観設定やプロパティを編集するためのボタンが表示されています |\n|④   |デザイン エディタ        |実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる |\n|⑤   |Properties             |現在選択されているビューの詳細な情報が表示されます |\n\n## ConstraintLayout\nAndroid 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能なコンポーネントです。\nconstraint(制約)をWidgetやViewに設定することで画面内での配置を決めることができます。\n\nまた、従来からあるの\"Linear Layout\"や\"Relative Layout\"コンポーネントに比べネスト構造を減らした実装を行うことができるようになりxmlファイルを確認する場合でも簡単になりました。\n\n## 検索画面のレイアウト作成\nアプリ起動時に表示される検索画面のレイアウトを作成を始めます、\nAndroidアプリで画面レイアウトを構成するのは、`xml`という形式のファイルになります。\n`activity_main.xml`というファイルを開き修正していきます。\n> app -> res -> layout -> activity_main.xml\n\n<img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている**\"Hello World\"**をクリックして```delete```キーを押して削除します\n<img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\nこれで画面上に何もなくなりスッキリしました。\n\nでは新しくウィジェットなどを配置する前に今回開発する蔵書検索アプリの起動時画面を見直してみましょう。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n完成した画面を見ると以下のウィジェットが配置されています。\n* 文字入力できるウィジェットが一つ\n* ボタンとしてクリックができるウィジェットが２つ\n\n全部で３つのウィジェットを使いレイアウトが構成されていることがわかりました。\n\nまずはアプリで文字入力を行うために`EditText`というウィジェットからデザインビューに配置していきます。\nAndroid開発で用意されているウィジェットやビューはLayout Editor内の<font color=\"red\">Paletteエリア</font>に全て表示されています。\n\nでは`EditText`を配置するために<font color=\"red\">Paletteエリア</font>から**Plain Text**をクリックしたまま引っ張ってデザインビューでクリックを離します。\n{% img /android/04-MakeLayoutDesign/le2.png 500 create layout %}\n続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置するために、\"editText\"の各変に制約を設定していきます、\n\"editText\"は画面中央より少し左上に表示したいので、まずは画面左隅と隣合うように制約をつけます。\n\n\"editText\"左枠に表示されている **◯**をクリックしたまま画面の左端まで引っ張って放します。\n{% img /android/04-MakeLayoutDesign/le3.png 500 create layout %}\n\"editText\"が以下の画面のように画面左隅に近づきます。\n{% img /android/04-MakeLayoutDesign/le4.png 500 create layout %}\n上記の手順で画面左端と\"editText\"の左辺を隣接する\"制約\"が設定されました。\n続けて上下と右辺も同じように各画面端と隣接する制約を設定してみてください。\n{% img /android/04-MakeLayoutDesign/le5.png 500 create layout %}\n上下左右の全てに制約を付けると\"editText\"は画面の真ん中に表示さされます。\n{% img /android/04-MakeLayoutDesign/le6.png 500 create layout %}\n\"editText\"は中央より少し左上に配置したいので制約の縦横\"バイアス\"細かい位置調整します\nバイアス設定のツマミを動かすと対象の方向で位置を動かすことができます\n{% img /android/04-MakeLayoutDesign/le7.png 500 create layout %}\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|25   |\n\nボタンを２つ配置していきます、<font color=\"red\">Paletteエリア</font>から`Button`をクリックしたまま引っ張りデザインビュー上で放します\n{% img /android/04-MakeLayoutDesign/le8.png 500 create layout %}\n\"蔵書検索\"ボタンを配置のため制約を設定していきます\n{% img /android/04-MakeLayoutDesign/le9.png 500 create layout %}\n\n|Buttonの辺|隣り合わせる箇所  |\n|:---------|:-------------|\n|上辺       |画面上端       |\n|左辺       |\"editText\"右端 |\n|下辺       |画面下端       |\n|右辺       |画面右端       |\n\n先ほどの\"editText\"と同じ高さに調整するため、バイアスを調整します\n{% img /android/04-MakeLayoutDesign/le10.png 500 create layout %}\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|50   |\n\n**Button**に表示される文言を変更するために、右の<font color=\"red\">Attributesエリア</font>から\"text\"項目を探し、**\"蔵書検索\"**と入力します\n{% img /android/04-MakeLayoutDesign/le11.png 500 create layout %}\n\n残りの\"閲覧履歴\"ボタンを画面の通り制約を使って配置してみましょう\n<font color=\"red\">ヒント１：ウィジェットの辺同士に制約をつけることもできます</font>\n{% img /android/04-MakeLayoutDesign/le12.png 500 create layout %}\n\nこれで検索画面のレイアウトが完成しましたのでエミュレータにて表示確認をしてみましょう。\n\n## 表示確認\nレイアウトやプログラムを修正したら動かして確認してみたくなりますね、\n今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って表示確認をしてみます。\n\nエミュレータや実機でアプリを実行するためには下記画面の`Run`ボタンをクリックします\n{% img /android/04-MakeLayoutDesign/runemu01.png 500 Run Project %}\n\n\"Select Deployment Target\"と書かれたダイアログが表示されますが、ここには接続されている実機やエミュレータなど、Androidアプリを実行するデバイスを選ぶことができます。\n\nUSBで接続されたAndroidデバイスや既にエミュレータをインストールされているPCでない場合は以下のように何も表示されないと思います。\n{% img /android/04-MakeLayoutDesign/runemu02.png 500 Run Project %}\n今回はエミュレータを新規作成して使用しますので、`Create New Virtual Device`をクリックして新しいエミュレータを作成します。\n作成するエミュレータを選びますので<font color=\"red\">**Pixel**</font>を選択して`Next`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu03.png 500 Run Project %}\nエミュレータにインストールするAndorid OSのバージョンを選択します。\n<font color=\"red\">**API Level 24のNougat**</font>のDownloadをクリックします\n{% img /android/04-MakeLayoutDesign/runemu04.png 500 Run Project %}\n<font color=\"red\">**API Level 24 Nougat**</font>の仮想OSイメージのダウンロードが始まるので、完了を待ちます。\n{% img /android/04-MakeLayoutDesign/runemu05.png 500 Run Project %}\n仮想OSイメージのダウンロードが終わったら`Finish`をクリックします。\n{% img /android/04-MakeLayoutDesign/runemu06.png 500 Run Project %}\nダウンロードの完了した<font color=\"red\">**Nougat**</font>を選択して`Next`をクリックします。\n{% img /android/04-MakeLayoutDesign/runemu07.png 500 Run Project %}\nエミュレータの名前や設定変更画面では変更は行わずに`Finish`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu08.png 500 Run Project %}\nエミュレータの作成が終わると、実行するデバイスの選択画面に戻ります\n今回は作成したエミュレータの名前が表示されるので、<font color=\"red\">**Pixel API 24**</font>を選択して`OK`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu09.png 500 Run Project %}\nAndroidのエミュレータが起動し\n{% img /android/04-MakeLayoutDesign/runemu10.png 300 Run Project %}\nエミュレータの画面に作成したレイアウトが表示されれば成功です！\n{% img /android/04-MakeLayoutDesign/runemu11.png 250 Run Project %}\n\n# デザイン課題\n最後に一つ課題で復習してみましょう。\nEditTextの上にTextViewを以下のレイアウトの様に配置してください。\n画面に表示される文言や制約の設定まで設定してください。\n{% img /android/04-MakeLayoutDesign/MakeLayoutTask.png 500 Make Layout Task %}\n\nこれでAndroidアプリのレイアウト作成とエミュレータでの実行方法と表示確認は完了です。\n次の[ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)ページでは作成したレイアウトのボタンやEditTextがクリックや文字入力された時のプログラムを実装していきます。","source":"_posts/android/04-MakeLayoutDesign.md","raw":"---\ntitle: 検索画面レイアウト作成\ndate: 2017-11-05\n---\nLayout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認\n\n<!-- toc -->\n\n[Androidアプリ開発を始める](/AndroidCourse/android/03-StartAndroidDevelopment)から引き続きの学習ページです。\n# 学習ポイント\n* Layout Editor\n* Widget / View などのコンポーネント\n* エミュレータの起動、確認方法\n\n蔵書検索アプリ起動時に表示される検索画面のレイアウト構成を作りながら、\nLayout Editorや画面を構成する要素について学習します。\nまた、作成したレイアウトをエミュレータという仮想デバイスを使い表示確認を通して使い方を学習します。\n\n# Layout Editor / ConstraintLayout\nAndroidアプリに表示する画面のレイアウト構成を作るためにはLayout EditorというAndroid Studioの機能を使います。\n\nAndroidアプリのプロジェクト開始時に生成されたレイアウトxmlファイルにウィジェット(Widget)やビュー(View)を配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n\n## Layout Editor\nAndroid Studio 2.2で追加されたレイアウト構成の機能、以前までも類似する機能はあったが使いにくく、xmlファイルを直接修正することが多かったのですが、改善されたとこで視覚的にWidgetやViewを配置しやすくなった。\n特にConstrainsLayoutと合わせて使うことで画面のレイアウト作成でxmlファイルを直接修正する必要が無くなってきたことで初学者の学習コストやハードルも下がってきました。\n\nLayout Editor内、各領域の名称は以下の通りです。\n<img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\">\n\n|No.  |領域名                 |説明                                             |\n|:---:|:---------------------|:-----------------------------------------------|\n|①   |Palette               |レイアウトに配置できるウィジェットとレイアウトリストを表示されています |\n|②   |Component Tree        |レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します |\n|③   |ツールバー              |レイアウトの外観設定やプロパティを編集するためのボタンが表示されています |\n|④   |デザイン エディタ        |実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる |\n|⑤   |Properties             |現在選択されているビューの詳細な情報が表示されます |\n\n## ConstraintLayout\nAndroid 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能なコンポーネントです。\nconstraint(制約)をWidgetやViewに設定することで画面内での配置を決めることができます。\n\nまた、従来からあるの\"Linear Layout\"や\"Relative Layout\"コンポーネントに比べネスト構造を減らした実装を行うことができるようになりxmlファイルを確認する場合でも簡単になりました。\n\n## 検索画面のレイアウト作成\nアプリ起動時に表示される検索画面のレイアウトを作成を始めます、\nAndroidアプリで画面レイアウトを構成するのは、`xml`という形式のファイルになります。\n`activity_main.xml`というファイルを開き修正していきます。\n> app -> res -> layout -> activity_main.xml\n\n<img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\n以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている**\"Hello World\"**をクリックして```delete```キーを押して削除します\n<img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\">\nこれで画面上に何もなくなりスッキリしました。\n\nでは新しくウィジェットなどを配置する前に今回開発する蔵書検索アプリの起動時画面を見直してみましょう。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n完成した画面を見ると以下のウィジェットが配置されています。\n* 文字入力できるウィジェットが一つ\n* ボタンとしてクリックができるウィジェットが２つ\n\n全部で３つのウィジェットを使いレイアウトが構成されていることがわかりました。\n\nまずはアプリで文字入力を行うために`EditText`というウィジェットからデザインビューに配置していきます。\nAndroid開発で用意されているウィジェットやビューはLayout Editor内の<font color=\"red\">Paletteエリア</font>に全て表示されています。\n\nでは`EditText`を配置するために<font color=\"red\">Paletteエリア</font>から**Plain Text**をクリックしたまま引っ張ってデザインビューでクリックを離します。\n{% img /android/04-MakeLayoutDesign/le2.png 500 create layout %}\n続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置するために、\"editText\"の各変に制約を設定していきます、\n\"editText\"は画面中央より少し左上に表示したいので、まずは画面左隅と隣合うように制約をつけます。\n\n\"editText\"左枠に表示されている **◯**をクリックしたまま画面の左端まで引っ張って放します。\n{% img /android/04-MakeLayoutDesign/le3.png 500 create layout %}\n\"editText\"が以下の画面のように画面左隅に近づきます。\n{% img /android/04-MakeLayoutDesign/le4.png 500 create layout %}\n上記の手順で画面左端と\"editText\"の左辺を隣接する\"制約\"が設定されました。\n続けて上下と右辺も同じように各画面端と隣接する制約を設定してみてください。\n{% img /android/04-MakeLayoutDesign/le5.png 500 create layout %}\n上下左右の全てに制約を付けると\"editText\"は画面の真ん中に表示さされます。\n{% img /android/04-MakeLayoutDesign/le6.png 500 create layout %}\n\"editText\"は中央より少し左上に配置したいので制約の縦横\"バイアス\"細かい位置調整します\nバイアス設定のツマミを動かすと対象の方向で位置を動かすことができます\n{% img /android/04-MakeLayoutDesign/le7.png 500 create layout %}\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|25   |\n\nボタンを２つ配置していきます、<font color=\"red\">Paletteエリア</font>から`Button`をクリックしたまま引っ張りデザインビュー上で放します\n{% img /android/04-MakeLayoutDesign/le8.png 500 create layout %}\n\"蔵書検索\"ボタンを配置のため制約を設定していきます\n{% img /android/04-MakeLayoutDesign/le9.png 500 create layout %}\n\n|Buttonの辺|隣り合わせる箇所  |\n|:---------|:-------------|\n|上辺       |画面上端       |\n|左辺       |\"editText\"右端 |\n|下辺       |画面下端       |\n|右辺       |画面右端       |\n\n先ほどの\"editText\"と同じ高さに調整するため、バイアスを調整します\n{% img /android/04-MakeLayoutDesign/le10.png 500 create layout %}\n\n|バイアス方向|設定値|\n|:---------|:----|\n|垂直バイアス|40   |\n|水平バイアス|50   |\n\n**Button**に表示される文言を変更するために、右の<font color=\"red\">Attributesエリア</font>から\"text\"項目を探し、**\"蔵書検索\"**と入力します\n{% img /android/04-MakeLayoutDesign/le11.png 500 create layout %}\n\n残りの\"閲覧履歴\"ボタンを画面の通り制約を使って配置してみましょう\n<font color=\"red\">ヒント１：ウィジェットの辺同士に制約をつけることもできます</font>\n{% img /android/04-MakeLayoutDesign/le12.png 500 create layout %}\n\nこれで検索画面のレイアウトが完成しましたのでエミュレータにて表示確認をしてみましょう。\n\n## 表示確認\nレイアウトやプログラムを修正したら動かして確認してみたくなりますね、\n今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って表示確認をしてみます。\n\nエミュレータや実機でアプリを実行するためには下記画面の`Run`ボタンをクリックします\n{% img /android/04-MakeLayoutDesign/runemu01.png 500 Run Project %}\n\n\"Select Deployment Target\"と書かれたダイアログが表示されますが、ここには接続されている実機やエミュレータなど、Androidアプリを実行するデバイスを選ぶことができます。\n\nUSBで接続されたAndroidデバイスや既にエミュレータをインストールされているPCでない場合は以下のように何も表示されないと思います。\n{% img /android/04-MakeLayoutDesign/runemu02.png 500 Run Project %}\n今回はエミュレータを新規作成して使用しますので、`Create New Virtual Device`をクリックして新しいエミュレータを作成します。\n作成するエミュレータを選びますので<font color=\"red\">**Pixel**</font>を選択して`Next`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu03.png 500 Run Project %}\nエミュレータにインストールするAndorid OSのバージョンを選択します。\n<font color=\"red\">**API Level 24のNougat**</font>のDownloadをクリックします\n{% img /android/04-MakeLayoutDesign/runemu04.png 500 Run Project %}\n<font color=\"red\">**API Level 24 Nougat**</font>の仮想OSイメージのダウンロードが始まるので、完了を待ちます。\n{% img /android/04-MakeLayoutDesign/runemu05.png 500 Run Project %}\n仮想OSイメージのダウンロードが終わったら`Finish`をクリックします。\n{% img /android/04-MakeLayoutDesign/runemu06.png 500 Run Project %}\nダウンロードの完了した<font color=\"red\">**Nougat**</font>を選択して`Next`をクリックします。\n{% img /android/04-MakeLayoutDesign/runemu07.png 500 Run Project %}\nエミュレータの名前や設定変更画面では変更は行わずに`Finish`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu08.png 500 Run Project %}\nエミュレータの作成が終わると、実行するデバイスの選択画面に戻ります\n今回は作成したエミュレータの名前が表示されるので、<font color=\"red\">**Pixel API 24**</font>を選択して`OK`をクリックします\n{% img /android/04-MakeLayoutDesign/runemu09.png 500 Run Project %}\nAndroidのエミュレータが起動し\n{% img /android/04-MakeLayoutDesign/runemu10.png 300 Run Project %}\nエミュレータの画面に作成したレイアウトが表示されれば成功です！\n{% img /android/04-MakeLayoutDesign/runemu11.png 250 Run Project %}\n\n# デザイン課題\n最後に一つ課題で復習してみましょう。\nEditTextの上にTextViewを以下のレイアウトの様に配置してください。\n画面に表示される文言や制約の設定まで設定してください。\n{% img /android/04-MakeLayoutDesign/MakeLayoutTask.png 500 Make Layout Task %}\n\nこれでAndroidアプリのレイアウト作成とエミュレータでの実行方法と表示確認は完了です。\n次の[ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)ページでは作成したレイアウトのボタンやEditTextがクリックや文字入力された時のプログラムを実装していきます。","slug":"04-MakeLayoutDesign","published":1,"updated":"2018-02-13T05:02:15.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0qd00043l61bw7h54nw","content":"<p>Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</a><ul>\n<li><a href=\"#layout-editor\">Layout Editor</a></li>\n<li><a href=\"#constraintlayout\">ConstraintLayout</a></li>\n<li><a href=\"#検索画面のレイアウト作成\">検索画面のレイアウト作成</a></li>\n<li><a href=\"#表示確認\">表示確認</a></li>\n</ul>\n</li>\n<li><a href=\"#デザイン課題\">デザイン課題</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/03-StartAndroidDevelopment\">Androidアプリ開発を始める</a>から引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>Layout Editor</li>\n<li>Widget / View などのコンポーネント</li>\n<li>エミュレータの起動、確認方法</li>\n</ul>\n<p>蔵書検索アプリ起動時に表示される検索画面のレイアウト構成を作りながら、<br>Layout Editorや画面を構成する要素について学習します。<br>また、作成したレイアウトをエミュレータという仮想デバイスを使い表示確認を通して使い方を学習します。</p>\n<h1><span id=\"layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</span></h1><p>Androidアプリに表示する画面のレイアウト構成を作るためにはLayout EditorというAndroid Studioの機能を使います。</p>\n<p>Androidアプリのプロジェクト開始時に生成されたレイアウトxmlファイルにウィジェット(Widget)やビュー(View)を配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"></p>\n<h2><span id=\"layout-editor\">Layout Editor</span></h2><p>Android Studio 2.2で追加されたレイアウト構成の機能、以前までも類似する機能はあったが使いにくく、xmlファイルを直接修正することが多かったのですが、改善されたとこで視覚的にWidgetやViewを配置しやすくなった。<br>特にConstrainsLayoutと合わせて使うことで画面のレイアウト作成でxmlファイルを直接修正する必要が無くなってきたことで初学者の学習コストやハードルも下がってきました。</p>\n<p>Layout Editor内、各領域の名称は以下の通りです。<br><img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">領域名</th>\n<th style=\"text-align:left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">Palette</td>\n<td style=\"text-align:left\">レイアウトに配置できるウィジェットとレイアウトリストを表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">Component Tree</td>\n<td style=\"text-align:left\">レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">ツールバー</td>\n<td style=\"text-align:left\">レイアウトの外観設定やプロパティを編集するためのボタンが表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">デザイン エディタ</td>\n<td style=\"text-align:left\">実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">Properties</td>\n<td style=\"text-align:left\">現在選択されているビューの詳細な情報が表示されます</td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"constraintlayout\">ConstraintLayout</span></h2><p>Android 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能なコンポーネントです。<br>constraint(制約)をWidgetやViewに設定することで画面内での配置を決めることができます。</p>\n<p>また、従来からあるの”Linear Layout”や”Relative Layout”コンポーネントに比べネスト構造を減らした実装を行うことができるようになりxmlファイルを確認する場合でも簡単になりました。</p>\n<h2><span id=\"検索画面のレイアウト作成\">検索画面のレイアウト作成</span></h2><p>アプリ起動時に表示される検索画面のレイアウトを作成を始めます、<br>Androidアプリで画面レイアウトを構成するのは、<code>xml</code>という形式のファイルになります。<br><code>activity_main.xml</code>というファイルを開き修正していきます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_main.xml</p>\n</blockquote>\n<p><img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている<strong>“Hello World”</strong>をクリックして<code>delete</code>キーを押して削除します<br><img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>これで画面上に何もなくなりスッキリしました。</p>\n<p>では新しくウィジェットなどを配置する前に今回開発する蔵書検索アプリの起動時画面を見直してみましょう。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"><br>完成した画面を見ると以下のウィジェットが配置されています。</p>\n<ul>\n<li>文字入力できるウィジェットが一つ</li>\n<li>ボタンとしてクリックができるウィジェットが２つ</li>\n</ul>\n<p>全部で３つのウィジェットを使いレイアウトが構成されていることがわかりました。</p>\n<p>まずはアプリで文字入力を行うために<code>EditText</code>というウィジェットからデザインビューに配置していきます。<br>Android開発で用意されているウィジェットやビューはLayout Editor内の<font color=\"red\">Paletteエリア</font>に全て表示されています。</p>\n<p>では<code>EditText</code>を配置するために<font color=\"red\">Paletteエリア</font>から<strong>Plain Text</strong>をクリックしたまま引っ張ってデザインビューでクリックを離します。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le2.png\" width=\"500\" title=\"create layout\"><br>続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置するために、”editText”の各変に制約を設定していきます、<br>“editText”は画面中央より少し左上に表示したいので、まずは画面左隅と隣合うように制約をつけます。</p>\n<p>“editText”左枠に表示されている <strong>◯</strong>をクリックしたまま画面の左端まで引っ張って放します。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le3.png\" width=\"500\" title=\"create layout\"><br>“editText”が以下の画面のように画面左隅に近づきます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le4.png\" width=\"500\" title=\"create layout\"><br>上記の手順で画面左端と”editText”の左辺を隣接する”制約”が設定されました。<br>続けて上下と右辺も同じように各画面端と隣接する制約を設定してみてください。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le5.png\" width=\"500\" title=\"create layout\"><br>上下左右の全てに制約を付けると”editText”は画面の真ん中に表示さされます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le6.png\" width=\"500\" title=\"create layout\"><br>“editText”は中央より少し左上に配置したいので制約の縦横”バイアス”細かい位置調整します<br>バイアス設定のツマミを動かすと対象の方向で位置を動かすことができます<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le7.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<p>ボタンを２つ配置していきます、<font color=\"red\">Paletteエリア</font>から<code>Button</code>をクリックしたまま引っ張りデザインビュー上で放します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le8.png\" width=\"500\" title=\"create layout\"><br>“蔵書検索”ボタンを配置のため制約を設定していきます<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le9.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Buttonの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">“editText”右端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p>先ほどの”editText”と同じ高さに調整するため、バイアスを調整します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le10.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">50</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Button</strong>に表示される文言を変更するために、右の<font color=\"red\">Attributesエリア</font>から”text”項目を探し、<strong>“蔵書検索”</strong>と入力します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le11.png\" width=\"500\" title=\"create layout\"></p>\n<p>残りの”閲覧履歴”ボタンを画面の通り制約を使って配置してみましょう</p>\n<p><font color=\"red\">ヒント１：ウィジェットの辺同士に制約をつけることもできます</font><br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le12.png\" width=\"500\" title=\"create layout\"></p>\n<p>これで検索画面のレイアウトが完成しましたのでエミュレータにて表示確認をしてみましょう。</p>\n<h2><span id=\"表示確認\">表示確認</span></h2><p>レイアウトやプログラムを修正したら動かして確認してみたくなりますね、<br>今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って表示確認をしてみます。</p>\n<p>エミュレータや実機でアプリを実行するためには下記画面の<code>Run</code>ボタンをクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu01.png\" width=\"500\" title=\"Run Project\"></p>\n<p>“Select Deployment Target”と書かれたダイアログが表示されますが、ここには接続されている実機やエミュレータなど、Androidアプリを実行するデバイスを選ぶことができます。</p>\n<p>USBで接続されたAndroidデバイスや既にエミュレータをインストールされているPCでない場合は以下のように何も表示されないと思います。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu02.png\" width=\"500\" title=\"Run Project\"><br>今回はエミュレータを新規作成して使用しますので、<code>Create New Virtual Device</code>をクリックして新しいエミュレータを作成します。<br>作成するエミュレータを選びますので<font color=\"red\"><strong>Pixel</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu03.png\" width=\"500\" title=\"Run Project\"><br>エミュレータにインストールするAndorid OSのバージョンを選択します。</p>\n<p><font color=\"red\"><strong>API Level 24のNougat</strong></font>のDownloadをクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu04.png\" width=\"500\" title=\"Run Project\"></p>\n<p><font color=\"red\"><strong>API Level 24 Nougat</strong></font>の仮想OSイメージのダウンロードが始まるので、完了を待ちます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu05.png\" width=\"500\" title=\"Run Project\"><br>仮想OSイメージのダウンロードが終わったら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu06.png\" width=\"500\" title=\"Run Project\"><br>ダウンロードの完了した<font color=\"red\"><strong>Nougat</strong></font>を選択して<code>Next</code>をクリックします。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu07.png\" width=\"500\" title=\"Run Project\"><br>エミュレータの名前や設定変更画面では変更は行わずに<code>Finish</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu08.png\" width=\"500\" title=\"Run Project\"><br>エミュレータの作成が終わると、実行するデバイスの選択画面に戻ります<br>今回は作成したエミュレータの名前が表示されるので、<font color=\"red\"><strong>Pixel API 24</strong></font>を選択して<code>OK</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu09.png\" width=\"500\" title=\"Run Project\"><br>Androidのエミュレータが起動し<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu10.png\" width=\"300\" title=\"Run Project\"><br>エミュレータの画面に作成したレイアウトが表示されれば成功です！<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu11.png\" width=\"250\" title=\"Run Project\"></p>\n<h1><span id=\"デザイン課題\">デザイン課題</span></h1><p>最後に一つ課題で復習してみましょう。<br>EditTextの上にTextViewを以下のレイアウトの様に配置してください。<br>画面に表示される文言や制約の設定まで設定してください。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/MakeLayoutTask.png\" width=\"500\" title=\"Make Layout Task\"></p>\n<p>これでAndroidアプリのレイアウト作成とエミュレータでの実行方法と表示確認は完了です。<br>次の<a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a>ページでは作成したレイアウトのボタンやEditTextがクリックや文字入力された時のプログラムを実装していきます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Layout Editor / ConstraintLayoutを使用したレイアウト実装と動作確認</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#layout-editor-constraintlayout\">Layout Editor / ConstraintLayout</a><ul>\n<li><a href=\"#layout-editor\">Layout Editor</a></li>\n<li><a href=\"#constraintlayout\">ConstraintLayout</a></li>\n<li><a href=\"#検索画面のレイアウト作成\">検索画面のレイアウト作成</a></li>\n<li><a href=\"#表示確認\">表示確認</a></li>\n</ul>\n</li>\n<li><a href=\"#デザイン課題\">デザイン課題</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/03-StartAndroidDevelopment\">Androidアプリ開発を始める</a>から引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>Layout Editor</li>\n<li>Widget / View などのコンポーネント</li>\n<li>エミュレータの起動、確認方法</li>\n</ul>\n<p>蔵書検索アプリ起動時に表示される検索画面のレイアウト構成を作りながら、<br>Layout Editorや画面を構成する要素について学習します。<br>また、作成したレイアウトをエミュレータという仮想デバイスを使い表示確認を通して使い方を学習します。</p>\n<h1 id=\"Layout-Editor-ConstraintLayout\"><a href=\"#Layout-Editor-ConstraintLayout\" class=\"headerlink\" title=\"Layout Editor / ConstraintLayout\"></a>Layout Editor / ConstraintLayout</h1><p>Androidアプリに表示する画面のレイアウト構成を作るためにはLayout EditorというAndroid Studioの機能を使います。</p>\n<p>Androidアプリのプロジェクト開始時に生成されたレイアウトxmlファイルにウィジェット(Widget)やビュー(View)を配置し、ウィジェットごとに制約を設定して以下画像のように表示位置を決めていきます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"></p>\n<h2 id=\"Layout-Editor\"><a href=\"#Layout-Editor\" class=\"headerlink\" title=\"Layout Editor\"></a>Layout Editor</h2><p>Android Studio 2.2で追加されたレイアウト構成の機能、以前までも類似する機能はあったが使いにくく、xmlファイルを直接修正することが多かったのですが、改善されたとこで視覚的にWidgetやViewを配置しやすくなった。<br>特にConstrainsLayoutと合わせて使うことで画面のレイアウト作成でxmlファイルを直接修正する必要が無くなってきたことで初学者の学習コストやハードルも下がってきました。</p>\n<p>Layout Editor内、各領域の名称は以下の通りです。<br><img src=\"https://developer.android.com/studio/images/write/layout-editor-callouts_2-2_2x.png?hl=ja\" alt=\"alt\" title=\"Layout Editor\" width=\"550\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">領域名</th>\n<th style=\"text-align:left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">Palette</td>\n<td style=\"text-align:left\">レイアウトに配置できるウィジェットとレイアウトリストを表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">Component Tree</td>\n<td style=\"text-align:left\">レイアウトのビュー階層を表示/移動することができます、Viewの重なりもここで調整します</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">ツールバー</td>\n<td style=\"text-align:left\">レイアウトの外観設定やプロパティを編集するためのボタンが表示されています</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">デザイン エディタ</td>\n<td style=\"text-align:left\">実際の見た目が確認できる<font color=\"red\">デザインビュー</font>と制約を確認できる<font color=\"red\">ブループリントビュー</font>が表示されまる</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">Properties</td>\n<td style=\"text-align:left\">現在選択されているビューの詳細な情報が表示されます</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ConstraintLayout\"><a href=\"#ConstraintLayout\" class=\"headerlink\" title=\"ConstraintLayout\"></a>ConstraintLayout</h2><p>Android 2.3(Gingerbread)以上を対象に開発を行う場合に利用することが可能なコンポーネントです。<br>constraint(制約)をWidgetやViewに設定することで画面内での配置を決めることができます。</p>\n<p>また、従来からあるの”Linear Layout”や”Relative Layout”コンポーネントに比べネスト構造を減らした実装を行うことができるようになりxmlファイルを確認する場合でも簡単になりました。</p>\n<h2 id=\"検索画面のレイアウト作成\"><a href=\"#検索画面のレイアウト作成\" class=\"headerlink\" title=\"検索画面のレイアウト作成\"></a>検索画面のレイアウト作成</h2><p>アプリ起動時に表示される検索画面のレイアウトを作成を始めます、<br>Androidアプリで画面レイアウトを構成するのは、<code>xml</code>という形式のファイルになります。<br><code>activity_main.xml</code>というファイルを開き修正していきます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_main.xml</p>\n</blockquote>\n<p><img src=\"le0.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>以下の画像のようにLayout Editorが表示されたら、サンプルの為で始めから表示されている<strong>“Hello World”</strong>をクリックして<code>delete</code>キーを押して削除します<br><img src=\"le1.png\" alt=\"alt\" title=\"create layout\" width=\"500\"><br>これで画面上に何もなくなりスッキリしました。</p>\n<p>では新しくウィジェットなどを配置する前に今回開発する蔵書検索アプリの起動時画面を見直してみましょう。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"><br>完成した画面を見ると以下のウィジェットが配置されています。</p>\n<ul>\n<li>文字入力できるウィジェットが一つ</li>\n<li>ボタンとしてクリックができるウィジェットが２つ</li>\n</ul>\n<p>全部で３つのウィジェットを使いレイアウトが構成されていることがわかりました。</p>\n<p>まずはアプリで文字入力を行うために<code>EditText</code>というウィジェットからデザインビューに配置していきます。<br>Android開発で用意されているウィジェットやビューはLayout Editor内の<font color=\"red\">Paletteエリア</font>に全て表示されています。</p>\n<p>では<code>EditText</code>を配置するために<font color=\"red\">Paletteエリア</font>から<strong>Plain Text</strong>をクリックしたまま引っ張ってデザインビューでクリックを離します。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le2.png\" width=\"500\" title=\"create layout\"><br>続いてウィジェットやビューをデザインビューに乗せたら表示させたい位置に配置するために、”editText”の各変に制約を設定していきます、<br>“editText”は画面中央より少し左上に表示したいので、まずは画面左隅と隣合うように制約をつけます。</p>\n<p>“editText”左枠に表示されている <strong>◯</strong>をクリックしたまま画面の左端まで引っ張って放します。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le3.png\" width=\"500\" title=\"create layout\"><br>“editText”が以下の画面のように画面左隅に近づきます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le4.png\" width=\"500\" title=\"create layout\"><br>上記の手順で画面左端と”editText”の左辺を隣接する”制約”が設定されました。<br>続けて上下と右辺も同じように各画面端と隣接する制約を設定してみてください。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le5.png\" width=\"500\" title=\"create layout\"><br>上下左右の全てに制約を付けると”editText”は画面の真ん中に表示さされます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le6.png\" width=\"500\" title=\"create layout\"><br>“editText”は中央より少し左上に配置したいので制約の縦横”バイアス”細かい位置調整します<br>バイアス設定のツマミを動かすと対象の方向で位置を動かすことができます<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le7.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">25</td>\n</tr>\n</tbody>\n</table>\n<p>ボタンを２つ配置していきます、<font color=\"red\">Paletteエリア</font>から<code>Button</code>をクリックしたまま引っ張りデザインビュー上で放します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le8.png\" width=\"500\" title=\"create layout\"><br>“蔵書検索”ボタンを配置のため制約を設定していきます<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le9.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Buttonの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">“editText”右端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p>先ほどの”editText”と同じ高さに調整するため、バイアスを調整します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le10.png\" width=\"500\" title=\"create layout\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">バイアス方向</th>\n<th style=\"text-align:left\">設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">垂直バイアス</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">水平バイアス</td>\n<td style=\"text-align:left\">50</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Button</strong>に表示される文言を変更するために、右の<font color=\"red\">Attributesエリア</font>から”text”項目を探し、<strong>“蔵書検索”</strong>と入力します<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le11.png\" width=\"500\" title=\"create layout\"></p>\n<p>残りの”閲覧履歴”ボタンを画面の通り制約を使って配置してみましょう</p>\n<p><font color=\"red\">ヒント１：ウィジェットの辺同士に制約をつけることもできます</font><br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/le12.png\" width=\"500\" title=\"create layout\"></p>\n<p>これで検索画面のレイアウトが完成しましたのでエミュレータにて表示確認をしてみましょう。</p>\n<h2 id=\"表示確認\"><a href=\"#表示確認\" class=\"headerlink\" title=\"表示確認\"></a>表示確認</h2><p>レイアウトやプログラムを修正したら動かして確認してみたくなりますね、<br>今回はAndroid Studioに内臓されているエミュレータ（仮想デバイス）を使って表示確認をしてみます。</p>\n<p>エミュレータや実機でアプリを実行するためには下記画面の<code>Run</code>ボタンをクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu01.png\" width=\"500\" title=\"Run Project\"></p>\n<p>“Select Deployment Target”と書かれたダイアログが表示されますが、ここには接続されている実機やエミュレータなど、Androidアプリを実行するデバイスを選ぶことができます。</p>\n<p>USBで接続されたAndroidデバイスや既にエミュレータをインストールされているPCでない場合は以下のように何も表示されないと思います。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu02.png\" width=\"500\" title=\"Run Project\"><br>今回はエミュレータを新規作成して使用しますので、<code>Create New Virtual Device</code>をクリックして新しいエミュレータを作成します。<br>作成するエミュレータを選びますので<font color=\"red\"><strong>Pixel</strong></font>を選択して<code>Next</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu03.png\" width=\"500\" title=\"Run Project\"><br>エミュレータにインストールするAndorid OSのバージョンを選択します。</p>\n<p><font color=\"red\"><strong>API Level 24のNougat</strong></font>のDownloadをクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu04.png\" width=\"500\" title=\"Run Project\"></p>\n<p><font color=\"red\"><strong>API Level 24 Nougat</strong></font>の仮想OSイメージのダウンロードが始まるので、完了を待ちます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu05.png\" width=\"500\" title=\"Run Project\"><br>仮想OSイメージのダウンロードが終わったら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu06.png\" width=\"500\" title=\"Run Project\"><br>ダウンロードの完了した<font color=\"red\"><strong>Nougat</strong></font>を選択して<code>Next</code>をクリックします。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu07.png\" width=\"500\" title=\"Run Project\"><br>エミュレータの名前や設定変更画面では変更は行わずに<code>Finish</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu08.png\" width=\"500\" title=\"Run Project\"><br>エミュレータの作成が終わると、実行するデバイスの選択画面に戻ります<br>今回は作成したエミュレータの名前が表示されるので、<font color=\"red\"><strong>Pixel API 24</strong></font>を選択して<code>OK</code>をクリックします<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu09.png\" width=\"500\" title=\"Run Project\"><br>Androidのエミュレータが起動し<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu10.png\" width=\"300\" title=\"Run Project\"><br>エミュレータの画面に作成したレイアウトが表示されれば成功です！<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/runemu11.png\" width=\"250\" title=\"Run Project\"></p>\n<h1 id=\"デザイン課題\"><a href=\"#デザイン課題\" class=\"headerlink\" title=\"デザイン課題\"></a>デザイン課題</h1><p>最後に一つ課題で復習してみましょう。<br>EditTextの上にTextViewを以下のレイアウトの様に配置してください。<br>画面に表示される文言や制約の設定まで設定してください。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/MakeLayoutTask.png\" width=\"500\" title=\"Make Layout Task\"></p>\n<p>これでAndroidアプリのレイアウト作成とエミュレータでの実行方法と表示確認は完了です。<br>次の<a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a>ページでは作成したレイアウトのボタンやEditTextがクリックや文字入力された時のプログラムを実装していきます。</p>\n"},{"title":"ボタンイベントの実装","date":"2017-11-05T15:00:00.000Z","_content":"アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。\n合わせてコンソールログを表示、Toast(トースト)の機能を試します\n\n<!-- toc -->\n\n[検索画面レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)からの引き続きの学習ページです。\n# 学習ポイント\n* レイアウトファイルとjavaファイル間のウィジェットの関連付け\n* ボタンクリックイベントの実装方法\n* クラス、変数\n* メソッド\n* 条件分岐と繰り返し処理\n\nレイアウト作成した画面に配置したボタンがクリックされた時に実行したい命令を作りながらレイアウトファイルとjavaファイルでの関連付けやプログラミングにおける重要な変数、メソッドを学習します。\n\n# 検索画面の機能を考える\nこのページからはプログラムの実装していきますが、前のページで作成したレイアウトにはどんな操作が発生するか考えるため、もう一度完成したレイアウトを見てみます。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n大まかに以下ような操作をユーザが行い、ウィジェットによっては機能として動くプログラムを実装する必要がありそうです。\n1. 検索する蔵書名、またはその一部を入力する操作\n1. 蔵書検索ボタンをクリック\n    * 入力された蔵書名、またはその一部から蔵書の検索結果を表示する画面に遷移する機能\n1. 閲覧履歴をクリック\n    * 過去に検索結果から閲覧した蔵書のリストを表示する画面に遷移する機能\n\n当ページではアプリを作る上での基礎になる\"ボタンをクリックした時に画面を遷移する\"の前にボタンをクリックした時にログ表示、Toastを表示するところまでを解説していきます。\n\n# javaプログラムとxmlレイアウトの関連付け\n普段何気なく使っているアプリのボタンをクリックした時、アプリではプログラムが実行され別の画面を表示したり、計算や文字の置き換えなどの命令を実行して画面の表示内容を更新するなど見えないところで色々な命令が動いています。\n\nボタンをクリックした時のプログラムや画面の表示内容更新などは**java**ファイルに実装していきます。\n\"検索画面レイアウト作成\"ページでレイアウト作成したのは`activity_main.xml`というファイルでしたが、このレイアウトファイルは「MainActivity.java」のプログラムによって画面に表示されています。\n\nでは**MainActivity.java**ファイルを開きプログラムを実装していきます。\n{% img /android/05-ButtonAction/setid04.png 500 rerationcode %}\n\n前の記事[レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)の内容で作成したxmlレイアウトですが、\n実は\"MainActivity.java\"の中ですでに関連付けのプログラムが実装されています。\nそれが以下のコード内矢印に囲まれてる`setContentView()`という命令でMainActivity.javaが表示され`setContentView()`の命令を実行する際に \"()\" 内で指定したレイアウトxmlファイルと関連付けを行い、内部で画面に表示するという命令を実行してくれています。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓\n        setContentView(R.layout.activity_main);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n`setContentView()`の様に必ず書かないといけないけど説明が難しいコードを<font color=\"red\">***おまじない***</font>と紹介されることがありますが、実装されていないとアプリが異常終了してしまったり、今回の場合では画面が真っ白な画面が表示されるだけになってしまうので<font color=\"red\">***おまじない***</font>と紹介されたところは*よくわからないけど書かないとよくないことが起こる*と頭の片隅に置いておいてください。\n\n次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど**javaファイルでクリックされた時のプログラムを書く**必要があります。\n`setContentView()`を実行したことでMainActivity.javaから\"activity_main.xml\"のボタンなどウィジェットやビューを参照できる状態になっています、\nあとはボタンやエディットテキストなどを各ウィジェットやビューにユニークな名称(他と被らない情報)があればjavaファイルでも判別して使えそうです。\n\n\"activity_main.xml”内のButtonやEditTextなどにはユニークな名称を設定する項目として**ID**という項目があるので、**activity_main.xml**を開きます。\n{% img /android/05-ButtonAction/rerationcode01.png 500 rerationcode %}\n\n\"蔵書検索\"ボタンをクリックしAttributesエリアから**\"ID\"**項目を以下のように修正します\n{% img /android/05-ButtonAction/setid01.png 500 rerationcode %}\n\n> button -> BookSearchBtn\n\n合わせて他のウィジェットの**\"ID\"**項目も変更していきます。\n※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください\n{% img /android/05-ButtonAction/setid03.png 500 rerationcode %}\n\n|No.  |変更前のID |変更後ID         |\n|:---:|:---------|:--------------|\n|①   |button    |BookSearchBtn  |\n|②   |editText  |BookSearchEdit |\n|③   |button2   |HistoryBtn     |\n\nIDを変更するとComponent Treeの表示にも変更が反映されます\nこれで画面のボタンなどに\"ID\"項目を設定することができました、ここからがjavaプログラムの実装です、MainActivity.javaからウィジェットやビューと関連付けの方法を紹介していきます。\n\nButtonやEditTextなどのウィジェットをjavaプログラムで操作できる様にするにはいくつかの方法がありますが、一番よく使う方法として<font color=\"red\">`findViewById()`</font>を使う方法で実装していきます。\n\"setContentView\" で関連付けたレイアウトxml内のウィジェットやビューに設定した\"ID\"を`findViewById`の後ろの \"()\"内に 指定することでjavaプログラムで”ボタンをクリックした時\"の命令を登録したり、\"ボタンに表示する文言などを表示後に変更する\"ことができる様になります。\n\n## コード記述時の便利機能\nこれからコード記述する中でボタンやIDの入力中に小さいリスト表示がされると思います,\n例えばButtonなどは\"Button\"と入力している間に以下の様に表示されるので矢印と同じ項目を十字キーで選択して`Enter`を押すことで\"Button\"クラスをjavaファイルで使用できる様になります。\n{% img /android/05-ButtonAction/importclass01.png 500 Import Class %}\nもし、上記のタイミングを逃してしまった場合は赤くなっている<font color=\"red\">Button</font>をマウスカーソルでクリックし下図の様に出てきたコマンドを入力するとjavaクラスで利用できる様になります。\n* Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>\n* Macの場合：<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>\n{% img /android/05-ButtonAction/importclass02.png 450 Import Class %}\n\n\n上記の便利機能を踏まえて`findViewById`メソッドと \"activity_main.xml\"で設定した**ID**を使ってButtonウィジェットの関連付けを行います。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n最初に実装したコードですので追加した２行にどんな意味合いがあるのかみていきましょう\n{% img /android/05-ButtonAction/setid06.png 600 rerationcode %}\n\n|No.  |各No.のコードの説明                                     |\n|:---:|:----------------------------------------------------|\n|①   |activity_main.xml内のウィジェットと関連づける型            |\n|②   |MainActivity.javaで使う時のユニークな名前                 |\n|③   |①〜②で宣言したウィジェットに情報を登録する時の記述方法       |\n|④   |④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム |\n|⑤   |activity_main.xml内から取得するウィジェット/ビューのユニークID |\n\nこれで\"蔵書検索\"ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。\n\nxmlファイル内のウィジェットなどとjavaファイルの関連付けは非常に多く利用するコードですので利用方法を理解しておきましょう。\n* ①〜⑤の工程はプログラムで表示するデータを動的に一時的に記憶したり、表示したりする上で大事なクラス（変数）の宣言から初期化）を行なっています。\n* ①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うためにわかりやすい名前をつけて準備をしています。\n* 本来ボタンオブジェクトは\"ボタンの色\"、\"ボタンに表示する文字\"など情報を持っていますが、①〜②の工程だけでは名前が準備されただけで`bookSearchBtn`は全く情報を持っていません。\n* `bookSearchBtn `に情報を登録するには<font color=\"blue\">**オブジェクト化（インスタンス化とも呼ばれます）**</font>という工程が必要になります、\nその工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に`bookSearchBtn`がもつ\"ボタンの色\"、\"ボタンに表示する文字\"などの情報を\n参照したり変更したりすることが可能になります。\n\n追加した行の最後に`;`が入力されていますが、これは行末を示すコードです。\n*{}*の後ろには基本`;`入力は不要ですが、例外の場合もあるのでプログラミングを進めながら解説していきます。\n\n# ボタンクリックアクションの実装\n\"蔵書検索\"ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。\nプログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、実行中のデータを確認する時にも利用できるので試してみます。\n\n`new View.OnClickListener...`を実装する時にも小さいウィンドウが表示されたらそちらから選択すると内部の`onClick`メソッドまで自動的に入力してくれます。\n{% img /android/05-ButtonAction/addClickEvent01.png 600 insert Click Event %}\n`OnClick`メソッドまでは実装してくれます、行末を表す`;`だけが未入力になるので注意してください。\n{% img /android/05-ButtonAction/addClickEvent02.png 600 insert Click Event %}\nでは実装していきます。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        ///↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記コードの実装が完了したら動作確認をします、`Run`アイコンをクリックしてエミュレータを起動します。\nアプリ画面が表示されたら**蔵書検索**ボタンをクリックしてみてください。\n\nAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。\n{% img /android/05-ButtonAction/setid07.png 650 rerationcode %}\n実装したコードで表示されるログですが、出力するためには以下のような形式で実装する必要があります。\nログを表示するプログラムのとして以下のテンプレートを覚えておきましょう。\n```\nLog.d(\"tag name\", \"message\");\n```\n\nボタンを押した時にログを表示する命令を実行するプログラムを実装ました、ここまでの全体の工程をおさらいします。\n{% img /android/05-ButtonAction/DesignCode.png 450 DesignCode %}\n文字の色分けなどは以下の通りです\n* <font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題\n* <font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順\n* また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題\n* <font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所\n\nここまでに聞きなれない単語がいくつか出てきました、アプリ開発に限らずプログラムを\n行なっていく上で<font color=\"blue\">**とても重要**</font>な概念ですので詳しく解説します。\n## クラス、変数\nプログラムで使用するデータを一時的に記憶しておいたり、計算や画面に表示するデータとして使用するために使用する概念になります。\n変数を解説/理解する上で色々なたとえがあるのですが、以下Wikipediaの内容が一番理解しやすかったので一部引用させてもらいました。\n\n{% blockquote 変数(プログラミング) https://ja.wikipedia.org/wiki/%E5%A4%89%E6%95%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0) wikipedia %}\nデータを一定期間記憶し必要なときに利用できるようにするために、データに固有の名前を与えたものである。 一人一人の人間が異なる名前によって区別されるように、一つ一つの変数も名前によって区別される。\n変数が表しているデータをその変数の値（あたい）という。\n{% endblockquote %}\n\n一部文中省いているところはありますが、上記の様にデータを一定期間記憶、使用することができる固有（ユニーク）な名称をつけたものになります。\n変数につけた固有名称を変数名と呼びます。\n\n変数に記憶しておけるデータの種類が決まっており、種類のことを***型***と呼びます。\n型は一度決めてしまうと後から変更することはできません。\n型の種類は以下の通りです、Stringは厳密には型ではありませんが、頻繁に使用するので一緒に記載しておきます。\n\n|型名    |記憶できるデータ       |データの範囲                                   |\n|:------|:-------------------:|:--------------------------------------------|\n|byte   |符号つき8ビット整数型   |-128 ～ 127                                  |\n|short  |符号つき16ビット整数型  |-32768 ～ 32767                              |\n|int    |符号つき32ビット整数型  |-2147483648 ～ 2147483647                    |\n|long   |符号つき64ビット整数型  |-9223372036854775808 ～ 9223372036854775807  |\n|float  |32ビット浮動小数点数型  |1.4E-45 〜 3.4028235E38                      |\n|double |64ビット浮動小数点数型  |4.9E-324 〜　1.7976931348623157E308           |\n|boolean|論理型                |true(真)、false(偽)                           |\n|char   |符号なし１６ビット文字型 |Unicode文字１文字 : ¥0000 〜 ¥FFFF / 0 〜 65535|\n|String |文字列クラス           |複数の文字を扱うことができる                     |\n\nクラス、変数を利用するための操作として**宣言**、**代入**、**参照**の３つがあります。\n* 宣言\n    * 一定期間記憶しておくデータの型、変数名を明確に記述することを宣言と呼びます、宣言を行わないと変数は参照できません\n* 代入\n    * 宣言した変数に一定期間記憶しておくデータを登録/更新すること\n    * 宣言された変数に最初にデータを登録(格納)することを*初期化*と言います\n    * 宣言されたクラスに最初にデータを*オブジェクト化(インスタンス化)*と言います\n* 参照\n    * 宣言され、初期化された変数のデータを利用することを指します\n    * 数値であれば計算に利用したり、文字列であれば画面に表示する際に**参照**することが多いです\n\n次に変数とクラスはプログラミング上の利用方法が似ているためここでは一緒に紹介しますが、変数とクラスでは記憶しておけるデータの量が違います。\nそれぞれの特徴としては\n変数：**変数は１つだけデータを記憶しておくことができる**\nクラス：**クラスは複数の変数を複数記憶することができ、次に紹介するメソッドも複数持つことができる**\nという違いがあります。\n\nクラスは内部に変数を持っていることも多く、今回使用している`Button`クラスは内部でボタンに表示する文字列や表示する座標位置など\n様々な情報を持っており、その情報を参照するためのメソッドが用意されています。\n\n### ウィジェットとクラス\nウィジェットもクラスに該当します、違いはというとAndroid SDKが準備した画面表示の要素の有無となります。\nウィジェット = クラスであり、Android SDKに準備されているレイアウトxmlファイルに表示できる要素を持っているものと区別しましょう。\n\n## メソッド\n複数の命令を組み合わせた処理の一まとまりをjavaでは**メソッド**と呼びます。\nまた**メソッド**にも名称をつけて管理しており、*メソッド名*と呼びます。\n\nすでに上記までにメソッドは出てきており、\n`onCreate()`や`setContentView()`、`findViewById()`がメソッドに該当します。\n\nメソッドも変数に類似している箇所があり、利用するための操作として**宣言**、**実装部**、**参照**の３つがあります。\n* 宣言\n    * *戻り値*の型、メソッド名を明確に記述することを宣言と呼びます、宣言を行わないと参照できません\n    * メソッドの実装部で命令を進めるために基準となるデータが必要な場合があり、データをメソッドに渡すことができます、この機能を*引数(引数)*と呼びます\n* 実装部\n    * メソッドが行う複数の命令を全て記述されている箇所\n* 参照\n    * メソッドを利用すること、メソッドの実装部にバグがなければ戻り値を受け取ることができる\n\nメソッドの利用において難しいポイントは*戻り値*と*引数*になる場合が多いです。\nメソッド宣言は形式が決まっているため、見合わせるとどこに何が明記されているかわかりやすくなります。\n```\n    戻り値の型 メソッド名 (引数の型 引数名) {\n       メソッドの実装部 \n    }\n```\n*戻り値の前に\"protected\",\"public\"などのアクセス修飾子と呼ばれるコードが書かれていることが多いですが、アクセス修飾子は後の講義で解説します。*\n\n`onCreate()`メソッドを例にすると\n```\n    protected void onCreate(Bundle savedInstanceState) {\n        メソッドの実装部\n    }\n```\n\"void\" = 戻り値の型\n\"onCreate\" = メソッド名\n\"Bundle\" = 引数の型\n”savedInstanceState” = 引数名\nということになります。\n上記で**void**という新しい型が出てきましたが、戻り値がないことを明示するコードになります。\nvoid型の変数は存在しないのでメソッドの宣言時以外ではあまり見かけないコードです。\n\nそして宣言箇所で\"引数の型\"、\"引数名\"が記載されていないメソッドは引数が無いメソッドということになります。\n\n続いてメソッドを参照している箇所は`setContetView()`を例にします。\n```\n    setContetView(R.layout.activity_main.xml)\n```\n\nメソッド名の後の \"()\" 内に引数を設定します、”setContentView\"メソッドは参照時に画面表示するレイアウトxmlの情報を引数に記述することで、引数に記述したレイアウトを画面表示する命令を実行しています。\n\n# ボタンクリックアクションでトースト表示機能\n先程までのコードを拡張してToast表示機能を実装していきます。\nEditTextに入力された文字を画面に表示するプログラムに作り変えていきます。\n```java  MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\nコードの修正が終わったら`Run`アイコンをクリックしてエミュレータにアプリをインストールし直します。\nコードを修正した場合、エミュレータや実機にインストールし直さないとレイアウトやプログラムの修正は反映されないので気をつけましょう。\n\nEditTextに文字を入力してから**蔵書検索**ボタンをクリックしてみます。\n前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？\n{% img /android/05-ButtonAction/setid08.png 300 rerationcode %}\n\nこの画面上に現れる機能がToastです、一方的にユーザに情報を伝える時などに利用します、\nToastは一定時間で自動的に非表示になりますので、Toast用の確認ボタンなどは存在しません。\n\n# 色々なボタンイベントの実装\nボタンが押した時のプログラム実装解説は以上になります。\nしかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。\nその例をいくつか紹介します。\n\nここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。\n\n## パターン１\nボタンが押された時のプログラムをボタンに登録しながら実装するパターンです\nボタンが押された時のプログラムが短いものなど多く使われるパターンです\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンをクリックした時の命令\n            }\n        });\n    }\n}\n```\n\n\n## パターン２\n`bookSearchBtn`の宣言場所が違う実装方法\nパターン２は`bookSearchBtn`インスタンスの宣言スコープが違う実装方法です\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンをクリックした時の命令\n            }\n        });\n    }\n}\n```\n\n## パターン３\n当ページで紹介したプログラムとボタンイベントのプログラムのスコープを`MainActivityクラス`全体で使えるようにした実装方法です\n当ページで紹介したパターンと違い`MainActivityクラス`全体で使うことができます\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // ボタンをクリックした時の命令\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\n\n## パターン４\n`View.OnClickLister`インターフェースをMainActivityクラスに付与した実装方法\nパターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        // ボタンをクリックした時の命令\n    }\n}\n```\n\n## パターン５\n新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法\nこの方法はリスト表示されている時などに使うことが多いです\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new ButtonClick());\n    }\n    \n    class ButtonClick implements View.OnClickListener {\n        @Override\n        public void onClick(View view) {\n            // ボタンをクリックした時の命令\n        }\n    }\n}\n```\n\n他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。\nボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが\n記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。\n\nですが、<font color=\"red\">**プログラムを細かく見る（読む）**</font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで\nプログラムを深く理解することができるようになります。\n\n# プログラム課題\n今回の課題ではプログラミングを進める中で必ず出てくる**超重要**な処理の、\"条件分岐\"、\"繰り返し\"処理の書き方を学習していきます。\n蔵書検索アプリを作る中でもこの先で何度も出てくるので忘れない様しっかり課題にしていきます。\n## 条件分岐処理\n１つ目の**超重要**処理は\"条件分岐\"です。\n単語だけを聞くと使い方など難しく感じるかもしれませんが、\n* 晴れているので外で遊ぶ\n* 雨が降っているので家で勉強する\n\n上記の様に「〜だったら○○をする」という条件に該当した時に特定の処理を実行する制御文です。\n晴れている条件だけをプログラムにすると\n```java\n    if (晴れている) {\n        外で遊ぶ\n    }\n```\nさらに、雨が降った時の条件を加えて見ます\n```java\n    if (晴れている) {\n        外で遊ぶ\n    } else if (雨が降っている) {\n        家で勉強する\n    }\n```\nさらにさらにそれ以外の天気全ての場合には \"電車で図書館に向かう\"条件をつか加えます\n```java\n    if (晴れている) {\n        外で遊ぶ\n    } else if (雨が降っている) {\n        家で勉強する\n    } else {\n        電車で図書館に向かう\n    }\n```\n条件分岐処理`if`文の実装方法は以上のパターンが多く \"else if\"をなしに\"if~else\"だけで記述することも可能です。\n`if`文の使い方のテンプレートとしては以下です。\n```java\n    if (条件判定文) {\n        条件判定文に該当した場合に処理する命令\n    }\n```\n\n試しにEditTextに入力された文字数が３文字より多い時だけToastを表示する様に修正します。\nString型変数の文字数を参照するには`length()`メソッドを使います。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\nEditTextが3文字より多い場合だけToastが表示される様になりましたか？\n\n`if`文で判定処理を行う場合は、必ず条件の結果が「正(true)/非(false)」のどちらかになる様に条件を記述します。\n上記でEditTextの文字列を判定する際に **>**という記号を使いましたが、これを***比較演算子***と呼びます。\n比較演算子には以下の通りの種類がありますので、状況に応じて使い分けます。\n\n|論理演算子|正(true)判定の条件                     |\n|:--------|:------------------------------------|\n|==       |左右の値が同じ場合のみ正(true)           |\n|>        |右の値より右の値が1以上大きい時に正(true) |\n|<        |左の値より右の値が1以上大きい時に正(true) |\n|>=       |左の値が右の値以上の時に正(true)         |\n|<=       |右の値が左の値以上の時に正(true)         |\n\n上記、\"正(true)判定の条件\"以外の場合は非(false)となります。\n<font color=\"blue\">**では改めてここからが課題です。**</font>\n`if`構文を使った課題です、以下の条件を満たすプログラムに修正してください。\n* EditTextに入力されている文字数が3文字以下の場合はToastで「EditTextの文字数は○文字です。」と表示します。\n    * ○の中はEditTextの文字数を表示します。\n* EditTextに入力されている文字数が10文字より多い場合はToastで「10文字以下で入力してください。」と表示します。\n* それ以外の場合はToastで「EditTextに○○と入力されています。」と表示します。\n    * ○の中はEditTextの文字列を表示します。\n\n## 繰り返し処理\n２つ目の**超重要**処理は\"繰り返し\"です。\n文字通り同じ処理を繰り返します。指定処理を指定の回数繰り返し処理する制御文です。\n繰り返し処理の基本は`for`文と呼ばれています。\nある処理を10回繰り返したい時以下の様に実装します。\n```java\n    for (int i = 0; i < 10; i++) {\n        繰り返したい処理\n    }\n```\n上記のコードをテンプレートとして解説すると、\n```java\n    for (繰り返し変数の初期化; 繰り返す回数を決める条件; 繰り返し変数の増減式) {\n        繰り返したい処理\n    }\n```\nとなります。\nまずは使って見ましょう、`if`文の課題の続きでプログラムを修正します、\nログを使って繰り返されているか確認してます。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // コンソールログにボタンが押されたことを５回出力(表示)\n                for (int i = 0; i < 5; i++) {\n                    Log.d(\"BookSearchBtn\", \"蔵書検索ボタンが押されました：\" + (i + 1) + \"回目\");\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n`Logcat`を確認して「蔵書検索ボタンが押されました：○回目」と５回表示されていれば成功です。\n次はログに星を沢山表示させて見ます。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // コンソールログにボタンが押されたことを５回出力(表示)\n                String star = \"☆\";\n                for (int i = 0; i < 5; i++) {\n                    Log.d(\"BookSearchBtn\", star);\n                    star += \"☆\";\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードで動作確認します。\n`Logcat`にて５行の星が一個づつ増えて表示されたでしょうか？\nでは最後に`for`と`if`構文を合わせて使う課題です、\n以下の条件を満たすプログラムに修正してください。\n* 繰り返し処理において、何回目の繰り返し処理かログに表示します。\n    * 「○回目の繰り返し処理」とログに出力されている。(○は繰り返し回数を表示)\n* 偶数の時だけ「☆」を表示する。星の表示個数は繰り返しの回数と同じ個数とします。\n* 最後に表示される「☆」の数が10個であること。\n\n以上でボタンが押された時のプログラム実装ができました、次の[検索結果一覧画面作成](/AndroidCourse/android/06-TransitionScreen)ではリスト表示レイアウト及び、画面遷移処理に関して実装していきます。\n","source":"_posts/android/05-ButtonAction.md","raw":"---\ntitle: ボタンイベントの実装\ndate: 2017-11-06\n---\nアプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。\n合わせてコンソールログを表示、Toast(トースト)の機能を試します\n\n<!-- toc -->\n\n[検索画面レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)からの引き続きの学習ページです。\n# 学習ポイント\n* レイアウトファイルとjavaファイル間のウィジェットの関連付け\n* ボタンクリックイベントの実装方法\n* クラス、変数\n* メソッド\n* 条件分岐と繰り返し処理\n\nレイアウト作成した画面に配置したボタンがクリックされた時に実行したい命令を作りながらレイアウトファイルとjavaファイルでの関連付けやプログラミングにおける重要な変数、メソッドを学習します。\n\n# 検索画面の機能を考える\nこのページからはプログラムの実装していきますが、前のページで作成したレイアウトにはどんな操作が発生するか考えるため、もう一度完成したレイアウトを見てみます。\n{% img /android/04-MakeLayoutDesign/CompleteScreen.png 500 CompleteScreen %}\n大まかに以下ような操作をユーザが行い、ウィジェットによっては機能として動くプログラムを実装する必要がありそうです。\n1. 検索する蔵書名、またはその一部を入力する操作\n1. 蔵書検索ボタンをクリック\n    * 入力された蔵書名、またはその一部から蔵書の検索結果を表示する画面に遷移する機能\n1. 閲覧履歴をクリック\n    * 過去に検索結果から閲覧した蔵書のリストを表示する画面に遷移する機能\n\n当ページではアプリを作る上での基礎になる\"ボタンをクリックした時に画面を遷移する\"の前にボタンをクリックした時にログ表示、Toastを表示するところまでを解説していきます。\n\n# javaプログラムとxmlレイアウトの関連付け\n普段何気なく使っているアプリのボタンをクリックした時、アプリではプログラムが実行され別の画面を表示したり、計算や文字の置き換えなどの命令を実行して画面の表示内容を更新するなど見えないところで色々な命令が動いています。\n\nボタンをクリックした時のプログラムや画面の表示内容更新などは**java**ファイルに実装していきます。\n\"検索画面レイアウト作成\"ページでレイアウト作成したのは`activity_main.xml`というファイルでしたが、このレイアウトファイルは「MainActivity.java」のプログラムによって画面に表示されています。\n\nでは**MainActivity.java**ファイルを開きプログラムを実装していきます。\n{% img /android/05-ButtonAction/setid04.png 500 rerationcode %}\n\n前の記事[レイアウト作成](/AndroidCourse/android/04-MakeLayoutDesign)の内容で作成したxmlレイアウトですが、\n実は\"MainActivity.java\"の中ですでに関連付けのプログラムが実装されています。\nそれが以下のコード内矢印に囲まれてる`setContentView()`という命令でMainActivity.javaが表示され`setContentView()`の命令を実行する際に \"()\" 内で指定したレイアウトxmlファイルと関連付けを行い、内部で画面に表示するという命令を実行してくれています。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        //↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓\n        setContentView(R.layout.activity_main);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n`setContentView()`の様に必ず書かないといけないけど説明が難しいコードを<font color=\"red\">***おまじない***</font>と紹介されることがありますが、実装されていないとアプリが異常終了してしまったり、今回の場合では画面が真っ白な画面が表示されるだけになってしまうので<font color=\"red\">***おまじない***</font>と紹介されたところは*よくわからないけど書かないとよくないことが起こる*と頭の片隅に置いておいてください。\n\n次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど**javaファイルでクリックされた時のプログラムを書く**必要があります。\n`setContentView()`を実行したことでMainActivity.javaから\"activity_main.xml\"のボタンなどウィジェットやビューを参照できる状態になっています、\nあとはボタンやエディットテキストなどを各ウィジェットやビューにユニークな名称(他と被らない情報)があればjavaファイルでも判別して使えそうです。\n\n\"activity_main.xml”内のButtonやEditTextなどにはユニークな名称を設定する項目として**ID**という項目があるので、**activity_main.xml**を開きます。\n{% img /android/05-ButtonAction/rerationcode01.png 500 rerationcode %}\n\n\"蔵書検索\"ボタンをクリックしAttributesエリアから**\"ID\"**項目を以下のように修正します\n{% img /android/05-ButtonAction/setid01.png 500 rerationcode %}\n\n> button -> BookSearchBtn\n\n合わせて他のウィジェットの**\"ID\"**項目も変更していきます。\n※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください\n{% img /android/05-ButtonAction/setid03.png 500 rerationcode %}\n\n|No.  |変更前のID |変更後ID         |\n|:---:|:---------|:--------------|\n|①   |button    |BookSearchBtn  |\n|②   |editText  |BookSearchEdit |\n|③   |button2   |HistoryBtn     |\n\nIDを変更するとComponent Treeの表示にも変更が反映されます\nこれで画面のボタンなどに\"ID\"項目を設定することができました、ここからがjavaプログラムの実装です、MainActivity.javaからウィジェットやビューと関連付けの方法を紹介していきます。\n\nButtonやEditTextなどのウィジェットをjavaプログラムで操作できる様にするにはいくつかの方法がありますが、一番よく使う方法として<font color=\"red\">`findViewById()`</font>を使う方法で実装していきます。\n\"setContentView\" で関連付けたレイアウトxml内のウィジェットやビューに設定した\"ID\"を`findViewById`の後ろの \"()\"内に 指定することでjavaプログラムで”ボタンをクリックした時\"の命令を登録したり、\"ボタンに表示する文言などを表示後に変更する\"ことができる様になります。\n\n## コード記述時の便利機能\nこれからコード記述する中でボタンやIDの入力中に小さいリスト表示がされると思います,\n例えばButtonなどは\"Button\"と入力している間に以下の様に表示されるので矢印と同じ項目を十字キーで選択して`Enter`を押すことで\"Button\"クラスをjavaファイルで使用できる様になります。\n{% img /android/05-ButtonAction/importclass01.png 500 Import Class %}\nもし、上記のタイミングを逃してしまった場合は赤くなっている<font color=\"red\">Button</font>をマウスカーソルでクリックし下図の様に出てきたコマンドを入力するとjavaクラスで利用できる様になります。\n* Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>\n* Macの場合：<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>\n{% img /android/05-ButtonAction/importclass02.png 450 Import Class %}\n\n\n上記の便利機能を踏まえて`findViewById`メソッドと \"activity_main.xml\"で設定した**ID**を使ってButtonウィジェットの関連付けを行います。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n最初に実装したコードですので追加した２行にどんな意味合いがあるのかみていきましょう\n{% img /android/05-ButtonAction/setid06.png 600 rerationcode %}\n\n|No.  |各No.のコードの説明                                     |\n|:---:|:----------------------------------------------------|\n|①   |activity_main.xml内のウィジェットと関連づける型            |\n|②   |MainActivity.javaで使う時のユニークな名前                 |\n|③   |①〜②で宣言したウィジェットに情報を登録する時の記述方法       |\n|④   |④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム |\n|⑤   |activity_main.xml内から取得するウィジェット/ビューのユニークID |\n\nこれで\"蔵書検索\"ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。\n\nxmlファイル内のウィジェットなどとjavaファイルの関連付けは非常に多く利用するコードですので利用方法を理解しておきましょう。\n* ①〜⑤の工程はプログラムで表示するデータを動的に一時的に記憶したり、表示したりする上で大事なクラス（変数）の宣言から初期化）を行なっています。\n* ①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うためにわかりやすい名前をつけて準備をしています。\n* 本来ボタンオブジェクトは\"ボタンの色\"、\"ボタンに表示する文字\"など情報を持っていますが、①〜②の工程だけでは名前が準備されただけで`bookSearchBtn`は全く情報を持っていません。\n* `bookSearchBtn `に情報を登録するには<font color=\"blue\">**オブジェクト化（インスタンス化とも呼ばれます）**</font>という工程が必要になります、\nその工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に`bookSearchBtn`がもつ\"ボタンの色\"、\"ボタンに表示する文字\"などの情報を\n参照したり変更したりすることが可能になります。\n\n追加した行の最後に`;`が入力されていますが、これは行末を示すコードです。\n*{}*の後ろには基本`;`入力は不要ですが、例外の場合もあるのでプログラミングを進めながら解説していきます。\n\n# ボタンクリックアクションの実装\n\"蔵書検索\"ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。\nプログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、実行中のデータを確認する時にも利用できるので試してみます。\n\n`new View.OnClickListener...`を実装する時にも小さいウィンドウが表示されたらそちらから選択すると内部の`onClick`メソッドまで自動的に入力してくれます。\n{% img /android/05-ButtonAction/addClickEvent01.png 600 insert Click Event %}\n`OnClick`メソッドまでは実装してくれます、行末を表す`;`だけが未入力になるので注意してください。\n{% img /android/05-ButtonAction/addClickEvent02.png 600 insert Click Event %}\nでは実装していきます。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        ///↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n上記コードの実装が完了したら動作確認をします、`Run`アイコンをクリックしてエミュレータを起動します。\nアプリ画面が表示されたら**蔵書検索**ボタンをクリックしてみてください。\n\nAndroid Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。\n{% img /android/05-ButtonAction/setid07.png 650 rerationcode %}\n実装したコードで表示されるログですが、出力するためには以下のような形式で実装する必要があります。\nログを表示するプログラムのとして以下のテンプレートを覚えておきましょう。\n```\nLog.d(\"tag name\", \"message\");\n```\n\nボタンを押した時にログを表示する命令を実行するプログラムを実装ました、ここまでの全体の工程をおさらいします。\n{% img /android/05-ButtonAction/DesignCode.png 450 DesignCode %}\n文字の色分けなどは以下の通りです\n* <font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題\n* <font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順\n* また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題\n* <font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所\n\nここまでに聞きなれない単語がいくつか出てきました、アプリ開発に限らずプログラムを\n行なっていく上で<font color=\"blue\">**とても重要**</font>な概念ですので詳しく解説します。\n## クラス、変数\nプログラムで使用するデータを一時的に記憶しておいたり、計算や画面に表示するデータとして使用するために使用する概念になります。\n変数を解説/理解する上で色々なたとえがあるのですが、以下Wikipediaの内容が一番理解しやすかったので一部引用させてもらいました。\n\n{% blockquote 変数(プログラミング) https://ja.wikipedia.org/wiki/%E5%A4%89%E6%95%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0) wikipedia %}\nデータを一定期間記憶し必要なときに利用できるようにするために、データに固有の名前を与えたものである。 一人一人の人間が異なる名前によって区別されるように、一つ一つの変数も名前によって区別される。\n変数が表しているデータをその変数の値（あたい）という。\n{% endblockquote %}\n\n一部文中省いているところはありますが、上記の様にデータを一定期間記憶、使用することができる固有（ユニーク）な名称をつけたものになります。\n変数につけた固有名称を変数名と呼びます。\n\n変数に記憶しておけるデータの種類が決まっており、種類のことを***型***と呼びます。\n型は一度決めてしまうと後から変更することはできません。\n型の種類は以下の通りです、Stringは厳密には型ではありませんが、頻繁に使用するので一緒に記載しておきます。\n\n|型名    |記憶できるデータ       |データの範囲                                   |\n|:------|:-------------------:|:--------------------------------------------|\n|byte   |符号つき8ビット整数型   |-128 ～ 127                                  |\n|short  |符号つき16ビット整数型  |-32768 ～ 32767                              |\n|int    |符号つき32ビット整数型  |-2147483648 ～ 2147483647                    |\n|long   |符号つき64ビット整数型  |-9223372036854775808 ～ 9223372036854775807  |\n|float  |32ビット浮動小数点数型  |1.4E-45 〜 3.4028235E38                      |\n|double |64ビット浮動小数点数型  |4.9E-324 〜　1.7976931348623157E308           |\n|boolean|論理型                |true(真)、false(偽)                           |\n|char   |符号なし１６ビット文字型 |Unicode文字１文字 : ¥0000 〜 ¥FFFF / 0 〜 65535|\n|String |文字列クラス           |複数の文字を扱うことができる                     |\n\nクラス、変数を利用するための操作として**宣言**、**代入**、**参照**の３つがあります。\n* 宣言\n    * 一定期間記憶しておくデータの型、変数名を明確に記述することを宣言と呼びます、宣言を行わないと変数は参照できません\n* 代入\n    * 宣言した変数に一定期間記憶しておくデータを登録/更新すること\n    * 宣言された変数に最初にデータを登録(格納)することを*初期化*と言います\n    * 宣言されたクラスに最初にデータを*オブジェクト化(インスタンス化)*と言います\n* 参照\n    * 宣言され、初期化された変数のデータを利用することを指します\n    * 数値であれば計算に利用したり、文字列であれば画面に表示する際に**参照**することが多いです\n\n次に変数とクラスはプログラミング上の利用方法が似ているためここでは一緒に紹介しますが、変数とクラスでは記憶しておけるデータの量が違います。\nそれぞれの特徴としては\n変数：**変数は１つだけデータを記憶しておくことができる**\nクラス：**クラスは複数の変数を複数記憶することができ、次に紹介するメソッドも複数持つことができる**\nという違いがあります。\n\nクラスは内部に変数を持っていることも多く、今回使用している`Button`クラスは内部でボタンに表示する文字列や表示する座標位置など\n様々な情報を持っており、その情報を参照するためのメソッドが用意されています。\n\n### ウィジェットとクラス\nウィジェットもクラスに該当します、違いはというとAndroid SDKが準備した画面表示の要素の有無となります。\nウィジェット = クラスであり、Android SDKに準備されているレイアウトxmlファイルに表示できる要素を持っているものと区別しましょう。\n\n## メソッド\n複数の命令を組み合わせた処理の一まとまりをjavaでは**メソッド**と呼びます。\nまた**メソッド**にも名称をつけて管理しており、*メソッド名*と呼びます。\n\nすでに上記までにメソッドは出てきており、\n`onCreate()`や`setContentView()`、`findViewById()`がメソッドに該当します。\n\nメソッドも変数に類似している箇所があり、利用するための操作として**宣言**、**実装部**、**参照**の３つがあります。\n* 宣言\n    * *戻り値*の型、メソッド名を明確に記述することを宣言と呼びます、宣言を行わないと参照できません\n    * メソッドの実装部で命令を進めるために基準となるデータが必要な場合があり、データをメソッドに渡すことができます、この機能を*引数(引数)*と呼びます\n* 実装部\n    * メソッドが行う複数の命令を全て記述されている箇所\n* 参照\n    * メソッドを利用すること、メソッドの実装部にバグがなければ戻り値を受け取ることができる\n\nメソッドの利用において難しいポイントは*戻り値*と*引数*になる場合が多いです。\nメソッド宣言は形式が決まっているため、見合わせるとどこに何が明記されているかわかりやすくなります。\n```\n    戻り値の型 メソッド名 (引数の型 引数名) {\n       メソッドの実装部 \n    }\n```\n*戻り値の前に\"protected\",\"public\"などのアクセス修飾子と呼ばれるコードが書かれていることが多いですが、アクセス修飾子は後の講義で解説します。*\n\n`onCreate()`メソッドを例にすると\n```\n    protected void onCreate(Bundle savedInstanceState) {\n        メソッドの実装部\n    }\n```\n\"void\" = 戻り値の型\n\"onCreate\" = メソッド名\n\"Bundle\" = 引数の型\n”savedInstanceState” = 引数名\nということになります。\n上記で**void**という新しい型が出てきましたが、戻り値がないことを明示するコードになります。\nvoid型の変数は存在しないのでメソッドの宣言時以外ではあまり見かけないコードです。\n\nそして宣言箇所で\"引数の型\"、\"引数名\"が記載されていないメソッドは引数が無いメソッドということになります。\n\n続いてメソッドを参照している箇所は`setContetView()`を例にします。\n```\n    setContetView(R.layout.activity_main.xml)\n```\n\nメソッド名の後の \"()\" 内に引数を設定します、”setContentView\"メソッドは参照時に画面表示するレイアウトxmlの情報を引数に記述することで、引数に記述したレイアウトを画面表示する命令を実行しています。\n\n# ボタンクリックアクションでトースト表示機能\n先程までのコードを拡張してToast表示機能を実装していきます。\nEditTextに入力された文字を画面に表示するプログラムに作り変えていきます。\n```java  MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\nコードの修正が終わったら`Run`アイコンをクリックしてエミュレータにアプリをインストールし直します。\nコードを修正した場合、エミュレータや実機にインストールし直さないとレイアウトやプログラムの修正は反映されないので気をつけましょう。\n\nEditTextに文字を入力してから**蔵書検索**ボタンをクリックしてみます。\n前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？\n{% img /android/05-ButtonAction/setid08.png 300 rerationcode %}\n\nこの画面上に現れる機能がToastです、一方的にユーザに情報を伝える時などに利用します、\nToastは一定時間で自動的に非表示になりますので、Toast用の確認ボタンなどは存在しません。\n\n# 色々なボタンイベントの実装\nボタンが押した時のプログラム実装解説は以上になります。\nしかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。\nその例をいくつか紹介します。\n\nここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。\n\n## パターン１\nボタンが押された時のプログラムをボタンに登録しながら実装するパターンです\nボタンが押された時のプログラムが短いものなど多く使われるパターンです\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンをクリックした時の命令\n            }\n        });\n    }\n}\n```\n\n\n## パターン２\n`bookSearchBtn`の宣言場所が違う実装方法\nパターン２は`bookSearchBtn`インスタンスの宣言スコープが違う実装方法です\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // ボタンをクリックした時の命令\n            }\n        });\n    }\n}\n```\n\n## パターン３\n当ページで紹介したプログラムとボタンイベントのプログラムのスコープを`MainActivityクラス`全体で使えるようにした実装方法です\n当ページで紹介したパターンと違い`MainActivityクラス`全体で使うことができます\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // ボタンをクリックした時の命令\n        }\n    };\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    }\n}\n```\n\n## パターン４\n`View.OnClickLister`インターフェースをMainActivityクラスに付与した実装方法\nパターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です\n\n```java\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View view) {\n        // ボタンをクリックした時の命令\n    }\n}\n```\n\n## パターン５\n新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法\nこの方法はリスト表示されている時などに使うことが多いです\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    Button bookSearchBtn;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        bookSearchBtn.setOnClickListener(new ButtonClick());\n    }\n    \n    class ButtonClick implements View.OnClickListener {\n        @Override\n        public void onClick(View view) {\n            // ボタンをクリックした時の命令\n        }\n    }\n}\n```\n\n他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。\nボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが\n記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。\n\nですが、<font color=\"red\">**プログラムを細かく見る（読む）**</font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで\nプログラムを深く理解することができるようになります。\n\n# プログラム課題\n今回の課題ではプログラミングを進める中で必ず出てくる**超重要**な処理の、\"条件分岐\"、\"繰り返し\"処理の書き方を学習していきます。\n蔵書検索アプリを作る中でもこの先で何度も出てくるので忘れない様しっかり課題にしていきます。\n## 条件分岐処理\n１つ目の**超重要**処理は\"条件分岐\"です。\n単語だけを聞くと使い方など難しく感じるかもしれませんが、\n* 晴れているので外で遊ぶ\n* 雨が降っているので家で勉強する\n\n上記の様に「〜だったら○○をする」という条件に該当した時に特定の処理を実行する制御文です。\n晴れている条件だけをプログラムにすると\n```java\n    if (晴れている) {\n        外で遊ぶ\n    }\n```\nさらに、雨が降った時の条件を加えて見ます\n```java\n    if (晴れている) {\n        外で遊ぶ\n    } else if (雨が降っている) {\n        家で勉強する\n    }\n```\nさらにさらにそれ以外の天気全ての場合には \"電車で図書館に向かう\"条件をつか加えます\n```java\n    if (晴れている) {\n        外で遊ぶ\n    } else if (雨が降っている) {\n        家で勉強する\n    } else {\n        電車で図書館に向かう\n    }\n```\n条件分岐処理`if`文の実装方法は以上のパターンが多く \"else if\"をなしに\"if~else\"だけで記述することも可能です。\n`if`文の使い方のテンプレートとしては以下です。\n```java\n    if (条件判定文) {\n        条件判定文に該当した場合に処理する命令\n    }\n```\n\n試しにEditTextに入力された文字数が３文字より多い時だけToastを表示する様に修正します。\nString型変数の文字数を参照するには`length()`メソッドを使います。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\nEditTextが3文字より多い場合だけToastが表示される様になりましたか？\n\n`if`文で判定処理を行う場合は、必ず条件の結果が「正(true)/非(false)」のどちらかになる様に条件を記述します。\n上記でEditTextの文字列を判定する際に **>**という記号を使いましたが、これを***比較演算子***と呼びます。\n比較演算子には以下の通りの種類がありますので、状況に応じて使い分けます。\n\n|論理演算子|正(true)判定の条件                     |\n|:--------|:------------------------------------|\n|==       |左右の値が同じ場合のみ正(true)           |\n|>        |右の値より右の値が1以上大きい時に正(true) |\n|<        |左の値より右の値が1以上大きい時に正(true) |\n|>=       |左の値が右の値以上の時に正(true)         |\n|<=       |右の値が左の値以上の時に正(true)         |\n\n上記、\"正(true)判定の条件\"以外の場合は非(false)となります。\n<font color=\"blue\">**では改めてここからが課題です。**</font>\n`if`構文を使った課題です、以下の条件を満たすプログラムに修正してください。\n* EditTextに入力されている文字数が3文字以下の場合はToastで「EditTextの文字数は○文字です。」と表示します。\n    * ○の中はEditTextの文字数を表示します。\n* EditTextに入力されている文字数が10文字より多い場合はToastで「10文字以下で入力してください。」と表示します。\n* それ以外の場合はToastで「EditTextに○○と入力されています。」と表示します。\n    * ○の中はEditTextの文字列を表示します。\n\n## 繰り返し処理\n２つ目の**超重要**処理は\"繰り返し\"です。\n文字通り同じ処理を繰り返します。指定処理を指定の回数繰り返し処理する制御文です。\n繰り返し処理の基本は`for`文と呼ばれています。\nある処理を10回繰り返したい時以下の様に実装します。\n```java\n    for (int i = 0; i < 10; i++) {\n        繰り返したい処理\n    }\n```\n上記のコードをテンプレートとして解説すると、\n```java\n    for (繰り返し変数の初期化; 繰り返す回数を決める条件; 繰り返し変数の増減式) {\n        繰り返したい処理\n    }\n```\nとなります。\nまずは使って見ましょう、`if`文の課題の続きでプログラムを修正します、\nログを使って繰り返されているか確認してます。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // コンソールログにボタンが押されたことを５回出力(表示)\n                for (int i = 0; i < 5; i++) {\n                    Log.d(\"BookSearchBtn\", \"蔵書検索ボタンが押されました：\" + (i + 1) + \"回目\");\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n`Logcat`を確認して「蔵書検索ボタンが押されました：○回目」と５回表示されていれば成功です。\n次はログに星を沢山表示させて見ます。\n```java  MainActivity.java\n    ...一部省略\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // コンソールログにボタンが押されたことを５回出力(表示)\n                String star = \"☆\";\n                for (int i = 0; i < 5; i++) {\n                    Log.d(\"BookSearchBtn\", star);\n                    star += \"☆\";\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // EditTextの文字列を別の変数に代入\n                String inputText = bookSearchEditor.getText().toString();\n                // inputTextの文字数が3文字より多いか判定\n                if (inputText.length() > 3) {\n                    // 3文字より多い場合はToastを表示する\n                    Toast.makeText(getBaseContext()\n                            , \"EditTextの文字数は \" + inputText.length() + \"文字です。\"\n                            , Toast.LENGTH_LONG).show();\n                }\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n    ...一部省略\n```\n上記コードで動作確認します。\n`Logcat`にて５行の星が一個づつ増えて表示されたでしょうか？\nでは最後に`for`と`if`構文を合わせて使う課題です、\n以下の条件を満たすプログラムに修正してください。\n* 繰り返し処理において、何回目の繰り返し処理かログに表示します。\n    * 「○回目の繰り返し処理」とログに出力されている。(○は繰り返し回数を表示)\n* 偶数の時だけ「☆」を表示する。星の表示個数は繰り返しの回数と同じ個数とします。\n* 最後に表示される「☆」の数が10個であること。\n\n以上でボタンが押された時のプログラム実装ができました、次の[検索結果一覧画面作成](/AndroidCourse/android/06-TransitionScreen)ではリスト表示レイアウト及び、画面遷移処理に関して実装していきます。\n","slug":"05-ButtonAction","published":1,"updated":"2018-02-08T15:37:18.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0qh00053l616w6hn7jk","content":"<p>アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。<br>合わせてコンソールログを表示、Toast(トースト)の機能を試します</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#検索画面の機能を考える\">検索画面の機能を考える</a></li>\n<li><a href=\"#javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</a><ul>\n<li><a href=\"#コード記述時の便利機能\">コード記述時の便利機能</a></li>\n</ul>\n</li>\n<li><a href=\"#ボタンクリックアクションの実装\">ボタンクリックアクションの実装</a><ul>\n<li><a href=\"#クラス-変数\">クラス、変数</a><ul>\n<li><a href=\"#ウィジェットとクラス\">ウィジェットとクラス</a></li>\n</ul>\n</li>\n<li><a href=\"#メソッド\">メソッド</a></li>\n</ul>\n</li>\n<li><a href=\"#ボタンクリックアクションでトースト表示機能\">ボタンクリックアクションでトースト表示機能</a></li>\n<li><a href=\"#色々なボタンイベントの実装\">色々なボタンイベントの実装</a><ul>\n<li><a href=\"#パターン1\">パターン１</a></li>\n<li><a href=\"#パターン2\">パターン２</a></li>\n<li><a href=\"#パターン3\">パターン３</a></li>\n<li><a href=\"#パターン4\">パターン４</a></li>\n<li><a href=\"#パターン5\">パターン５</a></li>\n</ul>\n</li>\n<li><a href=\"#プログラム課題\">プログラム課題</a><ul>\n<li><a href=\"#条件分岐処理\">条件分岐処理</a></li>\n<li><a href=\"#繰り返し処理\">繰り返し処理</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">検索画面レイアウト作成</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>レイアウトファイルとjavaファイル間のウィジェットの関連付け</li>\n<li>ボタンクリックイベントの実装方法</li>\n<li>クラス、変数</li>\n<li>メソッド</li>\n<li>条件分岐と繰り返し処理</li>\n</ul>\n<p>レイアウト作成した画面に配置したボタンがクリックされた時に実行したい命令を作りながらレイアウトファイルとjavaファイルでの関連付けやプログラミングにおける重要な変数、メソッドを学習します。</p>\n<h1><span id=\"検索画面の機能を考える\">検索画面の機能を考える</span></h1><p>このページからはプログラムの実装していきますが、前のページで作成したレイアウトにはどんな操作が発生するか考えるため、もう一度完成したレイアウトを見てみます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"><br>大まかに以下ような操作をユーザが行い、ウィジェットによっては機能として動くプログラムを実装する必要がありそうです。</p>\n<ol>\n<li>検索する蔵書名、またはその一部を入力する操作</li>\n<li>蔵書検索ボタンをクリック<ul>\n<li>入力された蔵書名、またはその一部から蔵書の検索結果を表示する画面に遷移する機能</li>\n</ul>\n</li>\n<li>閲覧履歴をクリック<ul>\n<li>過去に検索結果から閲覧した蔵書のリストを表示する画面に遷移する機能</li>\n</ul>\n</li>\n</ol>\n<p>当ページではアプリを作る上での基礎になる”ボタンをクリックした時に画面を遷移する”の前にボタンをクリックした時にログ表示、Toastを表示するところまでを解説していきます。</p>\n<h1><span id=\"javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</span></h1><p>普段何気なく使っているアプリのボタンをクリックした時、アプリではプログラムが実行され別の画面を表示したり、計算や文字の置き換えなどの命令を実行して画面の表示内容を更新するなど見えないところで色々な命令が動いています。</p>\n<p>ボタンをクリックした時のプログラムや画面の表示内容更新などは<strong>java</strong>ファイルに実装していきます。<br>“検索画面レイアウト作成”ページでレイアウト作成したのは<code>activity_main.xml</code>というファイルでしたが、このレイアウトファイルは「MainActivity.java」のプログラムによって画面に表示されています。</p>\n<p>では<strong>MainActivity.java</strong>ファイルを開きプログラムを実装していきます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid04.png\" width=\"500\" title=\"rerationcode\"></p>\n<p>前の記事<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">レイアウト作成</a>の内容で作成したxmlレイアウトですが、<br>実は”MainActivity.java”の中ですでに関連付けのプログラムが実装されています。<br>それが以下のコード内矢印に囲まれてる<code>setContentView()</code>という命令でMainActivity.javaが表示され<code>setContentView()</code>の命令を実行する際に “()” 内で指定したレイアウトxmlファイルと関連付けを行い、内部で画面に表示するという命令を実行してくれています。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>setContentView()</code>の様に必ず書かないといけないけど説明が難しいコードを<font color=\"red\"><strong><em>おまじない</em></strong></font>と紹介されることがありますが、実装されていないとアプリが異常終了してしまったり、今回の場合では画面が真っ白な画面が表示されるだけになってしまうので<font color=\"red\"><strong><em>おまじない</em></strong></font>と紹介されたところは<em>よくわからないけど書かないとよくないことが起こる</em>と頭の片隅に置いておいてください。</p>\n<p>次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど<strong>javaファイルでクリックされた時のプログラムを書く</strong>必要があります。<br><code>setContentView()</code>を実行したことでMainActivity.javaから”activity_main.xml”のボタンなどウィジェットやビューを参照できる状態になっています、<br>あとはボタンやエディットテキストなどを各ウィジェットやビューにユニークな名称(他と被らない情報)があればjavaファイルでも判別して使えそうです。</p>\n<p>“activity_main.xml”内のButtonやEditTextなどにはユニークな名称を設定する項目として<strong>ID</strong>という項目があるので、<strong>activity_main.xml</strong>を開きます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/rerationcode01.png\" width=\"500\" title=\"rerationcode\"></p>\n<p>“蔵書検索”ボタンをクリックしAttributesエリアから<strong>“ID”</strong>項目を以下のように修正します<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid01.png\" width=\"500\" title=\"rerationcode\"></p>\n<blockquote>\n<p>button -&gt; BookSearchBtn</p>\n</blockquote>\n<p>合わせて他のウィジェットの<strong>“ID”</strong>項目も変更していきます。<br>※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid03.png\" width=\"500\" title=\"rerationcode\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">変更前のID</th>\n<th style=\"text-align:left\">変更後ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">button</td>\n<td style=\"text-align:left\">BookSearchBtn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">editText</td>\n<td style=\"text-align:left\">BookSearchEdit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">button2</td>\n<td style=\"text-align:left\">HistoryBtn</td>\n</tr>\n</tbody>\n</table>\n<p>IDを変更するとComponent Treeの表示にも変更が反映されます<br>これで画面のボタンなどに”ID”項目を設定することができました、ここからがjavaプログラムの実装です、MainActivity.javaからウィジェットやビューと関連付けの方法を紹介していきます。</p>\n<p>ButtonやEditTextなどのウィジェットをjavaプログラムで操作できる様にするにはいくつかの方法がありますが、一番よく使う方法として<font color=\"red\"><code>findViewById()</code></font>を使う方法で実装していきます。<br>“setContentView” で関連付けたレイアウトxml内のウィジェットやビューに設定した”ID”を<code>findViewById</code>の後ろの “()”内に 指定することでjavaプログラムで”ボタンをクリックした時”の命令を登録したり、”ボタンに表示する文言などを表示後に変更する”ことができる様になります。</p>\n<h2><span id=\"コード記述時の便利機能\">コード記述時の便利機能</span></h2><p>これからコード記述する中でボタンやIDの入力中に小さいリスト表示がされると思います,<br>例えばButtonなどは”Button”と入力している間に以下の様に表示されるので矢印と同じ項目を十字キーで選択して<code>Enter</code>を押すことで”Button”クラスをjavaファイルで使用できる様になります。<br><img src=\"/AndroidCourse/android/05-ButtonAction/importclass01.png\" width=\"500\" title=\"Import Class\"><br>もし、上記のタイミングを逃してしまった場合は赤くなっている<font color=\"red\">Button</font>をマウスカーソルでクリックし下図の様に出てきたコマンドを入力するとjavaクラスで利用できる様になります。</p>\n<ul>\n<li>Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd></li>\n<li>Macの場合：<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd><img src=\"/AndroidCourse/android/05-ButtonAction/importclass02.png\" width=\"450\" title=\"Import Class\">\n</li>\n</ul>\n<p>上記の便利機能を踏まえて<code>findViewById</code>メソッドと “activity_main.xml”で設定した<strong>ID</strong>を使ってButtonウィジェットの関連付けを行います。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最初に実装したコードですので追加した２行にどんな意味合いがあるのかみていきましょう<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid06.png\" width=\"600\" title=\"rerationcode\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">各No.のコードの説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">activity_main.xml内のウィジェットと関連づける型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">MainActivity.javaで使う時のユニークな名前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">①〜②で宣言したウィジェットに情報を登録する時の記述方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">activity_main.xml内から取得するウィジェット/ビューのユニークID</td>\n</tr>\n</tbody>\n</table>\n<p>これで”蔵書検索”ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。</p>\n<p>xmlファイル内のウィジェットなどとjavaファイルの関連付けは非常に多く利用するコードですので利用方法を理解しておきましょう。</p>\n<ul>\n<li>①〜⑤の工程はプログラムで表示するデータを動的に一時的に記憶したり、表示したりする上で大事なクラス（変数）の宣言から初期化）を行なっています。</li>\n<li>①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うためにわかりやすい名前をつけて準備をしています。</li>\n<li>本来ボタンオブジェクトは”ボタンの色”、”ボタンに表示する文字”など情報を持っていますが、①〜②の工程だけでは名前が準備されただけで<code>bookSearchBtn</code>は全く情報を持っていません。</li>\n<li><code>bookSearchBtn</code>に情報を登録するには<font color=\"blue\"><strong>オブジェクト化（インスタンス化とも呼ばれます）</strong></font>という工程が必要になります、<br>その工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に<code>bookSearchBtn</code>がもつ”ボタンの色”、”ボタンに表示する文字”などの情報を<br>参照したり変更したりすることが可能になります。</li>\n</ul>\n<p>追加した行の最後に<code>;</code>が入力されていますが、これは行末を示すコードです。<br><em>{}</em>の後ろには基本<code>;</code>入力は不要ですが、例外の場合もあるのでプログラミングを進めながら解説していきます。</p>\n<h1><span id=\"ボタンクリックアクションの実装\">ボタンクリックアクションの実装</span></h1><p>“蔵書検索”ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。<br>プログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、実行中のデータを確認する時にも利用できるので試してみます。</p>\n<p><code>new View.OnClickListener...</code>を実装する時にも小さいウィンドウが表示されたらそちらから選択すると内部の<code>onClick</code>メソッドまで自動的に入力してくれます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/addClickEvent01.png\" width=\"600\" title=\"insert Click Event\"><br><code>OnClick</code>メソッドまでは実装してくれます、行末を表す<code>;</code>だけが未入力になるので注意してください。<br><img src=\"/AndroidCourse/android/05-ButtonAction/addClickEvent02.png\" width=\"600\" title=\"insert Click Event\"><br>では実装していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">        <span class=\"comment\">///↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードの実装が完了したら動作確認をします、<code>Run</code>アイコンをクリックしてエミュレータを起動します。<br>アプリ画面が表示されたら<strong>蔵書検索</strong>ボタンをクリックしてみてください。</p>\n<p>Android Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid07.png\" width=\"650\" title=\"rerationcode\"><br>実装したコードで表示されるログですが、出力するためには以下のような形式で実装する必要があります。<br>ログを表示するプログラムのとして以下のテンプレートを覚えておきましょう。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.d(&quot;tag name&quot;, &quot;message&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>ボタンを押した時にログを表示する命令を実行するプログラムを実装ました、ここまでの全体の工程をおさらいします。<br><img src=\"/AndroidCourse/android/05-ButtonAction/DesignCode.png\" width=\"450\" title=\"DesignCode\"><br>文字の色分けなどは以下の通りです</p>\n<ul>\n<li><font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題</li>\n<li><font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順</li>\n<li>また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題</li>\n<li><font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所</li>\n</ul>\n<p>ここまでに聞きなれない単語がいくつか出てきました、アプリ開発に限らずプログラムを<br>行なっていく上で<font color=\"blue\"><strong>とても重要</strong></font>な概念ですので詳しく解説します。</p>\n<h2><span id=\"クラス-変数\">クラス、変数</span></h2><p>プログラムで使用するデータを一時的に記憶しておいたり、計算や画面に表示するデータとして使用するために使用する概念になります。<br>変数を解説/理解する上で色々なたとえがあるのですが、以下Wikipediaの内容が一番理解しやすかったので一部引用させてもらいました。</p>\n<blockquote><p>データを一定期間記憶し必要なときに利用できるようにするために、データに固有の名前を与えたものである。 一人一人の人間が異なる名前によって区別されるように、一つ一つの変数も名前によって区別される。<br>変数が表しているデータをその変数の値（あたい）という。</p>\n<footer><strong>変数(プログラミング)</strong><cite><a href=\"https://ja.wikipedia.org/wiki/%E5%A4%89%E6%95%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)\" target=\"_blank\" rel=\"external\">wikipedia</a></cite></footer></blockquote>\n<p>一部文中省いているところはありますが、上記の様にデータを一定期間記憶、使用することができる固有（ユニーク）な名称をつけたものになります。<br>変数につけた固有名称を変数名と呼びます。</p>\n<p>変数に記憶しておけるデータの種類が決まっており、種類のことを<strong><em>型</em></strong>と呼びます。<br>型は一度決めてしまうと後から変更することはできません。<br>型の種類は以下の通りです、Stringは厳密には型ではありませんが、頻繁に使用するので一緒に記載しておきます。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">型名</th>\n<th style=\"text-align:center\">記憶できるデータ</th>\n<th style=\"text-align:left\">データの範囲</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">byte</td>\n<td style=\"text-align:center\">符号つき8ビット整数型</td>\n<td style=\"text-align:left\">-128 ～ 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:center\">符号つき16ビット整数型</td>\n<td style=\"text-align:left\">-32768 ～ 32767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:center\">符号つき32ビット整数型</td>\n<td style=\"text-align:left\">-2147483648 ～ 2147483647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:center\">符号つき64ビット整数型</td>\n<td style=\"text-align:left\">-9223372036854775808 ～ 9223372036854775807</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:center\">32ビット浮動小数点数型</td>\n<td style=\"text-align:left\">1.4E-45 〜 3.4028235E38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:center\">64ビット浮動小数点数型</td>\n<td style=\"text-align:left\">4.9E-324 〜　1.7976931348623157E308</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:center\">論理型</td>\n<td style=\"text-align:left\">true(真)、false(偽)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:center\">符号なし１６ビット文字型</td>\n<td style=\"text-align:left\">Unicode文字１文字 : ¥0000 〜 ¥FFFF / 0 〜 65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:center\">文字列クラス</td>\n<td style=\"text-align:left\">複数の文字を扱うことができる</td>\n</tr>\n</tbody>\n</table>\n<p>クラス、変数を利用するための操作として<strong>宣言</strong>、<strong>代入</strong>、<strong>参照</strong>の３つがあります。</p>\n<ul>\n<li>宣言<ul>\n<li>一定期間記憶しておくデータの型、変数名を明確に記述することを宣言と呼びます、宣言を行わないと変数は参照できません</li>\n</ul>\n</li>\n<li>代入<ul>\n<li>宣言した変数に一定期間記憶しておくデータを登録/更新すること</li>\n<li>宣言された変数に最初にデータを登録(格納)することを<em>初期化</em>と言います</li>\n<li>宣言されたクラスに最初にデータを<em>オブジェクト化(インスタンス化)</em>と言います</li>\n</ul>\n</li>\n<li>参照<ul>\n<li>宣言され、初期化された変数のデータを利用することを指します</li>\n<li>数値であれば計算に利用したり、文字列であれば画面に表示する際に<strong>参照</strong>することが多いです</li>\n</ul>\n</li>\n</ul>\n<p>次に変数とクラスはプログラミング上の利用方法が似ているためここでは一緒に紹介しますが、変数とクラスでは記憶しておけるデータの量が違います。<br>それぞれの特徴としては<br>変数：<strong>変数は１つだけデータを記憶しておくことができる</strong><br>クラス：<strong>クラスは複数の変数を複数記憶することができ、次に紹介するメソッドも複数持つことができる</strong><br>という違いがあります。</p>\n<p>クラスは内部に変数を持っていることも多く、今回使用している<code>Button</code>クラスは内部でボタンに表示する文字列や表示する座標位置など<br>様々な情報を持っており、その情報を参照するためのメソッドが用意されています。</p>\n<h3><span id=\"ウィジェットとクラス\">ウィジェットとクラス</span></h3><p>ウィジェットもクラスに該当します、違いはというとAndroid SDKが準備した画面表示の要素の有無となります。<br>ウィジェット = クラスであり、Android SDKに準備されているレイアウトxmlファイルに表示できる要素を持っているものと区別しましょう。</p>\n<h2><span id=\"メソッド\">メソッド</span></h2><p>複数の命令を組み合わせた処理の一まとまりをjavaでは<strong>メソッド</strong>と呼びます。<br>また<strong>メソッド</strong>にも名称をつけて管理しており、<em>メソッド名</em>と呼びます。</p>\n<p>すでに上記までにメソッドは出てきており、<br><code>onCreate()</code>や<code>setContentView()</code>、<code>findViewById()</code>がメソッドに該当します。</p>\n<p>メソッドも変数に類似している箇所があり、利用するための操作として<strong>宣言</strong>、<strong>実装部</strong>、<strong>参照</strong>の３つがあります。</p>\n<ul>\n<li>宣言<ul>\n<li><em>戻り値</em>の型、メソッド名を明確に記述することを宣言と呼びます、宣言を行わないと参照できません</li>\n<li>メソッドの実装部で命令を進めるために基準となるデータが必要な場合があり、データをメソッドに渡すことができます、この機能を<em>引数(引数)</em>と呼びます</li>\n</ul>\n</li>\n<li>実装部<ul>\n<li>メソッドが行う複数の命令を全て記述されている箇所</li>\n</ul>\n</li>\n<li>参照<ul>\n<li>メソッドを利用すること、メソッドの実装部にバグがなければ戻り値を受け取ることができる</li>\n</ul>\n</li>\n</ul>\n<p>メソッドの利用において難しいポイントは<em>戻り値</em>と<em>引数</em>になる場合が多いです。<br>メソッド宣言は形式が決まっているため、見合わせるとどこに何が明記されているかわかりやすくなります。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">戻り値の型 メソッド名 (引数の型 引数名) &#123;</span><br><span class=\"line\">   メソッドの実装部 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>戻り値の前に”protected”,”public”などのアクセス修飾子と呼ばれるコードが書かれていることが多いですが、アクセス修飾子は後の講義で解説します。</em></p>\n<p><code>onCreate()</code>メソッドを例にすると<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    メソッドの実装部</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>“void” = 戻り値の型<br>“onCreate” = メソッド名<br>“Bundle” = 引数の型<br>”savedInstanceState” = 引数名<br>ということになります。<br>上記で<strong>void</strong>という新しい型が出てきましたが、戻り値がないことを明示するコードになります。<br>void型の変数は存在しないのでメソッドの宣言時以外ではあまり見かけないコードです。</p>\n<p>そして宣言箇所で”引数の型”、”引数名”が記載されていないメソッドは引数が無いメソッドということになります。</p>\n<p>続いてメソッドを参照している箇所は<code>setContetView()</code>を例にします。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContetView(R.layout.activity_main.xml)</span><br></pre></td></tr></table></figure></p>\n<p>メソッド名の後の “()” 内に引数を設定します、”setContentView”メソッドは参照時に画面表示するレイアウトxmlの情報を引数に記述することで、引数に記述したレイアウトを画面表示する命令を実行しています。</p>\n<h1><span id=\"ボタンクリックアクションでトースト表示機能\">ボタンクリックアクションでトースト表示機能</span></h1><p>先程までのコードを拡張してToast表示機能を実装していきます。<br>EditTextに入力された文字を画面に表示するプログラムに作り変えていきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったら<code>Run</code>アイコンをクリックしてエミュレータにアプリをインストールし直します。<br>コードを修正した場合、エミュレータや実機にインストールし直さないとレイアウトやプログラムの修正は反映されないので気をつけましょう。</p>\n<p>EditTextに文字を入力してから<strong>蔵書検索</strong>ボタンをクリックしてみます。<br>前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid08.png\" width=\"300\" title=\"rerationcode\"></p>\n<p>この画面上に現れる機能がToastです、一方的にユーザに情報を伝える時などに利用します、<br>Toastは一定時間で自動的に非表示になりますので、Toast用の確認ボタンなどは存在しません。</p>\n<h1><span id=\"色々なボタンイベントの実装\">色々なボタンイベントの実装</span></h1><p>ボタンが押した時のプログラム実装解説は以上になります。<br>しかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。<br>その例をいくつか紹介します。</p>\n<p>ここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。</p>\n<h2><span id=\"パターン1\">パターン１</span></h2><p>ボタンが押された時のプログラムをボタンに登録しながら実装するパターンです<br>ボタンが押された時のプログラムが短いものなど多く使われるパターンです</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン2\">パターン２</span></h2><p><code>bookSearchBtn</code>の宣言場所が違う実装方法<br>パターン２は<code>bookSearchBtn</code>インスタンスの宣言スコープが違う実装方法です</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン3\">パターン３</span></h2><p>当ページで紹介したプログラムとボタンイベントのプログラムのスコープを<code>MainActivityクラス</code>全体で使えるようにした実装方法です<br>当ページで紹介したパターンと違い<code>MainActivityクラス</code>全体で使うことができます</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン4\">パターン４</span></h2><p><code>View.OnClickLister</code>インターフェースをMainActivityクラスに付与した実装方法<br>パターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"パターン5\">パターン５</span></h2><p>新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法<br>この方法はリスト表示されている時などに使うことが多いです</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> ButtonClick());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonClick</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。<br>ボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが<br>記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。</p>\n<p>ですが、<font color=\"red\"><strong>プログラムを細かく見る（読む）</strong></font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで<br>プログラムを深く理解することができるようになります。</p>\n<h1><span id=\"プログラム課題\">プログラム課題</span></h1><p>今回の課題ではプログラミングを進める中で必ず出てくる<strong>超重要</strong>な処理の、”条件分岐”、”繰り返し”処理の書き方を学習していきます。<br>蔵書検索アプリを作る中でもこの先で何度も出てくるので忘れない様しっかり課題にしていきます。</p>\n<h2><span id=\"条件分岐処理\">条件分岐処理</span></h2><p>１つ目の<strong>超重要</strong>処理は”条件分岐”です。<br>単語だけを聞くと使い方など難しく感じるかもしれませんが、</p>\n<ul>\n<li>晴れているので外で遊ぶ</li>\n<li>雨が降っているので家で勉強する</li>\n</ul>\n<p>上記の様に「〜だったら○○をする」という条件に該当した時に特定の処理を実行する制御文です。<br>晴れている条件だけをプログラムにすると<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>さらに、雨が降った時の条件を加えて見ます<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (雨が降っている) &#123;</span><br><span class=\"line\">    家で勉強する</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>さらにさらにそれ以外の天気全ての場合には “電車で図書館に向かう”条件をつか加えます<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (雨が降っている) &#123;</span><br><span class=\"line\">    家で勉強する</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    電車で図書館に向かう</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>条件分岐処理<code>if</code>文の実装方法は以上のパターンが多く “else if”をなしに”if~else”だけで記述することも可能です。<br><code>if</code>文の使い方のテンプレートとしては以下です。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件判定文) &#123;</span><br><span class=\"line\">    条件判定文に該当した場合に処理する命令</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>試しにEditTextに入力された文字数が３文字より多い時だけToastを表示する様に修正します。<br>String型変数の文字数を参照するには<code>length()</code>メソッドを使います。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>EditTextが3文字より多い場合だけToastが表示される様になりましたか？</p>\n<p><code>if</code>文で判定処理を行う場合は、必ず条件の結果が「正(true)/非(false)」のどちらかになる様に条件を記述します。<br>上記でEditTextの文字列を判定する際に <strong>&gt;</strong>という記号を使いましたが、これを<strong><em>比較演算子</em></strong>と呼びます。<br>比較演算子には以下の通りの種類がありますので、状況に応じて使い分けます。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">論理演算子</th>\n<th style=\"text-align:left\">正(true)判定の条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">==</td>\n<td style=\"text-align:left\">左右の値が同じ場合のみ正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">右の値より右の値が1以上大きい時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">左の値より右の値が1以上大きい時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;=</td>\n<td style=\"text-align:left\">左の値が右の値以上の時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;=</td>\n<td style=\"text-align:left\">右の値が左の値以上の時に正(true)</td>\n</tr>\n</tbody>\n</table>\n<p>上記、”正(true)判定の条件”以外の場合は非(false)となります。</p>\n<p><font color=\"blue\"><strong>では改めてここからが課題です。</strong></font><br><code>if</code>構文を使った課題です、以下の条件を満たすプログラムに修正してください。</p>\n<ul>\n<li>EditTextに入力されている文字数が3文字以下の場合はToastで「EditTextの文字数は○文字です。」と表示します。<ul>\n<li>○の中はEditTextの文字数を表示します。</li>\n</ul>\n</li>\n<li>EditTextに入力されている文字数が10文字より多い場合はToastで「10文字以下で入力してください。」と表示します。</li>\n<li>それ以外の場合はToastで「EditTextに○○と入力されています。」と表示します。<ul>\n<li>○の中はEditTextの文字列を表示します。</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"繰り返し処理\">繰り返し処理</span></h2><p>２つ目の<strong>超重要</strong>処理は”繰り返し”です。<br>文字通り同じ処理を繰り返します。指定処理を指定の回数繰り返し処理する制御文です。<br>繰り返し処理の基本は<code>for</code>文と呼ばれています。<br>ある処理を10回繰り返したい時以下の様に実装します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    繰り返したい処理</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記のコードをテンプレートとして解説すると、<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (繰り返し変数の初期化; 繰り返す回数を決める条件; 繰り返し変数の増減式) &#123;</span><br><span class=\"line\">    繰り返したい処理</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>となります。<br>まずは使って見ましょう、<code>if</code>文の課題の続きでプログラムを修正します、<br>ログを使って繰り返されているか確認してます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを５回出力(表示)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"蔵書検索ボタンが押されました：\"</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">\"回目\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br><code>Logcat</code>を確認して「蔵書検索ボタンが押されました：○回目」と５回表示されていれば成功です。<br>次はログに星を沢山表示させて見ます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを５回出力(表示)</span></span><br><span class=\"line\">            String star = <span class=\"string\">\"☆\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, star);</span><br><span class=\"line\">                star += <span class=\"string\">\"☆\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードで動作確認します。<br><code>Logcat</code>にて５行の星が一個づつ増えて表示されたでしょうか？<br>では最後に<code>for</code>と<code>if</code>構文を合わせて使う課題です、<br>以下の条件を満たすプログラムに修正してください。</p>\n<ul>\n<li>繰り返し処理において、何回目の繰り返し処理かログに表示します。<ul>\n<li>「○回目の繰り返し処理」とログに出力されている。(○は繰り返し回数を表示)</li>\n</ul>\n</li>\n<li>偶数の時だけ「☆」を表示する。星の表示個数は繰り返しの回数と同じ個数とします。</li>\n<li>最後に表示される「☆」の数が10個であること。</li>\n</ul>\n<p>以上でボタンが押された時のプログラム実装ができました、次の<a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面作成</a>ではリスト表示レイアウト及び、画面遷移処理に関して実装していきます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>アプリの基本イベントとなるボタンが押された時の処理を学習し、蔵書検索ボタンの機能を作り始めます。<br>合わせてコンソールログを表示、Toast(トースト)の機能を試します</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#検索画面の機能を考える\">検索画面の機能を考える</a></li>\n<li><a href=\"#javaプログラムとxmlレイアウトの関連付け\">javaプログラムとxmlレイアウトの関連付け</a><ul>\n<li><a href=\"#コード記述時の便利機能\">コード記述時の便利機能</a></li>\n</ul>\n</li>\n<li><a href=\"#ボタンクリックアクションの実装\">ボタンクリックアクションの実装</a><ul>\n<li><a href=\"#クラス-変数\">クラス、変数</a><ul>\n<li><a href=\"#ウィジェットとクラス\">ウィジェットとクラス</a></li>\n</ul>\n</li>\n<li><a href=\"#メソッド\">メソッド</a></li>\n</ul>\n</li>\n<li><a href=\"#ボタンクリックアクションでトースト表示機能\">ボタンクリックアクションでトースト表示機能</a></li>\n<li><a href=\"#色々なボタンイベントの実装\">色々なボタンイベントの実装</a><ul>\n<li><a href=\"#パターン1\">パターン１</a></li>\n<li><a href=\"#パターン2\">パターン２</a></li>\n<li><a href=\"#パターン3\">パターン３</a></li>\n<li><a href=\"#パターン4\">パターン４</a></li>\n<li><a href=\"#パターン5\">パターン５</a></li>\n</ul>\n</li>\n<li><a href=\"#プログラム課題\">プログラム課題</a><ul>\n<li><a href=\"#条件分岐処理\">条件分岐処理</a></li>\n<li><a href=\"#繰り返し処理\">繰り返し処理</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">検索画面レイアウト作成</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>レイアウトファイルとjavaファイル間のウィジェットの関連付け</li>\n<li>ボタンクリックイベントの実装方法</li>\n<li>クラス、変数</li>\n<li>メソッド</li>\n<li>条件分岐と繰り返し処理</li>\n</ul>\n<p>レイアウト作成した画面に配置したボタンがクリックされた時に実行したい命令を作りながらレイアウトファイルとjavaファイルでの関連付けやプログラミングにおける重要な変数、メソッドを学習します。</p>\n<h1 id=\"検索画面の機能を考える\"><a href=\"#検索画面の機能を考える\" class=\"headerlink\" title=\"検索画面の機能を考える\"></a>検索画面の機能を考える</h1><p>このページからはプログラムの実装していきますが、前のページで作成したレイアウトにはどんな操作が発生するか考えるため、もう一度完成したレイアウトを見てみます。<br><img src=\"/AndroidCourse/android/04-MakeLayoutDesign/CompleteScreen.png\" width=\"500\" title=\"CompleteScreen\"><br>大まかに以下ような操作をユーザが行い、ウィジェットによっては機能として動くプログラムを実装する必要がありそうです。</p>\n<ol>\n<li>検索する蔵書名、またはその一部を入力する操作</li>\n<li>蔵書検索ボタンをクリック<ul>\n<li>入力された蔵書名、またはその一部から蔵書の検索結果を表示する画面に遷移する機能</li>\n</ul>\n</li>\n<li>閲覧履歴をクリック<ul>\n<li>過去に検索結果から閲覧した蔵書のリストを表示する画面に遷移する機能</li>\n</ul>\n</li>\n</ol>\n<p>当ページではアプリを作る上での基礎になる”ボタンをクリックした時に画面を遷移する”の前にボタンをクリックした時にログ表示、Toastを表示するところまでを解説していきます。</p>\n<h1 id=\"javaプログラムとxmlレイアウトの関連付け\"><a href=\"#javaプログラムとxmlレイアウトの関連付け\" class=\"headerlink\" title=\"javaプログラムとxmlレイアウトの関連付け\"></a>javaプログラムとxmlレイアウトの関連付け</h1><p>普段何気なく使っているアプリのボタンをクリックした時、アプリではプログラムが実行され別の画面を表示したり、計算や文字の置き換えなどの命令を実行して画面の表示内容を更新するなど見えないところで色々な命令が動いています。</p>\n<p>ボタンをクリックした時のプログラムや画面の表示内容更新などは<strong>java</strong>ファイルに実装していきます。<br>“検索画面レイアウト作成”ページでレイアウト作成したのは<code>activity_main.xml</code>というファイルでしたが、このレイアウトファイルは「MainActivity.java」のプログラムによって画面に表示されています。</p>\n<p>では<strong>MainActivity.java</strong>ファイルを開きプログラムを実装していきます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid04.png\" width=\"500\" title=\"rerationcode\"></p>\n<p>前の記事<a href=\"/AndroidCourse/android/04-MakeLayoutDesign\">レイアウト作成</a>の内容で作成したxmlレイアウトですが、<br>実は”MainActivity.java”の中ですでに関連付けのプログラムが実装されています。<br>それが以下のコード内矢印に囲まれてる<code>setContentView()</code>という命令でMainActivity.javaが表示され<code>setContentView()</code>の命令を実行する際に “()” 内で指定したレイアウトxmlファイルと関連付けを行い、内部で画面に表示するという命令を実行してくれています。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓レイアウト読み込み↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>setContentView()</code>の様に必ず書かないといけないけど説明が難しいコードを<font color=\"red\"><strong><em>おまじない</em></strong></font>と紹介されることがありますが、実装されていないとアプリが異常終了してしまったり、今回の場合では画面が真っ白な画面が表示されるだけになってしまうので<font color=\"red\"><strong><em>おまじない</em></strong></font>と紹介されたところは<em>よくわからないけど書かないとよくないことが起こる</em>と頭の片隅に置いておいてください。</p>\n<p>次にButtonをクリックしたときに検索などの処理を行うにはMainActivity.javaなど<strong>javaファイルでクリックされた時のプログラムを書く</strong>必要があります。<br><code>setContentView()</code>を実行したことでMainActivity.javaから”activity_main.xml”のボタンなどウィジェットやビューを参照できる状態になっています、<br>あとはボタンやエディットテキストなどを各ウィジェットやビューにユニークな名称(他と被らない情報)があればjavaファイルでも判別して使えそうです。</p>\n<p>“activity_main.xml”内のButtonやEditTextなどにはユニークな名称を設定する項目として<strong>ID</strong>という項目があるので、<strong>activity_main.xml</strong>を開きます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/rerationcode01.png\" width=\"500\" title=\"rerationcode\"></p>\n<p>“蔵書検索”ボタンをクリックしAttributesエリアから<strong>“ID”</strong>項目を以下のように修正します<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid01.png\" width=\"500\" title=\"rerationcode\"></p>\n<blockquote>\n<p>button -&gt; BookSearchBtn</p>\n</blockquote>\n<p>合わせて他のウィジェットの<strong>“ID”</strong>項目も変更していきます。<br>※もし変更前IDが一致していなくても、Noと場所の照らし合わせを正として修正してください<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid03.png\" width=\"500\" title=\"rerationcode\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">変更前のID</th>\n<th style=\"text-align:left\">変更後ID</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">button</td>\n<td style=\"text-align:left\">BookSearchBtn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">editText</td>\n<td style=\"text-align:left\">BookSearchEdit</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">button2</td>\n<td style=\"text-align:left\">HistoryBtn</td>\n</tr>\n</tbody>\n</table>\n<p>IDを変更するとComponent Treeの表示にも変更が反映されます<br>これで画面のボタンなどに”ID”項目を設定することができました、ここからがjavaプログラムの実装です、MainActivity.javaからウィジェットやビューと関連付けの方法を紹介していきます。</p>\n<p>ButtonやEditTextなどのウィジェットをjavaプログラムで操作できる様にするにはいくつかの方法がありますが、一番よく使う方法として<font color=\"red\"><code>findViewById()</code></font>を使う方法で実装していきます。<br>“setContentView” で関連付けたレイアウトxml内のウィジェットやビューに設定した”ID”を<code>findViewById</code>の後ろの “()”内に 指定することでjavaプログラムで”ボタンをクリックした時”の命令を登録したり、”ボタンに表示する文言などを表示後に変更する”ことができる様になります。</p>\n<h2 id=\"コード記述時の便利機能\"><a href=\"#コード記述時の便利機能\" class=\"headerlink\" title=\"コード記述時の便利機能\"></a>コード記述時の便利機能</h2><p>これからコード記述する中でボタンやIDの入力中に小さいリスト表示がされると思います,<br>例えばButtonなどは”Button”と入力している間に以下の様に表示されるので矢印と同じ項目を十字キーで選択して<code>Enter</code>を押すことで”Button”クラスをjavaファイルで使用できる様になります。<br><img src=\"/AndroidCourse/android/05-ButtonAction/importclass01.png\" width=\"500\" title=\"Import Class\"><br>もし、上記のタイミングを逃してしまった場合は赤くなっている<font color=\"red\">Button</font>をマウスカーソルでクリックし下図の様に出てきたコマンドを入力するとjavaクラスで利用できる様になります。</p>\n<ul>\n<li>Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd></li>\n<li>Macの場合：<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd><img src=\"/AndroidCourse/android/05-ButtonAction/importclass02.png\" width=\"450\" title=\"Import Class\">\n</li>\n</ul>\n<p>上記の便利機能を踏まえて<code>findViewById</code>メソッドと “activity_main.xml”で設定した<strong>ID</strong>を使ってButtonウィジェットの関連付けを行います。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最初に実装したコードですので追加した２行にどんな意味合いがあるのかみていきましょう<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid06.png\" width=\"600\" title=\"rerationcode\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">No.</th>\n<th style=\"text-align:left\">各No.のコードの説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">①</td>\n<td style=\"text-align:left\">activity_main.xml内のウィジェットと関連づける型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">②</td>\n<td style=\"text-align:left\">MainActivity.javaで使う時のユニークな名前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">③</td>\n<td style=\"text-align:left\">①〜②で宣言したウィジェットに情報を登録する時の記述方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">④</td>\n<td style=\"text-align:left\">④のIDを使いactivity_main.xml内のウィジェット/ビューを取得するプログラム</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">⑤</td>\n<td style=\"text-align:left\">activity_main.xml内から取得するウィジェット/ビューのユニークID</td>\n</tr>\n</tbody>\n</table>\n<p>これで”蔵書検索”ボタンをxmlレイアウトとMainActivity.javaのプログラムで関連付けることができました。</p>\n<p>xmlファイル内のウィジェットなどとjavaファイルの関連付けは非常に多く利用するコードですので利用方法を理解しておきましょう。</p>\n<ul>\n<li>①〜⑤の工程はプログラムで表示するデータを動的に一時的に記憶したり、表示したりする上で大事なクラス（変数）の宣言から初期化）を行なっています。</li>\n<li>①〜②で追加したコードを<font color=\"blue\">クラスの宣言</font>と言い、WidgetやView、その他のクラスをjavaプログラムで使うためにわかりやすい名前をつけて準備をしています。</li>\n<li>本来ボタンオブジェクトは”ボタンの色”、”ボタンに表示する文字”など情報を持っていますが、①〜②の工程だけでは名前が準備されただけで<code>bookSearchBtn</code>は全く情報を持っていません。</li>\n<li><code>bookSearchBtn</code>に情報を登録するには<font color=\"blue\"><strong>オブジェクト化（インスタンス化とも呼ばれます）</strong></font>という工程が必要になります、<br>その工程が③〜⑤に該当しオブジェクト化を行なっており、この工程後に<code>bookSearchBtn</code>がもつ”ボタンの色”、”ボタンに表示する文字”などの情報を<br>参照したり変更したりすることが可能になります。</li>\n</ul>\n<p>追加した行の最後に<code>;</code>が入力されていますが、これは行末を示すコードです。<br><em>{}</em>の後ろには基本<code>;</code>入力は不要ですが、例外の場合もあるのでプログラミングを進めながら解説していきます。</p>\n<h1 id=\"ボタンクリックアクションの実装\"><a href=\"#ボタンクリックアクションの実装\" class=\"headerlink\" title=\"ボタンクリックアクションの実装\"></a>ボタンクリックアクションの実装</h1><p>“蔵書検索”ボタンのクリックした時にクリックされたことを開発者に確認させるためログを出力するプログラムを作っていきます。<br>プログラムが上手く動かない時などどこまでプログラムが実行されたかを確認したり、実行中のデータを確認する時にも利用できるので試してみます。</p>\n<p><code>new View.OnClickListener...</code>を実装する時にも小さいウィンドウが表示されたらそちらから選択すると内部の<code>onClick</code>メソッドまで自動的に入力してくれます。<br><img src=\"/AndroidCourse/android/05-ButtonAction/addClickEvent01.png\" width=\"600\" title=\"insert Click Event\"><br><code>OnClick</code>メソッドまでは実装してくれます、行末を表す<code>;</code>だけが未入力になるので注意してください。<br><img src=\"/AndroidCourse/android/05-ButtonAction/addClickEvent02.png\" width=\"600\" title=\"insert Click Event\"><br>では実装していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">        <span class=\"comment\">///↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードの実装が完了したら動作確認をします、<code>Run</code>アイコンをクリックしてエミュレータを起動します。<br>アプリ画面が表示されたら<strong>蔵書検索</strong>ボタンをクリックしてみてください。</p>\n<p>Android Studioの左下<font color=\"red\">Logcat</font>タブをクリックし、赤枠のログが出力されていることを確認してみましょう。<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid07.png\" width=\"650\" title=\"rerationcode\"><br>実装したコードで表示されるログですが、出力するためには以下のような形式で実装する必要があります。<br>ログを表示するプログラムのとして以下のテンプレートを覚えておきましょう。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.d(&quot;tag name&quot;, &quot;message&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>ボタンを押した時にログを表示する命令を実行するプログラムを実装ました、ここまでの全体の工程をおさらいします。<br><img src=\"/AndroidCourse/android/05-ButtonAction/DesignCode.png\" width=\"450\" title=\"DesignCode\"><br>文字の色分けなどは以下の通りです</p>\n<ul>\n<li><font color=\"blue\">青文字</font>の「ボタン押下時に検索を行う」が大きな課題</li>\n<li><font color=\"red\">赤文字</font>、黒文字で書かれたところがエンジニアの気づくべき手順</li>\n<li>また<font color=\"red\">赤文字</font>の「画面にボタンを表示する必要がある」「ボタンが押された時にプログラムを実行する必要がある」の２つは編集が必要なファイルごとの課題</li>\n<li><font color=\"gray\">灰色の四角</font>に囲われている内容がエンジニアがコードを記述する必要のある箇所</li>\n</ul>\n<p>ここまでに聞きなれない単語がいくつか出てきました、アプリ開発に限らずプログラムを<br>行なっていく上で<font color=\"blue\"><strong>とても重要</strong></font>な概念ですので詳しく解説します。</p>\n<h2 id=\"クラス、変数\"><a href=\"#クラス、変数\" class=\"headerlink\" title=\"クラス、変数\"></a>クラス、変数</h2><p>プログラムで使用するデータを一時的に記憶しておいたり、計算や画面に表示するデータとして使用するために使用する概念になります。<br>変数を解説/理解する上で色々なたとえがあるのですが、以下Wikipediaの内容が一番理解しやすかったので一部引用させてもらいました。</p>\n<blockquote><p>データを一定期間記憶し必要なときに利用できるようにするために、データに固有の名前を与えたものである。 一人一人の人間が異なる名前によって区別されるように、一つ一つの変数も名前によって区別される。<br>変数が表しているデータをその変数の値（あたい）という。</p>\n<footer><strong>変数(プログラミング)</strong><cite><a href=\"https://ja.wikipedia.org/wiki/%E5%A4%89%E6%95%B0_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)\" target=\"_blank\" rel=\"external\">wikipedia</a></cite></footer></blockquote>\n<p>一部文中省いているところはありますが、上記の様にデータを一定期間記憶、使用することができる固有（ユニーク）な名称をつけたものになります。<br>変数につけた固有名称を変数名と呼びます。</p>\n<p>変数に記憶しておけるデータの種類が決まっており、種類のことを<strong><em>型</em></strong>と呼びます。<br>型は一度決めてしまうと後から変更することはできません。<br>型の種類は以下の通りです、Stringは厳密には型ではありませんが、頻繁に使用するので一緒に記載しておきます。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">型名</th>\n<th style=\"text-align:center\">記憶できるデータ</th>\n<th style=\"text-align:left\">データの範囲</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">byte</td>\n<td style=\"text-align:center\">符号つき8ビット整数型</td>\n<td style=\"text-align:left\">-128 ～ 127</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:center\">符号つき16ビット整数型</td>\n<td style=\"text-align:left\">-32768 ～ 32767</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:center\">符号つき32ビット整数型</td>\n<td style=\"text-align:left\">-2147483648 ～ 2147483647</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:center\">符号つき64ビット整数型</td>\n<td style=\"text-align:left\">-9223372036854775808 ～ 9223372036854775807</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:center\">32ビット浮動小数点数型</td>\n<td style=\"text-align:left\">1.4E-45 〜 3.4028235E38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:center\">64ビット浮動小数点数型</td>\n<td style=\"text-align:left\">4.9E-324 〜　1.7976931348623157E308</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:center\">論理型</td>\n<td style=\"text-align:left\">true(真)、false(偽)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:center\">符号なし１６ビット文字型</td>\n<td style=\"text-align:left\">Unicode文字１文字 : ¥0000 〜 ¥FFFF / 0 〜 65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:center\">文字列クラス</td>\n<td style=\"text-align:left\">複数の文字を扱うことができる</td>\n</tr>\n</tbody>\n</table>\n<p>クラス、変数を利用するための操作として<strong>宣言</strong>、<strong>代入</strong>、<strong>参照</strong>の３つがあります。</p>\n<ul>\n<li>宣言<ul>\n<li>一定期間記憶しておくデータの型、変数名を明確に記述することを宣言と呼びます、宣言を行わないと変数は参照できません</li>\n</ul>\n</li>\n<li>代入<ul>\n<li>宣言した変数に一定期間記憶しておくデータを登録/更新すること</li>\n<li>宣言された変数に最初にデータを登録(格納)することを<em>初期化</em>と言います</li>\n<li>宣言されたクラスに最初にデータを<em>オブジェクト化(インスタンス化)</em>と言います</li>\n</ul>\n</li>\n<li>参照<ul>\n<li>宣言され、初期化された変数のデータを利用することを指します</li>\n<li>数値であれば計算に利用したり、文字列であれば画面に表示する際に<strong>参照</strong>することが多いです</li>\n</ul>\n</li>\n</ul>\n<p>次に変数とクラスはプログラミング上の利用方法が似ているためここでは一緒に紹介しますが、変数とクラスでは記憶しておけるデータの量が違います。<br>それぞれの特徴としては<br>変数：<strong>変数は１つだけデータを記憶しておくことができる</strong><br>クラス：<strong>クラスは複数の変数を複数記憶することができ、次に紹介するメソッドも複数持つことができる</strong><br>という違いがあります。</p>\n<p>クラスは内部に変数を持っていることも多く、今回使用している<code>Button</code>クラスは内部でボタンに表示する文字列や表示する座標位置など<br>様々な情報を持っており、その情報を参照するためのメソッドが用意されています。</p>\n<h3 id=\"ウィジェットとクラス\"><a href=\"#ウィジェットとクラス\" class=\"headerlink\" title=\"ウィジェットとクラス\"></a>ウィジェットとクラス</h3><p>ウィジェットもクラスに該当します、違いはというとAndroid SDKが準備した画面表示の要素の有無となります。<br>ウィジェット = クラスであり、Android SDKに準備されているレイアウトxmlファイルに表示できる要素を持っているものと区別しましょう。</p>\n<h2 id=\"メソッド\"><a href=\"#メソッド\" class=\"headerlink\" title=\"メソッド\"></a>メソッド</h2><p>複数の命令を組み合わせた処理の一まとまりをjavaでは<strong>メソッド</strong>と呼びます。<br>また<strong>メソッド</strong>にも名称をつけて管理しており、<em>メソッド名</em>と呼びます。</p>\n<p>すでに上記までにメソッドは出てきており、<br><code>onCreate()</code>や<code>setContentView()</code>、<code>findViewById()</code>がメソッドに該当します。</p>\n<p>メソッドも変数に類似している箇所があり、利用するための操作として<strong>宣言</strong>、<strong>実装部</strong>、<strong>参照</strong>の３つがあります。</p>\n<ul>\n<li>宣言<ul>\n<li><em>戻り値</em>の型、メソッド名を明確に記述することを宣言と呼びます、宣言を行わないと参照できません</li>\n<li>メソッドの実装部で命令を進めるために基準となるデータが必要な場合があり、データをメソッドに渡すことができます、この機能を<em>引数(引数)</em>と呼びます</li>\n</ul>\n</li>\n<li>実装部<ul>\n<li>メソッドが行う複数の命令を全て記述されている箇所</li>\n</ul>\n</li>\n<li>参照<ul>\n<li>メソッドを利用すること、メソッドの実装部にバグがなければ戻り値を受け取ることができる</li>\n</ul>\n</li>\n</ul>\n<p>メソッドの利用において難しいポイントは<em>戻り値</em>と<em>引数</em>になる場合が多いです。<br>メソッド宣言は形式が決まっているため、見合わせるとどこに何が明記されているかわかりやすくなります。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">戻り値の型 メソッド名 (引数の型 引数名) &#123;</span><br><span class=\"line\">   メソッドの実装部 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>戻り値の前に”protected”,”public”などのアクセス修飾子と呼ばれるコードが書かれていることが多いですが、アクセス修飾子は後の講義で解説します。</em></p>\n<p><code>onCreate()</code>メソッドを例にすると<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    メソッドの実装部</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>“void” = 戻り値の型<br>“onCreate” = メソッド名<br>“Bundle” = 引数の型<br>”savedInstanceState” = 引数名<br>ということになります。<br>上記で<strong>void</strong>という新しい型が出てきましたが、戻り値がないことを明示するコードになります。<br>void型の変数は存在しないのでメソッドの宣言時以外ではあまり見かけないコードです。</p>\n<p>そして宣言箇所で”引数の型”、”引数名”が記載されていないメソッドは引数が無いメソッドということになります。</p>\n<p>続いてメソッドを参照している箇所は<code>setContetView()</code>を例にします。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContetView(R.layout.activity_main.xml)</span><br></pre></td></tr></table></figure></p>\n<p>メソッド名の後の “()” 内に引数を設定します、”setContentView”メソッドは参照時に画面表示するレイアウトxmlの情報を引数に記述することで、引数に記述したレイアウトを画面表示する命令を実行しています。</p>\n<h1 id=\"ボタンクリックアクションでトースト表示機能\"><a href=\"#ボタンクリックアクションでトースト表示機能\" class=\"headerlink\" title=\"ボタンクリックアクションでトースト表示機能\"></a>ボタンクリックアクションでトースト表示機能</h1><p>先程までのコードを拡張してToast表示機能を実装していきます。<br>EditTextに入力された文字を画面に表示するプログラムに作り変えていきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったら<code>Run</code>アイコンをクリックしてエミュレータにアプリをインストールし直します。<br>コードを修正した場合、エミュレータや実機にインストールし直さないとレイアウトやプログラムの修正は反映されないので気をつけましょう。</p>\n<p>EditTextに文字を入力してから<strong>蔵書検索</strong>ボタンをクリックしてみます。<br>前回のログ確認と違い、以下の画面のように文字が表示されたでしょうか？<br><img src=\"/AndroidCourse/android/05-ButtonAction/setid08.png\" width=\"300\" title=\"rerationcode\"></p>\n<p>この画面上に現れる機能がToastです、一方的にユーザに情報を伝える時などに利用します、<br>Toastは一定時間で自動的に非表示になりますので、Toast用の確認ボタンなどは存在しません。</p>\n<h1 id=\"色々なボタンイベントの実装\"><a href=\"#色々なボタンイベントの実装\" class=\"headerlink\" title=\"色々なボタンイベントの実装\"></a>色々なボタンイベントの実装</h1><p>ボタンが押した時のプログラム実装解説は以上になります。<br>しかしボタンイベントを実装方法に絞ってもボタンが押された時のプログラムの記述方法がいくつもあります。<br>その例をいくつか紹介します。</p>\n<p>ここでは色々な新しい単語も紹介しますが、単語に関しては実際に利用する時に詳しく解説します。</p>\n<h2 id=\"パターン１\"><a href=\"#パターン１\" class=\"headerlink\" title=\"パターン１\"></a>パターン１</h2><p>ボタンが押された時のプログラムをボタンに登録しながら実装するパターンです<br>ボタンが押された時のプログラムが短いものなど多く使われるパターンです</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン２\"><a href=\"#パターン２\" class=\"headerlink\" title=\"パターン２\"></a>パターン２</h2><p><code>bookSearchBtn</code>の宣言場所が違う実装方法<br>パターン２は<code>bookSearchBtn</code>インスタンスの宣言スコープが違う実装方法です</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        Button bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン３\"><a href=\"#パターン３\" class=\"headerlink\" title=\"パターン３\"></a>パターン３</h2><p>当ページで紹介したプログラムとボタンイベントのプログラムのスコープを<code>MainActivityクラス</code>全体で使えるようにした実装方法です<br>当ページで紹介したパターンと違い<code>MainActivityクラス</code>全体で使うことができます</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン４\"><a href=\"#パターン４\" class=\"headerlink\" title=\"パターン４\"></a>パターン４</h2><p><code>View.OnClickLister</code>インターフェースをMainActivityクラスに付与した実装方法<br>パターン４はボタンが押された時の実装をMainActivityクラスに委譲した実装方法です</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"パターン５\"><a href=\"#パターン５\" class=\"headerlink\" title=\"パターン５\"></a>パターン５</h2><p>新しくボタンクリックイベントのインナークラス(外部クラス)を作成する実装方法<br>この方法はリスト表示されている時などに使うことが多いです</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button bookSearchBtn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(<span class=\"keyword\">new</span> ButtonClick());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonClick</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ボタンをクリックした時の命令</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他にもボタンが押された時のプログラムの書き方はありますが、上記の4パターンが使われていることが多いです。<br>ボタンに限ったプログラムの書き方だけでもこれだけのパターンがあり、ボタンが押されたイベント以外にも同じファイルにプログラムが<br>記述されると最初はプログラムを見るのが嫌になってしまうこともあるかもしれません。</p>\n<p>ですが、<font color=\"red\"><strong>プログラムを細かく見る（読む）</strong></font>ことで名前のつけ方に共通点を見つけたり単語を検索しながら考え、失敗を繰り返しながら試すことで<br>プログラムを深く理解することができるようになります。</p>\n<h1 id=\"プログラム課題\"><a href=\"#プログラム課題\" class=\"headerlink\" title=\"プログラム課題\"></a>プログラム課題</h1><p>今回の課題ではプログラミングを進める中で必ず出てくる<strong>超重要</strong>な処理の、”条件分岐”、”繰り返し”処理の書き方を学習していきます。<br>蔵書検索アプリを作る中でもこの先で何度も出てくるので忘れない様しっかり課題にしていきます。</p>\n<h2 id=\"条件分岐処理\"><a href=\"#条件分岐処理\" class=\"headerlink\" title=\"条件分岐処理\"></a>条件分岐処理</h2><p>１つ目の<strong>超重要</strong>処理は”条件分岐”です。<br>単語だけを聞くと使い方など難しく感じるかもしれませんが、</p>\n<ul>\n<li>晴れているので外で遊ぶ</li>\n<li>雨が降っているので家で勉強する</li>\n</ul>\n<p>上記の様に「〜だったら○○をする」という条件に該当した時に特定の処理を実行する制御文です。<br>晴れている条件だけをプログラムにすると<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>さらに、雨が降った時の条件を加えて見ます<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (雨が降っている) &#123;</span><br><span class=\"line\">    家で勉強する</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>さらにさらにそれ以外の天気全ての場合には “電車で図書館に向かう”条件をつか加えます<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (晴れている) &#123;</span><br><span class=\"line\">    外で遊ぶ</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (雨が降っている) &#123;</span><br><span class=\"line\">    家で勉強する</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    電車で図書館に向かう</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>条件分岐処理<code>if</code>文の実装方法は以上のパターンが多く “else if”をなしに”if~else”だけで記述することも可能です。<br><code>if</code>文の使い方のテンプレートとしては以下です。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (条件判定文) &#123;</span><br><span class=\"line\">    条件判定文に該当した場合に処理する命令</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>試しにEditTextに入力された文字数が３文字より多い時だけToastを表示する様に修正します。<br>String型変数の文字数を参照するには<code>length()</code>メソッドを使います。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>EditTextが3文字より多い場合だけToastが表示される様になりましたか？</p>\n<p><code>if</code>文で判定処理を行う場合は、必ず条件の結果が「正(true)/非(false)」のどちらかになる様に条件を記述します。<br>上記でEditTextの文字列を判定する際に <strong>&gt;</strong>という記号を使いましたが、これを<strong><em>比較演算子</em></strong>と呼びます。<br>比較演算子には以下の通りの種類がありますので、状況に応じて使い分けます。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">論理演算子</th>\n<th style=\"text-align:left\">正(true)判定の条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">==</td>\n<td style=\"text-align:left\">左右の値が同じ場合のみ正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">右の値より右の値が1以上大きい時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">左の値より右の値が1以上大きい時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;=</td>\n<td style=\"text-align:left\">左の値が右の値以上の時に正(true)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;=</td>\n<td style=\"text-align:left\">右の値が左の値以上の時に正(true)</td>\n</tr>\n</tbody>\n</table>\n<p>上記、”正(true)判定の条件”以外の場合は非(false)となります。</p>\n<p><font color=\"blue\"><strong>では改めてここからが課題です。</strong></font><br><code>if</code>構文を使った課題です、以下の条件を満たすプログラムに修正してください。</p>\n<ul>\n<li>EditTextに入力されている文字数が3文字以下の場合はToastで「EditTextの文字数は○文字です。」と表示します。<ul>\n<li>○の中はEditTextの文字数を表示します。</li>\n</ul>\n</li>\n<li>EditTextに入力されている文字数が10文字より多い場合はToastで「10文字以下で入力してください。」と表示します。</li>\n<li>それ以外の場合はToastで「EditTextに○○と入力されています。」と表示します。<ul>\n<li>○の中はEditTextの文字列を表示します。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"繰り返し処理\"><a href=\"#繰り返し処理\" class=\"headerlink\" title=\"繰り返し処理\"></a>繰り返し処理</h2><p>２つ目の<strong>超重要</strong>処理は”繰り返し”です。<br>文字通り同じ処理を繰り返します。指定処理を指定の回数繰り返し処理する制御文です。<br>繰り返し処理の基本は<code>for</code>文と呼ばれています。<br>ある処理を10回繰り返したい時以下の様に実装します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    繰り返したい処理</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記のコードをテンプレートとして解説すると、<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (繰り返し変数の初期化; 繰り返す回数を決める条件; 繰り返し変数の増減式) &#123;</span><br><span class=\"line\">    繰り返したい処理</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>となります。<br>まずは使って見ましょう、<code>if</code>文の課題の続きでプログラムを修正します、<br>ログを使って繰り返されているか確認してます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを５回出力(表示)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"蔵書検索ボタンが押されました：\"</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">\"回目\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br><code>Logcat</code>を確認して「蔵書検索ボタンが押されました：○回目」と５回表示されていれば成功です。<br>次はログに星を沢山表示させて見ます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを５回出力(表示)</span></span><br><span class=\"line\">            String star = <span class=\"string\">\"☆\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, star);</span><br><span class=\"line\">                star += <span class=\"string\">\"☆\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を別の変数に代入</span></span><br><span class=\"line\">            String inputText = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// inputTextの文字数が3文字より多いか判定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inputText.length() &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 3文字より多い場合はToastを表示する</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"EditTextの文字数は \"</span> + inputText.length() + <span class=\"string\">\"文字です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードで動作確認します。<br><code>Logcat</code>にて５行の星が一個づつ増えて表示されたでしょうか？<br>では最後に<code>for</code>と<code>if</code>構文を合わせて使う課題です、<br>以下の条件を満たすプログラムに修正してください。</p>\n<ul>\n<li>繰り返し処理において、何回目の繰り返し処理かログに表示します。<ul>\n<li>「○回目の繰り返し処理」とログに出力されている。(○は繰り返し回数を表示)</li>\n</ul>\n</li>\n<li>偶数の時だけ「☆」を表示する。星の表示個数は繰り返しの回数と同じ個数とします。</li>\n<li>最後に表示される「☆」の数が10個であること。</li>\n</ul>\n<p>以上でボタンが押された時のプログラム実装ができました、次の<a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面作成</a>ではリスト表示レイアウト及び、画面遷移処理に関して実装していきます。</p>\n"},{"title":"検索結果一覧画面の作成","date":"2017-11-06T15:00:00.000Z","_content":"検索結果一覧を表示する検索結果画面の作成とリスト表示レイアウトの実装方法を学習します。\nまた検索画面から検索結果画面を表示するための画面遷移処理の実装方法を学習します。\n\n<!-- toc -->\n\n[ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)からの引き続きの学習ページです。\n# 学習ポイント\n* ListViewを利用したリストレイアウトの実装方法\n* 新規画面の作り方\n* 画面遷移処理の実装方法\n* xmlファイルでのレイアウト作成のおさらい\n* コレクション / 配列\n* 継承\n* コンストラクタ\n* アクセス修飾子\n\n蔵書検索を行なった結果複数の蔵書情報を取得できる場合があります、複数取得した蔵書情報を一覧表示します。\nその前段として、一覧表示を行うためのウィジェットListViewの使い方を学習します。\nまた、検索画面で入力された文字の検索を行うために画面遷移処理及び、画面遷移時に次の画面へ情報を渡す処理の実装方法を学習します。\n\n# 新しい画面を作成する\nAndroidアプリに置いて**画面 = Activity**であることは[Androidの概念](/AndroidCourse/android/02-AndroicConcept)で解説しました。\n今回は蔵書検索アプリのプロジェクトに新しいActivityを追加していきます。\n\n新しいActivityの追加はメニューかもしくは左のプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行えます。\n\n新しく作成するActivityは**Empty Activity**を選びます。\n1. メニュー > File > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_1.png 500 CreateNewActivity %}\n2. ウィンドウ右クリック > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_2.png 500 CreateNewActivity %}\n\n新しく作成するActivityのファイル名と同時に作成するxmlファイルの名称の入力を求められます。\n以下の名称で新しいActivityを作成します。\n\n|項目|設定値|\n|-------------|------------------|\n|Activity Name|ResultListActivity|\n|Generate Layout File|チェックを<font color=\"blue\">つける</font>|\n|Layout Name|activity_result_list|\n|Luncher Activity|チェックを<font color=\"red\">つけない</font>|\n|Backwords Compatibility(AppCompat)|チェックを<font color=\"blue\">つける</font>|\n{% img /android/06-TransitionScreen/createactivity02.png 500 CreateNewActivity %}\n項目の入力が終わったら`Finish`ボタンをクリックします。\n\n新しいActivityの作成が終わるとウィンドウは閉じAndroid Studioのエディタに戻ります。\nプロジェクトツリーには<font color=\"green\">ResultListActivity.java</font>と<font color=\"green\">activity_result_list.xml</font>のファイルが追加されます。\n{% img /android/06-TransitionScreen/createactivity03.png 350 CreateNewActivity %}\n\n## AndroidManifestファイルの確認\nActivityがプロジェクトに追加された場合でも、アプリで表示するためにはアプリの設計書となる`AndroidManifest.xml`に利用することを記述する必要があります。\n`AndroidManifest.xml`の場所は以下にあります。\n> app -> manifests -> AndroidManifest.xml\n\n{% img /android/06-TransitionScreen/createactivity04.png 400 CreateNewActivity %}\n作成した**ResultListActivity**が記載されているか確認すると\n{% img /android/06-TransitionScreen/createactivity05.png 550 CreateNewActivity %}\n無事に記述されていることが確認できました、他の行を確認すると検索画面として表示している**MainActivity**も記載されています。\n\n`AndroidManifest.xml`はアプリ名やアプリアイコン、アプリ起動時に表示するActivityなどの設定が記述されたアプリの概要設計書のようなファイルです、他にはPush通知機能を追加する時にもファイルの修正が必要になるので覚えておきましょう。\n\n# 画面遷移処理機能\n新しいActivityが作成できたので、MainActivityの*蔵書検索ボタン*をクリックした時、ResultListActivityに表示が切り替わる様にMainActivity.javaを修正していきます。\n```java MainActivity.java\n...一部省略\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // コンソールログにボタンが押されたことを出力(表示)\n            Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            // 入力された文字をToast(トースト)に表示\n            Toast.makeText(getBaseContext()\n                    , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                    , Toast.LENGTH_LONG).show();\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // 画面遷移するためのIntentをインスタンス化\n            Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n            // 画面遷移アクションを実行\n            startActivity(intent);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    };\n```\nコードの修正が終わったらエミュレータで動作確認してください。\n以下のように画面遷移できましたか？\n{% img /android/06-TransitionScreen/TransitionScreen.gif 300 TransitionScreen %}\nまたエミュレータ左下の三角ボタンをクリックすると前の画面に戻ります。\n{% img /android/06-TransitionScreen/BackScreen.png 400 BackScreen %}\n\n## Intent\nAndroid開発における４大要素の一つとして紹介されている`Intent`が出てきました。\nIntentは別Activityの呼び出し（画面遷移）や別のアプリを起動する時などに利用する要素になります、画面遷移時の利用方法としては\n1. Intentクラスを宣言、インスタンス化\n2. startActivityメソッドの引数に\"1.\"で宣言したIntentをセット\n\nこの２つの手順でActivity間の画面遷移が実装できてしまいます。\n今回画面遷移時に生成したIntentですが、\n一つ目の引数にはContextと呼ばれるクラスをセット<font color=\"red\">(Contextは少々ややこしいクラスなので今後のページで詳しく解説します）</font>Contextは現在開いているActivityが該当するので自身を表す”this”と言う属性を記述してセットする。\n２つ目の引数に遷移したいActivityのクラス情報をセットする。\n\n最初のうちは画面遷移を行う場合、上記のルールで画面遷移のコードを実装するよう癖をつけておきましょう。\n\n# 検索結果画面レイアウト作成\n検索画面同様にLayoutEditorとConstraintsLayoutを使って検索結果画面のレイアウト構成を作成していきます。\n{% img /android/06-TransitionScreen/re_le00.png 200 CreateResultListLayout %}\n\nResultListActivityの新規作成時、同時に作成された`activity_result_list.xml`を修正します。\n> app -> res -> layout -> activity_result_list.xml\n\n検索結果画面は検索した結果を取得し、その一覧を表示します、一覧表示を行うためのコンポーネントとして`ListView`を利用します。\nデザインビューに`ListView`を乗せるには検索画面の時の”Button”や\"EditText\"と同じように”コンポーネントをクリックしたままデザインビューまでマウスカーソルをマウスカーソルを移動させ、離す”と言う手順です。\n**Palette**から`ListView`を探しデザインビューにビューに乗せます。\n{% img /android/06-TransitionScreen/re_le01.png 500 CreateResultListLayout %}\n画面の上下左右と制約を設定します。\n{% img /android/06-TransitionScreen/re_le02.png 500 CreateResultListLayout %}\n`ListView`に表示するデータの設定はjavaファイルで実装しますのでjavaファイルと関連付けをするために**Attributes**から*ID*項目を設定します。\n{% img /android/06-TransitionScreen/re_le03.png 400 CreateResultListLayout %}\n\n|項目   |設定値     |\n|------|----------|\n|ID    |ResultList|\n\n# 一覧表示機能\n検索結果画面の一覧表示機能を実装していきます、まずはListViewの使い方を理解するために理解するために10行のリスト表示を行い、各行に行数番号の文字を表示してみます。\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    ListView resultListView;\n    // 検証用コレクションデータ\n    List<String> listData = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\");\n    // ListViewの表示内容を管理するクラス\n    ArrayAdapter<String> adapter\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ArrayAdapter<>(ResultListActivity.this\n                , android.R.layout.simple_list_item_1\n                , listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n合わせてListViewの行をクリックされた時のイベントをセットしていきます。\n行毎のクリックイベントはMainActivity.javaのボタンクリックとは別の実装方法を試していきます、クラス名の後ろに`implements AdapterView.OnItemClickListener`と入力\n```java ResultListActivity.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\t...\n}\n```\nするとエラーの様な<font color=\"red\">赤い下線</font>が表示されます。\nクラス名 \"ResultListActivity\"をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。\n{% img /android/06-TransitionScreen/additemclick01.png 500 add Item ClickEvent %}\n`implement methods`をクリックします。\n{% img /android/06-TransitionScreen/additemclick02.png 500 add Item ClickEvent %}\n`onItemClick...`が選択されている(青くなっている)状態で`OK`をクリックします。\n{% img /android/06-TransitionScreen/additemclick03.png 300 add Item ClickEvent %}\n`onItemClick()`メソッドが自動的に追加されます。\n{% img /android/06-TransitionScreen/additemclick04.png 500 add Item ClickEvent %}\nあとは行をクリックした時の命令を実装します。\n```java ResultListActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ArrayAdapter<>(ResultListActivity.this\n                , android.R.layout.simple_list_item_1\n                , listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , i + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n```\nコードの実装が終わったらエミュレータで動作確認してみましょう。\n\n今回のリストでは各行にテキストを１つ表示するリストとして実装しました。\nAndroid SDKに用意されているリストと行のレイアウトを使用して表示させています。\n更に各行をクリックすると\"＊行目をクリックしました\"とToastが表示されます。\n\n多くの現場ではこのような使い方はすくなく**Adapter**クラスと行のレイアウトをカスタマイズして利用することがほとんどです。\n次の工程では**Adapter**クラスのカスタマイズと行に表示するレイアウトをカスタマイズしていきます。\n\n## コレクション、配列\nAndroidアプリの開発に用いられるjava言語では複数のデータを一つのまとまりとして利用することができます。\nデータの持ち方としては２つ方法がありそれぞれ**コレクション**、**配列**という概念があります、\nどちらの形式においても一つのまとまりのデータは同じ形である必要があり、<font color=\"blue\">**型の違うデータを複数記憶することはできません**</font>\n\n主な違いとして\n* 配列は宣言時に要素の上限を決める必要がある。\n* コレクションは上限設定はなく動的に要素の数を増減できる。\n\nその他の差異の確認のため、例として３つの手順をそれぞれの概念を使って実装してみます。\n* 整数型のコレクション/配列を空で宣言\n* 2つのデータを追加/代入\n* 1つ目のデータを参照してログを表示\n\n```java コレクション\n    // 空のコレクションを宣言\n    List<Integer> integerList = new ArrayList<>();\n    // コレクションの1番目に10を追加\n    integerList.add(10);\n    // コレクションの2番目に20を追加\n    integerList.add(20);\n    // コレクションの1番目のデータを表示\n    Log.d(\"collection_arrarys\", \"Collection data check: \" + integerList.get(0));\n    /* \"Collection data check: 10\" と表示されます */\n```\n\n```java 配列\n    // 空の配列を宣言\n    int integerArray[] = new int[2];\n    // 配列の1番目に10を代入\n    integerArray[0] = 10;\n    // 配列の2番目に20を代入\n    integerArray[1] = 20;\n    // 配列の1番目のデータを表示\n    Log.d(\"collection_arrarys\", \"Array data check: \" + integerArray[0]);\n    /* \"Array data check: 10\" と表示されます */\n```\n\n配列で値を代入する時や参照する時に変数名の後の\"[]\"は要素の場所を表すための**順番(添字)**を指定する箇所です、プログラムの配列で気をつけるポイントとして、1番目のデータを参照するためには '0' と記述する必要があることです。\nよって２番目のデータを参照するためには\"[]\"の添え字に '1' と記述する必要があります。\n３番目以降も同様に一つ小さい値を記述する必要があります。\n\nデータの数は動的な場合が多くほどんどの状況下でコレクションを使用して一覧表示などを作っています。\n\n# カスタム一覧表示機能\n一覧表示のサンプルプログラムができたところで、最終的にはインターネット上の蔵書情報を取得し画面に表示します。\nその前にリストの表示内容をカスタマイズ方法を覚えていきましょう。\nListViewの表示をカスタマイズするためには行のレイアウトファイルを作成し、\"Adapter\"クラスを継承して新しいAdapterを作成していきます。\n下図の様に各行が縦２行のデータになり、１行目は大きい文字、２行目は小さめの文字で表示する様なリストを作ります。\n{% img /android/06-TransitionScreen/custom_list00.png 200 example custom list %}\n**継承**に関しては実装時に解説します。\n## ListViewの行レイアウト作成\n表示をカスタムしたListViewを作るには行毎のレイアウトを作成する必要があります。\n先ほど１〜１０の数字が表示されていたところ縦に２つ並ぶテキストに作り変えて表示していきます。\n\n新規レイアウトファイルを作成するため、以下の通り\"Layout XML File\"をクリックします。\n> プロジェクトウィンドウ右クリック > New > XML > Layout XML File\n\n{% img /android/06-TransitionScreen/createrow01.png 400 Create List Row %}\nレイアウトファイル名、一番上位の要素を設定して`Finish`ボタンをクリックします。\n{% img /android/06-TransitionScreen/createrow02.png 500 Create List Row %}\n\n|項目              |設定値          |\n|:---------------:|---------------|\n|Layout File Name |row_result_list|\n|Root Tag         |android.support.constraint.ConstraintLayout|\n\nレイアウト作成されたら、`row_result_list.xml`ファイルを開き、 \"TextView\"をデザインビューに配置します。\n{% img /android/06-TransitionScreen/createrow03.png 500 Create List Row %}\n\"TextView\"の上、左右を画面の端と制約を設定します。\n{% img /android/06-TransitionScreen/createrow04.png 500 Create List Row %}\n\"TextView\"の要素範囲を最大に広げるため、*layout_width*属性を<font color=\"red\">match_constraint</font>に変更します。\n{% img /android/06-TransitionScreen/createrow05.png 500 Create List Row %}\n\"TextView\"の表示文字サイズを大きくするため*textAppearance*属性を<font color=\"red\">AppCompat.Headline</font>に変更します。\n{% img /android/06-TransitionScreen/createrow06.png 500 Create List Row %}\n*ID*属性を<font color=\"red\">RowListTitle</font>に変更します。\n{% img /android/06-TransitionScreen/createrow07.png 500 Create List Row %}\nタイトルではない文言を表示するため\"TextView\"をもう一つデザインビューに配置します。\n{% img /android/06-TransitionScreen/createrow08.png 500 Create List Row %}\n２つ目の \"TextView\"は上辺を<font color=\"red\">RowListTitle</font>の下辺に制約をつけ、左右・下を画面の端と制約を設定します。\n{% img /android/06-TransitionScreen/createrow09.png 500 Create List Row %}\n２つ目の \"TextView\"の*ID*属性を<font color=\"red\">RowListSummary</font>に変更したら行のデザインは完成です。\n{% img /android/06-TransitionScreen/createrow10.png 500 Create List Row %}\n\n## 継承\nこれから作成するカスタムAdapterクラスを作成するためには\"BaseAdapter\"クラスを継承したクラスを作成します。\nそのために、**継承**とは何かを解説します。\n\n継承とは継承元となるクラスのメソッドや変数などの機能を受け継いだクラスを指します。\n継承元になるクラスを**親クラス(スーパークラス)**と呼び、継承先となるクラスを**子クラス**と呼びます。\n\n継承を行うメリットは同じプログラムを記述する回数が減るのでコード量が減ること、また元の処理を拡張することができることです。\n継承クラスの作り方は以下のような記述を行うだけで継承が成立します。\n```java\n class 子クラス名 extends 親クラス名 { ... }\n```\n当記事の中でも実は継承クラスを作っており、\n`MainActivity.java`、`ResultListActivity.java`などはActivityクラスを継承したクラスになります。\n２つのクラスを見てみると\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity { ... }\n```\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener { ... }\n```\nと２つのActivityは \"AppCompatActivity\"クラスを継承しています。\n\n継承を行うとメソッドなどの機能を受け継ぐと説明しました。\nたとえば`MainActivity.java`の \"onCreate\"メソッドの宣言をみると以下の様に記述されています。\n```java MainActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\t\t...一部省略\n\t}\n```\nメソッド名の上の行に`@Override`と記述されている、アノテーションと呼ばれる<font color=\"red\">おまじない</font>によって、\"AppCompatActivity\"が持つ \"onCreate\"メソッドの命令を一旦無視(**オーバーライド(override)**)して `MainActivity`の \"onCreate\"メソッドの命令を実行すると実装しているのです。\n<font color=\"blue\">***親クラスのメソッドを子クラスで拡張する場合はこのアノテーションのおまじないを記述する必要があるので気をつけましょう。***</font>\n\n続いての行の命令`super.onCreate(savedInstanceState);`では改めて親クラスである \"AppCompatActivity\"の \"onCreate\"メソッドを実行しています。\n更に次の行からが継承のメリットになります。\n当たり前に感じるかもしれませんが、`MainActivity`ではボタンクリックイベントや画面遷移の実装を行なっています。\nそれに対して`ResultListActivity`ではListViewの一覧表示処理を実装しています。\n同じonCreateメソッドに対して別の命令を実行することができています、 \"AppCompatActivity\"を継承することで画面表示を行う \"onCreate\"メソッドが呼び出され実際に使用している`MainActivity`や`ResultListActivity`の \"onCreate\"メソッドから実行され現在の様に画面にレイアウトが表示されています。\n\n## カスタムAdapterクラスの作成\nまずは新しいクラスを作成します、新規クラス作成時に親クラスを設定することができます。\n\n新規Javaクラスファイルを作成するため、以下の通り\"Java Class\"をクリックします。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create List Adapter %}\nJavaクラス名、親クラスの設定して`OK`ボタンをクリックします。\n{% img /android/06-TransitionScreen/createadpt02.png 500 Create List Adapter %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |ResultListAdapter                |\n|Kind         |Class                            |\n|Superclass   |android.widget.BaseAdapter       |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n新しい`ResultListApater`クラスが作成されエディタに表示されますが、BaseAdapterクラスを継承したクラスを作成した場合には必ず*オーバーライド*しないといけないメソッドがいくつかあるので、まずはそのメソッド群を`ResultListAdapter`に宣言していきます。\n\nクラス名 \"ResultListAdapter\"をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。\n{% img /android/06-TransitionScreen/createadpt03.png 500 Create List Adapter %}\n小さいウィンドウが表示されるので <font color=\"blue\">Implement methods</font>をクリックします。\n{% img /android/06-TransitionScreen/createadpt04.png 500 Create List Adapter %}\n新しいダイアログが表示されるのでそのまま`OK`をクリックします。\n{% img /android/06-TransitionScreen/createadpt05.png 300 Create List Adapter %}\nダイアログで選択していたメソッドが`ResultListAdapter`に追加され、エラーも消えます。\n{% img /android/06-TransitionScreen/createadpt06.png 500 Create List Adapter %}\n\n## カスタム一覧機能の実装\nListViewの表示をカスタマイズするために作成した`ResultListAdapter.java`を実装し`ResultListActivity.java`で利用する実装にコードを修正します。\n\n実装の前に**コンストラクタ**という機能を紹介します。\n### コンストラクタ\nコンストラクタはクラスをインスタンス化した時に実行される命令(メソッドと認識しても概ね大丈夫です)でクラスの内部的な初期化処理を行う機能です。\nコンストラクタは引数の数や引数の型違いなどで複数実装することができます。\nこれから実装するプログラムでは以下のように`new`キーワードを使った実装が処理された時にコンストラクタが処理されます。\n```\nadapter = new ResultListAdapter(ResultListActivity.this, listData);\n```\n今回`ResultListAdapter`は内部で持つデータだけでは機能を果たせず、少なくとも`ResultListActivity`から　\"Context\"データを引数として受け取ることで、\n行毎のレイアウトを読み込むために\"LayoutInflater\"クラスをインスタンス化する必要があります。\nそのため、オリジナルのコンストラクタを実装することになります。\n他の場合でもクラス内の変数を初期化する場合などにコンストラクタを利用するとプログラムが見やすくなります。\n\n---\n\nではカスタムレイアウトでの検索結果一覧画面を実装します。\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ListViewの描画に必要な変数を宣言\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    public ResultListAdapter(Context context, List<String> summaryList) {\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    public int getCount() {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 一覧表示する要素数を返却する\n        return summaryList.size();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    public Object getItem(int i) {\n        // indexやオブジェクト情報などを返却する\n        // 一旦nullのまま\n        return null;\n    }\n\n    @Override\n    public long getItemId(int i) {\n        // 行で表示しているLayoutIdやindex、特別なIDを返却する\n        // 一旦nullのまま\n        return 0;\n    }\n\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        titleView.setText((i + 1) + \"ページ目\");\n        summaryView.setText(summaryList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 文字情報を代入されたviewを返却\n        return view;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // 検証用コレクションデータ\n    private List<String> listData = Arrays.asList(\"Android アプリ開発の環境構築\"\n            , \"Android OS とは\"\n            , \"Androidの概念\"\n            , \"Androidアプリ開発を始める\"\n            , \"検索画面レイアウト作成\"\n            , \"ボタンイベントの実装\"\n            , \"検索結果画面への遷移実装\"\n            , \"非同期処理、REST API通信の実装\"\n            , \"検索履歴機能\"\n            , \"Firebase導入\");\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ResultListAdapter(ResultListActivity.this, listData);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , i + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n}```\nコードの実装が終わったらエミュレータで確認して見ましょう。\n\n今回のコード修正のポイントは`ResultListAdapter`クラスで利用した`LayoutInflater`クラスです。\n各Activityでは画面に表示するレイアウトファイルの読み込みを`setContentView()`メソッドが担当していましたが、ListViewに表示するレイアウトの読み込みは`LayoutInflater`クラスを使う必要があるので注意しましょう。\n\n## スコープ\n変数やクラスは宣言された時に参照/代入が可能な場所が決まっています。\n以下の画像で宣言している変数やクラスは参照/代入の行える箇所が異なります。\n{% img /android/06-TransitionScreen/scopedetail.png 500 Scope Area Detail %}\n\n<font color=\"red\">赤い枠</font>のエリアで宣言している変数やクラスを\"メンバクラス\"、\"メンバ変数\"と呼び、宣言したクラス内であればどのメソッド内でも参照/代入が可能です。\n次に<font color=\"blue\">青い枠</font>で宣言している`listItemClickEvent`インターフェースですが`onCreate()`などメソッド内で宣言された変数やクラスをローカル変数(クラス)と呼びます。\nローカル変数(クラス)は宣言したメソッド内でのみ参照/代入が行えます、そのためメソッドをまたいで参照/代入を行いたい場合はメンバ変数として宣言する必要があります。\n\n各スコープのエリアは`{}`波括弧で括られているので宣言したオブジェクトのスコープを把握したい場合はクラスか、メソッドか`{}`を確認すると良いでしょう。\nまた、スコープを確認しやすくするためにもインデント(各行の前にある余白)が正確に設定されているとプログラムがわかりやすくなります。\n\n## アクセス修飾子\n上記の修正コードにおいて変数の前に新しくキーワード`private`を付与しました。\nこのキーワードを**アクセス修飾子**と呼びます。\nアクセス修飾子は継承や外部クラスでインスタンス化されたクラスから対象の変数/メソッドにアクセスができるかを定めるキーワードです。\n例えば`private`で宣言された変数は宣言したクラス内でしか参照/代入ができません。\n`public`の場合には継承関係にある子クラス、インスタンス化されたクラスから参照/代入が可能と特徴が違います。\n下表にてアクセス修飾子のアクセス可能箇所を\"○\"、不可能な領域には\"×\"にて示します。\n\n|アクセス修飾子|外部クラス|継承子クラス|宣言クラス内部|\n|------------|---------|----------|------------|\n|public      |○        |○         |○           |\n|protected   |×        |○         |○           |\n|private     |×        |×         |○           |\n\nメンバアクセス修飾子を設定できる項目は\"クラス\",\"メソッド\",\"メンバ変数\"の３項目です。\n\n今回の実装で設定した内容においては`private`になるので外部からの一切のアクセスを禁じるように宣言しています。\njavaプログラムにおいて色々なクラスから値の代入処理を行うと不具合やエラーが発生する原因になるため、それを防ぐ方法として必要以上のクラスからのアクセスを防ぐために活用します。\n\nここまでアクセス修飾子に触れませんでしたが、開発で不具合を減らすためには重要な概念です、覚えておきましょう。\n\n以上で**検索結果一覧画面の作成**は一旦完了です。\n次の[蔵書検索機能の作成](/AndroidCourse/android/07-AsyncProcess)ではREST API通信を通して蔵書検索機能を作成します、\nデータが検索機能が完成したら、検索データを \"ResultListActivity\"で表示出来るよう修正していきます。","source":"_posts/android/06-TransitionScreen.md","raw":"---\ntitle: 検索結果一覧画面の作成\ndate: 2017-11-07 \ntags:\n---\n検索結果一覧を表示する検索結果画面の作成とリスト表示レイアウトの実装方法を学習します。\nまた検索画面から検索結果画面を表示するための画面遷移処理の実装方法を学習します。\n\n<!-- toc -->\n\n[ボタンイベントの実装](/AndroidCourse/android/05-ButtonAction)からの引き続きの学習ページです。\n# 学習ポイント\n* ListViewを利用したリストレイアウトの実装方法\n* 新規画面の作り方\n* 画面遷移処理の実装方法\n* xmlファイルでのレイアウト作成のおさらい\n* コレクション / 配列\n* 継承\n* コンストラクタ\n* アクセス修飾子\n\n蔵書検索を行なった結果複数の蔵書情報を取得できる場合があります、複数取得した蔵書情報を一覧表示します。\nその前段として、一覧表示を行うためのウィジェットListViewの使い方を学習します。\nまた、検索画面で入力された文字の検索を行うために画面遷移処理及び、画面遷移時に次の画面へ情報を渡す処理の実装方法を学習します。\n\n# 新しい画面を作成する\nAndroidアプリに置いて**画面 = Activity**であることは[Androidの概念](/AndroidCourse/android/02-AndroicConcept)で解説しました。\n今回は蔵書検索アプリのプロジェクトに新しいActivityを追加していきます。\n\n新しいActivityの追加はメニューかもしくは左のプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行えます。\n\n新しく作成するActivityは**Empty Activity**を選びます。\n1. メニュー > File > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_1.png 500 CreateNewActivity %}\n2. ウィンドウ右クリック > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_2.png 500 CreateNewActivity %}\n\n新しく作成するActivityのファイル名と同時に作成するxmlファイルの名称の入力を求められます。\n以下の名称で新しいActivityを作成します。\n\n|項目|設定値|\n|-------------|------------------|\n|Activity Name|ResultListActivity|\n|Generate Layout File|チェックを<font color=\"blue\">つける</font>|\n|Layout Name|activity_result_list|\n|Luncher Activity|チェックを<font color=\"red\">つけない</font>|\n|Backwords Compatibility(AppCompat)|チェックを<font color=\"blue\">つける</font>|\n{% img /android/06-TransitionScreen/createactivity02.png 500 CreateNewActivity %}\n項目の入力が終わったら`Finish`ボタンをクリックします。\n\n新しいActivityの作成が終わるとウィンドウは閉じAndroid Studioのエディタに戻ります。\nプロジェクトツリーには<font color=\"green\">ResultListActivity.java</font>と<font color=\"green\">activity_result_list.xml</font>のファイルが追加されます。\n{% img /android/06-TransitionScreen/createactivity03.png 350 CreateNewActivity %}\n\n## AndroidManifestファイルの確認\nActivityがプロジェクトに追加された場合でも、アプリで表示するためにはアプリの設計書となる`AndroidManifest.xml`に利用することを記述する必要があります。\n`AndroidManifest.xml`の場所は以下にあります。\n> app -> manifests -> AndroidManifest.xml\n\n{% img /android/06-TransitionScreen/createactivity04.png 400 CreateNewActivity %}\n作成した**ResultListActivity**が記載されているか確認すると\n{% img /android/06-TransitionScreen/createactivity05.png 550 CreateNewActivity %}\n無事に記述されていることが確認できました、他の行を確認すると検索画面として表示している**MainActivity**も記載されています。\n\n`AndroidManifest.xml`はアプリ名やアプリアイコン、アプリ起動時に表示するActivityなどの設定が記述されたアプリの概要設計書のようなファイルです、他にはPush通知機能を追加する時にもファイルの修正が必要になるので覚えておきましょう。\n\n# 画面遷移処理機能\n新しいActivityが作成できたので、MainActivityの*蔵書検索ボタン*をクリックした時、ResultListActivityに表示が切り替わる様にMainActivity.javaを修正していきます。\n```java MainActivity.java\n...一部省略\n    View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // コンソールログにボタンが押されたことを出力(表示)\n            Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n            // 入力された文字をToast(トースト)に表示\n            Toast.makeText(getBaseContext()\n                    , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                    , Toast.LENGTH_LONG).show();\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // 画面遷移するためのIntentをインスタンス化\n            Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n            // 画面遷移アクションを実行\n            startActivity(intent);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    };\n```\nコードの修正が終わったらエミュレータで動作確認してください。\n以下のように画面遷移できましたか？\n{% img /android/06-TransitionScreen/TransitionScreen.gif 300 TransitionScreen %}\nまたエミュレータ左下の三角ボタンをクリックすると前の画面に戻ります。\n{% img /android/06-TransitionScreen/BackScreen.png 400 BackScreen %}\n\n## Intent\nAndroid開発における４大要素の一つとして紹介されている`Intent`が出てきました。\nIntentは別Activityの呼び出し（画面遷移）や別のアプリを起動する時などに利用する要素になります、画面遷移時の利用方法としては\n1. Intentクラスを宣言、インスタンス化\n2. startActivityメソッドの引数に\"1.\"で宣言したIntentをセット\n\nこの２つの手順でActivity間の画面遷移が実装できてしまいます。\n今回画面遷移時に生成したIntentですが、\n一つ目の引数にはContextと呼ばれるクラスをセット<font color=\"red\">(Contextは少々ややこしいクラスなので今後のページで詳しく解説します）</font>Contextは現在開いているActivityが該当するので自身を表す”this”と言う属性を記述してセットする。\n２つ目の引数に遷移したいActivityのクラス情報をセットする。\n\n最初のうちは画面遷移を行う場合、上記のルールで画面遷移のコードを実装するよう癖をつけておきましょう。\n\n# 検索結果画面レイアウト作成\n検索画面同様にLayoutEditorとConstraintsLayoutを使って検索結果画面のレイアウト構成を作成していきます。\n{% img /android/06-TransitionScreen/re_le00.png 200 CreateResultListLayout %}\n\nResultListActivityの新規作成時、同時に作成された`activity_result_list.xml`を修正します。\n> app -> res -> layout -> activity_result_list.xml\n\n検索結果画面は検索した結果を取得し、その一覧を表示します、一覧表示を行うためのコンポーネントとして`ListView`を利用します。\nデザインビューに`ListView`を乗せるには検索画面の時の”Button”や\"EditText\"と同じように”コンポーネントをクリックしたままデザインビューまでマウスカーソルをマウスカーソルを移動させ、離す”と言う手順です。\n**Palette**から`ListView`を探しデザインビューにビューに乗せます。\n{% img /android/06-TransitionScreen/re_le01.png 500 CreateResultListLayout %}\n画面の上下左右と制約を設定します。\n{% img /android/06-TransitionScreen/re_le02.png 500 CreateResultListLayout %}\n`ListView`に表示するデータの設定はjavaファイルで実装しますのでjavaファイルと関連付けをするために**Attributes**から*ID*項目を設定します。\n{% img /android/06-TransitionScreen/re_le03.png 400 CreateResultListLayout %}\n\n|項目   |設定値     |\n|------|----------|\n|ID    |ResultList|\n\n# 一覧表示機能\n検索結果画面の一覧表示機能を実装していきます、まずはListViewの使い方を理解するために理解するために10行のリスト表示を行い、各行に行数番号の文字を表示してみます。\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    ListView resultListView;\n    // 検証用コレクションデータ\n    List<String> listData = Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\");\n    // ListViewの表示内容を管理するクラス\n    ArrayAdapter<String> adapter\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ArrayAdapter<>(ResultListActivity.this\n                , android.R.layout.simple_list_item_1\n                , listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n合わせてListViewの行をクリックされた時のイベントをセットしていきます。\n行毎のクリックイベントはMainActivity.javaのボタンクリックとは別の実装方法を試していきます、クラス名の後ろに`implements AdapterView.OnItemClickListener`と入力\n```java ResultListActivity.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\t...\n}\n```\nするとエラーの様な<font color=\"red\">赤い下線</font>が表示されます。\nクラス名 \"ResultListActivity\"をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。\n{% img /android/06-TransitionScreen/additemclick01.png 500 add Item ClickEvent %}\n`implement methods`をクリックします。\n{% img /android/06-TransitionScreen/additemclick02.png 500 add Item ClickEvent %}\n`onItemClick...`が選択されている(青くなっている)状態で`OK`をクリックします。\n{% img /android/06-TransitionScreen/additemclick03.png 300 add Item ClickEvent %}\n`onItemClick()`メソッドが自動的に追加されます。\n{% img /android/06-TransitionScreen/additemclick04.png 500 add Item ClickEvent %}\nあとは行をクリックした時の命令を実装します。\n```java ResultListActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ArrayAdapter<>(ResultListActivity.this\n                , android.R.layout.simple_list_item_1\n                , listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , i + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n```\nコードの実装が終わったらエミュレータで動作確認してみましょう。\n\n今回のリストでは各行にテキストを１つ表示するリストとして実装しました。\nAndroid SDKに用意されているリストと行のレイアウトを使用して表示させています。\n更に各行をクリックすると\"＊行目をクリックしました\"とToastが表示されます。\n\n多くの現場ではこのような使い方はすくなく**Adapter**クラスと行のレイアウトをカスタマイズして利用することがほとんどです。\n次の工程では**Adapter**クラスのカスタマイズと行に表示するレイアウトをカスタマイズしていきます。\n\n## コレクション、配列\nAndroidアプリの開発に用いられるjava言語では複数のデータを一つのまとまりとして利用することができます。\nデータの持ち方としては２つ方法がありそれぞれ**コレクション**、**配列**という概念があります、\nどちらの形式においても一つのまとまりのデータは同じ形である必要があり、<font color=\"blue\">**型の違うデータを複数記憶することはできません**</font>\n\n主な違いとして\n* 配列は宣言時に要素の上限を決める必要がある。\n* コレクションは上限設定はなく動的に要素の数を増減できる。\n\nその他の差異の確認のため、例として３つの手順をそれぞれの概念を使って実装してみます。\n* 整数型のコレクション/配列を空で宣言\n* 2つのデータを追加/代入\n* 1つ目のデータを参照してログを表示\n\n```java コレクション\n    // 空のコレクションを宣言\n    List<Integer> integerList = new ArrayList<>();\n    // コレクションの1番目に10を追加\n    integerList.add(10);\n    // コレクションの2番目に20を追加\n    integerList.add(20);\n    // コレクションの1番目のデータを表示\n    Log.d(\"collection_arrarys\", \"Collection data check: \" + integerList.get(0));\n    /* \"Collection data check: 10\" と表示されます */\n```\n\n```java 配列\n    // 空の配列を宣言\n    int integerArray[] = new int[2];\n    // 配列の1番目に10を代入\n    integerArray[0] = 10;\n    // 配列の2番目に20を代入\n    integerArray[1] = 20;\n    // 配列の1番目のデータを表示\n    Log.d(\"collection_arrarys\", \"Array data check: \" + integerArray[0]);\n    /* \"Array data check: 10\" と表示されます */\n```\n\n配列で値を代入する時や参照する時に変数名の後の\"[]\"は要素の場所を表すための**順番(添字)**を指定する箇所です、プログラムの配列で気をつけるポイントとして、1番目のデータを参照するためには '0' と記述する必要があることです。\nよって２番目のデータを参照するためには\"[]\"の添え字に '1' と記述する必要があります。\n３番目以降も同様に一つ小さい値を記述する必要があります。\n\nデータの数は動的な場合が多くほどんどの状況下でコレクションを使用して一覧表示などを作っています。\n\n# カスタム一覧表示機能\n一覧表示のサンプルプログラムができたところで、最終的にはインターネット上の蔵書情報を取得し画面に表示します。\nその前にリストの表示内容をカスタマイズ方法を覚えていきましょう。\nListViewの表示をカスタマイズするためには行のレイアウトファイルを作成し、\"Adapter\"クラスを継承して新しいAdapterを作成していきます。\n下図の様に各行が縦２行のデータになり、１行目は大きい文字、２行目は小さめの文字で表示する様なリストを作ります。\n{% img /android/06-TransitionScreen/custom_list00.png 200 example custom list %}\n**継承**に関しては実装時に解説します。\n## ListViewの行レイアウト作成\n表示をカスタムしたListViewを作るには行毎のレイアウトを作成する必要があります。\n先ほど１〜１０の数字が表示されていたところ縦に２つ並ぶテキストに作り変えて表示していきます。\n\n新規レイアウトファイルを作成するため、以下の通り\"Layout XML File\"をクリックします。\n> プロジェクトウィンドウ右クリック > New > XML > Layout XML File\n\n{% img /android/06-TransitionScreen/createrow01.png 400 Create List Row %}\nレイアウトファイル名、一番上位の要素を設定して`Finish`ボタンをクリックします。\n{% img /android/06-TransitionScreen/createrow02.png 500 Create List Row %}\n\n|項目              |設定値          |\n|:---------------:|---------------|\n|Layout File Name |row_result_list|\n|Root Tag         |android.support.constraint.ConstraintLayout|\n\nレイアウト作成されたら、`row_result_list.xml`ファイルを開き、 \"TextView\"をデザインビューに配置します。\n{% img /android/06-TransitionScreen/createrow03.png 500 Create List Row %}\n\"TextView\"の上、左右を画面の端と制約を設定します。\n{% img /android/06-TransitionScreen/createrow04.png 500 Create List Row %}\n\"TextView\"の要素範囲を最大に広げるため、*layout_width*属性を<font color=\"red\">match_constraint</font>に変更します。\n{% img /android/06-TransitionScreen/createrow05.png 500 Create List Row %}\n\"TextView\"の表示文字サイズを大きくするため*textAppearance*属性を<font color=\"red\">AppCompat.Headline</font>に変更します。\n{% img /android/06-TransitionScreen/createrow06.png 500 Create List Row %}\n*ID*属性を<font color=\"red\">RowListTitle</font>に変更します。\n{% img /android/06-TransitionScreen/createrow07.png 500 Create List Row %}\nタイトルではない文言を表示するため\"TextView\"をもう一つデザインビューに配置します。\n{% img /android/06-TransitionScreen/createrow08.png 500 Create List Row %}\n２つ目の \"TextView\"は上辺を<font color=\"red\">RowListTitle</font>の下辺に制約をつけ、左右・下を画面の端と制約を設定します。\n{% img /android/06-TransitionScreen/createrow09.png 500 Create List Row %}\n２つ目の \"TextView\"の*ID*属性を<font color=\"red\">RowListSummary</font>に変更したら行のデザインは完成です。\n{% img /android/06-TransitionScreen/createrow10.png 500 Create List Row %}\n\n## 継承\nこれから作成するカスタムAdapterクラスを作成するためには\"BaseAdapter\"クラスを継承したクラスを作成します。\nそのために、**継承**とは何かを解説します。\n\n継承とは継承元となるクラスのメソッドや変数などの機能を受け継いだクラスを指します。\n継承元になるクラスを**親クラス(スーパークラス)**と呼び、継承先となるクラスを**子クラス**と呼びます。\n\n継承を行うメリットは同じプログラムを記述する回数が減るのでコード量が減ること、また元の処理を拡張することができることです。\n継承クラスの作り方は以下のような記述を行うだけで継承が成立します。\n```java\n class 子クラス名 extends 親クラス名 { ... }\n```\n当記事の中でも実は継承クラスを作っており、\n`MainActivity.java`、`ResultListActivity.java`などはActivityクラスを継承したクラスになります。\n２つのクラスを見てみると\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity { ... }\n```\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener { ... }\n```\nと２つのActivityは \"AppCompatActivity\"クラスを継承しています。\n\n継承を行うとメソッドなどの機能を受け継ぐと説明しました。\nたとえば`MainActivity.java`の \"onCreate\"メソッドの宣言をみると以下の様に記述されています。\n```java MainActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\t\t...一部省略\n\t}\n```\nメソッド名の上の行に`@Override`と記述されている、アノテーションと呼ばれる<font color=\"red\">おまじない</font>によって、\"AppCompatActivity\"が持つ \"onCreate\"メソッドの命令を一旦無視(**オーバーライド(override)**)して `MainActivity`の \"onCreate\"メソッドの命令を実行すると実装しているのです。\n<font color=\"blue\">***親クラスのメソッドを子クラスで拡張する場合はこのアノテーションのおまじないを記述する必要があるので気をつけましょう。***</font>\n\n続いての行の命令`super.onCreate(savedInstanceState);`では改めて親クラスである \"AppCompatActivity\"の \"onCreate\"メソッドを実行しています。\n更に次の行からが継承のメリットになります。\n当たり前に感じるかもしれませんが、`MainActivity`ではボタンクリックイベントや画面遷移の実装を行なっています。\nそれに対して`ResultListActivity`ではListViewの一覧表示処理を実装しています。\n同じonCreateメソッドに対して別の命令を実行することができています、 \"AppCompatActivity\"を継承することで画面表示を行う \"onCreate\"メソッドが呼び出され実際に使用している`MainActivity`や`ResultListActivity`の \"onCreate\"メソッドから実行され現在の様に画面にレイアウトが表示されています。\n\n## カスタムAdapterクラスの作成\nまずは新しいクラスを作成します、新規クラス作成時に親クラスを設定することができます。\n\n新規Javaクラスファイルを作成するため、以下の通り\"Java Class\"をクリックします。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create List Adapter %}\nJavaクラス名、親クラスの設定して`OK`ボタンをクリックします。\n{% img /android/06-TransitionScreen/createadpt02.png 500 Create List Adapter %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |ResultListAdapter                |\n|Kind         |Class                            |\n|Superclass   |android.widget.BaseAdapter       |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n新しい`ResultListApater`クラスが作成されエディタに表示されますが、BaseAdapterクラスを継承したクラスを作成した場合には必ず*オーバーライド*しないといけないメソッドがいくつかあるので、まずはそのメソッド群を`ResultListAdapter`に宣言していきます。\n\nクラス名 \"ResultListAdapter\"をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。\n{% img /android/06-TransitionScreen/createadpt03.png 500 Create List Adapter %}\n小さいウィンドウが表示されるので <font color=\"blue\">Implement methods</font>をクリックします。\n{% img /android/06-TransitionScreen/createadpt04.png 500 Create List Adapter %}\n新しいダイアログが表示されるのでそのまま`OK`をクリックします。\n{% img /android/06-TransitionScreen/createadpt05.png 300 Create List Adapter %}\nダイアログで選択していたメソッドが`ResultListAdapter`に追加され、エラーも消えます。\n{% img /android/06-TransitionScreen/createadpt06.png 500 Create List Adapter %}\n\n## カスタム一覧機能の実装\nListViewの表示をカスタマイズするために作成した`ResultListAdapter.java`を実装し`ResultListActivity.java`で利用する実装にコードを修正します。\n\n実装の前に**コンストラクタ**という機能を紹介します。\n### コンストラクタ\nコンストラクタはクラスをインスタンス化した時に実行される命令(メソッドと認識しても概ね大丈夫です)でクラスの内部的な初期化処理を行う機能です。\nコンストラクタは引数の数や引数の型違いなどで複数実装することができます。\nこれから実装するプログラムでは以下のように`new`キーワードを使った実装が処理された時にコンストラクタが処理されます。\n```\nadapter = new ResultListAdapter(ResultListActivity.this, listData);\n```\n今回`ResultListAdapter`は内部で持つデータだけでは機能を果たせず、少なくとも`ResultListActivity`から　\"Context\"データを引数として受け取ることで、\n行毎のレイアウトを読み込むために\"LayoutInflater\"クラスをインスタンス化する必要があります。\nそのため、オリジナルのコンストラクタを実装することになります。\n他の場合でもクラス内の変数を初期化する場合などにコンストラクタを利用するとプログラムが見やすくなります。\n\n---\n\nではカスタムレイアウトでの検索結果一覧画面を実装します。\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ListViewの描画に必要な変数を宣言\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    public ResultListAdapter(Context context, List<String> summaryList) {\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    public int getCount() {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 一覧表示する要素数を返却する\n        return summaryList.size();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    public Object getItem(int i) {\n        // indexやオブジェクト情報などを返却する\n        // 一旦nullのまま\n        return null;\n    }\n\n    @Override\n    public long getItemId(int i) {\n        // 行で表示しているLayoutIdやindex、特別なIDを返却する\n        // 一旦nullのまま\n        return 0;\n    }\n\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        titleView.setText((i + 1) + \"ページ目\");\n        summaryView.setText(summaryList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 文字情報を代入されたviewを返却\n        return view;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // 検証用コレクションデータ\n    private List<String> listData = Arrays.asList(\"Android アプリ開発の環境構築\"\n            , \"Android OS とは\"\n            , \"Androidの概念\"\n            , \"Androidアプリ開発を始める\"\n            , \"検索画面レイアウト作成\"\n            , \"ボタンイベントの実装\"\n            , \"検索結果画面への遷移実装\"\n            , \"非同期処理、REST API通信の実装\"\n            , \"検索履歴機能\"\n            , \"Firebase導入\");\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ResultListAdapter(ResultListActivity.this, listData);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , i + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n}```\nコードの実装が終わったらエミュレータで確認して見ましょう。\n\n今回のコード修正のポイントは`ResultListAdapter`クラスで利用した`LayoutInflater`クラスです。\n各Activityでは画面に表示するレイアウトファイルの読み込みを`setContentView()`メソッドが担当していましたが、ListViewに表示するレイアウトの読み込みは`LayoutInflater`クラスを使う必要があるので注意しましょう。\n\n## スコープ\n変数やクラスは宣言された時に参照/代入が可能な場所が決まっています。\n以下の画像で宣言している変数やクラスは参照/代入の行える箇所が異なります。\n{% img /android/06-TransitionScreen/scopedetail.png 500 Scope Area Detail %}\n\n<font color=\"red\">赤い枠</font>のエリアで宣言している変数やクラスを\"メンバクラス\"、\"メンバ変数\"と呼び、宣言したクラス内であればどのメソッド内でも参照/代入が可能です。\n次に<font color=\"blue\">青い枠</font>で宣言している`listItemClickEvent`インターフェースですが`onCreate()`などメソッド内で宣言された変数やクラスをローカル変数(クラス)と呼びます。\nローカル変数(クラス)は宣言したメソッド内でのみ参照/代入が行えます、そのためメソッドをまたいで参照/代入を行いたい場合はメンバ変数として宣言する必要があります。\n\n各スコープのエリアは`{}`波括弧で括られているので宣言したオブジェクトのスコープを把握したい場合はクラスか、メソッドか`{}`を確認すると良いでしょう。\nまた、スコープを確認しやすくするためにもインデント(各行の前にある余白)が正確に設定されているとプログラムがわかりやすくなります。\n\n## アクセス修飾子\n上記の修正コードにおいて変数の前に新しくキーワード`private`を付与しました。\nこのキーワードを**アクセス修飾子**と呼びます。\nアクセス修飾子は継承や外部クラスでインスタンス化されたクラスから対象の変数/メソッドにアクセスができるかを定めるキーワードです。\n例えば`private`で宣言された変数は宣言したクラス内でしか参照/代入ができません。\n`public`の場合には継承関係にある子クラス、インスタンス化されたクラスから参照/代入が可能と特徴が違います。\n下表にてアクセス修飾子のアクセス可能箇所を\"○\"、不可能な領域には\"×\"にて示します。\n\n|アクセス修飾子|外部クラス|継承子クラス|宣言クラス内部|\n|------------|---------|----------|------------|\n|public      |○        |○         |○           |\n|protected   |×        |○         |○           |\n|private     |×        |×         |○           |\n\nメンバアクセス修飾子を設定できる項目は\"クラス\",\"メソッド\",\"メンバ変数\"の３項目です。\n\n今回の実装で設定した内容においては`private`になるので外部からの一切のアクセスを禁じるように宣言しています。\njavaプログラムにおいて色々なクラスから値の代入処理を行うと不具合やエラーが発生する原因になるため、それを防ぐ方法として必要以上のクラスからのアクセスを防ぐために活用します。\n\nここまでアクセス修飾子に触れませんでしたが、開発で不具合を減らすためには重要な概念です、覚えておきましょう。\n\n以上で**検索結果一覧画面の作成**は一旦完了です。\n次の[蔵書検索機能の作成](/AndroidCourse/android/07-AsyncProcess)ではREST API通信を通して蔵書検索機能を作成します、\nデータが検索機能が完成したら、検索データを \"ResultListActivity\"で表示出来るよう修正していきます。","slug":"06-TransitionScreen","published":1,"updated":"2018-03-01T06:10:13.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0ql00063l61re6x5ert","content":"<p>検索結果一覧を表示する検索結果画面の作成とリスト表示レイアウトの実装方法を学習します。<br>また検索画面から検索結果画面を表示するための画面遷移処理の実装方法を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#新しい画面を作成する\">新しい画面を作成する</a><ul>\n<li><a href=\"#androidmanifestファイルの確認\">AndroidManifestファイルの確認</a></li>\n</ul>\n</li>\n<li><a href=\"#画面遷移処理機能\">画面遷移処理機能</a><ul>\n<li><a href=\"#intent\">Intent</a></li>\n</ul>\n</li>\n<li><a href=\"#検索結果画面レイアウト作成\">検索結果画面レイアウト作成</a></li>\n<li><a href=\"#一覧表示機能\">一覧表示機能</a><ul>\n<li><a href=\"#コレクション-配列\">コレクション、配列</a></li>\n</ul>\n</li>\n<li><a href=\"#カスタム一覧表示機能\">カスタム一覧表示機能</a><ul>\n<li><a href=\"#listviewの行レイアウト作成\">ListViewの行レイアウト作成</a></li>\n<li><a href=\"#継承\">継承</a></li>\n<li><a href=\"#カスタムadapterクラスの作成\">カスタムAdapterクラスの作成</a></li>\n<li><a href=\"#カスタム一覧機能の実装\">カスタム一覧機能の実装</a><ul>\n<li><a href=\"#コンストラクタ\">コンストラクタ</a></li>\n</ul>\n</li>\n<li><a href=\"#スコープ\">スコープ</a></li>\n<li><a href=\"#アクセス修飾子\">アクセス修飾子</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>ListViewを利用したリストレイアウトの実装方法</li>\n<li>新規画面の作り方</li>\n<li>画面遷移処理の実装方法</li>\n<li>xmlファイルでのレイアウト作成のおさらい</li>\n<li>コレクション / 配列</li>\n<li>継承</li>\n<li>コンストラクタ</li>\n<li>アクセス修飾子</li>\n</ul>\n<p>蔵書検索を行なった結果複数の蔵書情報を取得できる場合があります、複数取得した蔵書情報を一覧表示します。<br>その前段として、一覧表示を行うためのウィジェットListViewの使い方を学習します。<br>また、検索画面で入力された文字の検索を行うために画面遷移処理及び、画面遷移時に次の画面へ情報を渡す処理の実装方法を学習します。</p>\n<h1><span id=\"新しい画面を作成する\">新しい画面を作成する</span></h1><p>Androidアプリに置いて<strong>画面 = Activity</strong>であることは<a href=\"/AndroidCourse/android/02-AndroicConcept\">Androidの概念</a>で解説しました。<br>今回は蔵書検索アプリのプロジェクトに新しいActivityを追加していきます。</p>\n<p>新しいActivityの追加はメニューかもしくは左のプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行えます。</p>\n<p>新しく作成するActivityは<strong>Empty Activity</strong>を選びます。</p>\n<ol>\n<li>メニュー &gt; File &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_1.png\" width=\"500\" title=\"CreateNewActivity\"></li>\n<li>ウィンドウ右クリック &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_2.png\" width=\"500\" title=\"CreateNewActivity\">\n</li>\n</ol>\n<p>新しく作成するActivityのファイル名と同時に作成するxmlファイルの名称の入力を求められます。<br>以下の名称で新しいActivityを作成します。</p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Activity Name</td>\n<td>ResultListActivity</td>\n</tr>\n<tr>\n<td>Generate Layout File</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Layout Name</td>\n<td>activity_result_list</td>\n</tr>\n<tr>\n<td>Luncher Activity</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Backwords Compatibility(AppCompat)</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n</tbody>\n</table>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity02.png\" width=\"500\" title=\"CreateNewActivity\">\n<p>項目の入力が終わったら<code>Finish</code>ボタンをクリックします。</p>\n<p>新しいActivityの作成が終わるとウィンドウは閉じAndroid Studioのエディタに戻ります。<br>プロジェクトツリーには<font color=\"green\">ResultListActivity.java</font>と<font color=\"green\">activity_result_list.xml</font>のファイルが追加されます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity03.png\" width=\"350\" title=\"CreateNewActivity\"></p>\n<h2><span id=\"androidmanifestファイルの確認\">AndroidManifestファイルの確認</span></h2><p>Activityがプロジェクトに追加された場合でも、アプリで表示するためにはアプリの設計書となる<code>AndroidManifest.xml</code>に利用することを記述する必要があります。<br><code>AndroidManifest.xml</code>の場所は以下にあります。</p>\n<blockquote>\n<p>app -&gt; manifests -&gt; AndroidManifest.xml</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity04.png\" width=\"400\" title=\"CreateNewActivity\">\n<p>作成した<strong>ResultListActivity</strong>が記載されているか確認すると<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity05.png\" width=\"550\" title=\"CreateNewActivity\"><br>無事に記述されていることが確認できました、他の行を確認すると検索画面として表示している<strong>MainActivity</strong>も記載されています。</p>\n<p><code>AndroidManifest.xml</code>はアプリ名やアプリアイコン、アプリ起動時に表示するActivityなどの設定が記述されたアプリの概要設計書のようなファイルです、他にはPush通知機能を追加する時にもファイルの修正が必要になるので覚えておきましょう。</p>\n<h1><span id=\"画面遷移処理機能\">画面遷移処理機能</span></h1><p>新しいActivityが作成できたので、MainActivityの<em>蔵書検索ボタン</em>をクリックした時、ResultListActivityに表示が切り替わる様にMainActivity.javaを修正していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったらエミュレータで動作確認してください。<br>以下のように画面遷移できましたか？<br><img src=\"/AndroidCourse/android/06-TransitionScreen/TransitionScreen.gif\" width=\"300\" title=\"TransitionScreen\"><br>またエミュレータ左下の三角ボタンをクリックすると前の画面に戻ります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/BackScreen.png\" width=\"400\" title=\"BackScreen\"></p>\n<h2><span id=\"intent\">Intent</span></h2><p>Android開発における４大要素の一つとして紹介されている<code>Intent</code>が出てきました。<br>Intentは別Activityの呼び出し（画面遷移）や別のアプリを起動する時などに利用する要素になります、画面遷移時の利用方法としては</p>\n<ol>\n<li>Intentクラスを宣言、インスタンス化</li>\n<li>startActivityメソッドの引数に”1.”で宣言したIntentをセット</li>\n</ol>\n<p>この２つの手順でActivity間の画面遷移が実装できてしまいます。<br>今回画面遷移時に生成したIntentですが、<br>一つ目の引数にはContextと呼ばれるクラスをセット<font color=\"red\">(Contextは少々ややこしいクラスなので今後のページで詳しく解説します）</font>Contextは現在開いているActivityが該当するので自身を表す”this”と言う属性を記述してセットする。<br>２つ目の引数に遷移したいActivityのクラス情報をセットする。</p>\n<p>最初のうちは画面遷移を行う場合、上記のルールで画面遷移のコードを実装するよう癖をつけておきましょう。</p>\n<h1><span id=\"検索結果画面レイアウト作成\">検索結果画面レイアウト作成</span></h1><p>検索画面同様にLayoutEditorとConstraintsLayoutを使って検索結果画面のレイアウト構成を作成していきます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le00.png\" width=\"200\" title=\"CreateResultListLayout\"></p>\n<p>ResultListActivityの新規作成時、同時に作成された<code>activity_result_list.xml</code>を修正します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_result_list.xml</p>\n</blockquote>\n<p>検索結果画面は検索した結果を取得し、その一覧を表示します、一覧表示を行うためのコンポーネントとして<code>ListView</code>を利用します。<br>デザインビューに<code>ListView</code>を乗せるには検索画面の時の”Button”や”EditText”と同じように”コンポーネントをクリックしたままデザインビューまでマウスカーソルをマウスカーソルを移動させ、離す”と言う手順です。<br><strong>Palette</strong>から<code>ListView</code>を探しデザインビューにビューに乗せます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le01.png\" width=\"500\" title=\"CreateResultListLayout\"><br>画面の上下左右と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le02.png\" width=\"500\" title=\"CreateResultListLayout\"><br><code>ListView</code>に表示するデータの設定はjavaファイルで実装しますのでjavaファイルと関連付けをするために<strong>Attributes</strong>から<em>ID</em>項目を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le03.png\" width=\"400\" title=\"CreateResultListLayout\"></p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>ResultList</td>\n</tr>\n</tbody>\n</table>\n<h1><span id=\"一覧表示機能\">一覧表示機能</span></h1><p>検索結果画面の一覧表示機能を実装していきます、まずはListViewの使い方を理解するために理解するために10行のリスト表示を行い、各行に行数番号の文字を表示してみます。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"6\"</span>, <span class=\"string\">\"7\"</span>, <span class=\"string\">\"8\"</span>, <span class=\"string\">\"9\"</span>, <span class=\"string\">\"10\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    ArrayAdapter&lt;String&gt; adapter</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;&gt;(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , android.R.layout.simple_list_item_1</span><br><span class=\"line\">                , listData);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>合わせてListViewの行をクリックされた時のイベントをセットしていきます。<br>行毎のクリックイベントはMainActivity.javaのボタンクリックとは別の実装方法を試していきます、クラス名の後ろに<code>implements AdapterView.OnItemClickListener</code>と入力<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>するとエラーの様な<font color=\"red\">赤い下線</font>が表示されます。<br>クラス名 “ResultListActivity”をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick01.png\" width=\"500\" title=\"add Item ClickEvent\"><br><code>implement methods</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick02.png\" width=\"500\" title=\"add Item ClickEvent\"><br><code>onItemClick...</code>が選択されている(青くなっている)状態で<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick03.png\" width=\"300\" title=\"add Item ClickEvent\"><br><code>onItemClick()</code>メソッドが自動的に追加されます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick04.png\" width=\"500\" title=\"add Item ClickEvent\"><br>あとは行をクリックした時の命令を実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">    resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">    adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;&gt;(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">            , android.R.layout.simple_list_item_1</span><br><span class=\"line\">            , listData);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">    resultListView.setAdapter(adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">    resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">    Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">            , i + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">            , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの実装が終わったらエミュレータで動作確認してみましょう。</p>\n<p>今回のリストでは各行にテキストを１つ表示するリストとして実装しました。<br>Android SDKに用意されているリストと行のレイアウトを使用して表示させています。<br>更に各行をクリックすると”＊行目をクリックしました”とToastが表示されます。</p>\n<p>多くの現場ではこのような使い方はすくなく<strong>Adapter</strong>クラスと行のレイアウトをカスタマイズして利用することがほとんどです。<br>次の工程では<strong>Adapter</strong>クラスのカスタマイズと行に表示するレイアウトをカスタマイズしていきます。</p>\n<h2><span id=\"コレクション-配列\">コレクション、配列</span></h2><p>Androidアプリの開発に用いられるjava言語では複数のデータを一つのまとまりとして利用することができます。<br>データの持ち方としては２つ方法がありそれぞれ<strong>コレクション</strong>、<strong>配列</strong>という概念があります、<br>どちらの形式においても一つのまとまりのデータは同じ形である必要があり、<font color=\"blue\"><strong>型の違うデータを複数記憶することはできません</strong></font></p>\n<p>主な違いとして</p>\n<ul>\n<li>配列は宣言時に要素の上限を決める必要がある。</li>\n<li>コレクションは上限設定はなく動的に要素の数を増減できる。</li>\n</ul>\n<p>その他の差異の確認のため、例として３つの手順をそれぞれの概念を使って実装してみます。</p>\n<ul>\n<li>整数型のコレクション/配列を空で宣言</li>\n<li>2つのデータを追加/代入</li>\n<li>1つ目のデータを参照してログを表示</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>コレクション</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空のコレクションを宣言</span></span><br><span class=\"line\">List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// コレクションの1番目に10を追加</span></span><br><span class=\"line\">integerList.add(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// コレクションの2番目に20を追加</span></span><br><span class=\"line\">integerList.add(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// コレクションの1番目のデータを表示</span></span><br><span class=\"line\">Log.d(<span class=\"string\">\"collection_arrarys\"</span>, <span class=\"string\">\"Collection data check: \"</span> + integerList.get(<span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">/* \"Collection data check: 10\" と表示されます */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>配列</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空の配列を宣言</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> integerArray[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 配列の1番目に10を代入</span></span><br><span class=\"line\">integerArray[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 配列の2番目に20を代入</span></span><br><span class=\"line\">integerArray[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">// 配列の1番目のデータを表示</span></span><br><span class=\"line\">Log.d(<span class=\"string\">\"collection_arrarys\"</span>, <span class=\"string\">\"Array data check: \"</span> + integerArray[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">/* \"Array data check: 10\" と表示されます */</span></span><br></pre></td></tr></table></figure>\n<p>配列で値を代入する時や参照する時に変数名の後の”[]”は要素の場所を表すための<strong>順番(添字)</strong>を指定する箇所です、プログラムの配列で気をつけるポイントとして、1番目のデータを参照するためには ‘0’ と記述する必要があることです。<br>よって２番目のデータを参照するためには”[]”の添え字に ‘1’ と記述する必要があります。<br>３番目以降も同様に一つ小さい値を記述する必要があります。</p>\n<p>データの数は動的な場合が多くほどんどの状況下でコレクションを使用して一覧表示などを作っています。</p>\n<h1><span id=\"カスタム一覧表示機能\">カスタム一覧表示機能</span></h1><p>一覧表示のサンプルプログラムができたところで、最終的にはインターネット上の蔵書情報を取得し画面に表示します。<br>その前にリストの表示内容をカスタマイズ方法を覚えていきましょう。<br>ListViewの表示をカスタマイズするためには行のレイアウトファイルを作成し、”Adapter”クラスを継承して新しいAdapterを作成していきます。<br>下図の様に各行が縦２行のデータになり、１行目は大きい文字、２行目は小さめの文字で表示する様なリストを作ります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/custom_list00.png\" width=\"200\" title=\"example custom list\"><br><strong>継承</strong>に関しては実装時に解説します。</p>\n<h2><span id=\"listviewの行レイアウト作成\">ListViewの行レイアウト作成</span></h2><p>表示をカスタムしたListViewを作るには行毎のレイアウトを作成する必要があります。<br>先ほど１〜１０の数字が表示されていたところ縦に２つ並ぶテキストに作り変えて表示していきます。</p>\n<p>新規レイアウトファイルを作成するため、以下の通り”Layout XML File”をクリックします。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; XML &gt; Layout XML File</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createrow01.png\" width=\"400\" title=\"Create List Row\">\n<p>レイアウトファイル名、一番上位の要素を設定して<code>Finish</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow02.png\" width=\"500\" title=\"Create List Row\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Layout File Name</td>\n<td>row_result_list</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Root Tag</td>\n<td>android.support.constraint.ConstraintLayout</td>\n</tr>\n</tbody>\n</table>\n<p>レイアウト作成されたら、<code>row_result_list.xml</code>ファイルを開き、 “TextView”をデザインビューに配置します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow03.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の上、左右を画面の端と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow04.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の要素範囲を最大に広げるため、<em>layout_width</em>属性を<font color=\"red\">match_constraint</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow05.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の表示文字サイズを大きくするため<em>textAppearance</em>属性を<font color=\"red\">AppCompat.Headline</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow06.png\" width=\"500\" title=\"Create List Row\"><br><em>ID</em>属性を<font color=\"red\">RowListTitle</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow07.png\" width=\"500\" title=\"Create List Row\"><br>タイトルではない文言を表示するため”TextView”をもう一つデザインビューに配置します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow08.png\" width=\"500\" title=\"Create List Row\"><br>２つ目の “TextView”は上辺を<font color=\"red\">RowListTitle</font>の下辺に制約をつけ、左右・下を画面の端と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow09.png\" width=\"500\" title=\"Create List Row\"><br>２つ目の “TextView”の<em>ID</em>属性を<font color=\"red\">RowListSummary</font>に変更したら行のデザインは完成です。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow10.png\" width=\"500\" title=\"Create List Row\"></p>\n<h2><span id=\"継承\">継承</span></h2><p>これから作成するカスタムAdapterクラスを作成するためには”BaseAdapter”クラスを継承したクラスを作成します。<br>そのために、<strong>継承</strong>とは何かを解説します。</p>\n<p>継承とは継承元となるクラスのメソッドや変数などの機能を受け継いだクラスを指します。<br>継承元になるクラスを<strong>親クラス(スーパークラス)</strong>と呼び、継承先となるクラスを<strong>子クラス</strong>と呼びます。</p>\n<p>継承を行うメリットは同じプログラムを記述する回数が減るのでコード量が減ること、また元の処理を拡張することができることです。<br>継承クラスの作り方は以下のような記述を行うだけで継承が成立します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 子クラス名 <span class=\"keyword\">extends</span> 親クラス名 </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当記事の中でも実は継承クラスを作っており、<br><code>MainActivity.java</code>、<code>ResultListActivity.java</code>などはActivityクラスを継承したクラスになります。<br>２つのクラスを見てみると<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>と２つのActivityは “AppCompatActivity”クラスを継承しています。</p>\n<p>継承を行うとメソッドなどの機能を受け継ぐと説明しました。<br>たとえば<code>MainActivity.java</code>の “onCreate”メソッドの宣言をみると以下の様に記述されています。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>メソッド名の上の行に<code>@Override</code>と記述されている、アノテーションと呼ばれる<font color=\"red\">おまじない</font>によって、”AppCompatActivity”が持つ “onCreate”メソッドの命令を一旦無視(<strong>オーバーライド(override)</strong>)して <code>MainActivity</code>の “onCreate”メソッドの命令を実行すると実装しているのです。</p>\n<font color=\"blue\"><strong><em>親クラスのメソッドを子クラスで拡張する場合はこのアノテーションのおまじないを記述する必要があるので気をつけましょう。</em></strong></font>\n\n<p>続いての行の命令<code>super.onCreate(savedInstanceState);</code>では改めて親クラスである “AppCompatActivity”の “onCreate”メソッドを実行しています。<br>更に次の行からが継承のメリットになります。<br>当たり前に感じるかもしれませんが、<code>MainActivity</code>ではボタンクリックイベントや画面遷移の実装を行なっています。<br>それに対して<code>ResultListActivity</code>ではListViewの一覧表示処理を実装しています。<br>同じonCreateメソッドに対して別の命令を実行することができています、 “AppCompatActivity”を継承することで画面表示を行う “onCreate”メソッドが呼び出され実際に使用している<code>MainActivity</code>や<code>ResultListActivity</code>の “onCreate”メソッドから実行され現在の様に画面にレイアウトが表示されています。</p>\n<h2><span id=\"カスタムadapterクラスの作成\">カスタムAdapterクラスの作成</span></h2><p>まずは新しいクラスを作成します、新規クラス作成時に親クラスを設定することができます。</p>\n<p>新規Javaクラスファイルを作成するため、以下の通り”Java Class”をクリックします。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create List Adapter\">\n<p>Javaクラス名、親クラスの設定して<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt02.png\" width=\"500\" title=\"Create List Adapter\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>ResultListAdapter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>android.widget.BaseAdapter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>新しい<code>ResultListApater</code>クラスが作成されエディタに表示されますが、BaseAdapterクラスを継承したクラスを作成した場合には必ず<em>オーバーライド</em>しないといけないメソッドがいくつかあるので、まずはそのメソッド群を<code>ResultListAdapter</code>に宣言していきます。</p>\n<p>クラス名 “ResultListAdapter”をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt03.png\" width=\"500\" title=\"Create List Adapter\"><br>小さいウィンドウが表示されるので <font color=\"blue\">Implement methods</font>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt04.png\" width=\"500\" title=\"Create List Adapter\"><br>新しいダイアログが表示されるのでそのまま<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt05.png\" width=\"300\" title=\"Create List Adapter\"><br>ダイアログで選択していたメソッドが<code>ResultListAdapter</code>に追加され、エラーも消えます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt06.png\" width=\"500\" title=\"Create List Adapter\"></p>\n<h2><span id=\"カスタム一覧機能の実装\">カスタム一覧機能の実装</span></h2><p>ListViewの表示をカスタマイズするために作成した<code>ResultListAdapter.java</code>を実装し<code>ResultListActivity.java</code>で利用する実装にコードを修正します。</p>\n<p>実装の前に<strong>コンストラクタ</strong>という機能を紹介します。</p>\n<h3><span id=\"コンストラクタ\">コンストラクタ</span></h3><p>コンストラクタはクラスをインスタンス化した時に実行される命令(メソッドと認識しても概ね大丈夫です)でクラスの内部的な初期化処理を行う機能です。<br>コンストラクタは引数の数や引数の型違いなどで複数実装することができます。<br>これから実装するプログラムでは以下のように<code>new</code>キーワードを使った実装が処理された時にコンストラクタが処理されます。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adapter = new ResultListAdapter(ResultListActivity.this, listData);</span><br></pre></td></tr></table></figure></p>\n<p>今回<code>ResultListAdapter</code>は内部で持つデータだけでは機能を果たせず、少なくとも<code>ResultListActivity</code>から　“Context”データを引数として受け取ることで、<br>行毎のレイアウトを読み込むために”LayoutInflater”クラスをインスタンス化する必要があります。<br>そのため、オリジナルのコンストラクタを実装することになります。<br>他の場合でもクラス内の変数を初期化する場合などにコンストラクタを利用するとプログラムが見やすくなります。</p>\n<hr>\n<p>ではカスタムレイアウトでの検索結果一覧画面を実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> summaryList.size();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// indexやオブジェクト情報などを返却する</span></span><br><span class=\"line\">        <span class=\"comment\">// 一旦nullのまま</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 行で表示しているLayoutIdやindex、特別なIDを返却する</span></span><br><span class=\"line\">        <span class=\"comment\">// 一旦nullのまま</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        titleView.setText((i + <span class=\"number\">1</span>) + <span class=\"string\">\"ページ目\"</span>);</span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"Android アプリ開発の環境構築\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Android OS とは\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidの概念\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidアプリ開発を始める\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索画面レイアウト作成\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"ボタンイベントの実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索結果画面への遷移実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"非同期処理、REST API通信の実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索履歴機能\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Firebase導入\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, listData);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">        resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , i + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>コードの実装が終わったらエミュレータで確認して見ましょう。</p>\n<p>今回のコード修正のポイントは<code>ResultListAdapter</code>クラスで利用した<code>LayoutInflater</code>クラスです。<br>各Activityでは画面に表示するレイアウトファイルの読み込みを<code>setContentView()</code>メソッドが担当していましたが、ListViewに表示するレイアウトの読み込みは<code>LayoutInflater</code>クラスを使う必要があるので注意しましょう。</p>\n<h2><span id=\"スコープ\">スコープ</span></h2><p>変数やクラスは宣言された時に参照/代入が可能な場所が決まっています。<br>以下の画像で宣言している変数やクラスは参照/代入の行える箇所が異なります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/scopedetail.png\" width=\"500\" title=\"Scope Area Detail\"></p>\n<p><font color=\"red\">赤い枠</font>のエリアで宣言している変数やクラスを”メンバクラス”、”メンバ変数”と呼び、宣言したクラス内であればどのメソッド内でも参照/代入が可能です。<br>次に<font color=\"blue\">青い枠</font>で宣言している<code>listItemClickEvent</code>インターフェースですが<code>onCreate()</code>などメソッド内で宣言された変数やクラスをローカル変数(クラス)と呼びます。<br>ローカル変数(クラス)は宣言したメソッド内でのみ参照/代入が行えます、そのためメソッドをまたいで参照/代入を行いたい場合はメンバ変数として宣言する必要があります。</p>\n<p>各スコープのエリアは<code>{}</code>波括弧で括られているので宣言したオブジェクトのスコープを把握したい場合はクラスか、メソッドか<code>{}</code>を確認すると良いでしょう。<br>また、スコープを確認しやすくするためにもインデント(各行の前にある余白)が正確に設定されているとプログラムがわかりやすくなります。</p>\n<h2><span id=\"アクセス修飾子\">アクセス修飾子</span></h2><p>上記の修正コードにおいて変数の前に新しくキーワード<code>private</code>を付与しました。<br>このキーワードを<strong>アクセス修飾子</strong>と呼びます。<br>アクセス修飾子は継承や外部クラスでインスタンス化されたクラスから対象の変数/メソッドにアクセスができるかを定めるキーワードです。<br>例えば<code>private</code>で宣言された変数は宣言したクラス内でしか参照/代入ができません。<br><code>public</code>の場合には継承関係にある子クラス、インスタンス化されたクラスから参照/代入が可能と特徴が違います。<br>下表にてアクセス修飾子のアクセス可能箇所を”○”、不可能な領域には”×”にて示します。</p>\n<table>\n<thead>\n<tr>\n<th>アクセス修飾子</th>\n<th>外部クラス</th>\n<th>継承子クラス</th>\n<th>宣言クラス内部</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>○</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>×</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>private</td>\n<td>×</td>\n<td>×</td>\n<td>○</td>\n</tr>\n</tbody>\n</table>\n<p>メンバアクセス修飾子を設定できる項目は”クラス”,”メソッド”,”メンバ変数”の３項目です。</p>\n<p>今回の実装で設定した内容においては<code>private</code>になるので外部からの一切のアクセスを禁じるように宣言しています。<br>javaプログラムにおいて色々なクラスから値の代入処理を行うと不具合やエラーが発生する原因になるため、それを防ぐ方法として必要以上のクラスからのアクセスを防ぐために活用します。</p>\n<p>ここまでアクセス修飾子に触れませんでしたが、開発で不具合を減らすためには重要な概念です、覚えておきましょう。</p>\n<p>以上で<strong>検索結果一覧画面の作成</strong>は一旦完了です。<br>次の<a href=\"/AndroidCourse/android/07-AsyncProcess\">蔵書検索機能の作成</a>ではREST API通信を通して蔵書検索機能を作成します、<br>データが検索機能が完成したら、検索データを “ResultListActivity”で表示出来るよう修正していきます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>検索結果一覧を表示する検索結果画面の作成とリスト表示レイアウトの実装方法を学習します。<br>また検索画面から検索結果画面を表示するための画面遷移処理の実装方法を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#新しい画面を作成する\">新しい画面を作成する</a><ul>\n<li><a href=\"#androidmanifestファイルの確認\">AndroidManifestファイルの確認</a></li>\n</ul>\n</li>\n<li><a href=\"#画面遷移処理機能\">画面遷移処理機能</a><ul>\n<li><a href=\"#intent\">Intent</a></li>\n</ul>\n</li>\n<li><a href=\"#検索結果画面レイアウト作成\">検索結果画面レイアウト作成</a></li>\n<li><a href=\"#一覧表示機能\">一覧表示機能</a><ul>\n<li><a href=\"#コレクション-配列\">コレクション、配列</a></li>\n</ul>\n</li>\n<li><a href=\"#カスタム一覧表示機能\">カスタム一覧表示機能</a><ul>\n<li><a href=\"#listviewの行レイアウト作成\">ListViewの行レイアウト作成</a></li>\n<li><a href=\"#継承\">継承</a></li>\n<li><a href=\"#カスタムadapterクラスの作成\">カスタムAdapterクラスの作成</a></li>\n<li><a href=\"#カスタム一覧機能の実装\">カスタム一覧機能の実装</a><ul>\n<li><a href=\"#コンストラクタ\">コンストラクタ</a></li>\n</ul>\n</li>\n<li><a href=\"#スコープ\">スコープ</a></li>\n<li><a href=\"#アクセス修飾子\">アクセス修飾子</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/05-ButtonAction\">ボタンイベントの実装</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>ListViewを利用したリストレイアウトの実装方法</li>\n<li>新規画面の作り方</li>\n<li>画面遷移処理の実装方法</li>\n<li>xmlファイルでのレイアウト作成のおさらい</li>\n<li>コレクション / 配列</li>\n<li>継承</li>\n<li>コンストラクタ</li>\n<li>アクセス修飾子</li>\n</ul>\n<p>蔵書検索を行なった結果複数の蔵書情報を取得できる場合があります、複数取得した蔵書情報を一覧表示します。<br>その前段として、一覧表示を行うためのウィジェットListViewの使い方を学習します。<br>また、検索画面で入力された文字の検索を行うために画面遷移処理及び、画面遷移時に次の画面へ情報を渡す処理の実装方法を学習します。</p>\n<h1 id=\"新しい画面を作成する\"><a href=\"#新しい画面を作成する\" class=\"headerlink\" title=\"新しい画面を作成する\"></a>新しい画面を作成する</h1><p>Androidアプリに置いて<strong>画面 = Activity</strong>であることは<a href=\"/AndroidCourse/android/02-AndroicConcept\">Androidの概念</a>で解説しました。<br>今回は蔵書検索アプリのプロジェクトに新しいActivityを追加していきます。</p>\n<p>新しいActivityの追加はメニューかもしくは左のプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行えます。</p>\n<p>新しく作成するActivityは<strong>Empty Activity</strong>を選びます。</p>\n<ol>\n<li>メニュー &gt; File &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_1.png\" width=\"500\" title=\"CreateNewActivity\"></li>\n<li>ウィンドウ右クリック &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_2.png\" width=\"500\" title=\"CreateNewActivity\">\n</li>\n</ol>\n<p>新しく作成するActivityのファイル名と同時に作成するxmlファイルの名称の入力を求められます。<br>以下の名称で新しいActivityを作成します。</p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Activity Name</td>\n<td>ResultListActivity</td>\n</tr>\n<tr>\n<td>Generate Layout File</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Layout Name</td>\n<td>activity_result_list</td>\n</tr>\n<tr>\n<td>Luncher Activity</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Backwords Compatibility(AppCompat)</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n</tbody>\n</table>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity02.png\" width=\"500\" title=\"CreateNewActivity\">\n<p>項目の入力が終わったら<code>Finish</code>ボタンをクリックします。</p>\n<p>新しいActivityの作成が終わるとウィンドウは閉じAndroid Studioのエディタに戻ります。<br>プロジェクトツリーには<font color=\"green\">ResultListActivity.java</font>と<font color=\"green\">activity_result_list.xml</font>のファイルが追加されます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity03.png\" width=\"350\" title=\"CreateNewActivity\"></p>\n<h2 id=\"AndroidManifestファイルの確認\"><a href=\"#AndroidManifestファイルの確認\" class=\"headerlink\" title=\"AndroidManifestファイルの確認\"></a>AndroidManifestファイルの確認</h2><p>Activityがプロジェクトに追加された場合でも、アプリで表示するためにはアプリの設計書となる<code>AndroidManifest.xml</code>に利用することを記述する必要があります。<br><code>AndroidManifest.xml</code>の場所は以下にあります。</p>\n<blockquote>\n<p>app -&gt; manifests -&gt; AndroidManifest.xml</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity04.png\" width=\"400\" title=\"CreateNewActivity\">\n<p>作成した<strong>ResultListActivity</strong>が記載されているか確認すると<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity05.png\" width=\"550\" title=\"CreateNewActivity\"><br>無事に記述されていることが確認できました、他の行を確認すると検索画面として表示している<strong>MainActivity</strong>も記載されています。</p>\n<p><code>AndroidManifest.xml</code>はアプリ名やアプリアイコン、アプリ起動時に表示するActivityなどの設定が記述されたアプリの概要設計書のようなファイルです、他にはPush通知機能を追加する時にもファイルの修正が必要になるので覚えておきましょう。</p>\n<h1 id=\"画面遷移処理機能\"><a href=\"#画面遷移処理機能\" class=\"headerlink\" title=\"画面遷移処理機能\"></a>画面遷移処理機能</h1><p>新しいActivityが作成できたので、MainActivityの<em>蔵書検索ボタン</em>をクリックした時、ResultListActivityに表示が切り替わる様にMainActivity.javaを修正していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>コードの修正が終わったらエミュレータで動作確認してください。<br>以下のように画面遷移できましたか？<br><img src=\"/AndroidCourse/android/06-TransitionScreen/TransitionScreen.gif\" width=\"300\" title=\"TransitionScreen\"><br>またエミュレータ左下の三角ボタンをクリックすると前の画面に戻ります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/BackScreen.png\" width=\"400\" title=\"BackScreen\"></p>\n<h2 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h2><p>Android開発における４大要素の一つとして紹介されている<code>Intent</code>が出てきました。<br>Intentは別Activityの呼び出し（画面遷移）や別のアプリを起動する時などに利用する要素になります、画面遷移時の利用方法としては</p>\n<ol>\n<li>Intentクラスを宣言、インスタンス化</li>\n<li>startActivityメソッドの引数に”1.”で宣言したIntentをセット</li>\n</ol>\n<p>この２つの手順でActivity間の画面遷移が実装できてしまいます。<br>今回画面遷移時に生成したIntentですが、<br>一つ目の引数にはContextと呼ばれるクラスをセット<font color=\"red\">(Contextは少々ややこしいクラスなので今後のページで詳しく解説します）</font>Contextは現在開いているActivityが該当するので自身を表す”this”と言う属性を記述してセットする。<br>２つ目の引数に遷移したいActivityのクラス情報をセットする。</p>\n<p>最初のうちは画面遷移を行う場合、上記のルールで画面遷移のコードを実装するよう癖をつけておきましょう。</p>\n<h1 id=\"検索結果画面レイアウト作成\"><a href=\"#検索結果画面レイアウト作成\" class=\"headerlink\" title=\"検索結果画面レイアウト作成\"></a>検索結果画面レイアウト作成</h1><p>検索画面同様にLayoutEditorとConstraintsLayoutを使って検索結果画面のレイアウト構成を作成していきます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le00.png\" width=\"200\" title=\"CreateResultListLayout\"></p>\n<p>ResultListActivityの新規作成時、同時に作成された<code>activity_result_list.xml</code>を修正します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_result_list.xml</p>\n</blockquote>\n<p>検索結果画面は検索した結果を取得し、その一覧を表示します、一覧表示を行うためのコンポーネントとして<code>ListView</code>を利用します。<br>デザインビューに<code>ListView</code>を乗せるには検索画面の時の”Button”や”EditText”と同じように”コンポーネントをクリックしたままデザインビューまでマウスカーソルをマウスカーソルを移動させ、離す”と言う手順です。<br><strong>Palette</strong>から<code>ListView</code>を探しデザインビューにビューに乗せます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le01.png\" width=\"500\" title=\"CreateResultListLayout\"><br>画面の上下左右と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le02.png\" width=\"500\" title=\"CreateResultListLayout\"><br><code>ListView</code>に表示するデータの設定はjavaファイルで実装しますのでjavaファイルと関連付けをするために<strong>Attributes</strong>から<em>ID</em>項目を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/re_le03.png\" width=\"400\" title=\"CreateResultListLayout\"></p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>ResultList</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"一覧表示機能\"><a href=\"#一覧表示機能\" class=\"headerlink\" title=\"一覧表示機能\"></a>一覧表示機能</h1><p>検索結果画面の一覧表示機能を実装していきます、まずはListViewの使い方を理解するために理解するために10行のリスト表示を行い、各行に行数番号の文字を表示してみます。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>, <span class=\"string\">\"4\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"6\"</span>, <span class=\"string\">\"7\"</span>, <span class=\"string\">\"8\"</span>, <span class=\"string\">\"9\"</span>, <span class=\"string\">\"10\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    ArrayAdapter&lt;String&gt; adapter</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;&gt;(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , android.R.layout.simple_list_item_1</span><br><span class=\"line\">                , listData);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>合わせてListViewの行をクリックされた時のイベントをセットしていきます。<br>行毎のクリックイベントはMainActivity.javaのボタンクリックとは別の実装方法を試していきます、クラス名の後ろに<code>implements AdapterView.OnItemClickListener</code>と入力<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>するとエラーの様な<font color=\"red\">赤い下線</font>が表示されます。<br>クラス名 “ResultListActivity”をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick01.png\" width=\"500\" title=\"add Item ClickEvent\"><br><code>implement methods</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick02.png\" width=\"500\" title=\"add Item ClickEvent\"><br><code>onItemClick...</code>が選択されている(青くなっている)状態で<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick03.png\" width=\"300\" title=\"add Item ClickEvent\"><br><code>onItemClick()</code>メソッドが自動的に追加されます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/additemclick04.png\" width=\"500\" title=\"add Item ClickEvent\"><br>あとは行をクリックした時の命令を実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">    resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">    adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;&gt;(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">            , android.R.layout.simple_list_item_1</span><br><span class=\"line\">            , listData);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">    resultListView.setAdapter(adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">    resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">    Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">            , i + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">            , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの実装が終わったらエミュレータで動作確認してみましょう。</p>\n<p>今回のリストでは各行にテキストを１つ表示するリストとして実装しました。<br>Android SDKに用意されているリストと行のレイアウトを使用して表示させています。<br>更に各行をクリックすると”＊行目をクリックしました”とToastが表示されます。</p>\n<p>多くの現場ではこのような使い方はすくなく<strong>Adapter</strong>クラスと行のレイアウトをカスタマイズして利用することがほとんどです。<br>次の工程では<strong>Adapter</strong>クラスのカスタマイズと行に表示するレイアウトをカスタマイズしていきます。</p>\n<h2 id=\"コレクション、配列\"><a href=\"#コレクション、配列\" class=\"headerlink\" title=\"コレクション、配列\"></a>コレクション、配列</h2><p>Androidアプリの開発に用いられるjava言語では複数のデータを一つのまとまりとして利用することができます。<br>データの持ち方としては２つ方法がありそれぞれ<strong>コレクション</strong>、<strong>配列</strong>という概念があります、<br>どちらの形式においても一つのまとまりのデータは同じ形である必要があり、<font color=\"blue\"><strong>型の違うデータを複数記憶することはできません</strong></font></p>\n<p>主な違いとして</p>\n<ul>\n<li>配列は宣言時に要素の上限を決める必要がある。</li>\n<li>コレクションは上限設定はなく動的に要素の数を増減できる。</li>\n</ul>\n<p>その他の差異の確認のため、例として３つの手順をそれぞれの概念を使って実装してみます。</p>\n<ul>\n<li>整数型のコレクション/配列を空で宣言</li>\n<li>2つのデータを追加/代入</li>\n<li>1つ目のデータを参照してログを表示</li>\n</ul>\n<figure class=\"highlight java\"><figcaption><span>コレクション</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空のコレクションを宣言</span></span><br><span class=\"line\">List&lt;Integer&gt; integerList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// コレクションの1番目に10を追加</span></span><br><span class=\"line\">integerList.add(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// コレクションの2番目に20を追加</span></span><br><span class=\"line\">integerList.add(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// コレクションの1番目のデータを表示</span></span><br><span class=\"line\">Log.d(<span class=\"string\">\"collection_arrarys\"</span>, <span class=\"string\">\"Collection data check: \"</span> + integerList.get(<span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">/* \"Collection data check: 10\" と表示されます */</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>配列</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 空の配列を宣言</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> integerArray[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 配列の1番目に10を代入</span></span><br><span class=\"line\">integerArray[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 配列の2番目に20を代入</span></span><br><span class=\"line\">integerArray[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">// 配列の1番目のデータを表示</span></span><br><span class=\"line\">Log.d(<span class=\"string\">\"collection_arrarys\"</span>, <span class=\"string\">\"Array data check: \"</span> + integerArray[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">/* \"Array data check: 10\" と表示されます */</span></span><br></pre></td></tr></table></figure>\n<p>配列で値を代入する時や参照する時に変数名の後の”[]”は要素の場所を表すための<strong>順番(添字)</strong>を指定する箇所です、プログラムの配列で気をつけるポイントとして、1番目のデータを参照するためには ‘0’ と記述する必要があることです。<br>よって２番目のデータを参照するためには”[]”の添え字に ‘1’ と記述する必要があります。<br>３番目以降も同様に一つ小さい値を記述する必要があります。</p>\n<p>データの数は動的な場合が多くほどんどの状況下でコレクションを使用して一覧表示などを作っています。</p>\n<h1 id=\"カスタム一覧表示機能\"><a href=\"#カスタム一覧表示機能\" class=\"headerlink\" title=\"カスタム一覧表示機能\"></a>カスタム一覧表示機能</h1><p>一覧表示のサンプルプログラムができたところで、最終的にはインターネット上の蔵書情報を取得し画面に表示します。<br>その前にリストの表示内容をカスタマイズ方法を覚えていきましょう。<br>ListViewの表示をカスタマイズするためには行のレイアウトファイルを作成し、”Adapter”クラスを継承して新しいAdapterを作成していきます。<br>下図の様に各行が縦２行のデータになり、１行目は大きい文字、２行目は小さめの文字で表示する様なリストを作ります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/custom_list00.png\" width=\"200\" title=\"example custom list\"><br><strong>継承</strong>に関しては実装時に解説します。</p>\n<h2 id=\"ListViewの行レイアウト作成\"><a href=\"#ListViewの行レイアウト作成\" class=\"headerlink\" title=\"ListViewの行レイアウト作成\"></a>ListViewの行レイアウト作成</h2><p>表示をカスタムしたListViewを作るには行毎のレイアウトを作成する必要があります。<br>先ほど１〜１０の数字が表示されていたところ縦に２つ並ぶテキストに作り変えて表示していきます。</p>\n<p>新規レイアウトファイルを作成するため、以下の通り”Layout XML File”をクリックします。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; XML &gt; Layout XML File</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createrow01.png\" width=\"400\" title=\"Create List Row\">\n<p>レイアウトファイル名、一番上位の要素を設定して<code>Finish</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow02.png\" width=\"500\" title=\"Create List Row\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Layout File Name</td>\n<td>row_result_list</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Root Tag</td>\n<td>android.support.constraint.ConstraintLayout</td>\n</tr>\n</tbody>\n</table>\n<p>レイアウト作成されたら、<code>row_result_list.xml</code>ファイルを開き、 “TextView”をデザインビューに配置します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow03.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の上、左右を画面の端と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow04.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の要素範囲を最大に広げるため、<em>layout_width</em>属性を<font color=\"red\">match_constraint</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow05.png\" width=\"500\" title=\"Create List Row\"><br>“TextView”の表示文字サイズを大きくするため<em>textAppearance</em>属性を<font color=\"red\">AppCompat.Headline</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow06.png\" width=\"500\" title=\"Create List Row\"><br><em>ID</em>属性を<font color=\"red\">RowListTitle</font>に変更します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow07.png\" width=\"500\" title=\"Create List Row\"><br>タイトルではない文言を表示するため”TextView”をもう一つデザインビューに配置します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow08.png\" width=\"500\" title=\"Create List Row\"><br>２つ目の “TextView”は上辺を<font color=\"red\">RowListTitle</font>の下辺に制約をつけ、左右・下を画面の端と制約を設定します。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow09.png\" width=\"500\" title=\"Create List Row\"><br>２つ目の “TextView”の<em>ID</em>属性を<font color=\"red\">RowListSummary</font>に変更したら行のデザインは完成です。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createrow10.png\" width=\"500\" title=\"Create List Row\"></p>\n<h2 id=\"継承\"><a href=\"#継承\" class=\"headerlink\" title=\"継承\"></a>継承</h2><p>これから作成するカスタムAdapterクラスを作成するためには”BaseAdapter”クラスを継承したクラスを作成します。<br>そのために、<strong>継承</strong>とは何かを解説します。</p>\n<p>継承とは継承元となるクラスのメソッドや変数などの機能を受け継いだクラスを指します。<br>継承元になるクラスを<strong>親クラス(スーパークラス)</strong>と呼び、継承先となるクラスを<strong>子クラス</strong>と呼びます。</p>\n<p>継承を行うメリットは同じプログラムを記述する回数が減るのでコード量が減ること、また元の処理を拡張することができることです。<br>継承クラスの作り方は以下のような記述を行うだけで継承が成立します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 子クラス名 <span class=\"keyword\">extends</span> 親クラス名 </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>当記事の中でも実は継承クラスを作っており、<br><code>MainActivity.java</code>、<code>ResultListActivity.java</code>などはActivityクラスを継承したクラスになります。<br>２つのクラスを見てみると<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>と２つのActivityは “AppCompatActivity”クラスを継承しています。</p>\n<p>継承を行うとメソッドなどの機能を受け継ぐと説明しました。<br>たとえば<code>MainActivity.java</code>の “onCreate”メソッドの宣言をみると以下の様に記述されています。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">       setContentView(R.layout.activity_main);</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>メソッド名の上の行に<code>@Override</code>と記述されている、アノテーションと呼ばれる<font color=\"red\">おまじない</font>によって、”AppCompatActivity”が持つ “onCreate”メソッドの命令を一旦無視(<strong>オーバーライド(override)</strong>)して <code>MainActivity</code>の “onCreate”メソッドの命令を実行すると実装しているのです。</p>\n<font color=\"blue\"><strong><em>親クラスのメソッドを子クラスで拡張する場合はこのアノテーションのおまじないを記述する必要があるので気をつけましょう。</em></strong></font>\n\n<p>続いての行の命令<code>super.onCreate(savedInstanceState);</code>では改めて親クラスである “AppCompatActivity”の “onCreate”メソッドを実行しています。<br>更に次の行からが継承のメリットになります。<br>当たり前に感じるかもしれませんが、<code>MainActivity</code>ではボタンクリックイベントや画面遷移の実装を行なっています。<br>それに対して<code>ResultListActivity</code>ではListViewの一覧表示処理を実装しています。<br>同じonCreateメソッドに対して別の命令を実行することができています、 “AppCompatActivity”を継承することで画面表示を行う “onCreate”メソッドが呼び出され実際に使用している<code>MainActivity</code>や<code>ResultListActivity</code>の “onCreate”メソッドから実行され現在の様に画面にレイアウトが表示されています。</p>\n<h2 id=\"カスタムAdapterクラスの作成\"><a href=\"#カスタムAdapterクラスの作成\" class=\"headerlink\" title=\"カスタムAdapterクラスの作成\"></a>カスタムAdapterクラスの作成</h2><p>まずは新しいクラスを作成します、新規クラス作成時に親クラスを設定することができます。</p>\n<p>新規Javaクラスファイルを作成するため、以下の通り”Java Class”をクリックします。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create List Adapter\">\n<p>Javaクラス名、親クラスの設定して<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt02.png\" width=\"500\" title=\"Create List Adapter\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>ResultListAdapter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>android.widget.BaseAdapter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>新しい<code>ResultListApater</code>クラスが作成されエディタに表示されますが、BaseAdapterクラスを継承したクラスを作成した場合には必ず<em>オーバーライド</em>しないといけないメソッドがいくつかあるので、まずはそのメソッド群を<code>ResultListAdapter</code>に宣言していきます。</p>\n<p>クラス名 “ResultListAdapter”をクリックし少し経過すると、赤い電球のようなアイコンが表示されるのでクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt03.png\" width=\"500\" title=\"Create List Adapter\"><br>小さいウィンドウが表示されるので <font color=\"blue\">Implement methods</font>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt04.png\" width=\"500\" title=\"Create List Adapter\"><br>新しいダイアログが表示されるのでそのまま<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt05.png\" width=\"300\" title=\"Create List Adapter\"><br>ダイアログで選択していたメソッドが<code>ResultListAdapter</code>に追加され、エラーも消えます。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt06.png\" width=\"500\" title=\"Create List Adapter\"></p>\n<h2 id=\"カスタム一覧機能の実装\"><a href=\"#カスタム一覧機能の実装\" class=\"headerlink\" title=\"カスタム一覧機能の実装\"></a>カスタム一覧機能の実装</h2><p>ListViewの表示をカスタマイズするために作成した<code>ResultListAdapter.java</code>を実装し<code>ResultListActivity.java</code>で利用する実装にコードを修正します。</p>\n<p>実装の前に<strong>コンストラクタ</strong>という機能を紹介します。</p>\n<h3 id=\"コンストラクタ\"><a href=\"#コンストラクタ\" class=\"headerlink\" title=\"コンストラクタ\"></a>コンストラクタ</h3><p>コンストラクタはクラスをインスタンス化した時に実行される命令(メソッドと認識しても概ね大丈夫です)でクラスの内部的な初期化処理を行う機能です。<br>コンストラクタは引数の数や引数の型違いなどで複数実装することができます。<br>これから実装するプログラムでは以下のように<code>new</code>キーワードを使った実装が処理された時にコンストラクタが処理されます。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adapter = new ResultListAdapter(ResultListActivity.this, listData);</span><br></pre></td></tr></table></figure></p>\n<p>今回<code>ResultListAdapter</code>は内部で持つデータだけでは機能を果たせず、少なくとも<code>ResultListActivity</code>から　“Context”データを引数として受け取ることで、<br>行毎のレイアウトを読み込むために”LayoutInflater”クラスをインスタンス化する必要があります。<br>そのため、オリジナルのコンストラクタを実装することになります。<br>他の場合でもクラス内の変数を初期化する場合などにコンストラクタを利用するとプログラムが見やすくなります。</p>\n<hr>\n<p>ではカスタムレイアウトでの検索結果一覧画面を実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> summaryList.size();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// indexやオブジェクト情報などを返却する</span></span><br><span class=\"line\">        <span class=\"comment\">// 一旦nullのまま</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 行で表示しているLayoutIdやindex、特別なIDを返却する</span></span><br><span class=\"line\">        <span class=\"comment\">// 一旦nullのまま</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        titleView.setText((i + <span class=\"number\">1</span>) + <span class=\"string\">\"ページ目\"</span>);</span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"Android アプリ開発の環境構築\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Android OS とは\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidの概念\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidアプリ開発を始める\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索画面レイアウト作成\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"ボタンイベントの実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索結果画面への遷移実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"非同期処理、REST API通信の実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索履歴機能\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Firebase導入\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, listData);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">        resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , i + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>コードの実装が終わったらエミュレータで確認して見ましょう。</p>\n<p>今回のコード修正のポイントは<code>ResultListAdapter</code>クラスで利用した<code>LayoutInflater</code>クラスです。<br>各Activityでは画面に表示するレイアウトファイルの読み込みを<code>setContentView()</code>メソッドが担当していましたが、ListViewに表示するレイアウトの読み込みは<code>LayoutInflater</code>クラスを使う必要があるので注意しましょう。</p>\n<h2 id=\"スコープ\"><a href=\"#スコープ\" class=\"headerlink\" title=\"スコープ\"></a>スコープ</h2><p>変数やクラスは宣言された時に参照/代入が可能な場所が決まっています。<br>以下の画像で宣言している変数やクラスは参照/代入の行える箇所が異なります。<br><img src=\"/AndroidCourse/android/06-TransitionScreen/scopedetail.png\" width=\"500\" title=\"Scope Area Detail\"></p>\n<p><font color=\"red\">赤い枠</font>のエリアで宣言している変数やクラスを”メンバクラス”、”メンバ変数”と呼び、宣言したクラス内であればどのメソッド内でも参照/代入が可能です。<br>次に<font color=\"blue\">青い枠</font>で宣言している<code>listItemClickEvent</code>インターフェースですが<code>onCreate()</code>などメソッド内で宣言された変数やクラスをローカル変数(クラス)と呼びます。<br>ローカル変数(クラス)は宣言したメソッド内でのみ参照/代入が行えます、そのためメソッドをまたいで参照/代入を行いたい場合はメンバ変数として宣言する必要があります。</p>\n<p>各スコープのエリアは<code>{}</code>波括弧で括られているので宣言したオブジェクトのスコープを把握したい場合はクラスか、メソッドか<code>{}</code>を確認すると良いでしょう。<br>また、スコープを確認しやすくするためにもインデント(各行の前にある余白)が正確に設定されているとプログラムがわかりやすくなります。</p>\n<h2 id=\"アクセス修飾子\"><a href=\"#アクセス修飾子\" class=\"headerlink\" title=\"アクセス修飾子\"></a>アクセス修飾子</h2><p>上記の修正コードにおいて変数の前に新しくキーワード<code>private</code>を付与しました。<br>このキーワードを<strong>アクセス修飾子</strong>と呼びます。<br>アクセス修飾子は継承や外部クラスでインスタンス化されたクラスから対象の変数/メソッドにアクセスができるかを定めるキーワードです。<br>例えば<code>private</code>で宣言された変数は宣言したクラス内でしか参照/代入ができません。<br><code>public</code>の場合には継承関係にある子クラス、インスタンス化されたクラスから参照/代入が可能と特徴が違います。<br>下表にてアクセス修飾子のアクセス可能箇所を”○”、不可能な領域には”×”にて示します。</p>\n<table>\n<thead>\n<tr>\n<th>アクセス修飾子</th>\n<th>外部クラス</th>\n<th>継承子クラス</th>\n<th>宣言クラス内部</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public</td>\n<td>○</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>×</td>\n<td>○</td>\n<td>○</td>\n</tr>\n<tr>\n<td>private</td>\n<td>×</td>\n<td>×</td>\n<td>○</td>\n</tr>\n</tbody>\n</table>\n<p>メンバアクセス修飾子を設定できる項目は”クラス”,”メソッド”,”メンバ変数”の３項目です。</p>\n<p>今回の実装で設定した内容においては<code>private</code>になるので外部からの一切のアクセスを禁じるように宣言しています。<br>javaプログラムにおいて色々なクラスから値の代入処理を行うと不具合やエラーが発生する原因になるため、それを防ぐ方法として必要以上のクラスからのアクセスを防ぐために活用します。</p>\n<p>ここまでアクセス修飾子に触れませんでしたが、開発で不具合を減らすためには重要な概念です、覚えておきましょう。</p>\n<p>以上で<strong>検索結果一覧画面の作成</strong>は一旦完了です。<br>次の<a href=\"/AndroidCourse/android/07-AsyncProcess\">蔵書検索機能の作成</a>ではREST API通信を通して蔵書検索機能を作成します、<br>データが検索機能が完成したら、検索データを “ResultListActivity”で表示出来るよう修正していきます。</p>\n"},{"title":"蔵書検索機能の作成","date":"2017-11-07T15:00:00.000Z","_content":"非同期処理の使い方と解説、インターネット通信ライブラリを利用してインターネット上から取得したデータの利用方法を学習します。\n\n<!-- toc -->\n\n[検索結果一覧画面の作成](/AndroidCourse/android/06-TransitionScreen)からの引き続きの学習ページです。\n# 学習ポイント\n* 非同期通信の概要\n* Androidアプリ開発におけるUIスレッド(メインスレッド)とサブスレッド\n* REST API\n* インターネット通信ライブラリ**OkHttp**の利用方法\n\nGoogleが公開している蔵書検索サービスの\"Google Books API\"を利用して入力された文言を元にインターネット上の蔵書情報を検索し、アプリの検索結果情報を表示します。\nREST API通信を行う上で非同期処理の基礎知識が必要になりますので合わせて学習します。\n\n# 非同期処理\nアプリ開発における非同期処理とは画面の表示や操作に影響なく別のプログラムや命令を実行することを指します。\n身近なものとしてプッシュ通知やアラーム機能も非同期処理の一部と言えます。\n\nAndroidアプリにはスレッド(Thread)という概念があり、\"タスク\"や\"一連の仕事\"と言い換えることができます。\nAndroidのアプリを起動した時に`activity_main.xml`のレイアウトが表示されるのも一つのスレッドでプログラムを実行した結果です。\n\nこの画面にレイアウトを表示するスレッドを**メインスレッド**と呼びます。\nメインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。\n\nメインスレッドはウィジェットやビューの表示や更新を行える唯一のスレッドなため**UIスレッド**と呼ぶこともあります、そしてメインスレッドは表示の管理に加えてユーザの操作（タップやスワイプ）を監視する仕事も兼務しています。\n\nプログラムの上での非同期処理は主に**メインスレッド**に影響が無いようにプログラムを実行することを指します、\nそのために別のスレッドを<font color=\"red\">自分で作成</font>し、その領域でプログラムを実行します。\n自分で作成したスレッドは**サブスレッド**と呼び、複数のサブスレッドを作成することができます。\n\n最終的な目的としてインターネット上のデータをアプリで取得することにあります。\nAndroidアプリは画面の表示やユーザ操作に影響がある可能性がある時間のかかる命令をメインスレッドで実行することを禁止しています。\nインターネット通信処理も時間のかかる命令であるため、メインスレッドでの実装を禁止されています、\nそのため、インターネット通信処理も非同期処理として実行する必要があります。\n\nインターネット通信の実装と非同期処理を同時に進めてしまうと情報を整理できない場合もあるのでまずは非同期処理に絞って学習していきます。\n\n## 非同期タイマー機能\n非同期処理の基礎を学習するために、準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。\n```java MainActivity.java\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // Timerスレッドクラス\n    private Timer timer;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 準備されているTimerスレッドをインスタンス化\n        timer = new Timer();\n        // ３秒ごとに実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        // 3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 0, 3000);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\nコードを実装したらエミュレータを起動して確認します。\n下図の通りAndroid Studioの**Logcat**で確認すると3秒毎にログが出力を確認できましたか？\n{% img /android/07-AsyncProcess/timerexample.png 650 example timer log %}\n\n次は画面が表示されてから3秒後から3秒毎にトーストが表示される様に修正してみます。\n```java MainActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       ...一部省略\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 準備されているTimerスレッドをインスタンス化\n        timer = new Timer();\n        // ３秒ごとに実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 更新された内容をトーストに表示\n                Toast.makeText(getBaseContext()\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                        , Toast.LENGTH_SHORT).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 3000, 3000);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\nコードの実装が終わったら`Run`ボタンからエミュレータで動作を確認します。\n・\n・\n・\n・\n・\n・\n・\n・\n・\n・\nアプリが強制終了してしまったのではないでしょうか？\n紹介した通りメインスレッド以外のスレッドでは表示や更新は実行できません、\nそれに対して上記はTimerスレッドの領域でToastを表示するコードを実装してしまい、アプリ実行時に強制終了してしまいました。\n強制終了した原因などログは`Logcat`領域に表示されるので確認して見ましょう。\n{% img /android/07-AsyncProcess/MainThreadError.png ThreadSequence %}\nプログラム実行時に発生したエラーメッセージは赤文字で表示されます。\n先ほどのエラー原因を説明している箇所は以下\n> <font color=\"red\">java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()</font>\n\n以降の行の\"at ...\"は強制終了する前に実行されたメソッドなど命令が順に表示されます。\n各行後半の \"()\" 内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。\n以下の行のエラーメッセージ上で \"()\" 内が青くなっています、これは自分で管理するファイルであることを表しており、\n多くの場合にエラーの原因になったプログラムの行を示している箇所となります。\n> <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\n\"blue\">MainActivity.java:53</font><font color=\"red\">)</font>\n\nエラーが発生した時には原因や問題を解析するためには`Logcat`を確認する癖を付けましょう！\nコードを修正する前に新しく使う**Handlerクラス**と**Runnableインターフェース**を紹介します。\n\n## Handler クラス\nHandlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。\n今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。\n通信と記述していますが、今回の通信ではMainThreadでToastを表示することが目的になるため、\nデータを渡すことが目的の通信では無いことを意識してみてみてください。\n\n## Runnable インターフェース\nRunnableはThreadで処理する領域を宣言し、Thread内のプログラムを実装、実行する機能を持っています。\n**Thread = Runnable**と認識して問題ありません。\n今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableインターフェースを使用しています。\n\nでは改めてタイマースレッドからメインスレッドに作業を渡して画面にトースト表示するよう修正します。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private EditText bookSearchEditor;\n    // Timerクラス\n    private Timer timer;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに帰って来るためのハンドラー\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Timerスレッドを止める\n                timer.cancel();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                handler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        // 更新された内容をトーストに表示\n                        Toast.makeText(getBaseContext()\n                                , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                                , Toast.LENGTH_SHORT).show();\n                    }\n                });\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n    }\n}\n```\n上記コードを実装できたら、エミュレータで確認します。\n以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？\n{% img /android/07-AsyncProcess/AsyncTimerToast.png 300 TimerThreadTest %}\nHandlerクラスを使いタイマースレッドからメインスレッドに戻ることができました。\n実感は湧きにくいかもしれませんが、画面にToastが表示されたことが何よりの結果です。\n\nサブスレッドからメインスレッドに戻るためにはHandlerクラスをインスタンス化するタイミング、または方法を意識しないといけません。\n”onCreate()”メソッドはメインスレッドで実行されています、そのため \"onCreate()\"メソッド内でインスタンス化した`handler`はメインスレッドの属性を持ったことになり、サブスレッドから`handler.post(...)`実行したRunnableのプログラムはメインスレッドでのプログラムとして扱われたことになります。\n\n以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみてください。\n\n# 蔵書検索機能\n非同期処理の基礎を学んだところで、本命のインターネット上にあるデータを取得するプログラムを実装していきます。\n今回のアプリは蔵書検索する機能を実装するためにインターネット上にあるデータが必要になりますが、その問題を解決するために \"Google Books API\"サービスを使いインターネット上からデータを取得する機能を実装していきます。\n\nREST APIとは**Representational State Transfer Application Programming Interface**の略称で\nさらにそれぞれ\"REST\"と\"API\"で使われることもあります。\n\n## REST\nWebサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。\n\nRESTの設計条件として以下が該当します。\n{% blockquote Qiita https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa REST入門 基礎知識 %}\n* アドレス指定可能なURLで公開されていること\n* インターフェースが統一されていること(HTTPメソッドに準じていること)\n* ステートレスであること\n* 処理結果がHTTPステータスコードで通知されること\n{% endblockquote %}\n\n## API\nウィキペディアには以下の様にあります。\n{% blockquote wikipedia https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9 API %}\n**ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様**\n{% endblockquote %}\n...文章からイメージするのは難しそうです。。。\nですので、まずは以下の様な認識で使っていきましょう。\n<font color=\"blue\">**インターネット上に公開された、URLを知っていれば誰でも使えるデータ**</font>\n\n例として実際にAPIのデータをgoogle ChromeなどWebブラウザで確認できるので確認してみましょう。\n以下で紹介しているURLはgoogleが一般公開している\"google books API\"というREST APIで、蔵書の情報を取得することができるAPIです。\nまた、Google Books APIを使うためには \"?q=\\*\\*\\*\"という検索条件を必ずつけないといけないのでサンプルで参考書タイトルで検索する指定しています。\n{% blockquote Google Books APIs https://developers.google.com/books/docs/v1/using Reference %}\nhttps://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\n{% endblockquote %}\nこの画面に表示されているデータは`json`という形式でまとめられたデータで、上記URLにアプリからアクセスすると\n画面に表示されているデータをアプリで受け取ることができます。\nキュレーションアプリやニュースアプリなどはこの様にデータを取得して画面に表示させてなどしています。\n\nGoogle Books APIでは\"?q=\\*\\*\\*\"の\"\\*\"の文字を変更することで表示される結果が変わります、\nこれはホームページなどと同じくサーバがURLを受け取り、サーバ内のプログラムが実行された結果`json`データが返されているからです。\n\n上記で紹介したAPIの検索条件等は[Google Books APIs](https://developers.google.com/books/docs/v1/using#WorkingVolumes)に記載されています。（全て英語です）\n\n下図はREST API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを示しています。\n{% img /android/07-AsyncProcess/APISequence.svg 550 APISequence %}\n\nAndoridアプリでは画面表示や更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\">**MainThreadは時間のかかる処理を行なってはいけない**</font>という制約もあるため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。\n\n上記の図の通りですが<font color=\"red\">**REST API通信を実行し、画面に反映するためには大まかに以下の手順が必要になります**</font>\n1. メインスレッドでハンドラーをインスタンス化\n1. メインスレッドからサブスレッドを起動\n1. サブスレッドでAPI通信処理を実行し検索結果データを取得\n1. ハンドラーを使いサブスレッドで取得したAPIで取得した検索結果データをメインスレッドへ連携\n1. メインスレッドで検索結果データを使い画面を更新\n\n## OkHttpライブラリの導入\nREST API通信、ネットワーク通信処理を行うために、ここでは**[OkHttp]**という*ライブラリ*を使っていきます、**OkHttp**はAndroid に元々備わっているネットワーク通信機能をさらに簡単に実装することができる機能群です。\nこのようにプログラムを一部簡単にしてくれる機能群を*ライブラリ*と呼びます。\n\n**OkHttp**を導入するために修正するファイルは`build.gradle`というファイルです。\nこのファイルは２つありますが、開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n{% img /android/07-AsyncProcess/includeokHttp01.png 550 IncludeokHttp %}\n`build.gradle`を開き \"dependencies\" の \"{}\"内に以下のコードを記述します\n```gradle build.gradle\ndependencies {\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n}\n```\nコードの記述が終わったら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。\n{% img /android/07-AsyncProcess/includeokHttp02.png 600 Include okHttp %}\nこれで**OkHttp**ライブラリの導入は完了です。\n\n## REST API通信機能\n**OkHttp**の導入が完了しましたので、実際にアプリで使っていきます！\n実装の完成形として`MainActivity`の蔵書検索ボタンがクリックされたらEditTextの文字データを`ResultListActivity`に渡します。\nそして`ResultListActivity`では受け取った文字データをGoogle Books APIから検索する蔵書情報として利用して期待する検索結果をインターネット上から取得します。\n画面への反映は次のページで解説します。\n\njavaファイルの実装の前にAndroidアプリでインターネット通信を行うためには、パーミッション(permission)と呼ばれる許可設定が必要なので`AndroidManifest.xml`ファイルを修正します。\n```XML AndroidManifest.xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"PackageName\">\n\n    <!-- Androidアプリでインターネット通信を許可する設定 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        ...一部省略>\n    </application>\n</manifest>\n```\nではjavaファイルの実装です、まずはアプリでGoogle Books APIを使ってデータを取得するプログラムを実装します。\n```java ResultListActivity.java\n    ...一部省略\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...一部省略\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\").build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                Log.d(\"Success API Response\", response.body().string());\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\n上記コードを実装したら動作確認してみましょう。\n`Logcat`にwebブラウザで確認したデータが表示されたでしょうか？\n表示されていれば正常にインターネット上からデータを取得できたことになります。\n{% img /android/07-AsyncProcess/apiresponse.png 700 API Response Log %}\n上記コードで出てきましたが、以下の様にメソッドからメソッドを呼び出す様な方法を**メソッドチェーン**と呼びます、プログラムの設計次第ではの様な実装方法も可能ですが、自作するクラスでは使う機会は少ないですが、今回の様にライブラリではよく使われる実装パターンなので覚えておきましょう。\n```java\nRequest request = new Request.Builder().url(\"\").build();\nや\nokHttpClient.newCall(request).enqueue(...)\n```\n\n取得した蔵書データですがWebブラウザで確認した形式と同じく`Json`形式で取得しました。\nJsonはシンプルなデータ形式で **:(コロン)**を挟む左にデータの名称、右にデータが記述されており、複数データがある場合は**,(カンマ)**で区切って複数のデータを持つことができます。\nJsonデータは必ず**{}(波括弧)**で閉じられています。\nこの様に名称とデータを合わせて持つデータを**KeyValuePair**や**KeyValue形式**データと呼びます。\n以下の例では\"AndroidCourse\"というKey(名称)に\"Androidアプリの開発講座\"というValue(文字列データ)が関連づいた**KeyValue**データです。\n```json\n{\n    \"AndroidCourse\":\"Androidアプリの開発講座\"\n}\n```\nJsonのデータには文字列や数値、配列や真偽値などを設定することが可能です。\nREST APIを使う場合の多くはこのJson形式でデータを取得することが多いので解析できる様に覚えておくと便利です。\n\n次に取得したデータをアプリ内でパース(解析)して取得した蔵書データの件数と件数分のタイトルをログに出力してみます。\n```java ResultListActivity.java\n        ...一部省略\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\").build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                    for (int i = 0; i < items.length(); i ++) {\n                        // 蔵書リストから i番目のデータを取得\n                        JSONObject item = items.getJSONObject(i);\n                        // 蔵書のi番目データから蔵書情報のグループを取得\n                        JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                        // 繰り返しの番号と蔵書のタイトルをログに出力\n                        Log.d(\"Response Item Title\", (i + 1) + \"番目のデータタイトル：\" + volumeInfo.getString(\"title\"));\n                    }\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n```\n上記コードを実装したら動作確認します。\n\nJson形式のデータはプログラムにおいて文字列データです。\n文字列の形式を元に**KeyValue**データとしてパース(解析)するために`JSONObject`クラス、配列の場合は`JSONArray`クラスを使って実装します。\nまずはJson形式文字列を`JSONObject`のインスタンス化する時の引数にセットすることで、\n`JSONObject`は引数のJson形式文字列データを**KeyValue**形式の`JSONObject`に変換します、今回のコードでは下記の１行が該当します。\n```java\n    JSONObject rootJson = new JSONObject(response.body().string());\n```\n次に**KeyValue**データのKey情報を使って *\"title\"*のデータを取得していきます。\nそのための階層をWebブラウザで確認すると\n{% img /android/07-AsyncProcess/jsonparse.png 500 Json Parse %}\n\n> {}(rootObject) -> items(JSONArray) -> volumeInfo(JSONObject) -> title(String)\n\nの位置に表示されているのがわかりますので順次１階層毎に参照していきます。\n１階層下の子要素を参照するメソッドは各データ型毎に用意されており、間違ったメソッドで参照すると正常に解析できず強制終了してしまいます。\nですがjava言語も優しさは残っており、予期せぬ不具合を検知する機能として`try〜catch`構文という強制終了を防ぐプログラムの記述方法があり、上記のコードはそれを適用しています。\n`try {}`の波括弧内に不具合が発生しそうなコードを実装し、後ろの`catch() {}`で不具合が発生した時に実行するコードを記述することができます。\n`catch()`の引数には発生しそうな不具合の種類を指定しなければならず、今回は\"JSONException\"とJSONのパースに失敗した時に不具合をキャッチしてくれます。\n\n## 検索結果画面データ反映\nデータの解析方法まで試せましたが、「インターネット通信はMainThreadではできなかったんじゃないの？」と感じた方もいるかもしれません。\n通信処理を実行した以下の`enqueue()`メソッドでサブスレッドを起動しているのです、開発側すら非同期を気にせず通信が実装できてしまいました。\n```\n    okHttpClient.newCall(request).enqueue(callBack);\n```\nサブスレッド通信であるので通信後のCallBackもサブスレッドで実行します、そのため`CallBack > onResponse()`メソッド内でListViewを更新することはできません。\nここで \"Handler\"クラスが必要になります。\nここからの実装で\"onResponse()\"メソッドからメインスレッドにデータを連携しListViewに反映していきます。\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    // ListViewの描画に必要な変数を宣言\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<String> titleList;\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public ResultListAdapter(Context context, List<String> titleList, List<String> summaryList) {\n        this.titleList = titleList;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        return titleList.size();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    ...一部省略\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(titleList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        summaryView.setText(summaryList.get(i));\n\n        // 文字情報を代入されたviewを返却\n        return view;\n    }\n}\n```\n\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener{\n\n    ...一部省略\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検証用コレクションデータ\n    List<String> listData = Arrays.asList(\"Android アプリ開発の環境構築\"\n            , \"Android OS とは\"\n            , \"Androidの概念\"\n            , \"Androidアプリ開発を始める\"\n            , \"検索画面レイアウト作成\"\n            , \"ボタンイベントの実装\"\n            , \"検索結果画面への遷移実装\"\n            , \"非同期処理、REST API通信の実装\"\n            , \"検索履歴機能\"\n            , \"Firebase導入\");\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ResultListAdapter(ResultListActivity.this, listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n\n    ...一部省略\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(ResultListActivity.this, titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListActivity.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードが実装できたら動作確認します。\n以下の様にGoogle Books APIにて取得した検索結果が表示されましたか？\n{% img /android/07-AsyncProcess/reflectresult.png 300 Reflect Result %}\n\n今回の修正で`ResultListAdapter`クラスの変数がタイトルリストと概要リストの２つに増えたことで初期化時のコンストラクタで必要になる引数もタイトルと概要データの２つに増えました。\nさらに`ResultListActivity`ではタイマースレッドでメインスレッドに戻った時の処理とは実装方法が違い、内部に新しく`Runnable`インターフェースを持ったクラスを作成し、`Handler`からメインスレッドに橋渡しをした際には作成したクラスに処理を実装しています。\n新しく作成した\"ReflectResult\"クラスはコンストラクタでJSONデータのパースの続きを行い、全タイトルデータと全概要データを新しいリスト変数(titleList, summaryList)に代入しています。\nそして全タイトルデータと全概要データを使ってListViewに表示する行データを作成する様に修正しました。\n\nアプリは非同期通信を行い検索結果を取得してからリストを表示しているため、一時的に真っ白な画面が表示される様になりました、他のアプリでは真っ白になる時間をプログレスバーやローディングアニメーションにてユーザに読み込み中であることを伝えます。\nローディングアニメーションなどの実装方法は先のページで解説していきます。\n\n### LayoutInflater クラス\nレイアウトXMLからViewやウィジェット等のオブジェクトを生成するためのクラス。\n`setContentView`以降で動的にViewを生成/表示する場合に利用します。\n利用方法としては**LayoutInflater**を`from`メソッドにてインスタンス化し`inflate`メソッドを使用してレイアウトXMLを生成します。\n1. LayoutInflaterのインスタンス化\n```java\n    LayoutInflater li = LayoutInflater.from(context);\n```\n1. LayoutInflaterを使ってViewを生成\n```java\n    View view = li.inflate(R.layout.layoutxml);\n```\n\n## 入力文字列で蔵書検索する\n先ほどまでは決まった文字列(\"ほんきで学ぶAndroidアプリ開発入門\")でしか検索できませんが、\n動的に検索が行える様に、`MainActivity`の\"EditText\"で入力された文字列を`ResultListActivity`に渡しGoogle Books REST APIの検索条件になる様にプログラムを修正していきます。\n```java MainActivity.java\n    ...一部省略\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                // Timerスレッドを止める\n                timer.cancel();\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", bookSearchEditor.getText().toString());\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n    ...一部省略\n```\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener{\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // MainActivityから渡されたデータを保持する\n    private String term;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面遷移時のデータが空でない場合\n        if (getIntent().hasExtra(\"terms\")) {\n            // Key:termsにデータがあればValueを代入\n            term = getIntent().getStringExtra(\"terms\");\n        } else {\n            // 画面遷移時のデータがからの場合は \"Android\"と文字列を代入\n            term = \"Android\";\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n    }\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n`MainActivity`で入力された文字列で検索した結果が表示される様になったでしょうか？\nアプリ開発をしていると画面を分割したいけど、データを渡したい！！なんてことも出てくるので\"画面遷移時にデータを渡せる\"ということだけ覚えておけばインターネット上にも情報は沢山あるので見直して実装することができれば問題ありません。\n\n多少インターネット通信中の真っ白な画面が不恰好ではありますが、検索結果を画面に一覧表示することができました。\n\n# プログラム課題\n今回作成したプログラムでは検索処理を実行した際に漫画などの一部検索を行うとアプリが強制終了してしまうケースがあります。\n原因は取得したデータの中に\"description\"というキーが存在せず、解析に失敗しているためです、これを解決するために、\"description\"データがあるかチェックする処理を追加し、\"description\"が存在しない場合は空文字データをリストに追加するようにプログラムを修正してください。\n\n<font color=\"red\">**ヒント**</font>\n* 空文字をString変数に代入する方法は`変数名 = \"\";`です\n* JSONObject内にキーが存在するかチェックするメソッドがあります\n    * `JSONObject.has(\"key name\");`\n\n解説は時間をおいて行います。\n\n以上で**蔵書検索機能の作成**は完了です。\n次の[検索履歴一覧画面](/AndroidCourse/android/08-AppDataBase)の作成ではアプリ内データベースを使って検索した履歴一覧を表示する画面を作成します。\n\n[※1]: https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\n[OkHttp]: http://square.github.io/okhttp/","source":"_posts/android/07-AsyncProcess.md","raw":"---\ntitle: 蔵書検索機能の作成\ndate: 2017-11-08\ntags:\n---\n非同期処理の使い方と解説、インターネット通信ライブラリを利用してインターネット上から取得したデータの利用方法を学習します。\n\n<!-- toc -->\n\n[検索結果一覧画面の作成](/AndroidCourse/android/06-TransitionScreen)からの引き続きの学習ページです。\n# 学習ポイント\n* 非同期通信の概要\n* Androidアプリ開発におけるUIスレッド(メインスレッド)とサブスレッド\n* REST API\n* インターネット通信ライブラリ**OkHttp**の利用方法\n\nGoogleが公開している蔵書検索サービスの\"Google Books API\"を利用して入力された文言を元にインターネット上の蔵書情報を検索し、アプリの検索結果情報を表示します。\nREST API通信を行う上で非同期処理の基礎知識が必要になりますので合わせて学習します。\n\n# 非同期処理\nアプリ開発における非同期処理とは画面の表示や操作に影響なく別のプログラムや命令を実行することを指します。\n身近なものとしてプッシュ通知やアラーム機能も非同期処理の一部と言えます。\n\nAndroidアプリにはスレッド(Thread)という概念があり、\"タスク\"や\"一連の仕事\"と言い換えることができます。\nAndroidのアプリを起動した時に`activity_main.xml`のレイアウトが表示されるのも一つのスレッドでプログラムを実行した結果です。\n\nこの画面にレイアウトを表示するスレッドを**メインスレッド**と呼びます。\nメインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。\n\nメインスレッドはウィジェットやビューの表示や更新を行える唯一のスレッドなため**UIスレッド**と呼ぶこともあります、そしてメインスレッドは表示の管理に加えてユーザの操作（タップやスワイプ）を監視する仕事も兼務しています。\n\nプログラムの上での非同期処理は主に**メインスレッド**に影響が無いようにプログラムを実行することを指します、\nそのために別のスレッドを<font color=\"red\">自分で作成</font>し、その領域でプログラムを実行します。\n自分で作成したスレッドは**サブスレッド**と呼び、複数のサブスレッドを作成することができます。\n\n最終的な目的としてインターネット上のデータをアプリで取得することにあります。\nAndroidアプリは画面の表示やユーザ操作に影響がある可能性がある時間のかかる命令をメインスレッドで実行することを禁止しています。\nインターネット通信処理も時間のかかる命令であるため、メインスレッドでの実装を禁止されています、\nそのため、インターネット通信処理も非同期処理として実行する必要があります。\n\nインターネット通信の実装と非同期処理を同時に進めてしまうと情報を整理できない場合もあるのでまずは非同期処理に絞って学習していきます。\n\n## 非同期タイマー機能\n非同期処理の基礎を学習するために、準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。\n```java MainActivity.java\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private EditText bookSearchEditor;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // Timerスレッドクラス\n    private Timer timer;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 準備されているTimerスレッドをインスタンス化\n        timer = new Timer();\n        // ３秒ごとに実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        // 3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 0, 3000);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\nコードを実装したらエミュレータを起動して確認します。\n下図の通りAndroid Studioの**Logcat**で確認すると3秒毎にログが出力を確認できましたか？\n{% img /android/07-AsyncProcess/timerexample.png 650 example timer log %}\n\n次は画面が表示されてから3秒後から3秒毎にトーストが表示される様に修正してみます。\n```java MainActivity.java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n       ...一部省略\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 準備されているTimerスレッドをインスタンス化\n        timer = new Timer();\n        // ３秒ごとに実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // 更新された内容をトーストに表示\n                Toast.makeText(getBaseContext()\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                        , Toast.LENGTH_SHORT).show();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n\n        // Timerスレッドの実行スケジュールを設定\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行\n        timer.schedule(timerTask, 3000, 3000);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\nコードの実装が終わったら`Run`ボタンからエミュレータで動作を確認します。\n・\n・\n・\n・\n・\n・\n・\n・\n・\n・\nアプリが強制終了してしまったのではないでしょうか？\n紹介した通りメインスレッド以外のスレッドでは表示や更新は実行できません、\nそれに対して上記はTimerスレッドの領域でToastを表示するコードを実装してしまい、アプリ実行時に強制終了してしまいました。\n強制終了した原因などログは`Logcat`領域に表示されるので確認して見ましょう。\n{% img /android/07-AsyncProcess/MainThreadError.png ThreadSequence %}\nプログラム実行時に発生したエラーメッセージは赤文字で表示されます。\n先ほどのエラー原因を説明している箇所は以下\n> <font color=\"red\">java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()</font>\n\n以降の行の\"at ...\"は強制終了する前に実行されたメソッドなど命令が順に表示されます。\n各行後半の \"()\" 内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。\n以下の行のエラーメッセージ上で \"()\" 内が青くなっています、これは自分で管理するファイルであることを表しており、\n多くの場合にエラーの原因になったプログラムの行を示している箇所となります。\n> <font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\n\"blue\">MainActivity.java:53</font><font color=\"red\">)</font>\n\nエラーが発生した時には原因や問題を解析するためには`Logcat`を確認する癖を付けましょう！\nコードを修正する前に新しく使う**Handlerクラス**と**Runnableインターフェース**を紹介します。\n\n## Handler クラス\nHandlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。\n今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。\n通信と記述していますが、今回の通信ではMainThreadでToastを表示することが目的になるため、\nデータを渡すことが目的の通信では無いことを意識してみてみてください。\n\n## Runnable インターフェース\nRunnableはThreadで処理する領域を宣言し、Thread内のプログラムを実装、実行する機能を持っています。\n**Thread = Runnable**と認識して問題ありません。\n今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableインターフェースを使用しています。\n\nでは改めてタイマースレッドからメインスレッドに作業を渡して画面にトースト表示するよう修正します。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private EditText bookSearchEditor;\n    // Timerクラス\n    private Timer timer;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに帰って来るためのハンドラー\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        // 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける\n        bookSearchEditor = findViewById(R.id.BookSearchEdit);\n        // 蔵書検索ボタンが押された時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Timerスレッドを止める\n                timer.cancel();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 定期実行するタスク(TimerTask)をインスタンス化\n        TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                // コンソールログに更新された内容を出力\n                Log.d(\"SubThread Process\"\n                        , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\");\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                handler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        // 更新された内容をトーストに表示\n                        Toast.makeText(getBaseContext()\n                                , \"「\" +  bookSearchEditor.getText().toString() + \"」に更新されました。\"\n                                , Toast.LENGTH_SHORT).show();\n                    }\n                });\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n    }\n}\n```\n上記コードを実装できたら、エミュレータで確認します。\n以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？\n{% img /android/07-AsyncProcess/AsyncTimerToast.png 300 TimerThreadTest %}\nHandlerクラスを使いタイマースレッドからメインスレッドに戻ることができました。\n実感は湧きにくいかもしれませんが、画面にToastが表示されたことが何よりの結果です。\n\nサブスレッドからメインスレッドに戻るためにはHandlerクラスをインスタンス化するタイミング、または方法を意識しないといけません。\n”onCreate()”メソッドはメインスレッドで実行されています、そのため \"onCreate()\"メソッド内でインスタンス化した`handler`はメインスレッドの属性を持ったことになり、サブスレッドから`handler.post(...)`実行したRunnableのプログラムはメインスレッドでのプログラムとして扱われたことになります。\n\n以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみてください。\n\n# 蔵書検索機能\n非同期処理の基礎を学んだところで、本命のインターネット上にあるデータを取得するプログラムを実装していきます。\n今回のアプリは蔵書検索する機能を実装するためにインターネット上にあるデータが必要になりますが、その問題を解決するために \"Google Books API\"サービスを使いインターネット上からデータを取得する機能を実装していきます。\n\nREST APIとは**Representational State Transfer Application Programming Interface**の略称で\nさらにそれぞれ\"REST\"と\"API\"で使われることもあります。\n\n## REST\nWebサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。\n\nRESTの設計条件として以下が該当します。\n{% blockquote Qiita https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa REST入門 基礎知識 %}\n* アドレス指定可能なURLで公開されていること\n* インターフェースが統一されていること(HTTPメソッドに準じていること)\n* ステートレスであること\n* 処理結果がHTTPステータスコードで通知されること\n{% endblockquote %}\n\n## API\nウィキペディアには以下の様にあります。\n{% blockquote wikipedia https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9 API %}\n**ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様**\n{% endblockquote %}\n...文章からイメージするのは難しそうです。。。\nですので、まずは以下の様な認識で使っていきましょう。\n<font color=\"blue\">**インターネット上に公開された、URLを知っていれば誰でも使えるデータ**</font>\n\n例として実際にAPIのデータをgoogle ChromeなどWebブラウザで確認できるので確認してみましょう。\n以下で紹介しているURLはgoogleが一般公開している\"google books API\"というREST APIで、蔵書の情報を取得することができるAPIです。\nまた、Google Books APIを使うためには \"?q=\\*\\*\\*\"という検索条件を必ずつけないといけないのでサンプルで参考書タイトルで検索する指定しています。\n{% blockquote Google Books APIs https://developers.google.com/books/docs/v1/using Reference %}\nhttps://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\n{% endblockquote %}\nこの画面に表示されているデータは`json`という形式でまとめられたデータで、上記URLにアプリからアクセスすると\n画面に表示されているデータをアプリで受け取ることができます。\nキュレーションアプリやニュースアプリなどはこの様にデータを取得して画面に表示させてなどしています。\n\nGoogle Books APIでは\"?q=\\*\\*\\*\"の\"\\*\"の文字を変更することで表示される結果が変わります、\nこれはホームページなどと同じくサーバがURLを受け取り、サーバ内のプログラムが実行された結果`json`データが返されているからです。\n\n上記で紹介したAPIの検索条件等は[Google Books APIs](https://developers.google.com/books/docs/v1/using#WorkingVolumes)に記載されています。（全て英語です）\n\n下図はREST API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを示しています。\n{% img /android/07-AsyncProcess/APISequence.svg 550 APISequence %}\n\nAndoridアプリでは画面表示や更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\">**MainThreadは時間のかかる処理を行なってはいけない**</font>という制約もあるため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。\n\n上記の図の通りですが<font color=\"red\">**REST API通信を実行し、画面に反映するためには大まかに以下の手順が必要になります**</font>\n1. メインスレッドでハンドラーをインスタンス化\n1. メインスレッドからサブスレッドを起動\n1. サブスレッドでAPI通信処理を実行し検索結果データを取得\n1. ハンドラーを使いサブスレッドで取得したAPIで取得した検索結果データをメインスレッドへ連携\n1. メインスレッドで検索結果データを使い画面を更新\n\n## OkHttpライブラリの導入\nREST API通信、ネットワーク通信処理を行うために、ここでは**[OkHttp]**という*ライブラリ*を使っていきます、**OkHttp**はAndroid に元々備わっているネットワーク通信機能をさらに簡単に実装することができる機能群です。\nこのようにプログラムを一部簡単にしてくれる機能群を*ライブラリ*と呼びます。\n\n**OkHttp**を導入するために修正するファイルは`build.gradle`というファイルです。\nこのファイルは２つありますが、開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n{% img /android/07-AsyncProcess/includeokHttp01.png 550 IncludeokHttp %}\n`build.gradle`を開き \"dependencies\" の \"{}\"内に以下のコードを記述します\n```gradle build.gradle\ndependencies {\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n}\n```\nコードの記述が終わったら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。\n{% img /android/07-AsyncProcess/includeokHttp02.png 600 Include okHttp %}\nこれで**OkHttp**ライブラリの導入は完了です。\n\n## REST API通信機能\n**OkHttp**の導入が完了しましたので、実際にアプリで使っていきます！\n実装の完成形として`MainActivity`の蔵書検索ボタンがクリックされたらEditTextの文字データを`ResultListActivity`に渡します。\nそして`ResultListActivity`では受け取った文字データをGoogle Books APIから検索する蔵書情報として利用して期待する検索結果をインターネット上から取得します。\n画面への反映は次のページで解説します。\n\njavaファイルの実装の前にAndroidアプリでインターネット通信を行うためには、パーミッション(permission)と呼ばれる許可設定が必要なので`AndroidManifest.xml`ファイルを修正します。\n```XML AndroidManifest.xml\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"PackageName\">\n\n    <!-- Androidアプリでインターネット通信を許可する設定 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        ...一部省略>\n    </application>\n</manifest>\n```\nではjavaファイルの実装です、まずはアプリでGoogle Books APIを使ってデータを取得するプログラムを実装します。\n```java ResultListActivity.java\n    ...一部省略\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...一部省略\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\").build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                Log.d(\"Success API Response\", response.body().string());\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\n上記コードを実装したら動作確認してみましょう。\n`Logcat`にwebブラウザで確認したデータが表示されたでしょうか？\n表示されていれば正常にインターネット上からデータを取得できたことになります。\n{% img /android/07-AsyncProcess/apiresponse.png 700 API Response Log %}\n上記コードで出てきましたが、以下の様にメソッドからメソッドを呼び出す様な方法を**メソッドチェーン**と呼びます、プログラムの設計次第ではの様な実装方法も可能ですが、自作するクラスでは使う機会は少ないですが、今回の様にライブラリではよく使われる実装パターンなので覚えておきましょう。\n```java\nRequest request = new Request.Builder().url(\"\").build();\nや\nokHttpClient.newCall(request).enqueue(...)\n```\n\n取得した蔵書データですがWebブラウザで確認した形式と同じく`Json`形式で取得しました。\nJsonはシンプルなデータ形式で **:(コロン)**を挟む左にデータの名称、右にデータが記述されており、複数データがある場合は**,(カンマ)**で区切って複数のデータを持つことができます。\nJsonデータは必ず**{}(波括弧)**で閉じられています。\nこの様に名称とデータを合わせて持つデータを**KeyValuePair**や**KeyValue形式**データと呼びます。\n以下の例では\"AndroidCourse\"というKey(名称)に\"Androidアプリの開発講座\"というValue(文字列データ)が関連づいた**KeyValue**データです。\n```json\n{\n    \"AndroidCourse\":\"Androidアプリの開発講座\"\n}\n```\nJsonのデータには文字列や数値、配列や真偽値などを設定することが可能です。\nREST APIを使う場合の多くはこのJson形式でデータを取得することが多いので解析できる様に覚えておくと便利です。\n\n次に取得したデータをアプリ内でパース(解析)して取得した蔵書データの件数と件数分のタイトルをログに出力してみます。\n```java ResultListActivity.java\n        ...一部省略\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\").build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                    for (int i = 0; i < items.length(); i ++) {\n                        // 蔵書リストから i番目のデータを取得\n                        JSONObject item = items.getJSONObject(i);\n                        // 蔵書のi番目データから蔵書情報のグループを取得\n                        JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                        // 繰り返しの番号と蔵書のタイトルをログに出力\n                        Log.d(\"Response Item Title\", (i + 1) + \"番目のデータタイトル：\" + volumeInfo.getString(\"title\"));\n                    }\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n```\n上記コードを実装したら動作確認します。\n\nJson形式のデータはプログラムにおいて文字列データです。\n文字列の形式を元に**KeyValue**データとしてパース(解析)するために`JSONObject`クラス、配列の場合は`JSONArray`クラスを使って実装します。\nまずはJson形式文字列を`JSONObject`のインスタンス化する時の引数にセットすることで、\n`JSONObject`は引数のJson形式文字列データを**KeyValue**形式の`JSONObject`に変換します、今回のコードでは下記の１行が該当します。\n```java\n    JSONObject rootJson = new JSONObject(response.body().string());\n```\n次に**KeyValue**データのKey情報を使って *\"title\"*のデータを取得していきます。\nそのための階層をWebブラウザで確認すると\n{% img /android/07-AsyncProcess/jsonparse.png 500 Json Parse %}\n\n> {}(rootObject) -> items(JSONArray) -> volumeInfo(JSONObject) -> title(String)\n\nの位置に表示されているのがわかりますので順次１階層毎に参照していきます。\n１階層下の子要素を参照するメソッドは各データ型毎に用意されており、間違ったメソッドで参照すると正常に解析できず強制終了してしまいます。\nですがjava言語も優しさは残っており、予期せぬ不具合を検知する機能として`try〜catch`構文という強制終了を防ぐプログラムの記述方法があり、上記のコードはそれを適用しています。\n`try {}`の波括弧内に不具合が発生しそうなコードを実装し、後ろの`catch() {}`で不具合が発生した時に実行するコードを記述することができます。\n`catch()`の引数には発生しそうな不具合の種類を指定しなければならず、今回は\"JSONException\"とJSONのパースに失敗した時に不具合をキャッチしてくれます。\n\n## 検索結果画面データ反映\nデータの解析方法まで試せましたが、「インターネット通信はMainThreadではできなかったんじゃないの？」と感じた方もいるかもしれません。\n通信処理を実行した以下の`enqueue()`メソッドでサブスレッドを起動しているのです、開発側すら非同期を気にせず通信が実装できてしまいました。\n```\n    okHttpClient.newCall(request).enqueue(callBack);\n```\nサブスレッド通信であるので通信後のCallBackもサブスレッドで実行します、そのため`CallBack > onResponse()`メソッド内でListViewを更新することはできません。\nここで \"Handler\"クラスが必要になります。\nここからの実装で\"onResponse()\"メソッドからメインスレッドにデータを連携しListViewに反映していきます。\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    // ListViewの描画に必要な変数を宣言\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<String> titleList;\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public ResultListAdapter(Context context, List<String> titleList, List<String> summaryList) {\n        this.titleList = titleList;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        return titleList.size();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    ...一部省略\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(titleList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        summaryView.setText(summaryList.get(i));\n\n        // 文字情報を代入されたviewを返却\n        return view;\n    }\n}\n```\n\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener{\n\n    ...一部省略\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検証用コレクションデータ\n    List<String> listData = Arrays.asList(\"Android アプリ開発の環境構築\"\n            , \"Android OS とは\"\n            , \"Androidの概念\"\n            , \"Androidアプリ開発を始める\"\n            , \"検索画面レイアウト作成\"\n            , \"ボタンイベントの実装\"\n            , \"検索結果画面への遷移実装\"\n            , \"非同期処理、REST API通信の実装\"\n            , \"検索履歴機能\"\n            , \"Firebase導入\");\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ListViewに表示する情報をまとめるAdapterをインスタンス化\n        adapter = new ResultListAdapter(ResultListActivity.this, listData);\n        // ListViewに表示情報をまとめたAdapterをセット\n        resultListView.setAdapter(adapter);\n        // ListViewに行をクリックした時のイベントを登録\n        resultListView.setOnItemClickListener(ResultListActivity.this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n\n    ...一部省略\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(ResultListActivity.this, titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListActivity.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードが実装できたら動作確認します。\n以下の様にGoogle Books APIにて取得した検索結果が表示されましたか？\n{% img /android/07-AsyncProcess/reflectresult.png 300 Reflect Result %}\n\n今回の修正で`ResultListAdapter`クラスの変数がタイトルリストと概要リストの２つに増えたことで初期化時のコンストラクタで必要になる引数もタイトルと概要データの２つに増えました。\nさらに`ResultListActivity`ではタイマースレッドでメインスレッドに戻った時の処理とは実装方法が違い、内部に新しく`Runnable`インターフェースを持ったクラスを作成し、`Handler`からメインスレッドに橋渡しをした際には作成したクラスに処理を実装しています。\n新しく作成した\"ReflectResult\"クラスはコンストラクタでJSONデータのパースの続きを行い、全タイトルデータと全概要データを新しいリスト変数(titleList, summaryList)に代入しています。\nそして全タイトルデータと全概要データを使ってListViewに表示する行データを作成する様に修正しました。\n\nアプリは非同期通信を行い検索結果を取得してからリストを表示しているため、一時的に真っ白な画面が表示される様になりました、他のアプリでは真っ白になる時間をプログレスバーやローディングアニメーションにてユーザに読み込み中であることを伝えます。\nローディングアニメーションなどの実装方法は先のページで解説していきます。\n\n### LayoutInflater クラス\nレイアウトXMLからViewやウィジェット等のオブジェクトを生成するためのクラス。\n`setContentView`以降で動的にViewを生成/表示する場合に利用します。\n利用方法としては**LayoutInflater**を`from`メソッドにてインスタンス化し`inflate`メソッドを使用してレイアウトXMLを生成します。\n1. LayoutInflaterのインスタンス化\n```java\n    LayoutInflater li = LayoutInflater.from(context);\n```\n1. LayoutInflaterを使ってViewを生成\n```java\n    View view = li.inflate(R.layout.layoutxml);\n```\n\n## 入力文字列で蔵書検索する\n先ほどまでは決まった文字列(\"ほんきで学ぶAndroidアプリ開発入門\")でしか検索できませんが、\n動的に検索が行える様に、`MainActivity`の\"EditText\"で入力された文字列を`ResultListActivity`に渡しGoogle Books REST APIの検索条件になる様にプログラムを修正していきます。\n```java MainActivity.java\n    ...一部省略\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // 入力された文字をToast(トースト)に表示\n                Toast.makeText(getBaseContext()\n                        , \"入力された文字は [\" + bookSearchEditor.getText().toString() + \"]です。\"\n                        , Toast.LENGTH_LONG).show();\n                // Timerスレッドを止める\n                timer.cancel();\n                // 画面遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", bookSearchEditor.getText().toString());\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n    ...一部省略\n```\n```java ResultListActivity.java\npublic class ResultListActivity extends AppCompatActivity implements AdapterView.OnItemClickListener{\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // MainActivityから渡されたデータを保持する\n    private String term;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面遷移時のデータが空でない場合\n        if (getIntent().hasExtra(\"terms\")) {\n            // Key:termsにデータがあればValueを代入\n            term = getIntent().getStringExtra(\"terms\");\n        } else {\n            // 画面遷移時のデータがからの場合は \"Android\"と文字列を代入\n            term = \"Android\";\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n    }\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n`MainActivity`で入力された文字列で検索した結果が表示される様になったでしょうか？\nアプリ開発をしていると画面を分割したいけど、データを渡したい！！なんてことも出てくるので\"画面遷移時にデータを渡せる\"ということだけ覚えておけばインターネット上にも情報は沢山あるので見直して実装することができれば問題ありません。\n\n多少インターネット通信中の真っ白な画面が不恰好ではありますが、検索結果を画面に一覧表示することができました。\n\n# プログラム課題\n今回作成したプログラムでは検索処理を実行した際に漫画などの一部検索を行うとアプリが強制終了してしまうケースがあります。\n原因は取得したデータの中に\"description\"というキーが存在せず、解析に失敗しているためです、これを解決するために、\"description\"データがあるかチェックする処理を追加し、\"description\"が存在しない場合は空文字データをリストに追加するようにプログラムを修正してください。\n\n<font color=\"red\">**ヒント**</font>\n* 空文字をString変数に代入する方法は`変数名 = \"\";`です\n* JSONObject内にキーが存在するかチェックするメソッドがあります\n    * `JSONObject.has(\"key name\");`\n\n解説は時間をおいて行います。\n\n以上で**蔵書検索機能の作成**は完了です。\n次の[検索履歴一覧画面](/AndroidCourse/android/08-AppDataBase)の作成ではアプリ内データベースを使って検索した履歴一覧を表示する画面を作成します。\n\n[※1]: https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\n[OkHttp]: http://square.github.io/okhttp/","slug":"07-AsyncProcess","published":1,"updated":"2018-03-01T06:10:13.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0qp00073l61boynt3p4","content":"<p>非同期処理の使い方と解説、インターネット通信ライブラリを利用してインターネット上から取得したデータの利用方法を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#非同期処理\">非同期処理</a><ul>\n<li><a href=\"#非同期タイマー機能\">非同期タイマー機能</a></li>\n<li><a href=\"#handler-クラス\">Handler クラス</a></li>\n<li><a href=\"#runnable-インターフェース\">Runnable インターフェース</a></li>\n</ul>\n</li>\n<li><a href=\"#蔵書検索機能\">蔵書検索機能</a><ul>\n<li><a href=\"#rest\">REST</a></li>\n<li><a href=\"#api\">API</a></li>\n<li><a href=\"#okhttpライブラリの導入\">OkHttpライブラリの導入</a></li>\n<li><a href=\"#rest-api通信機能\">REST API通信機能</a></li>\n<li><a href=\"#検索結果画面データ反映\">検索結果画面データ反映</a><ul>\n<li><a href=\"#layoutinflater-クラス\">LayoutInflater クラス</a></li>\n</ul>\n</li>\n<li><a href=\"#入力文字列で蔵書検索する\">入力文字列で蔵書検索する</a></li>\n</ul>\n</li>\n<li><a href=\"#プログラム課題\">プログラム課題</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面の作成</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>非同期通信の概要</li>\n<li>Androidアプリ開発におけるUIスレッド(メインスレッド)とサブスレッド</li>\n<li>REST API</li>\n<li>インターネット通信ライブラリ<strong>OkHttp</strong>の利用方法</li>\n</ul>\n<p>Googleが公開している蔵書検索サービスの”Google Books API”を利用して入力された文言を元にインターネット上の蔵書情報を検索し、アプリの検索結果情報を表示します。<br>REST API通信を行う上で非同期処理の基礎知識が必要になりますので合わせて学習します。</p>\n<h1><span id=\"非同期処理\">非同期処理</span></h1><p>アプリ開発における非同期処理とは画面の表示や操作に影響なく別のプログラムや命令を実行することを指します。<br>身近なものとしてプッシュ通知やアラーム機能も非同期処理の一部と言えます。</p>\n<p>Androidアプリにはスレッド(Thread)という概念があり、”タスク”や”一連の仕事”と言い換えることができます。<br>Androidのアプリを起動した時に<code>activity_main.xml</code>のレイアウトが表示されるのも一つのスレッドでプログラムを実行した結果です。</p>\n<p>この画面にレイアウトを表示するスレッドを<strong>メインスレッド</strong>と呼びます。<br>メインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。</p>\n<p>メインスレッドはウィジェットやビューの表示や更新を行える唯一のスレッドなため<strong>UIスレッド</strong>と呼ぶこともあります、そしてメインスレッドは表示の管理に加えてユーザの操作（タップやスワイプ）を監視する仕事も兼務しています。</p>\n<p>プログラムの上での非同期処理は主に<strong>メインスレッド</strong>に影響が無いようにプログラムを実行することを指します、<br>そのために別のスレッドを<font color=\"red\">自分で作成</font>し、その領域でプログラムを実行します。<br>自分で作成したスレッドは<strong>サブスレッド</strong>と呼び、複数のサブスレッドを作成することができます。</p>\n<p>最終的な目的としてインターネット上のデータをアプリで取得することにあります。<br>Androidアプリは画面の表示やユーザ操作に影響がある可能性がある時間のかかる命令をメインスレッドで実行することを禁止しています。<br>インターネット通信処理も時間のかかる命令であるため、メインスレッドでの実装を禁止されています、<br>そのため、インターネット通信処理も非同期処理として実行する必要があります。</p>\n<p>インターネット通信の実装と非同期処理を同時に進めてしまうと情報を整理できない場合もあるのでまずは非同期処理に絞って学習していきます。</p>\n<h2><span id=\"非同期タイマー機能\">非同期タイマー機能</span></h2><p>非同期処理の基礎を学習するために、準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// Timerスレッドクラス</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">    bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">    bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 準備されているTimerスレッドをインスタンス化</span></span><br><span class=\"line\">    timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    <span class=\"comment\">// ３秒ごとに実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">    TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Timerスレッドの実行スケジュールを設定</span></span><br><span class=\"line\">    <span class=\"comment\">// 3秒毎にtimerTaskのプログラムを実行</span></span><br><span class=\"line\">    timer.schedule(timerTask, <span class=\"number\">0</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードを実装したらエミュレータを起動して確認します。<br>下図の通りAndroid Studioの<strong>Logcat</strong>で確認すると3秒毎にログが出力を確認できましたか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/timerexample.png\" width=\"650\" title=\"example timer log\"></p>\n<p>次は画面が表示されてから3秒後から3秒毎にトーストが表示される様に修正してみます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">   ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 準備されているTimerスレッドをインスタンス化</span></span><br><span class=\"line\">    timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    <span class=\"comment\">// ３秒ごとに実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">    TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 更新された内容をトーストに表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Timerスレッドの実行スケジュールを設定</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行</span></span><br><span class=\"line\">    timer.schedule(timerTask, <span class=\"number\">3000</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの実装が終わったら<code>Run</code>ボタンからエミュレータで動作を確認します。<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>アプリが強制終了してしまったのではないでしょうか？<br>紹介した通りメインスレッド以外のスレッドでは表示や更新は実行できません、<br>それに対して上記はTimerスレッドの領域でToastを表示するコードを実装してしまい、アプリ実行時に強制終了してしまいました。<br>強制終了した原因などログは<code>Logcat</code>領域に表示されるので確認して見ましょう。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/MainThreadError.png\" title=\"ThreadSequence\"><br>プログラム実行時に発生したエラーメッセージは赤文字で表示されます。<br>先ほどのエラー原因を説明している箇所は以下</p>\n<blockquote>\n<font color=\"red\">java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</font>\n\n</blockquote>\n<p>以降の行の”at …”は強制終了する前に実行されたメソッドなど命令が順に表示されます。<br>各行後半の “()” 内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。<br>以下の行のエラーメッセージ上で “()” 内が青くなっています、これは自分で管理するファイルであることを表しており、<br>多くの場合にエラーの原因になったプログラムの行を示している箇所となります。</p>\n<blockquote>\n<font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\"blue\">MainActivity.java:53</font><font color=\"red\">)</font>\n\n</blockquote>\n<p>エラーが発生した時には原因や問題を解析するためには<code>Logcat</code>を確認する癖を付けましょう！<br>コードを修正する前に新しく使う<strong>Handlerクラス</strong>と<strong>Runnableインターフェース</strong>を紹介します。</p>\n<h2><span id=\"handler-クラス\">Handler クラス</span></h2><p>Handlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。<br>今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。<br>通信と記述していますが、今回の通信ではMainThreadでToastを表示することが目的になるため、<br>データを渡すことが目的の通信では無いことを意識してみてみてください。</p>\n<h2><span id=\"runnable-インターフェース\">Runnable インターフェース</span></h2><p>RunnableはThreadで処理する領域を宣言し、Thread内のプログラムを実装、実行する機能を持っています。<br><strong>Thread = Runnable</strong>と認識して問題ありません。<br>今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableインターフェースを使用しています。</p>\n<p>では改めてタイマースレッドからメインスレッドに作業を渡して画面にトースト表示するよう修正します。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">// Timerクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに帰って来るためのハンドラー</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ハンドラーオブジェクトをMainThreadでインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">                timer.cancel();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定期実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">        TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                        , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 更新された内容をトーストに表示</span></span><br><span class=\"line\">                        Toast.makeText(getBaseContext()</span><br><span class=\"line\">                                , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span></span><br><span class=\"line\">                                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装できたら、エミュレータで確認します。<br>以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/AsyncTimerToast.png\" width=\"300\" title=\"TimerThreadTest\"><br>Handlerクラスを使いタイマースレッドからメインスレッドに戻ることができました。<br>実感は湧きにくいかもしれませんが、画面にToastが表示されたことが何よりの結果です。</p>\n<p>サブスレッドからメインスレッドに戻るためにはHandlerクラスをインスタンス化するタイミング、または方法を意識しないといけません。<br>”onCreate()”メソッドはメインスレッドで実行されています、そのため “onCreate()”メソッド内でインスタンス化した<code>handler</code>はメインスレッドの属性を持ったことになり、サブスレッドから<code>handler.post(...)</code>実行したRunnableのプログラムはメインスレッドでのプログラムとして扱われたことになります。</p>\n<p>以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみてください。</p>\n<h1><span id=\"蔵書検索機能\">蔵書検索機能</span></h1><p>非同期処理の基礎を学んだところで、本命のインターネット上にあるデータを取得するプログラムを実装していきます。<br>今回のアプリは蔵書検索する機能を実装するためにインターネット上にあるデータが必要になりますが、その問題を解決するために “Google Books API”サービスを使いインターネット上からデータを取得する機能を実装していきます。</p>\n<p>REST APIとは<strong>Representational State Transfer Application Programming Interface</strong>の略称で<br>さらにそれぞれ”REST”と”API”で使われることもあります。</p>\n<h2><span id=\"rest\">REST</span></h2><p>Webサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。</p>\n<p>RESTの設計条件として以下が該当します。<br><blockquote><ul>\n<li>アドレス指定可能なURLで公開されていること</li>\n<li>インターフェースが統一されていること(HTTPメソッドに準じていること)</li>\n<li>ステートレスであること</li>\n<li>処理結果がHTTPステータスコードで通知されること</li>\n</ul>\n<footer><strong>Qiita</strong><cite><a href=\"https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\" target=\"_blank\" rel=\"external\">REST入門 基礎知識</a></cite></footer></blockquote></p>\n<h2><span id=\"api\">API</span></h2><p>ウィキペディアには以下の様にあります。<br><blockquote><p><strong>ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様</strong></p>\n<footer><strong>wikipedia</strong><cite><a href=\"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\" target=\"_blank\" rel=\"external\">API</a></cite></footer></blockquote><br>…文章からイメージするのは難しそうです。。。<br>ですので、まずは以下の様な認識で使っていきましょう。</p>\n<font color=\"blue\"><strong>インターネット上に公開された、URLを知っていれば誰でも使えるデータ</strong></font>\n\n<p>例として実際にAPIのデータをgoogle ChromeなどWebブラウザで確認できるので確認してみましょう。<br>以下で紹介しているURLはgoogleが一般公開している”google books API”というREST APIで、蔵書の情報を取得することができるAPIです。<br>また、Google Books APIを使うためには “?q=***“という検索条件を必ずつけないといけないのでサンプルで参考書タイトルで検索する指定しています。<br><blockquote><p><a href=\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門</a></p>\n<footer><strong>Google Books APIs</strong><cite><a href=\"https://developers.google.com/books/docs/v1/using\" target=\"_blank\" rel=\"external\">Reference</a></cite></footer></blockquote><br>この画面に表示されているデータは<code>json</code>という形式でまとめられたデータで、上記URLにアプリからアクセスすると<br>画面に表示されているデータをアプリで受け取ることができます。<br>キュレーションアプリやニュースアプリなどはこの様にデータを取得して画面に表示させてなどしています。</p>\n<p>Google Books APIでは”?q=***“の”*“の文字を変更することで表示される結果が変わります、<br>これはホームページなどと同じくサーバがURLを受け取り、サーバ内のプログラムが実行された結果<code>json</code>データが返されているからです。</p>\n<p>上記で紹介したAPIの検索条件等は<a href=\"https://developers.google.com/books/docs/v1/using#WorkingVolumes\" target=\"_blank\" rel=\"external\">Google Books APIs</a>に記載されています。（全て英語です）</p>\n<p>下図はREST API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを示しています。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/APISequence.svg\" width=\"550\" title=\"APISequence\"></p>\n<p>Andoridアプリでは画面表示や更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\"><strong>MainThreadは時間のかかる処理を行なってはいけない</strong></font>という制約もあるため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。</p>\n<p>上記の図の通りですが<font color=\"red\"><strong>REST API通信を実行し、画面に反映するためには大まかに以下の手順が必要になります</strong></font></p>\n<ol>\n<li>メインスレッドでハンドラーをインスタンス化</li>\n<li>メインスレッドからサブスレッドを起動</li>\n<li>サブスレッドでAPI通信処理を実行し検索結果データを取得</li>\n<li>ハンドラーを使いサブスレッドで取得したAPIで取得した検索結果データをメインスレッドへ連携</li>\n<li>メインスレッドで検索結果データを使い画面を更新</li>\n</ol>\n<h2><span id=\"okhttpライブラリの導入\">OkHttpライブラリの導入</span></h2><p>REST API通信、ネットワーク通信処理を行うために、ここでは<strong><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">OkHttp</a></strong>という<em>ライブラリ</em>を使っていきます、<strong>OkHttp</strong>はAndroid に元々備わっているネットワーク通信機能をさらに簡単に実装することができる機能群です。<br>このようにプログラムを一部簡単にしてくれる機能群を<em>ライブラリ</em>と呼びます。</p>\n<p><strong>OkHttp</strong>を導入するために修正するファイルは<code>build.gradle</code>というファイルです。<br>このファイルは２つありますが、開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp01.png\" width=\"550\" title=\"IncludeokHttp\"><br><code>build.gradle</code>を開き “dependencies” の “{}”内に以下のコードを記述します<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの記述が終わったら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp02.png\" width=\"600\" title=\"Include okHttp\"><br>これで<strong>OkHttp</strong>ライブラリの導入は完了です。</p>\n<h2><span id=\"rest-api通信機能\">REST API通信機能</span></h2><p><strong>OkHttp</strong>の導入が完了しましたので、実際にアプリで使っていきます！<br>実装の完成形として<code>MainActivity</code>の蔵書検索ボタンがクリックされたらEditTextの文字データを<code>ResultListActivity</code>に渡します。<br>そして<code>ResultListActivity</code>では受け取った文字データをGoogle Books APIから検索する蔵書情報として利用して期待する検索結果をインターネット上から取得します。<br>画面への反映は次のページで解説します。</p>\n<p>javaファイルの実装の前にAndroidアプリでインターネット通信を行うためには、パーミッション(permission)と呼ばれる許可設定が必要なので<code>AndroidManifest.xml</code>ファイルを修正します。<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"PackageName\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Androidアプリでインターネット通信を許可する設定 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">...</span>一部省略&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>ではjavaファイルの実装です、まずはアプリでGoogle Books APIを使ってデータを取得するプログラムを実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">    resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">    okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">    <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\"</span>).build();</span><br><span class=\"line\">    <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">    Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">            <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">            Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">            <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"Success API Response\"</span>, response.body().string());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">    okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認してみましょう。<br><code>Logcat</code>にwebブラウザで確認したデータが表示されたでしょうか？<br>表示されていれば正常にインターネット上からデータを取得できたことになります。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/apiresponse.png\" width=\"700\" title=\"API Response Log\"><br>上記コードで出てきましたが、以下の様にメソッドからメソッドを呼び出す様な方法を<strong>メソッドチェーン</strong>と呼びます、プログラムの設計次第ではの様な実装方法も可能ですが、自作するクラスでは使う機会は少ないですが、今回の様にライブラリではよく使われる実装パターンなので覚えておきましょう。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"\"</span>).build();</span><br><span class=\"line\">や</span><br><span class=\"line\">okHttpClient.newCall(request).enqueue(...)</span><br></pre></td></tr></table></figure></p>\n<p>取得した蔵書データですがWebブラウザで確認した形式と同じく<code>Json</code>形式で取得しました。<br>Jsonはシンプルなデータ形式で <strong>:(コロン)</strong>を挟む左にデータの名称、右にデータが記述されており、複数データがある場合は<strong>,(カンマ)</strong>で区切って複数のデータを持つことができます。<br>Jsonデータは必ず<strong>{}(波括弧)</strong>で閉じられています。<br>この様に名称とデータを合わせて持つデータを<strong>KeyValuePair</strong>や<strong>KeyValue形式</strong>データと呼びます。<br>以下の例では”AndroidCourse”というKey(名称)に”Androidアプリの開発講座”というValue(文字列データ)が関連づいた<strong>KeyValue</strong>データです。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"AndroidCourse\"</span>:<span class=\"string\">\"Androidアプリの開発講座\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Jsonのデータには文字列や数値、配列や真偽値などを設定することが可能です。<br>REST APIを使う場合の多くはこのJson形式でデータを取得することが多いので解析できる様に覚えておくと便利です。</p>\n<p>次に取得したデータをアプリ内でパース(解析)して取得した蔵書データの件数と件数分のタイトルをログに出力してみます。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"><span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\"</span>).build();</span><br><span class=\"line\"><span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">        <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">        <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">            JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">            <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">            JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                    items.length());</span><br><span class=\"line\">            <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 繰り返しの番号と蔵書のタイトルをログに出力</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"Response Item Title\"</span>, (i + <span class=\"number\">1</span>) + <span class=\"string\">\"番目のデータタイトル：\"</span> + volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">okHttpClient.newCall(request).enqueue(callBack);</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。</p>\n<p>Json形式のデータはプログラムにおいて文字列データです。<br>文字列の形式を元に<strong>KeyValue</strong>データとしてパース(解析)するために<code>JSONObject</code>クラス、配列の場合は<code>JSONArray</code>クラスを使って実装します。<br>まずはJson形式文字列を<code>JSONObject</code>のインスタンス化する時の引数にセットすることで、<br><code>JSONObject</code>は引数のJson形式文字列データを<strong>KeyValue</strong>形式の<code>JSONObject</code>に変換します、今回のコードでは下記の１行が該当します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br></pre></td></tr></table></figure></p>\n<p>次に<strong>KeyValue</strong>データのKey情報を使って <em>“title”</em>のデータを取得していきます。<br>そのための階層をWebブラウザで確認すると<br><img src=\"/AndroidCourse/android/07-AsyncProcess/jsonparse.png\" width=\"500\" title=\"Json Parse\"></p>\n<blockquote>\n<p>{}(rootObject) -&gt; items(JSONArray) -&gt; volumeInfo(JSONObject) -&gt; title(String)</p>\n</blockquote>\n<p>の位置に表示されているのがわかりますので順次１階層毎に参照していきます。<br>１階層下の子要素を参照するメソッドは各データ型毎に用意されており、間違ったメソッドで参照すると正常に解析できず強制終了してしまいます。<br>ですがjava言語も優しさは残っており、予期せぬ不具合を検知する機能として<code>try〜catch</code>構文という強制終了を防ぐプログラムの記述方法があり、上記のコードはそれを適用しています。<br><code>try {}</code>の波括弧内に不具合が発生しそうなコードを実装し、後ろの<code>catch() {}</code>で不具合が発生した時に実行するコードを記述することができます。<br><code>catch()</code>の引数には発生しそうな不具合の種類を指定しなければならず、今回は”JSONException”とJSONのパースに失敗した時に不具合をキャッチしてくれます。</p>\n<h2><span id=\"検索結果画面データ反映\">検索結果画面データ反映</span></h2><p>データの解析方法まで試せましたが、「インターネット通信はMainThreadではできなかったんじゃないの？」と感じた方もいるかもしれません。<br>通信処理を実行した以下の<code>enqueue()</code>メソッドでサブスレッドを起動しているのです、開発側すら非同期を気にせず通信が実装できてしまいました。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">okHttpClient.newCall(request).enqueue(callBack);</span><br></pre></td></tr></table></figure></p>\n<p>サブスレッド通信であるので通信後のCallBackもサブスレッドで実行します、そのため<code>CallBack &gt; onResponse()</code>メソッド内でListViewを更新することはできません。<br>ここで “Handler”クラスが必要になります。<br>ここからの実装で”onResponse()”メソッドからメインスレッドにデータを連携しListViewに反映していきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; titleList, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleList = titleList;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> titleList.size();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(titleList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"Android アプリ開発の環境構築\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Android OS とは\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidの概念\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidアプリ開発を始める\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索画面レイアウト作成\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"ボタンイベントの実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索結果画面への遷移実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"非同期処理、REST API通信の実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索履歴機能\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Firebase導入\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, listData);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">        resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記コードが実装できたら動作確認します。<br>以下の様にGoogle Books APIにて取得した検索結果が表示されましたか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/reflectresult.png\" width=\"300\" title=\"Reflect Result\"></p>\n<p>今回の修正で<code>ResultListAdapter</code>クラスの変数がタイトルリストと概要リストの２つに増えたことで初期化時のコンストラクタで必要になる引数もタイトルと概要データの２つに増えました。<br>さらに<code>ResultListActivity</code>ではタイマースレッドでメインスレッドに戻った時の処理とは実装方法が違い、内部に新しく<code>Runnable</code>インターフェースを持ったクラスを作成し、<code>Handler</code>からメインスレッドに橋渡しをした際には作成したクラスに処理を実装しています。<br>新しく作成した”ReflectResult”クラスはコンストラクタでJSONデータのパースの続きを行い、全タイトルデータと全概要データを新しいリスト変数(titleList, summaryList)に代入しています。<br>そして全タイトルデータと全概要データを使ってListViewに表示する行データを作成する様に修正しました。</p>\n<p>アプリは非同期通信を行い検索結果を取得してからリストを表示しているため、一時的に真っ白な画面が表示される様になりました、他のアプリでは真っ白になる時間をプログレスバーやローディングアニメーションにてユーザに読み込み中であることを伝えます。<br>ローディングアニメーションなどの実装方法は先のページで解説していきます。</p>\n<h3><span id=\"layoutinflater-クラス\">LayoutInflater クラス</span></h3><p>レイアウトXMLからViewやウィジェット等のオブジェクトを生成するためのクラス。<br><code>setContentView</code>以降で動的にViewを生成/表示する場合に利用します。<br>利用方法としては<strong>LayoutInflater</strong>を<code>from</code>メソッドにてインスタンス化し<code>inflate</code>メソッドを使用してレイアウトXMLを生成します。</p>\n<ol>\n<li><p>LayoutInflaterのインスタンス化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LayoutInflater li = LayoutInflater.from(context);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflaterを使ってViewを生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View view = li.inflate(R.layout.layoutxml);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2><span id=\"入力文字列で蔵書検索する\">入力文字列で蔵書検索する</span></h2><p>先ほどまでは決まった文字列(“ほんきで学ぶAndroidアプリ開発入門”)でしか検索できませんが、<br>動的に検索が行える様に、<code>MainActivity</code>の”EditText”で入力された文字列を<code>ResultListActivity</code>に渡しGoogle Books REST APIの検索条件になる様にプログラムを修正していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"terms\"</span>, bookSearchEditor.getText().toString());</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面遷移時のデータが空でない場合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().hasExtra(<span class=\"string\">\"terms\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Key:termsにデータがあればValueを代入</span></span><br><span class=\"line\">            term = getIntent().getStringExtra(<span class=\"string\">\"terms\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移時のデータがからの場合は \"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br></pre></td></tr></table></figure>\n<p>上記コードを実装したら動作確認します。<br><code>MainActivity</code>で入力された文字列で検索した結果が表示される様になったでしょうか？<br>アプリ開発をしていると画面を分割したいけど、データを渡したい！！なんてことも出てくるので”画面遷移時にデータを渡せる”ということだけ覚えておけばインターネット上にも情報は沢山あるので見直して実装することができれば問題ありません。</p>\n<p>多少インターネット通信中の真っ白な画面が不恰好ではありますが、検索結果を画面に一覧表示することができました。</p>\n<h1><span id=\"プログラム課題\">プログラム課題</span></h1><p>今回作成したプログラムでは検索処理を実行した際に漫画などの一部検索を行うとアプリが強制終了してしまうケースがあります。<br>原因は取得したデータの中に”description”というキーが存在せず、解析に失敗しているためです、これを解決するために、”description”データがあるかチェックする処理を追加し、”description”が存在しない場合は空文字データをリストに追加するようにプログラムを修正してください。</p>\n<p><font color=\"red\"><strong>ヒント</strong></font></p>\n<ul>\n<li>空文字をString変数に代入する方法は<code>変数名 = &quot;&quot;;</code>です</li>\n<li>JSONObject内にキーが存在するかチェックするメソッドがあります<ul>\n<li><code>JSONObject.has(&quot;key name&quot;);</code></li>\n</ul>\n</li>\n</ul>\n<p>解説は時間をおいて行います。</p>\n<p>以上で<strong>蔵書検索機能の作成</strong>は完了です。<br>次の<a href=\"/AndroidCourse/android/08-AppDataBase\">検索履歴一覧画面</a>の作成ではアプリ内データベースを使って検索した履歴一覧を表示する画面を作成します。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>非同期処理の使い方と解説、インターネット通信ライブラリを利用してインターネット上から取得したデータの利用方法を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#非同期処理\">非同期処理</a><ul>\n<li><a href=\"#非同期タイマー機能\">非同期タイマー機能</a></li>\n<li><a href=\"#handler-クラス\">Handler クラス</a></li>\n<li><a href=\"#runnable-インターフェース\">Runnable インターフェース</a></li>\n</ul>\n</li>\n<li><a href=\"#蔵書検索機能\">蔵書検索機能</a><ul>\n<li><a href=\"#rest\">REST</a></li>\n<li><a href=\"#api\">API</a></li>\n<li><a href=\"#okhttpライブラリの導入\">OkHttpライブラリの導入</a></li>\n<li><a href=\"#rest-api通信機能\">REST API通信機能</a></li>\n<li><a href=\"#検索結果画面データ反映\">検索結果画面データ反映</a><ul>\n<li><a href=\"#layoutinflater-クラス\">LayoutInflater クラス</a></li>\n</ul>\n</li>\n<li><a href=\"#入力文字列で蔵書検索する\">入力文字列で蔵書検索する</a></li>\n</ul>\n</li>\n<li><a href=\"#プログラム課題\">プログラム課題</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面の作成</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>非同期通信の概要</li>\n<li>Androidアプリ開発におけるUIスレッド(メインスレッド)とサブスレッド</li>\n<li>REST API</li>\n<li>インターネット通信ライブラリ<strong>OkHttp</strong>の利用方法</li>\n</ul>\n<p>Googleが公開している蔵書検索サービスの”Google Books API”を利用して入力された文言を元にインターネット上の蔵書情報を検索し、アプリの検索結果情報を表示します。<br>REST API通信を行う上で非同期処理の基礎知識が必要になりますので合わせて学習します。</p>\n<h1 id=\"非同期処理\"><a href=\"#非同期処理\" class=\"headerlink\" title=\"非同期処理\"></a>非同期処理</h1><p>アプリ開発における非同期処理とは画面の表示や操作に影響なく別のプログラムや命令を実行することを指します。<br>身近なものとしてプッシュ通知やアラーム機能も非同期処理の一部と言えます。</p>\n<p>Androidアプリにはスレッド(Thread)という概念があり、”タスク”や”一連の仕事”と言い換えることができます。<br>Androidのアプリを起動した時に<code>activity_main.xml</code>のレイアウトが表示されるのも一つのスレッドでプログラムを実行した結果です。</p>\n<p>この画面にレイアウトを表示するスレッドを<strong>メインスレッド</strong>と呼びます。<br>メインスレッドは最初に表示されるアクティビティクラスを判別すると<font color=\"red\">自動的に作成</font>されます。</p>\n<p>メインスレッドはウィジェットやビューの表示や更新を行える唯一のスレッドなため<strong>UIスレッド</strong>と呼ぶこともあります、そしてメインスレッドは表示の管理に加えてユーザの操作（タップやスワイプ）を監視する仕事も兼務しています。</p>\n<p>プログラムの上での非同期処理は主に<strong>メインスレッド</strong>に影響が無いようにプログラムを実行することを指します、<br>そのために別のスレッドを<font color=\"red\">自分で作成</font>し、その領域でプログラムを実行します。<br>自分で作成したスレッドは<strong>サブスレッド</strong>と呼び、複数のサブスレッドを作成することができます。</p>\n<p>最終的な目的としてインターネット上のデータをアプリで取得することにあります。<br>Androidアプリは画面の表示やユーザ操作に影響がある可能性がある時間のかかる命令をメインスレッドで実行することを禁止しています。<br>インターネット通信処理も時間のかかる命令であるため、メインスレッドでの実装を禁止されています、<br>そのため、インターネット通信処理も非同期処理として実行する必要があります。</p>\n<p>インターネット通信の実装と非同期処理を同時に進めてしまうと情報を整理できない場合もあるのでまずは非同期処理に絞って学習していきます。</p>\n<h2 id=\"非同期タイマー機能\"><a href=\"#非同期タイマー機能\" class=\"headerlink\" title=\"非同期タイマー機能\"></a>非同期タイマー機能</h2><p>非同期処理の基礎を学習するために、準備されているタイマースレッドというサブスレッドを使って画面が表示されてから3秒ごとに、入力されたテキストをログ出力するプログラムを作っていきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\"><span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// Timerスレッドクラス</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">    bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">    bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 準備されているTimerスレッドをインスタンス化</span></span><br><span class=\"line\">    timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    <span class=\"comment\">// ３秒ごとに実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">    TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Timerスレッドの実行スケジュールを設定</span></span><br><span class=\"line\">    <span class=\"comment\">// 3秒毎にtimerTaskのプログラムを実行</span></span><br><span class=\"line\">    timer.schedule(timerTask, <span class=\"number\">0</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードを実装したらエミュレータを起動して確認します。<br>下図の通りAndroid Studioの<strong>Logcat</strong>で確認すると3秒毎にログが出力を確認できましたか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/timerexample.png\" width=\"650\" title=\"example timer log\"></p>\n<p>次は画面が表示されてから3秒後から3秒毎にトーストが表示される様に修正してみます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">   ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 準備されているTimerスレッドをインスタンス化</span></span><br><span class=\"line\">    timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    <span class=\"comment\">// ３秒ごとに実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">    TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 更新された内容をトーストに表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Timerスレッドの実行スケジュールを設定</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 画面が表示されてから3秒後から3秒毎にtimerTaskのプログラムを実行</span></span><br><span class=\"line\">    timer.schedule(timerTask, <span class=\"number\">3000</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの実装が終わったら<code>Run</code>ボタンからエミュレータで動作を確認します。<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>・<br>アプリが強制終了してしまったのではないでしょうか？<br>紹介した通りメインスレッド以外のスレッドでは表示や更新は実行できません、<br>それに対して上記はTimerスレッドの領域でToastを表示するコードを実装してしまい、アプリ実行時に強制終了してしまいました。<br>強制終了した原因などログは<code>Logcat</code>領域に表示されるので確認して見ましょう。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/MainThreadError.png\" title=\"ThreadSequence\"><br>プログラム実行時に発生したエラーメッセージは赤文字で表示されます。<br>先ほどのエラー原因を説明している箇所は以下</p>\n<blockquote>\n<font color=\"red\">java.lang.RuntimeException: Can’t create handler inside thread that has not called Looper.prepare()</font>\n\n</blockquote>\n<p>以降の行の”at …”は強制終了する前に実行されたメソッドなど命令が順に表示されます。<br>各行後半の “()” 内はプログラムのファイル名とプログラムを実行した行数が表示され、クリックするとプログラムファイルが表示されます。<br>以下の行のエラーメッセージ上で “()” 内が青くなっています、これは自分で管理するファイルであることを表しており、<br>多くの場合にエラーの原因になったプログラムの行を示している箇所となります。</p>\n<blockquote>\n<font color=\"red\">at kuririnz.xyz.bookdiscovery.MainActivity$2.run(</font><font color=\"blue\">MainActivity.java:53</font><font color=\"red\">)</font>\n\n</blockquote>\n<p>エラーが発生した時には原因や問題を解析するためには<code>Logcat</code>を確認する癖を付けましょう！<br>コードを修正する前に新しく使う<strong>Handlerクラス</strong>と<strong>Runnableインターフェース</strong>を紹介します。</p>\n<h2 id=\"Handler-クラス\"><a href=\"#Handler-クラス\" class=\"headerlink\" title=\"Handler クラス\"></a>Handler クラス</h2><p>Handlerクラスはスレッドから別のスレッドへ通信を行う機能を持ったクラスです。<br>今回のプログラムではToastを画面に表示する為TimerThreadからMainThreadへ通信を行います。<br>通信と記述していますが、今回の通信ではMainThreadでToastを表示することが目的になるため、<br>データを渡すことが目的の通信では無いことを意識してみてみてください。</p>\n<h2 id=\"Runnable-インターフェース\"><a href=\"#Runnable-インターフェース\" class=\"headerlink\" title=\"Runnable インターフェース\"></a>Runnable インターフェース</h2><p>RunnableはThreadで処理する領域を宣言し、Thread内のプログラムを実装、実行する機能を持っています。<br><strong>Thread = Runnable</strong>と認識して問題ありません。<br>今回のプログラムではTimerThreadで３秒ごとにlogを出力する時、MainThreadでToastを表示する処理を実行する時にRunnableインターフェースを使用しています。</p>\n<p>では改めてタイマースレッドからメインスレッドに作業を渡して画面にトースト表示するよう修正します。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">// Timerクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに帰って来るためのハンドラー</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ハンドラーオブジェクトをMainThreadでインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索する文字を入力するEditTextをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchEditor = findViewById(R.id.BookSearchEdit);</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時の処理を実装</span></span><br><span class=\"line\">        View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">                Toast.makeText(getBaseContext()</span><br><span class=\"line\">                        , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                        , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">                timer.cancel();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 定期実行するタスク(TimerTask)をインスタンス化</span></span><br><span class=\"line\">        TimerTask timerTask = <span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// コンソールログに更新された内容を出力</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"SubThread Process\"</span></span><br><span class=\"line\">                        , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 更新された内容をトーストに表示</span></span><br><span class=\"line\">                        Toast.makeText(getBaseContext()</span><br><span class=\"line\">                                , <span class=\"string\">\"「\"</span> +  bookSearchEditor.getText().toString() + <span class=\"string\">\"」に更新されました。\"</span></span><br><span class=\"line\">                                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装できたら、エミュレータで確認します。<br>以下の様に3秒ごとに入力中の文字がToastに表示されたでしょうか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/AsyncTimerToast.png\" width=\"300\" title=\"TimerThreadTest\"><br>Handlerクラスを使いタイマースレッドからメインスレッドに戻ることができました。<br>実感は湧きにくいかもしれませんが、画面にToastが表示されたことが何よりの結果です。</p>\n<p>サブスレッドからメインスレッドに戻るためにはHandlerクラスをインスタンス化するタイミング、または方法を意識しないといけません。<br>”onCreate()”メソッドはメインスレッドで実行されています、そのため “onCreate()”メソッド内でインスタンス化した<code>handler</code>はメインスレッドの属性を持ったことになり、サブスレッドから<code>handler.post(...)</code>実行したRunnableのプログラムはメインスレッドでのプログラムとして扱われたことになります。</p>\n<p>以上で、非同期処理の基礎の解説は終了です、難しい箇所も多いので自分なりにプログラムを修正して試してみてください。</p>\n<h1 id=\"蔵書検索機能\"><a href=\"#蔵書検索機能\" class=\"headerlink\" title=\"蔵書検索機能\"></a>蔵書検索機能</h1><p>非同期処理の基礎を学んだところで、本命のインターネット上にあるデータを取得するプログラムを実装していきます。<br>今回のアプリは蔵書検索する機能を実装するためにインターネット上にあるデータが必要になりますが、その問題を解決するために “Google Books API”サービスを使いインターネット上からデータを取得する機能を実装していきます。</p>\n<p>REST APIとは<strong>Representational State Transfer Application Programming Interface</strong>の略称で<br>さらにそれぞれ”REST”と”API”で使われることもあります。</p>\n<h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h2><p>Webサービスの設計モデルを表しており、REST APIのURLにHTTPメソッドでアクセスすることでデータの送受信が行えます。</p>\n<p>RESTの設計条件として以下が該当します。<br><blockquote><ul>\n<li>アドレス指定可能なURLで公開されていること</li>\n<li>インターフェースが統一されていること(HTTPメソッドに準じていること)</li>\n<li>ステートレスであること</li>\n<li>処理結果がHTTPステータスコードで通知されること</li>\n</ul>\n<footer><strong>Qiita</strong><cite><a href=\"https://qiita.com/TakahiRoyte/items/949f4e88caecb02119aa\" target=\"_blank\" rel=\"external\">REST入門 基礎知識</a></cite></footer></blockquote></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>ウィキペディアには以下の様にあります。<br><blockquote><p><strong>ソフトウェアコンポーネントが互いにやり取りするのに使用するインターフェース仕様</strong></p>\n<footer><strong>wikipedia</strong><cite><a href=\"https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\" target=\"_blank\" rel=\"external\">API</a></cite></footer></blockquote><br>…文章からイメージするのは難しそうです。。。<br>ですので、まずは以下の様な認識で使っていきましょう。</p>\n<font color=\"blue\"><strong>インターネット上に公開された、URLを知っていれば誰でも使えるデータ</strong></font>\n\n<p>例として実際にAPIのデータをgoogle ChromeなどWebブラウザで確認できるので確認してみましょう。<br>以下で紹介しているURLはgoogleが一般公開している”google books API”というREST APIで、蔵書の情報を取得することができるAPIです。<br>また、Google Books APIを使うためには “?q=***“という検索条件を必ずつけないといけないのでサンプルで参考書タイトルで検索する指定しています。<br><blockquote><p><a href=\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\" target=\"_blank\" rel=\"external\">https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門</a></p>\n<footer><strong>Google Books APIs</strong><cite><a href=\"https://developers.google.com/books/docs/v1/using\" target=\"_blank\" rel=\"external\">Reference</a></cite></footer></blockquote><br>この画面に表示されているデータは<code>json</code>という形式でまとめられたデータで、上記URLにアプリからアクセスすると<br>画面に表示されているデータをアプリで受け取ることができます。<br>キュレーションアプリやニュースアプリなどはこの様にデータを取得して画面に表示させてなどしています。</p>\n<p>Google Books APIでは”?q=***“の”*“の文字を変更することで表示される結果が変わります、<br>これはホームページなどと同じくサーバがURLを受け取り、サーバ内のプログラムが実行された結果<code>json</code>データが返されているからです。</p>\n<p>上記で紹介したAPIの検索条件等は<a href=\"https://developers.google.com/books/docs/v1/using#WorkingVolumes\" target=\"_blank\" rel=\"external\">Google Books APIs</a>に記載されています。（全て英語です）</p>\n<p>下図はREST API通信を行う流れからデータを取得し、画面に反映するまでの簡単な流れを示しています。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/APISequence.svg\" width=\"550\" title=\"APISequence\"></p>\n<p>Andoridアプリでは画面表示や更新はMainThreadのみ可能と解説をしましたが、更に<font color=\"blue\"><strong>MainThreadは時間のかかる処理を行なってはいけない</strong></font>という制約もあるため、MainThreadでネットワーク通信を行うとアプリが強制終了してしまいます。</p>\n<p>上記の図の通りですが<font color=\"red\"><strong>REST API通信を実行し、画面に反映するためには大まかに以下の手順が必要になります</strong></font></p>\n<ol>\n<li>メインスレッドでハンドラーをインスタンス化</li>\n<li>メインスレッドからサブスレッドを起動</li>\n<li>サブスレッドでAPI通信処理を実行し検索結果データを取得</li>\n<li>ハンドラーを使いサブスレッドで取得したAPIで取得した検索結果データをメインスレッドへ連携</li>\n<li>メインスレッドで検索結果データを使い画面を更新</li>\n</ol>\n<h2 id=\"OkHttpライブラリの導入\"><a href=\"#OkHttpライブラリの導入\" class=\"headerlink\" title=\"OkHttpライブラリの導入\"></a>OkHttpライブラリの導入</h2><p>REST API通信、ネットワーク通信処理を行うために、ここでは<strong><a href=\"http://square.github.io/okhttp/\" target=\"_blank\" rel=\"external\">OkHttp</a></strong>という<em>ライブラリ</em>を使っていきます、<strong>OkHttp</strong>はAndroid に元々備わっているネットワーク通信機能をさらに簡単に実装することができる機能群です。<br>このようにプログラムを一部簡単にしてくれる機能群を<em>ライブラリ</em>と呼びます。</p>\n<p><strong>OkHttp</strong>を導入するために修正するファイルは<code>build.gradle</code>というファイルです。<br>このファイルは２つありますが、開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp01.png\" width=\"550\" title=\"IncludeokHttp\"><br><code>build.gradle</code>を開き “dependencies” の “{}”内に以下のコードを記述します<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>コードの記述が終わったら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp02.png\" width=\"600\" title=\"Include okHttp\"><br>これで<strong>OkHttp</strong>ライブラリの導入は完了です。</p>\n<h2 id=\"REST-API通信機能\"><a href=\"#REST-API通信機能\" class=\"headerlink\" title=\"REST API通信機能\"></a>REST API通信機能</h2><p><strong>OkHttp</strong>の導入が完了しましたので、実際にアプリで使っていきます！<br>実装の完成形として<code>MainActivity</code>の蔵書検索ボタンがクリックされたらEditTextの文字データを<code>ResultListActivity</code>に渡します。<br>そして<code>ResultListActivity</code>では受け取った文字データをGoogle Books APIから検索する蔵書情報として利用して期待する検索結果をインターネット上から取得します。<br>画面への反映は次のページで解説します。</p>\n<p>javaファイルの実装の前にAndroidアプリでインターネット通信を行うためには、パーミッション(permission)と呼ばれる許可設定が必要なので<code>AndroidManifest.xml</code>ファイルを修正します。<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"PackageName\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Androidアプリでインターネット通信を許可する設定 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">...</span>一部省略&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>ではjavaファイルの実装です、まずはアプリでGoogle Books APIを使ってデータを取得するプログラムを実装します。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">    resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">    okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">    <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\"</span>).build();</span><br><span class=\"line\">    <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">    Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">            <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">            Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">            <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"Success API Response\"</span>, response.body().string());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">    okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認してみましょう。<br><code>Logcat</code>にwebブラウザで確認したデータが表示されたでしょうか？<br>表示されていれば正常にインターネット上からデータを取得できたことになります。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/apiresponse.png\" width=\"700\" title=\"API Response Log\"><br>上記コードで出てきましたが、以下の様にメソッドからメソッドを呼び出す様な方法を<strong>メソッドチェーン</strong>と呼びます、プログラムの設計次第ではの様な実装方法も可能ですが、自作するクラスでは使う機会は少ないですが、今回の様にライブラリではよく使われる実装パターンなので覚えておきましょう。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"\"</span>).build();</span><br><span class=\"line\">や</span><br><span class=\"line\">okHttpClient.newCall(request).enqueue(...)</span><br></pre></td></tr></table></figure></p>\n<p>取得した蔵書データですがWebブラウザで確認した形式と同じく<code>Json</code>形式で取得しました。<br>Jsonはシンプルなデータ形式で <strong>:(コロン)</strong>を挟む左にデータの名称、右にデータが記述されており、複数データがある場合は<strong>,(カンマ)</strong>で区切って複数のデータを持つことができます。<br>Jsonデータは必ず<strong>{}(波括弧)</strong>で閉じられています。<br>この様に名称とデータを合わせて持つデータを<strong>KeyValuePair</strong>や<strong>KeyValue形式</strong>データと呼びます。<br>以下の例では”AndroidCourse”というKey(名称)に”Androidアプリの開発講座”というValue(文字列データ)が関連づいた<strong>KeyValue</strong>データです。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"AndroidCourse\"</span>:<span class=\"string\">\"Androidアプリの開発講座\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Jsonのデータには文字列や数値、配列や真偽値などを設定することが可能です。<br>REST APIを使う場合の多くはこのJson形式でデータを取得することが多いので解析できる様に覚えておくと便利です。</p>\n<p>次に取得したデータをアプリ内でパース(解析)して取得した蔵書データの件数と件数分のタイトルをログに出力してみます。<br><figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"><span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=ほんきで学ぶAndroidアプリ開発入門\"</span>).build();</span><br><span class=\"line\"><span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">        <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">        Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">        <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">            JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">            <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">            JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                    items.length());</span><br><span class=\"line\">            <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 繰り返しの番号と蔵書のタイトルをログに出力</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"Response Item Title\"</span>, (i + <span class=\"number\">1</span>) + <span class=\"string\">\"番目のデータタイトル：\"</span> + volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">okHttpClient.newCall(request).enqueue(callBack);</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。</p>\n<p>Json形式のデータはプログラムにおいて文字列データです。<br>文字列の形式を元に<strong>KeyValue</strong>データとしてパース(解析)するために<code>JSONObject</code>クラス、配列の場合は<code>JSONArray</code>クラスを使って実装します。<br>まずはJson形式文字列を<code>JSONObject</code>のインスタンス化する時の引数にセットすることで、<br><code>JSONObject</code>は引数のJson形式文字列データを<strong>KeyValue</strong>形式の<code>JSONObject</code>に変換します、今回のコードでは下記の１行が該当します。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br></pre></td></tr></table></figure></p>\n<p>次に<strong>KeyValue</strong>データのKey情報を使って <em>“title”</em>のデータを取得していきます。<br>そのための階層をWebブラウザで確認すると<br><img src=\"/AndroidCourse/android/07-AsyncProcess/jsonparse.png\" width=\"500\" title=\"Json Parse\"></p>\n<blockquote>\n<p>{}(rootObject) -&gt; items(JSONArray) -&gt; volumeInfo(JSONObject) -&gt; title(String)</p>\n</blockquote>\n<p>の位置に表示されているのがわかりますので順次１階層毎に参照していきます。<br>１階層下の子要素を参照するメソッドは各データ型毎に用意されており、間違ったメソッドで参照すると正常に解析できず強制終了してしまいます。<br>ですがjava言語も優しさは残っており、予期せぬ不具合を検知する機能として<code>try〜catch</code>構文という強制終了を防ぐプログラムの記述方法があり、上記のコードはそれを適用しています。<br><code>try {}</code>の波括弧内に不具合が発生しそうなコードを実装し、後ろの<code>catch() {}</code>で不具合が発生した時に実行するコードを記述することができます。<br><code>catch()</code>の引数には発生しそうな不具合の種類を指定しなければならず、今回は”JSONException”とJSONのパースに失敗した時に不具合をキャッチしてくれます。</p>\n<h2 id=\"検索結果画面データ反映\"><a href=\"#検索結果画面データ反映\" class=\"headerlink\" title=\"検索結果画面データ反映\"></a>検索結果画面データ反映</h2><p>データの解析方法まで試せましたが、「インターネット通信はMainThreadではできなかったんじゃないの？」と感じた方もいるかもしれません。<br>通信処理を実行した以下の<code>enqueue()</code>メソッドでサブスレッドを起動しているのです、開発側すら非同期を気にせず通信が実装できてしまいました。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">okHttpClient.newCall(request).enqueue(callBack);</span><br></pre></td></tr></table></figure></p>\n<p>サブスレッド通信であるので通信後のCallBackもサブスレッドで実行します、そのため<code>CallBack &gt; onResponse()</code>メソッド内でListViewを更新することはできません。<br>ここで “Handler”クラスが必要になります。<br>ここからの実装で”onResponse()”メソッドからメインスレッドにデータを連携しListViewに反映していきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; titleList, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleList = titleList;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> titleList.size();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(titleList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検証用コレクションデータ</span></span><br><span class=\"line\">    List&lt;String&gt; listData = Arrays.asList(<span class=\"string\">\"Android アプリ開発の環境構築\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Android OS とは\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidの概念\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Androidアプリ開発を始める\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索画面レイアウト作成\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"ボタンイベントの実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索結果画面への遷移実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"非同期処理、REST API通信の実装\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"検索履歴機能\"</span></span><br><span class=\"line\">            , <span class=\"string\">\"Firebase導入\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">        adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, listData);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">        resultListView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">        resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記コードが実装できたら動作確認します。<br>以下の様にGoogle Books APIにて取得した検索結果が表示されましたか？<br><img src=\"/AndroidCourse/android/07-AsyncProcess/reflectresult.png\" width=\"300\" title=\"Reflect Result\"></p>\n<p>今回の修正で<code>ResultListAdapter</code>クラスの変数がタイトルリストと概要リストの２つに増えたことで初期化時のコンストラクタで必要になる引数もタイトルと概要データの２つに増えました。<br>さらに<code>ResultListActivity</code>ではタイマースレッドでメインスレッドに戻った時の処理とは実装方法が違い、内部に新しく<code>Runnable</code>インターフェースを持ったクラスを作成し、<code>Handler</code>からメインスレッドに橋渡しをした際には作成したクラスに処理を実装しています。<br>新しく作成した”ReflectResult”クラスはコンストラクタでJSONデータのパースの続きを行い、全タイトルデータと全概要データを新しいリスト変数(titleList, summaryList)に代入しています。<br>そして全タイトルデータと全概要データを使ってListViewに表示する行データを作成する様に修正しました。</p>\n<p>アプリは非同期通信を行い検索結果を取得してからリストを表示しているため、一時的に真っ白な画面が表示される様になりました、他のアプリでは真っ白になる時間をプログレスバーやローディングアニメーションにてユーザに読み込み中であることを伝えます。<br>ローディングアニメーションなどの実装方法は先のページで解説していきます。</p>\n<h3 id=\"LayoutInflater-クラス\"><a href=\"#LayoutInflater-クラス\" class=\"headerlink\" title=\"LayoutInflater クラス\"></a>LayoutInflater クラス</h3><p>レイアウトXMLからViewやウィジェット等のオブジェクトを生成するためのクラス。<br><code>setContentView</code>以降で動的にViewを生成/表示する場合に利用します。<br>利用方法としては<strong>LayoutInflater</strong>を<code>from</code>メソッドにてインスタンス化し<code>inflate</code>メソッドを使用してレイアウトXMLを生成します。</p>\n<ol>\n<li><p>LayoutInflaterのインスタンス化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LayoutInflater li = LayoutInflater.from(context);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LayoutInflaterを使ってViewを生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View view = li.inflate(R.layout.layoutxml);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"入力文字列で蔵書検索する\"><a href=\"#入力文字列で蔵書検索する\" class=\"headerlink\" title=\"入力文字列で蔵書検索する\"></a>入力文字列で蔵書検索する</h2><p>先ほどまでは決まった文字列(“ほんきで学ぶAndroidアプリ開発入門”)でしか検索できませんが、<br>動的に検索が行える様に、<code>MainActivity</code>の”EditText”で入力された文字列を<code>ResultListActivity</code>に渡しGoogle Books REST APIの検索条件になる様にプログラムを修正していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 入力された文字をToast(トースト)に表示</span></span><br><span class=\"line\">            Toast.makeText(getBaseContext()</span><br><span class=\"line\">                    , <span class=\"string\">\"入力された文字は [\"</span> + bookSearchEditor.getText().toString() + <span class=\"string\">\"]です。\"</span></span><br><span class=\"line\">                    , Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"terms\"</span>, bookSearchEditor.getText().toString());</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面遷移時のデータが空でない場合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().hasExtra(<span class=\"string\">\"terms\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Key:termsにデータがあればValueを代入</span></span><br><span class=\"line\">            term = getIntent().getStringExtra(<span class=\"string\">\"terms\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移時のデータがからの場合は \"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br></pre></td></tr></table></figure>\n<p>上記コードを実装したら動作確認します。<br><code>MainActivity</code>で入力された文字列で検索した結果が表示される様になったでしょうか？<br>アプリ開発をしていると画面を分割したいけど、データを渡したい！！なんてことも出てくるので”画面遷移時にデータを渡せる”ということだけ覚えておけばインターネット上にも情報は沢山あるので見直して実装することができれば問題ありません。</p>\n<p>多少インターネット通信中の真っ白な画面が不恰好ではありますが、検索結果を画面に一覧表示することができました。</p>\n<h1 id=\"プログラム課題\"><a href=\"#プログラム課題\" class=\"headerlink\" title=\"プログラム課題\"></a>プログラム課題</h1><p>今回作成したプログラムでは検索処理を実行した際に漫画などの一部検索を行うとアプリが強制終了してしまうケースがあります。<br>原因は取得したデータの中に”description”というキーが存在せず、解析に失敗しているためです、これを解決するために、”description”データがあるかチェックする処理を追加し、”description”が存在しない場合は空文字データをリストに追加するようにプログラムを修正してください。</p>\n<p><font color=\"red\"><strong>ヒント</strong></font></p>\n<ul>\n<li>空文字をString変数に代入する方法は<code>変数名 = &quot;&quot;;</code>です</li>\n<li>JSONObject内にキーが存在するかチェックするメソッドがあります<ul>\n<li><code>JSONObject.has(&quot;key name&quot;);</code></li>\n</ul>\n</li>\n</ul>\n<p>解説は時間をおいて行います。</p>\n<p>以上で<strong>蔵書検索機能の作成</strong>は完了です。<br>次の<a href=\"/AndroidCourse/android/08-AppDataBase\">検索履歴一覧画面</a>の作成ではアプリ内データベースを使って検索した履歴一覧を表示する画面を作成します。</p>\n"},{"title":"検索履歴一覧画面の作成","lang":"android","date":"2017-11-08T15:00:00.000Z","_content":"検索履歴一覧画面を作成/実装しながらアプリ内データベースの利用方法を学習する。\n\n<!-- toc -->\n\n[蔵書検索機能の作成](/AndroidCourse/android/07-AsyncProcess)からの引き続きの学習ページです。\n# 学習ポイント\n* Realmデータベースの使い方\n* RecyclerView, RecyclerViewAdapterの使い方\n\nRealmというデータベースライブラリを使いアプリが閉じたり端末電源が落ちた後でもデータが残る機能を使って検索を行った条件を保存しておき、過去の履歴が確認できる画面を作っていきます。\nまた、検索結果画面で使ったListViewとは別にRecyclerViewというListViewよりも自由度の高い一覧表示ができるコンポーネントを学習します。\n\n# 新しい画面を作成する\n検索履歴一覧画面の実装を進めるために、新しくActivityを作成します。\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行います。\n\n新しく作成するActivityは**Empty Activity**を選びます。\n* メニュー > File > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_1.png 500 CreateNewActivity %}\n* ウィンドウ右クリック > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_2.png 500 CreateNewActivity %}\n\n|項目|設定値|\n|-------------|------------------|\n|Activity Name|HistoryActivity|\n|Generate Layout File|チェックを<font color=\"blue\">つける</font>|\n|Layout Name|activity_history|\n|Luncher Activity|チェックを<font color=\"red\">つけない</font>|\n|Backwords Compatibility(AppCompat)|チェックを<font color=\"blue\">つける</font>|\n\n{% img /android/08-AppDataBase/crehistactivity.png 500 CreateNewActivity %}\n項目の入力が終わったら`Finish`ボタンをクリックします。\n\nAndroidStudioでは作成したActivityのエディタ画面が表示されます。\n\n# 画面遷移処理機能\n検索履歴一覧画面、`HistoryActivity`ができたので`MainActivity`からの画面遷移処理を実装します。\n\"検索履歴\"ボタンはまだ画面との関連付けを実装していないので、関連付けから実装します。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button historyBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    private EditText bookSearchEditor;\n    // Timerクラス\n    private Timer timer;\n    // メインスレッドに帰って来るためのハンドラー\n    private Handler handler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴ボタンを関連付ける\n        historyBtn = findViewById(R.id.HistoryBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\t\t...一部省略\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴ボタンをクリックした時の処理を実装\n        historyBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // 検索履歴画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, HistoryActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        });\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\t\t...一部省略\n\t}\n}\n```\n\n# Realmデータベースの導入\n**[Realm]**データベースは次世代次世代モバイル向けデータベースと言われており、データ抽出速度など基本的な機能が既存のモバイル向けデータベースより優れている点、またデータの登録、更新などの際に必要だったSQLと呼ばれるデータベースを操作する言語の学習も不要になっている点が大きい。\n\nでは実際に導入していきます。\nライブラリの導入には`build.gradle`を修正します、今回はプロジェクト階層の`build.gradle`ファイルです。\n\nファイルの\"dependencies\"にRealmの設定を追記します。\n{% img /android/08-AppDataBase/includeRealm01.png 450 Include Realm %}\n```gradle build.gradle(Project: ***)\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        classpath \"io.realm:realm-gradle-plugin:4.3.3\"\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\n続いて**Module**階層の`build.gradle`も修正します。\n{% img /android/08-AppDataBase/includeRealm02.png 450 Include Realm %}\n```gradle build.gradle(Module: app)\napply plugin: 'com.android.application'\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\napply plugin: 'realm-android'\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\nandroid {\n    compileSdkVersion 26\n    defaultConfig {...\n    }\n    ...\n}\n```\n２つの`build.gradle`コードを修正したら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。\n{% img /android/08-AppDataBase/includeRealm03.png 650 Include Realm %}\nGradleの同期処理が実行されるので同期処理の終了にて**Realm**ライブラリの導入は完了です。\n\n# 検索履歴機能\nRealmデータベースを使うにはアプリの起動した時（MainActivity）など起動時画面が表示されるより前にRealmのインスタンスを初期化する必要があります。\n起動時画面が表示される前にアプリ全体を管理する`Application`というクラスのライフサイクルが実行され、Activityが表示されています。\nデフォルトのプロジェクトには`Application`クラスは存在せずAndroid SDK側で自動的に処理されています、そのため必要に応じて`Application`クラスを継承した自作クラスを作って実装していきます。\n## Applicationクラス作成\n新規Javaファイルを作成します\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create Custom Application %}\n新しいクラスの作成に関する設定を行ったら`OK`ボタンをクリックします。\n{% img /android/08-AppDataBase/initialrealm01.png 500 Create Custom Application %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |BDApplication                    |\n|Kind         |Class                            |\n|Superclass   |android.app.Application          |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n`Application`クラスが作成されたら、Realmのインスタンス化を実装します。\nエラーはないですが、メソッドが実装されていないのでデベロッパが実装する必要があります。\nRealmのインスタンス化までを実装します。\n**開発時の便利ショートカットの紹介です。**\nコンストラクタや継承メソッドやインターフェースメソッド(インターフェースは後で解説します)を自動的に実装してくれる*\"Generate\"*ショートカットがありますOSごとにコマンドは違いますが、`BDApplication.java`を表示して以下のコマンドを入力します。\n* Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Insert</kbd>\n* Macの場合：<kbd>command</kbd><kbd>+</kbd><kbd>n</kbd>\n\n以下のウィンドウが表示されるので、今回は***Override Methoeds...***を選択します。\n{% img /android/08-AppDataBase/initialrealm02.png 400 Create Custom Application %}\n次のウィンドウでは***onCreate():void***を選択し`OK`をクリックします。\n{% img /android/08-AppDataBase/initialrealm03.png 300 Create Custom Application %}\n以下の様に選択したメソッドがクラスに実装されます。\n{% img /android/08-AppDataBase/initialrealm04.png 500 Create Custom Application %}\n\nではRealmインスタンスを初期化していきます。\n```java BDApplication.java\npublic class BDApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Realmをインスタンス化\n        Realm.init(this);\n        // Realm データベースを設定\n        RealmConfiguration conf = new RealmConfiguration.Builder().name(\"BookDiscovery.realm\").build();\n        Realm.setDefaultConfiguration(conf);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n作成したカスタムApplicationクラスはこのままでは実行されません、Activityよりも階層にしてみれば上に位置するものなのでActivityからも設定することはできません。\nここで出てくるのが`AndroidManifest.xml`です、API通信の実装の時にはインターネット通信を許可する設定を追記しました、今回は実行するApplicationクラスを設定を変更します。\n```XML AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"kuririnz.xyz.bookdiscovery\">\n\n    <!-- Androidアプリでインターネット通信を許可する設定 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        <!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ -->\n        android:name=\".BDApplication\"\n        <!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ -->\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        <!-- 一部省略  -->\n    </application>\n     <!-- 一部省略  -->\n</manifest>\n```\n上記で初期化、および`カスタムApplication`クラスの反映が完了しました。\n\n## RealmObject作成\n通常データベースにはテーブルという概念があります、テーブルとは複数の項目とその項目に沿ったデータを複数もった表のようなもので、表で再現すると以下のようなデータの持ち方をしています。\n\n|検索日付        |検索文字列          |\n|:--------------|------------------|\n|2018/2/6 13:02 |東京都             |\n|2018/2/6 13:25 |Android入門        |\n|2018/2/6 14:03 |ごはんのお供        |\n|2018/2/13 16:46|ミステリー小説      |\n|2018/2/13 17:11|プログラマー三代美徳 |\n\n例えば上記の表を*SearchHistory*というテーブルとした場合\n{% blockquote %}\n*SearchHistory*テーブル[表]は\"検索日付\"、\"検索文字列\"というカラム[列、項目]を持ち、現状は５ロウ(Row)[行]分のデータを持っている。\n{% endblockquote %}\nと言い換えることができます。\n\nRealmでは上記のテーブルを`RealmObject`クラスを継承した自作クラスを作成するだけでテーブル構成が完成します。\n今回作成する検索履歴機能は上記の表と同じ構成で作成します、新規javaファイルの作成から実装していきましょう。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create Custom Application %}\n新しいクラスの作成に関する設定を行ったら`OK`ボタンをクリックします。\n{% img /android/08-AppDataBase/initialrealm05.png 500 Create Custom Application %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |SearchHistoryModel               |\n|Kind         |Class                            |\n|Superclass   |io.realm.RealmObject             |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n上記で作成された`SearchHistoryModel`クラスがテーブル（表）になります。\n次にカラム(列)を作っていきます。\n```java SearchHistoryModel.java\npublic class SearchHistoryModel extends RealmObject {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索日時カラム\n    private String searchDate;\n    // 検索文字列カラム\n    private String searchTerm;\n\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n次に各カラムのデータを参照、代入するメソッドを実装します。\nそれぞれ参照を**ゲッター(getter)**、代入を**セッター(setter)**と呼びます。\n`SearchHistoryModel`クラスを開いた状態で、*\"Generate\"*ショートカットを入力して**Getter and Setter**を選択します。\n{% img /android/08-AppDataBase/realmtable01.png 400 Create Custom Table %}\n表示された２項目を選択し`OK`をクリックします。\n{% img /android/08-AppDataBase/realmtable02.png 300 Create Custom Table %}\n以下の通り４つのメソッドが追加されれば完了です。\n{% img /android/08-AppDataBase/realmtable03.png 550 Create Custom Table %}\n\nこのように複数のデータを管理するためのクラスを**モデルクラス**と呼びます。\nリスト構造の表示を行いたいときなどモデルクラスのように表示したい項目をまとめて保存しておくことでデータの管理が簡潔になり、プログラムが未訳なります。\n\n## 履歴登録機能\n登録先となるRealmObjectが完成したので、実際にRealmDBへの登録処理を実装します。\n今回データの登録タイミングは検索結果画面へ遷移する前とします。\n```java MainActivity.java\n    ...一部省略\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        ...一部省略\n        // 蔵書検索ボタンをクリックした時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // EditTextの文字列を取得\n                String termString = bookSearchEditor.getText().toString();\n                // Timerスレッドを止める\n                timer.cancel();\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Realmインスタンスを生成\n                Realm realm = Realm.getDefaultInstance();\n                try {\n                    // 検索履歴テーブルへのアクセスを開始\n                    realm.beginTransaction();\n                    // 新規検索履歴データを作成\n                    SearchHistoryModel history = realm.createObject(SearchHistoryModel.class);\n                    // 検索文字列カラムにデータを登録\n                    history.setSearchTerm(termString);\n                    // 現在時刻を文字列で取得する\n                    Date now = new Date();\n                    // 現在時刻を定まった形式で文字列に変換\n                    String dateStr = new SimpleDateFormat(\"yyyy/MM/dd HH:mm\").format(now);\n                    // 現在日時の文字列をカラムデータに登録\n                    history.setSearchDate(dateStr);\n                    // 検索履歴テーブルへのアクセスを終了\n                    realm.commitTransaction();\n                } finally {\n                    // Realmインスタンスがちゃんとクローズされること\n                    realm.close();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                \n                // 検索結果画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", termString);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        ...一部省略\n    }\n```\n上記の実装でRealm DBへのデータ登録処理は完了です。\nモバイル向けデータベースのデメリットとして中身を直接確認しにくいという点があるのですが、これはRealmDBも同様です。\nRealmにはGUIでデータを確認するアプリがありますが、データを保存した`BookDiscovery.realm`を取り出すのに手間がかかるため、実際に読み込んで参照した方がデータの確認は早いのです。\n\nデータ確認のため、検索履歴一覧画面にTextViewを配置しRealmから`SearchHistoryModel`の内容を全て抽出し、表示してみます。\n検索履歴一覧画面のレイアウトファイルを開きます。\n> app -> res -> layout -> activity_history.xml\n\n`activity_history.xml`を表示したら、\"TextView\"を画面に配置します。\n{% img /android/08-AppDataBase/confirmrealm01.png 550 realmconfirm %}\n画面の上下左右と制約を設定します。\n{% img /android/08-AppDataBase/confirmrealm02.png 550 realmconfirm %}\n最後に**Attributes**エリアから属性を設定します。\n{% img /android/08-AppDataBase/confirmrealm03.png 550 realmconfirm %}\n\n|設定項目       |設定値            |\n|--------------|-----------------|\n|ID            |HistoryText      |\n|layout_width  |match_sonstraint |\n|text          |テキストなし       |\n\n上記の表の通り、入力が完了したらレイアウトは一旦OKです！\n最後に`HistoryActivity.java`でRealm Realm DBからデータを取得し、配置したTextViewに表示させていきます。\n```java HistoryActivity.java\npublic class HistoryActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // Realmインスタンスを宣言\n    private Realm realm;\n    // 画面紐付けコンポーネントを宣言\n    private TextView historyTextView;\n    // 検索履歴テーブルのデータを全て取得\n    private RealmResults<SearchHistoryModel> resultData;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_history);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面コンポーネント関連付け\n        historyTextView = findViewById(R.id.HistoryText);\n        // Realmクラスをインスタンス化\n        realm = Realm.getDefaultInstance();\n        // 検索履歴テーブルのデータを全て取得\n        resultData = realm.where(SearchHistoryModel.class).findAll();\n        // 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する\n        if (!resultData.isEmpty() && resultData.size() > 0) {\n            // 検索履歴テーブルの行数分、繰り返し処理を実行する\n            for (int i = 0; i < resultData.size(); i++) {\n                // 検索履歴画面のtextViewに検索文字列を随時結合して表示する\n                historyTextView.setText(historyTextView.getText() + resultData.get(i).getSearchTerm());\n            }\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        // Realmインスタンスをちゃんとクローズすること\n        realm.close();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記のコードを実装したら動作確認します。\n動作確認の手順として以下の手順で操作を行い、[1.]のタイミングに入力した文字列が検索履歴一覧画面に表示されれば成功です。\n1. EditTextに何かしらの文字列を入力\n1. \"蔵書検索\"ボタンをクリック\n1. Androidエミュレータ(または実機)のバックボタンをクリック\n1. \"検索履歴\"ボタンをクリック\n\nRealmデータベースの基礎的な使い方は以上です。\n\n上記のコードでは新しく`onDestroy`というライフサイクルメソッドが登場しました、この`onDestroy`はActivityを表示するために保持しておいた領域を解放する前に実行されるメソッドです。\nRealmインスタンスはActivityごとにインスタンス化して使用しているため、Activityが解放される前にRealmの領域も解放しないといけません、**Realmの解放を忘れるとアプリの強制終了の原因にもなり得る**のでRealmを利用する場合は注意して実装を行います。\n\n# 検索履歴一覧画面リスト表示対応\nRealmにて検索した文字列が正常に保存されていることが確認できましたが、現状とても見難いレイアウトです、これをリスト表示にしていきます。\n\n検索履歴一覧画面での一覧表示には\"ListView\"ではなく、**RecyclerView**というコンポーネントを利用します。\n\n**RecyclerView**は\"Android API 22\"の頃に追加されたコンポーネントでListViewや格子状にViewを表示するGridViewよりさらに自由な配置を行えるようになった一覧表示コンポーネントです。\nまたListViewやGridViewに比べ軽い動作が行えることから最近ではこちらのコンポーネントで一覧画面を作ることが増えています。\n\n## 検索履歴一覧画面レイアウト修正\n**RecyclerView**コンポーネントは以下の場所にあります。\n> Palette -> AppCmpat -> RecyclerView\n\n{% img /android/08-AppDataBase/addrecycler01.png 450 Add RecyclerView %}\n続いて制約の設定です。\nコンポーネントが端に寄っていて設定しにくい場合、少し上下させて右端/左端にドラッグ&ドロップするとやりやすいです。\n{% img /android/08-AppDataBase/addrecycler02.png 300 Add RecyclerView %}\n制約設定が終わったら**RecyclerView**の属性を設定していきます。\n{% img /android/08-AppDataBase/addrecycler03.png 450 Add RecyclerView %}\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |HistoryRecycler      |\n|layout_width  |match_constraint     |\n|layout_height |match_constraint     |\n\n先ほど表示していたTextView(ID:HistoryText)は履歴が０件だった場合のメッセージを表示するように修正します、TextViewの用途が変わるのでIDも変更します。\n{% img /android/08-AppDataBase/addrecycler04.png 450 Add RecyclerView %}\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |EmptyRecyclerText    |\n|text          |検索履歴はありません    |\n|visibility    |invisible            |\n\nテキストの配置が不恰好なので位置を調整します、TextViewの文字位置の調整は\"textAlignment\"属性を修正します。\n\"textAlignment\"属性は基本属性の画面には表示されておらず、全属性を表示する詳細ウィンドウに切り替える必要があります、詳細ウィンドウへの切り替えはAttributesウィンドウの左右に矢印のアイコンをクリックします。\n{% img /android/08-AppDataBase/addrecycler04.png 450 Add RecyclerView %}\n\"textAlignment\"属性を探し、\"center\"を選択して完了です。\n\n## 検索歴一覧画面一覧表示実装\n検索履歴一覧画面の行レイアウトを作成していきます。\n新規でxmlレイアウトファイルを作成し、検索日時と検索時の文字列を表示する行レイアウトを作成します。\n> プロジェクトウィンドウ右クリック > New > XML > Layout XML File\n\n{% img /android/08-AppDataBase/addrowrecycler01.png 450 Add RecyclerView Row %}\nxmlレイアウトファイル名と一番上の階層になるLayoutを設定して`Finish`をクリックします\n{% img /android/08-AppDataBase/addrowrecycler02.png 450 Add RecyclerView Row %}\nデザインビューが表示されたらXMLの編集画面に切り替えてレイアウトを実装していきます。\nデザインエリアの左したにある**Text**と書かれてるタブをクリックします。\n{% img /android/08-AppDataBase/addrowrecycler03.png 450 Add RecyclerView Row %}\n検索履歴一覧画面の行レイアウトはLinearLayoutという初期からあるレイアウトコンポーネントを使います、またXMLを使った実装も試していきます。\n```XML row_history_recycle.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n    <TextView\n        android:id=\"@+id/RowHistoryDate\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"8dp\"\n        android:textSize=\"14dp\"\n        tools:text=\"蔵書検索した日付を表示\"/>\n\n    <TextView\n        android:id=\"@+id/RowHistoryTerm\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"8dp\"\n        android:textSize=\"20dp\"\n        tools:text=\"蔵書検索した文字列を表示\"/>\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n</LinearLayout>\n```\ntoolsを設定する際にもjavaクラスでのimportと同じように自動的に追加が可能ですので、`tools:text..`と入力した後に`tools`にマウスカーソルでクリックし、以下のようにツールチップが表示されたら\nWindowsの場合は[Alt + insert],Macの場合は[option + Enter]でxml内での参照が追加されます。\n{% img /android/08-AppDataBase/addrowrecycler04.png 500 Add RecyclerView Row %}\n\nこの`tools`という属性ですが、プレビューの際にだけ反映される項目を設定できる属性になります。そのため**アプリを実行した際には追加した２つのTextViewはプログラム上、表示する文字列を持っていない状態**となります。。\n\nそして上記xmlファイルで初めて利用した`LinearLayout`というコンポーネントは縦もしくは横どちらか一方方向に子Viewを並べて表示するという特性を持っています。\n縦横の設定は`orientation`属性を使用します。\n\n|設定値     |並べて表示する方向              |\n|:---------|:----------------------------|\n|horizontal|横(左から右)へ子Viewを並べて表示 |\n|vertical  |縦(上から下)へ子Viewを並べて表示 |\n\n`orientation`属性が設定されていない場合は**horizontal**が設定されたと認識され、不具合通知は表示されないので注意しましょう。\n\nXMLでレイアウトの実装を行う時に気をつけるポイントとして`layout_width`属性、`layout_height`属性があります。\n設定できる値とその意味合いをそれぞれ記述します。\n\n|設定値                |設定値の意味                   |\n|:--------------------|:----------------------------|\n|wrap_content         |要素の表示に必要な領域を自動的に確保 |\n|match_parent         |親要素と同じ幅(縦/横)に設定        |\n|match_constraint(0dp)|親要素と同じ幅(縦/横)に設定ConstraintLayoutの場合で\"Design\"タブを開いている場合に設定できる。xml上の値は\"0dp\" |\n|fill_parent          |親要素と同じ幅(縦/横)に設定Android OS 2.2(API Level 8)以降は非推奨 |\n\nアプリ開発の上で端末の種類が多いAndroidでは固定値を設定することはほぼレイアウト崩れに直結するので基本的には\"wrap_content\"や\"match_parent\"を使い隣接するViewとのスペース設定で調整することになると思います。\n\n行レイアウトができたので行ごとの表示プロセスを担当するAdapterクラスを実装していきます。\n一覧表示を行うViewを使う場合、Adapterクラスを継承して独自のレイアウト表示する方法はListViewと一緒です。\nRecyclerViewには`RecyclerView.Adapter`というRecyclerView用のAdapterクラスがあるのでこれを継承した独自クラスを作成します。\n{% img /android/08-AppDataBase/addadapter01.png 400 Add RecyclerView Adapter %}\nクラス作成時の設定項目を入力したら`OK`をクリックします\n{% img /android/08-AppDataBase/addadapter02.png 400 Add RecyclerView Adapter %}\n`HistoryRecyclerAdapter.java`が表示されたら<font color=\"red\">赤い電球</font>アイコンをクリックします。\n{% img /android/08-AppDataBase/addadapter03.png 500 Add RecyclerView Adapter %}\n表示された小さいウィンドウから*Implement methods*をクリックします。\n{% img /android/08-AppDataBase/addadapter04.png 500 Add RecyclerView Adapter %}\n３つのメソッドが選択状態（背景が青色）になっていることを確認し`OK`をクリックします。\n{% img /android/08-AppDataBase/addadapter05.png 300 Add RecyclerView Adapter %}\n選択した３つのメソッドが`HistoryRecyclerAdapter.java`に表示されたら新しいクラスの作成は完了です。\n{% img /android/08-AppDataBase/addadapter06.png 500 Add RecyclerView Adapter %}\n検索結果画面では利用していませんでしたが、検索履歴一覧画面では**ViewHolderパターン**での実装を行います。\n> **ViewHolderパターン**とはスクロールするたびにViewを生成/抽出(findViewById)などの処理コストが高く描画に時間がかかってしまうため、一度生成したViewHolderを再利用することでコストを軽減するパターンを指します。\n\n`HistoryRecyclerAdapter`の主なメソッドを実装する前にViewHolderの実装を行なっていきます。\n```java HistoryRecyclerAdapter.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class HistoryRecyclerAdapter extends RecyclerView.Adapter<HistoryRecyclerAdapter.HistoryHolder> {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        return null;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    public int getItemCount() {\n        return 0;\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ViewHolderパターンクラス\n    class HistoryHolder extends RecyclerView.ViewHolder {\n        // Rowレイアウトと関連づけるコンポーネントを宣言\n        public TextView historyDate;\n        public TextView historyTerm;\n\n        // コンストラクタ\n        public HistoryHolder(View itemView) {\n            super(itemView);\n            // xmlファイルと関連付け\n            historyDate = itemView.findViewById(R.id.RowHistoryDate);\n            historyTerm = itemView.findViewById(R.id.RowHistoryTerm);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記の実装で**ViewHolderパターン**での実装は完了です。\n続いて履歴データを表示するための実装を進めます。\n修正箇所等かなり多いので追加、修正箇所に注意しながら実装を進めてください。\n```java HistoryRecyclerAdapter.java\npublic class HistoryRecyclerAdapter extends RecyclerView.Adapter<HistoryRecyclerAdapter.HistoryHolder> {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 表示に必要なクラスを宣言\n    private Context context;\n    private LayoutInflater inflater;\n    private RealmResults<SearchHistoryModel> historyData;\n\n    // コンストラクタ\n    public HistoryRecyclerAdapter(Context context, RealmResults<SearchHistoryModel> historyData) {\n        // レイアウトのインスタンス化に必要なクラス\n        this.context = context;\n        this.inflater = LayoutInflater.from(context);\n        // 表示するデータリスト\n        this.historyData = historyData;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 表示するレイアウトを指定するメソッド\n    @Override\n    public HistoryHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        // row_history_recycleのレイアウトをインスタンス化\n        View view = inflater.inflate(R.layout.row_history_recycle, parent, false);\n        // HistoryHolderクラスをインスタンス化して返却する\n        return new HistoryHolder(view);\n    }\n\n    // 表示するレイアウトにデータを設定するメソッド\n    @Override\n    public void onBindViewHolder(HistoryHolder holder, int position) {\n        // 検索履歴一覧から一つの履歴データを抽出\n        SearchHistoryModel history = historyData.get(position);\n        // ViewHolderにデータをセット\n        holder.historyDate.setText(history.getSearchDate());\n        holder.historyTerm.setText(history.getSearchTerm());\n    }\n\n    // 表示するリストの件数を指定するメソッド\n    @Override\n    public int getItemCount() {\n        // RealmDBから取得した検索履歴全件分、行の表示処理を繰り返す\n        return historyData.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n}\n```\n\n```java HistoryActivity.java\npublic class HistoryActivity extends AppCompatActivity {\n\n    // Realmインスタンスを宣言\n    private Realm realm;\n    // 履歴0件用TextView\n    private TextView historyTextView;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索履歴RecyclerView\n    private RecyclerView historyRecycler;\n    // 検索履歴RecyclerAdapter\n    private HistoryRecyclerAdapter historyAdapter;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 検索履歴抽出データ\n    RealmResults<SearchHistoryModel> resultData;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_history);\n\n        // 画面コンポーネント関連付け\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        historyTextView = findViewById(R.id.EmptyRecyclerText);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        historyRecycler = findViewById(R.id.HistoryRecycler);\n        // Realmクラスをインスタンス化\n        realm = Realm.getDefaultInstance();\n        // 検索履歴テーブルのデータを全て取得\n        resultData = realm.where(SearchHistoryModel.class).findAll();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する\n        if (!resultData.isEmpty() && resultData.size() > 0) {\n            // adapterクラスをインスタンス化\n            historyAdapter = new HistoryRecyclerAdapter(this, resultData);\n            // RecyclerViewの表示形式を決める\n            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);\n            // RecyclerViewの初期設定\n            historyRecycler.setAdapter(historyAdapter);\n            historyRecycler.setLayoutManager(layoutManager);\n        } else {\n            // 検索履歴の件数が１件もない場合、履歴0件のメッセージを表示する\n            // 検索履歴一覧を非表示に設定\n            historyRecycler.setVisibility(View.GONE);\n            historyTextView.setVisibility(View.VISIBLE);\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    ...一部省略\n}\n```\n最後に`historyTextView`ですが、変数としての意味合いが変わっているので変数名を変更します。\nただ、一箇所づつの変更は手間なので一気に全箇所が変更される方法をで修正します。\n変数名にマウスカーソルを当て右クリックから\n> Refactor -> Rename...\n\nをクリックします\n{% img /android/08-AppDataBase/refactvalid01.png 500 Refactor Valid Name %}\n変更する変数名が赤枠で囲われるので変数名を修正します。\n{% img /android/08-AppDataBase/refactvalid02.png 500 Refactor Valid Name %}\n変数名の修正に合わせて他に使用されている同変数も修正されているのがわかります。\n変数名の修正が終わったわ`Enter`キーを押下し完了です。\n{% img /android/08-AppDataBase/refactvalid03.png 500 Refactor Valid Name %}\n\n上記までコードを実装したら動作確認します。\n正常な動作では閲覧履歴ボタンをクリックし、画面遷移した検索履歴一覧画面に検索した文字列のリストが表示されます。\n\n以上で検索履歴一覧画面の実装は完了です。\n次の[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)では蔵書の詳細情報を表示する画面を作成しながらFragmentクラスの使い方やJson文字列の効率的なパースライブラリの使い方などを学習していきます。\n\n[Realm]: https://realm.io/docs/java/latest","source":"_posts/android/08-AppDataBase.md","raw":"---\ntitle: 検索履歴一覧画面の作成\nlang: android\ndate: 2017-11-09\ntags:\n---\n検索履歴一覧画面を作成/実装しながらアプリ内データベースの利用方法を学習する。\n\n<!-- toc -->\n\n[蔵書検索機能の作成](/AndroidCourse/android/07-AsyncProcess)からの引き続きの学習ページです。\n# 学習ポイント\n* Realmデータベースの使い方\n* RecyclerView, RecyclerViewAdapterの使い方\n\nRealmというデータベースライブラリを使いアプリが閉じたり端末電源が落ちた後でもデータが残る機能を使って検索を行った条件を保存しておき、過去の履歴が確認できる画面を作っていきます。\nまた、検索結果画面で使ったListViewとは別にRecyclerViewというListViewよりも自由度の高い一覧表示ができるコンポーネントを学習します。\n\n# 新しい画面を作成する\n検索履歴一覧画面の実装を進めるために、新しくActivityを作成します。\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行います。\n\n新しく作成するActivityは**Empty Activity**を選びます。\n* メニュー > File > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_1.png 500 CreateNewActivity %}\n* ウィンドウ右クリック > New > Activity > Empty Activity\n{% img /android/06-TransitionScreen/createactivity01_2.png 500 CreateNewActivity %}\n\n|項目|設定値|\n|-------------|------------------|\n|Activity Name|HistoryActivity|\n|Generate Layout File|チェックを<font color=\"blue\">つける</font>|\n|Layout Name|activity_history|\n|Luncher Activity|チェックを<font color=\"red\">つけない</font>|\n|Backwords Compatibility(AppCompat)|チェックを<font color=\"blue\">つける</font>|\n\n{% img /android/08-AppDataBase/crehistactivity.png 500 CreateNewActivity %}\n項目の入力が終わったら`Finish`ボタンをクリックします。\n\nAndroidStudioでは作成したActivityのエディタ画面が表示されます。\n\n# 画面遷移処理機能\n検索履歴一覧画面、`HistoryActivity`ができたので`MainActivity`からの画面遷移処理を実装します。\n\"検索履歴\"ボタンはまだ画面との関連付けを実装していないので、関連付けから実装します。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button historyBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    private EditText bookSearchEditor;\n    // Timerクラス\n    private Timer timer;\n    // メインスレッドに帰って来るためのハンドラー\n    private Handler handler;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // ハンドラーオブジェクトをMainThreadでインスタンス化\n        handler = new Handler();\n        // 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける\n        bookSearchBtn = findViewById(R.id.BookSearchBtn);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴ボタンを関連付ける\n        historyBtn = findViewById(R.id.HistoryBtn);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\t\t...一部省略\n\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴ボタンをクリックした時の処理を実装\n        historyBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // 検索履歴画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, HistoryActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        });\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\t\t...一部省略\n\t}\n}\n```\n\n# Realmデータベースの導入\n**[Realm]**データベースは次世代次世代モバイル向けデータベースと言われており、データ抽出速度など基本的な機能が既存のモバイル向けデータベースより優れている点、またデータの登録、更新などの際に必要だったSQLと呼ばれるデータベースを操作する言語の学習も不要になっている点が大きい。\n\nでは実際に導入していきます。\nライブラリの導入には`build.gradle`を修正します、今回はプロジェクト階層の`build.gradle`ファイルです。\n\nファイルの\"dependencies\"にRealmの設定を追記します。\n{% img /android/08-AppDataBase/includeRealm01.png 450 Include Realm %}\n```gradle build.gradle(Project: ***)\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.1'\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        classpath \"io.realm:realm-gradle-plugin:4.3.3\"\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n```\n続いて**Module**階層の`build.gradle`も修正します。\n{% img /android/08-AppDataBase/includeRealm02.png 450 Include Realm %}\n```gradle build.gradle(Module: app)\napply plugin: 'com.android.application'\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\napply plugin: 'realm-android'\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\nandroid {\n    compileSdkVersion 26\n    defaultConfig {...\n    }\n    ...\n}\n```\n２つの`build.gradle`コードを修正したら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。\n{% img /android/08-AppDataBase/includeRealm03.png 650 Include Realm %}\nGradleの同期処理が実行されるので同期処理の終了にて**Realm**ライブラリの導入は完了です。\n\n# 検索履歴機能\nRealmデータベースを使うにはアプリの起動した時（MainActivity）など起動時画面が表示されるより前にRealmのインスタンスを初期化する必要があります。\n起動時画面が表示される前にアプリ全体を管理する`Application`というクラスのライフサイクルが実行され、Activityが表示されています。\nデフォルトのプロジェクトには`Application`クラスは存在せずAndroid SDK側で自動的に処理されています、そのため必要に応じて`Application`クラスを継承した自作クラスを作って実装していきます。\n## Applicationクラス作成\n新規Javaファイルを作成します\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create Custom Application %}\n新しいクラスの作成に関する設定を行ったら`OK`ボタンをクリックします。\n{% img /android/08-AppDataBase/initialrealm01.png 500 Create Custom Application %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |BDApplication                    |\n|Kind         |Class                            |\n|Superclass   |android.app.Application          |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n`Application`クラスが作成されたら、Realmのインスタンス化を実装します。\nエラーはないですが、メソッドが実装されていないのでデベロッパが実装する必要があります。\nRealmのインスタンス化までを実装します。\n**開発時の便利ショートカットの紹介です。**\nコンストラクタや継承メソッドやインターフェースメソッド(インターフェースは後で解説します)を自動的に実装してくれる*\"Generate\"*ショートカットがありますOSごとにコマンドは違いますが、`BDApplication.java`を表示して以下のコマンドを入力します。\n* Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Insert</kbd>\n* Macの場合：<kbd>command</kbd><kbd>+</kbd><kbd>n</kbd>\n\n以下のウィンドウが表示されるので、今回は***Override Methoeds...***を選択します。\n{% img /android/08-AppDataBase/initialrealm02.png 400 Create Custom Application %}\n次のウィンドウでは***onCreate():void***を選択し`OK`をクリックします。\n{% img /android/08-AppDataBase/initialrealm03.png 300 Create Custom Application %}\n以下の様に選択したメソッドがクラスに実装されます。\n{% img /android/08-AppDataBase/initialrealm04.png 500 Create Custom Application %}\n\nではRealmインスタンスを初期化していきます。\n```java BDApplication.java\npublic class BDApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Realmをインスタンス化\n        Realm.init(this);\n        // Realm データベースを設定\n        RealmConfiguration conf = new RealmConfiguration.Builder().name(\"BookDiscovery.realm\").build();\n        Realm.setDefaultConfiguration(conf);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n}\n```\n\n作成したカスタムApplicationクラスはこのままでは実行されません、Activityよりも階層にしてみれば上に位置するものなのでActivityからも設定することはできません。\nここで出てくるのが`AndroidManifest.xml`です、API通信の実装の時にはインターネット通信を許可する設定を追記しました、今回は実行するApplicationクラスを設定を変更します。\n```XML AndroidManifest.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"kuririnz.xyz.bookdiscovery\">\n\n    <!-- Androidアプリでインターネット通信を許可する設定 -->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        <!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ -->\n        android:name=\".BDApplication\"\n        <!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ -->\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        <!-- 一部省略  -->\n    </application>\n     <!-- 一部省略  -->\n</manifest>\n```\n上記で初期化、および`カスタムApplication`クラスの反映が完了しました。\n\n## RealmObject作成\n通常データベースにはテーブルという概念があります、テーブルとは複数の項目とその項目に沿ったデータを複数もった表のようなもので、表で再現すると以下のようなデータの持ち方をしています。\n\n|検索日付        |検索文字列          |\n|:--------------|------------------|\n|2018/2/6 13:02 |東京都             |\n|2018/2/6 13:25 |Android入門        |\n|2018/2/6 14:03 |ごはんのお供        |\n|2018/2/13 16:46|ミステリー小説      |\n|2018/2/13 17:11|プログラマー三代美徳 |\n\n例えば上記の表を*SearchHistory*というテーブルとした場合\n{% blockquote %}\n*SearchHistory*テーブル[表]は\"検索日付\"、\"検索文字列\"というカラム[列、項目]を持ち、現状は５ロウ(Row)[行]分のデータを持っている。\n{% endblockquote %}\nと言い換えることができます。\n\nRealmでは上記のテーブルを`RealmObject`クラスを継承した自作クラスを作成するだけでテーブル構成が完成します。\n今回作成する検索履歴機能は上記の表と同じ構成で作成します、新規javaファイルの作成から実装していきましょう。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\n{% img /android/06-TransitionScreen/createadpt01.png 500 Create Custom Application %}\n新しいクラスの作成に関する設定を行ったら`OK`ボタンをクリックします。\n{% img /android/08-AppDataBase/initialrealm05.png 500 Create Custom Application %}\n\n|項目          |設定値                            |\n|:-----------:|---------------------------------|\n|Name         |SearchHistoryModel               |\n|Kind         |Class                            |\n|Superclass   |io.realm.RealmObject             |\n|Interface(s) |-                                |\n|Package      |\\*\\*\\*\\.\\*\\*\\*\\.bookbookdiscovery|\n|Visibility   |Public                           |\n|Modifiers    |None                             |\n\n上記で作成された`SearchHistoryModel`クラスがテーブル（表）になります。\n次にカラム(列)を作っていきます。\n```java SearchHistoryModel.java\npublic class SearchHistoryModel extends RealmObject {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索日時カラム\n    private String searchDate;\n    // 検索文字列カラム\n    private String searchTerm;\n\t//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n次に各カラムのデータを参照、代入するメソッドを実装します。\nそれぞれ参照を**ゲッター(getter)**、代入を**セッター(setter)**と呼びます。\n`SearchHistoryModel`クラスを開いた状態で、*\"Generate\"*ショートカットを入力して**Getter and Setter**を選択します。\n{% img /android/08-AppDataBase/realmtable01.png 400 Create Custom Table %}\n表示された２項目を選択し`OK`をクリックします。\n{% img /android/08-AppDataBase/realmtable02.png 300 Create Custom Table %}\n以下の通り４つのメソッドが追加されれば完了です。\n{% img /android/08-AppDataBase/realmtable03.png 550 Create Custom Table %}\n\nこのように複数のデータを管理するためのクラスを**モデルクラス**と呼びます。\nリスト構造の表示を行いたいときなどモデルクラスのように表示したい項目をまとめて保存しておくことでデータの管理が簡潔になり、プログラムが未訳なります。\n\n## 履歴登録機能\n登録先となるRealmObjectが完成したので、実際にRealmDBへの登録処理を実装します。\n今回データの登録タイミングは検索結果画面へ遷移する前とします。\n```java MainActivity.java\n    ...一部省略\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        ...一部省略\n        // 蔵書検索ボタンをクリックした時の処理を実装\n        View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // コンソールログにボタンが押されたことを出力(表示)\n                Log.d(\"BookSearchBtn\", \"onClick: BookSearch Button\");\n                // EditTextの文字列を取得\n                String termString = bookSearchEditor.getText().toString();\n                // Timerスレッドを止める\n                timer.cancel();\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Realmインスタンスを生成\n                Realm realm = Realm.getDefaultInstance();\n                try {\n                    // 検索履歴テーブルへのアクセスを開始\n                    realm.beginTransaction();\n                    // 新規検索履歴データを作成\n                    SearchHistoryModel history = realm.createObject(SearchHistoryModel.class);\n                    // 検索文字列カラムにデータを登録\n                    history.setSearchTerm(termString);\n                    // 現在時刻を文字列で取得する\n                    Date now = new Date();\n                    // 現在時刻を定まった形式で文字列に変換\n                    String dateStr = new SimpleDateFormat(\"yyyy/MM/dd HH:mm\").format(now);\n                    // 現在日時の文字列をカラムデータに登録\n                    history.setSearchDate(dateStr);\n                    // 検索履歴テーブルへのアクセスを終了\n                    realm.commitTransaction();\n                } finally {\n                    // Realmインスタンスがちゃんとクローズされること\n                    realm.close();\n                }\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                \n                // 検索結果画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", termString);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n        // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n        ...一部省略\n    }\n```\n上記の実装でRealm DBへのデータ登録処理は完了です。\nモバイル向けデータベースのデメリットとして中身を直接確認しにくいという点があるのですが、これはRealmDBも同様です。\nRealmにはGUIでデータを確認するアプリがありますが、データを保存した`BookDiscovery.realm`を取り出すのに手間がかかるため、実際に読み込んで参照した方がデータの確認は早いのです。\n\nデータ確認のため、検索履歴一覧画面にTextViewを配置しRealmから`SearchHistoryModel`の内容を全て抽出し、表示してみます。\n検索履歴一覧画面のレイアウトファイルを開きます。\n> app -> res -> layout -> activity_history.xml\n\n`activity_history.xml`を表示したら、\"TextView\"を画面に配置します。\n{% img /android/08-AppDataBase/confirmrealm01.png 550 realmconfirm %}\n画面の上下左右と制約を設定します。\n{% img /android/08-AppDataBase/confirmrealm02.png 550 realmconfirm %}\n最後に**Attributes**エリアから属性を設定します。\n{% img /android/08-AppDataBase/confirmrealm03.png 550 realmconfirm %}\n\n|設定項目       |設定値            |\n|--------------|-----------------|\n|ID            |HistoryText      |\n|layout_width  |match_sonstraint |\n|text          |テキストなし       |\n\n上記の表の通り、入力が完了したらレイアウトは一旦OKです！\n最後に`HistoryActivity.java`でRealm Realm DBからデータを取得し、配置したTextViewに表示させていきます。\n```java HistoryActivity.java\npublic class HistoryActivity extends AppCompatActivity {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // Realmインスタンスを宣言\n    private Realm realm;\n    // 画面紐付けコンポーネントを宣言\n    private TextView historyTextView;\n    // 検索履歴テーブルのデータを全て取得\n    private RealmResults<SearchHistoryModel> resultData;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_history);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 画面コンポーネント関連付け\n        historyTextView = findViewById(R.id.HistoryText);\n        // Realmクラスをインスタンス化\n        realm = Realm.getDefaultInstance();\n        // 検索履歴テーブルのデータを全て取得\n        resultData = realm.where(SearchHistoryModel.class).findAll();\n        // 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する\n        if (!resultData.isEmpty() && resultData.size() > 0) {\n            // 検索履歴テーブルの行数分、繰り返し処理を実行する\n            for (int i = 0; i < resultData.size(); i++) {\n                // 検索履歴画面のtextViewに検索文字列を随時結合して表示する\n                historyTextView.setText(historyTextView.getText() + resultData.get(i).getSearchTerm());\n            }\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        // Realmインスタンスをちゃんとクローズすること\n        realm.close();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記のコードを実装したら動作確認します。\n動作確認の手順として以下の手順で操作を行い、[1.]のタイミングに入力した文字列が検索履歴一覧画面に表示されれば成功です。\n1. EditTextに何かしらの文字列を入力\n1. \"蔵書検索\"ボタンをクリック\n1. Androidエミュレータ(または実機)のバックボタンをクリック\n1. \"検索履歴\"ボタンをクリック\n\nRealmデータベースの基礎的な使い方は以上です。\n\n上記のコードでは新しく`onDestroy`というライフサイクルメソッドが登場しました、この`onDestroy`はActivityを表示するために保持しておいた領域を解放する前に実行されるメソッドです。\nRealmインスタンスはActivityごとにインスタンス化して使用しているため、Activityが解放される前にRealmの領域も解放しないといけません、**Realmの解放を忘れるとアプリの強制終了の原因にもなり得る**のでRealmを利用する場合は注意して実装を行います。\n\n# 検索履歴一覧画面リスト表示対応\nRealmにて検索した文字列が正常に保存されていることが確認できましたが、現状とても見難いレイアウトです、これをリスト表示にしていきます。\n\n検索履歴一覧画面での一覧表示には\"ListView\"ではなく、**RecyclerView**というコンポーネントを利用します。\n\n**RecyclerView**は\"Android API 22\"の頃に追加されたコンポーネントでListViewや格子状にViewを表示するGridViewよりさらに自由な配置を行えるようになった一覧表示コンポーネントです。\nまたListViewやGridViewに比べ軽い動作が行えることから最近ではこちらのコンポーネントで一覧画面を作ることが増えています。\n\n## 検索履歴一覧画面レイアウト修正\n**RecyclerView**コンポーネントは以下の場所にあります。\n> Palette -> AppCmpat -> RecyclerView\n\n{% img /android/08-AppDataBase/addrecycler01.png 450 Add RecyclerView %}\n続いて制約の設定です。\nコンポーネントが端に寄っていて設定しにくい場合、少し上下させて右端/左端にドラッグ&ドロップするとやりやすいです。\n{% img /android/08-AppDataBase/addrecycler02.png 300 Add RecyclerView %}\n制約設定が終わったら**RecyclerView**の属性を設定していきます。\n{% img /android/08-AppDataBase/addrecycler03.png 450 Add RecyclerView %}\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |HistoryRecycler      |\n|layout_width  |match_constraint     |\n|layout_height |match_constraint     |\n\n先ほど表示していたTextView(ID:HistoryText)は履歴が０件だった場合のメッセージを表示するように修正します、TextViewの用途が変わるのでIDも変更します。\n{% img /android/08-AppDataBase/addrecycler04.png 450 Add RecyclerView %}\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |EmptyRecyclerText    |\n|text          |検索履歴はありません    |\n|visibility    |invisible            |\n\nテキストの配置が不恰好なので位置を調整します、TextViewの文字位置の調整は\"textAlignment\"属性を修正します。\n\"textAlignment\"属性は基本属性の画面には表示されておらず、全属性を表示する詳細ウィンドウに切り替える必要があります、詳細ウィンドウへの切り替えはAttributesウィンドウの左右に矢印のアイコンをクリックします。\n{% img /android/08-AppDataBase/addrecycler04.png 450 Add RecyclerView %}\n\"textAlignment\"属性を探し、\"center\"を選択して完了です。\n\n## 検索歴一覧画面一覧表示実装\n検索履歴一覧画面の行レイアウトを作成していきます。\n新規でxmlレイアウトファイルを作成し、検索日時と検索時の文字列を表示する行レイアウトを作成します。\n> プロジェクトウィンドウ右クリック > New > XML > Layout XML File\n\n{% img /android/08-AppDataBase/addrowrecycler01.png 450 Add RecyclerView Row %}\nxmlレイアウトファイル名と一番上の階層になるLayoutを設定して`Finish`をクリックします\n{% img /android/08-AppDataBase/addrowrecycler02.png 450 Add RecyclerView Row %}\nデザインビューが表示されたらXMLの編集画面に切り替えてレイアウトを実装していきます。\nデザインエリアの左したにある**Text**と書かれてるタブをクリックします。\n{% img /android/08-AppDataBase/addrowrecycler03.png 450 Add RecyclerView Row %}\n検索履歴一覧画面の行レイアウトはLinearLayoutという初期からあるレイアウトコンポーネントを使います、またXMLを使った実装も試していきます。\n```XML row_history_recycle.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n    <TextView\n        android:id=\"@+id/RowHistoryDate\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"8dp\"\n        android:textSize=\"14dp\"\n        tools:text=\"蔵書検索した日付を表示\"/>\n\n    <TextView\n        android:id=\"@+id/RowHistoryTerm\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"8dp\"\n        android:textSize=\"20dp\"\n        tools:text=\"蔵書検索した文字列を表示\"/>\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n</LinearLayout>\n```\ntoolsを設定する際にもjavaクラスでのimportと同じように自動的に追加が可能ですので、`tools:text..`と入力した後に`tools`にマウスカーソルでクリックし、以下のようにツールチップが表示されたら\nWindowsの場合は[Alt + insert],Macの場合は[option + Enter]でxml内での参照が追加されます。\n{% img /android/08-AppDataBase/addrowrecycler04.png 500 Add RecyclerView Row %}\n\nこの`tools`という属性ですが、プレビューの際にだけ反映される項目を設定できる属性になります。そのため**アプリを実行した際には追加した２つのTextViewはプログラム上、表示する文字列を持っていない状態**となります。。\n\nそして上記xmlファイルで初めて利用した`LinearLayout`というコンポーネントは縦もしくは横どちらか一方方向に子Viewを並べて表示するという特性を持っています。\n縦横の設定は`orientation`属性を使用します。\n\n|設定値     |並べて表示する方向              |\n|:---------|:----------------------------|\n|horizontal|横(左から右)へ子Viewを並べて表示 |\n|vertical  |縦(上から下)へ子Viewを並べて表示 |\n\n`orientation`属性が設定されていない場合は**horizontal**が設定されたと認識され、不具合通知は表示されないので注意しましょう。\n\nXMLでレイアウトの実装を行う時に気をつけるポイントとして`layout_width`属性、`layout_height`属性があります。\n設定できる値とその意味合いをそれぞれ記述します。\n\n|設定値                |設定値の意味                   |\n|:--------------------|:----------------------------|\n|wrap_content         |要素の表示に必要な領域を自動的に確保 |\n|match_parent         |親要素と同じ幅(縦/横)に設定        |\n|match_constraint(0dp)|親要素と同じ幅(縦/横)に設定ConstraintLayoutの場合で\"Design\"タブを開いている場合に設定できる。xml上の値は\"0dp\" |\n|fill_parent          |親要素と同じ幅(縦/横)に設定Android OS 2.2(API Level 8)以降は非推奨 |\n\nアプリ開発の上で端末の種類が多いAndroidでは固定値を設定することはほぼレイアウト崩れに直結するので基本的には\"wrap_content\"や\"match_parent\"を使い隣接するViewとのスペース設定で調整することになると思います。\n\n行レイアウトができたので行ごとの表示プロセスを担当するAdapterクラスを実装していきます。\n一覧表示を行うViewを使う場合、Adapterクラスを継承して独自のレイアウト表示する方法はListViewと一緒です。\nRecyclerViewには`RecyclerView.Adapter`というRecyclerView用のAdapterクラスがあるのでこれを継承した独自クラスを作成します。\n{% img /android/08-AppDataBase/addadapter01.png 400 Add RecyclerView Adapter %}\nクラス作成時の設定項目を入力したら`OK`をクリックします\n{% img /android/08-AppDataBase/addadapter02.png 400 Add RecyclerView Adapter %}\n`HistoryRecyclerAdapter.java`が表示されたら<font color=\"red\">赤い電球</font>アイコンをクリックします。\n{% img /android/08-AppDataBase/addadapter03.png 500 Add RecyclerView Adapter %}\n表示された小さいウィンドウから*Implement methods*をクリックします。\n{% img /android/08-AppDataBase/addadapter04.png 500 Add RecyclerView Adapter %}\n３つのメソッドが選択状態（背景が青色）になっていることを確認し`OK`をクリックします。\n{% img /android/08-AppDataBase/addadapter05.png 300 Add RecyclerView Adapter %}\n選択した３つのメソッドが`HistoryRecyclerAdapter.java`に表示されたら新しいクラスの作成は完了です。\n{% img /android/08-AppDataBase/addadapter06.png 500 Add RecyclerView Adapter %}\n検索結果画面では利用していませんでしたが、検索履歴一覧画面では**ViewHolderパターン**での実装を行います。\n> **ViewHolderパターン**とはスクロールするたびにViewを生成/抽出(findViewById)などの処理コストが高く描画に時間がかかってしまうため、一度生成したViewHolderを再利用することでコストを軽減するパターンを指します。\n\n`HistoryRecyclerAdapter`の主なメソッドを実装する前にViewHolderの実装を行なっていきます。\n```java HistoryRecyclerAdapter.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class HistoryRecyclerAdapter extends RecyclerView.Adapter<HistoryRecyclerAdapter.HistoryHolder> {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    @Override\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        return null;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    @Override\n    public int getItemCount() {\n        return 0;\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ViewHolderパターンクラス\n    class HistoryHolder extends RecyclerView.ViewHolder {\n        // Rowレイアウトと関連づけるコンポーネントを宣言\n        public TextView historyDate;\n        public TextView historyTerm;\n\n        // コンストラクタ\n        public HistoryHolder(View itemView) {\n            super(itemView);\n            // xmlファイルと関連付け\n            historyDate = itemView.findViewById(R.id.RowHistoryDate);\n            historyTerm = itemView.findViewById(R.id.RowHistoryTerm);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記の実装で**ViewHolderパターン**での実装は完了です。\n続いて履歴データを表示するための実装を進めます。\n修正箇所等かなり多いので追加、修正箇所に注意しながら実装を進めてください。\n```java HistoryRecyclerAdapter.java\npublic class HistoryRecyclerAdapter extends RecyclerView.Adapter<HistoryRecyclerAdapter.HistoryHolder> {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 表示に必要なクラスを宣言\n    private Context context;\n    private LayoutInflater inflater;\n    private RealmResults<SearchHistoryModel> historyData;\n\n    // コンストラクタ\n    public HistoryRecyclerAdapter(Context context, RealmResults<SearchHistoryModel> historyData) {\n        // レイアウトのインスタンス化に必要なクラス\n        this.context = context;\n        this.inflater = LayoutInflater.from(context);\n        // 表示するデータリスト\n        this.historyData = historyData;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 表示するレイアウトを指定するメソッド\n    @Override\n    public HistoryHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        // row_history_recycleのレイアウトをインスタンス化\n        View view = inflater.inflate(R.layout.row_history_recycle, parent, false);\n        // HistoryHolderクラスをインスタンス化して返却する\n        return new HistoryHolder(view);\n    }\n\n    // 表示するレイアウトにデータを設定するメソッド\n    @Override\n    public void onBindViewHolder(HistoryHolder holder, int position) {\n        // 検索履歴一覧から一つの履歴データを抽出\n        SearchHistoryModel history = historyData.get(position);\n        // ViewHolderにデータをセット\n        holder.historyDate.setText(history.getSearchDate());\n        holder.historyTerm.setText(history.getSearchTerm());\n    }\n\n    // 表示するリストの件数を指定するメソッド\n    @Override\n    public int getItemCount() {\n        // RealmDBから取得した検索履歴全件分、行の表示処理を繰り返す\n        return historyData.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n}\n```\n\n```java HistoryActivity.java\npublic class HistoryActivity extends AppCompatActivity {\n\n    // Realmインスタンスを宣言\n    private Realm realm;\n    // 履歴0件用TextView\n    private TextView historyTextView;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索履歴RecyclerView\n    private RecyclerView historyRecycler;\n    // 検索履歴RecyclerAdapter\n    private HistoryRecyclerAdapter historyAdapter;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 検索履歴抽出データ\n    RealmResults<SearchHistoryModel> resultData;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_history);\n\n        // 画面コンポーネント関連付け\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        historyTextView = findViewById(R.id.EmptyRecyclerText);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        historyRecycler = findViewById(R.id.HistoryRecycler);\n        // Realmクラスをインスタンス化\n        realm = Realm.getDefaultInstance();\n        // 検索履歴テーブルのデータを全て取得\n        resultData = realm.where(SearchHistoryModel.class).findAll();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する\n        if (!resultData.isEmpty() && resultData.size() > 0) {\n            // adapterクラスをインスタンス化\n            historyAdapter = new HistoryRecyclerAdapter(this, resultData);\n            // RecyclerViewの表示形式を決める\n            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);\n            // RecyclerViewの初期設定\n            historyRecycler.setAdapter(historyAdapter);\n            historyRecycler.setLayoutManager(layoutManager);\n        } else {\n            // 検索履歴の件数が１件もない場合、履歴0件のメッセージを表示する\n            // 検索履歴一覧を非表示に設定\n            historyRecycler.setVisibility(View.GONE);\n            historyTextView.setVisibility(View.VISIBLE);\n        }\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    ...一部省略\n}\n```\n最後に`historyTextView`ですが、変数としての意味合いが変わっているので変数名を変更します。\nただ、一箇所づつの変更は手間なので一気に全箇所が変更される方法をで修正します。\n変数名にマウスカーソルを当て右クリックから\n> Refactor -> Rename...\n\nをクリックします\n{% img /android/08-AppDataBase/refactvalid01.png 500 Refactor Valid Name %}\n変更する変数名が赤枠で囲われるので変数名を修正します。\n{% img /android/08-AppDataBase/refactvalid02.png 500 Refactor Valid Name %}\n変数名の修正に合わせて他に使用されている同変数も修正されているのがわかります。\n変数名の修正が終わったわ`Enter`キーを押下し完了です。\n{% img /android/08-AppDataBase/refactvalid03.png 500 Refactor Valid Name %}\n\n上記までコードを実装したら動作確認します。\n正常な動作では閲覧履歴ボタンをクリックし、画面遷移した検索履歴一覧画面に検索した文字列のリストが表示されます。\n\n以上で検索履歴一覧画面の実装は完了です。\n次の[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)では蔵書の詳細情報を表示する画面を作成しながらFragmentクラスの使い方やJson文字列の効率的なパースライブラリの使い方などを学習していきます。\n\n[Realm]: https://realm.io/docs/java/latest","slug":"08-AppDataBase","published":1,"updated":"2018-05-08T12:52:40.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0qt00083l61zz0ylal8","content":"<p>検索履歴一覧画面を作成/実装しながらアプリ内データベースの利用方法を学習する。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#新しい画面を作成する\">新しい画面を作成する</a></li>\n<li><a href=\"#画面遷移処理機能\">画面遷移処理機能</a></li>\n<li><a href=\"#realmデータベースの導入\">Realmデータベースの導入</a></li>\n<li><a href=\"#検索履歴機能\">検索履歴機能</a><ul>\n<li><a href=\"#applicationクラス作成\">Applicationクラス作成</a></li>\n<li><a href=\"#realmobject作成\">RealmObject作成</a></li>\n<li><a href=\"#履歴登録機能\">履歴登録機能</a></li>\n</ul>\n</li>\n<li><a href=\"#検索履歴一覧画面リスト表示対応\">検索履歴一覧画面リスト表示対応</a><ul>\n<li><a href=\"#検索履歴一覧画面レイアウト修正\">検索履歴一覧画面レイアウト修正</a></li>\n<li><a href=\"#検索歴一覧画面一覧表示実装\">検索歴一覧画面一覧表示実装</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/07-AsyncProcess\">蔵書検索機能の作成</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>Realmデータベースの使い方</li>\n<li>RecyclerView, RecyclerViewAdapterの使い方</li>\n</ul>\n<p>Realmというデータベースライブラリを使いアプリが閉じたり端末電源が落ちた後でもデータが残る機能を使って検索を行った条件を保存しておき、過去の履歴が確認できる画面を作っていきます。<br>また、検索結果画面で使ったListViewとは別にRecyclerViewというListViewよりも自由度の高い一覧表示ができるコンポーネントを学習します。</p>\n<h1><span id=\"新しい画面を作成する\">新しい画面を作成する</span></h1><p>検索履歴一覧画面の実装を進めるために、新しくActivityを作成します。</p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行います。</p>\n<p>新しく作成するActivityは<strong>Empty Activity</strong>を選びます。</p>\n<ul>\n<li>メニュー &gt; File &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_1.png\" width=\"500\" title=\"CreateNewActivity\"></li>\n<li>ウィンドウ右クリック &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_2.png\" width=\"500\" title=\"CreateNewActivity\">\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Activity Name</td>\n<td>HistoryActivity</td>\n</tr>\n<tr>\n<td>Generate Layout File</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Layout Name</td>\n<td>activity_history</td>\n</tr>\n<tr>\n<td>Luncher Activity</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Backwords Compatibility(AppCompat)</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n</tbody>\n</table>\n<img src=\"/AndroidCourse/android/08-AppDataBase/crehistactivity.png\" width=\"500\" title=\"CreateNewActivity\">\n<p>項目の入力が終わったら<code>Finish</code>ボタンをクリックします。</p>\n<p>AndroidStudioでは作成したActivityのエディタ画面が表示されます。</p>\n<h1><span id=\"画面遷移処理機能\">画面遷移処理機能</span></h1><p>検索履歴一覧画面、<code>HistoryActivity</code>ができたので<code>MainActivity</code>からの画面遷移処理を実装します。<br>“検索履歴”ボタンはまだ画面との関連付けを実装していないので、関連付けから実装します。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button historyBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">// Timerクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに帰って来るためのハンドラー</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ハンドラーオブジェクトをMainThreadでインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンを関連付ける</span></span><br><span class=\"line\">        historyBtn = findViewById(R.id.HistoryBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">        historyBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, HistoryActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1><span id=\"realmデータベースの導入\">Realmデータベースの導入</span></h1><p><strong><a href=\"https://realm.io/docs/java/latest\" target=\"_blank\" rel=\"external\">Realm</a></strong>データベースは次世代次世代モバイル向けデータベースと言われており、データ抽出速度など基本的な機能が既存のモバイル向けデータベースより優れている点、またデータの登録、更新などの際に必要だったSQLと呼ばれるデータベースを操作する言語の学習も不要になっている点が大きい。</p>\n<p>では実際に導入していきます。<br>ライブラリの導入には<code>build.gradle</code>を修正します、今回はプロジェクト階層の<code>build.gradle</code>ファイルです。</p>\n<p>ファイルの”dependencies”にRealmの設定を追記します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm01.png\" width=\"450\" title=\"Include Realm\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Project: ***)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:3.0.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">\"io.realm:realm-gradle-plugin:4.3.3\"</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>続いて<strong>Module</strong>階層の<code>build.gradle</code>も修正します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm02.png\" width=\"450\" title=\"Include Realm\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'realm-android'</span></span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">26</span></span><br><span class=\"line\">    defaultConfig &#123;...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>２つの<code>build.gradle</code>コードを修正したら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm03.png\" width=\"650\" title=\"Include Realm\"><br>Gradleの同期処理が実行されるので同期処理の終了にて<strong>Realm</strong>ライブラリの導入は完了です。</p>\n<h1><span id=\"検索履歴機能\">検索履歴機能</span></h1><p>Realmデータベースを使うにはアプリの起動した時（MainActivity）など起動時画面が表示されるより前にRealmのインスタンスを初期化する必要があります。<br>起動時画面が表示される前にアプリ全体を管理する<code>Application</code>というクラスのライフサイクルが実行され、Activityが表示されています。<br>デフォルトのプロジェクトには<code>Application</code>クラスは存在せずAndroid SDK側で自動的に処理されています、そのため必要に応じて<code>Application</code>クラスを継承した自作クラスを作って実装していきます。</p>\n<h2><span id=\"applicationクラス作成\">Applicationクラス作成</span></h2><p>新規Javaファイルを作成します</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create Custom Application\">\n<p>新しいクラスの作成に関する設定を行ったら<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm01.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>BDApplication</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>android.app.Application</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p><code>Application</code>クラスが作成されたら、Realmのインスタンス化を実装します。<br>エラーはないですが、メソッドが実装されていないのでデベロッパが実装する必要があります。<br>Realmのインスタンス化までを実装します。<br><strong>開発時の便利ショートカットの紹介です。</strong><br>コンストラクタや継承メソッドやインターフェースメソッド(インターフェースは後で解説します)を自動的に実装してくれる<em>“Generate”</em>ショートカットがありますOSごとにコマンドは違いますが、<code>BDApplication.java</code>を表示して以下のコマンドを入力します。</p>\n<ul>\n<li>Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Insert</kbd></li>\n<li>Macの場合：<kbd>command</kbd><kbd>+</kbd><kbd>n</kbd></li>\n</ul>\n<p>以下のウィンドウが表示されるので、今回は<strong><em>Override Methoeds…</em></strong>を選択します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm02.png\" width=\"400\" title=\"Create Custom Application\"><br>次のウィンドウでは<strong><em>onCreate():void</em></strong>を選択し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm03.png\" width=\"300\" title=\"Create Custom Application\"><br>以下の様に選択したメソッドがクラスに実装されます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm04.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<p>ではRealmインスタンスを初期化していきます。<br><figure class=\"highlight java\"><figcaption><span>BDApplication.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BDApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Realmをインスタンス化</span></span><br><span class=\"line\">        Realm.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Realm データベースを設定</span></span><br><span class=\"line\">        RealmConfiguration conf = <span class=\"keyword\">new</span> RealmConfiguration.Builder().name(<span class=\"string\">\"BookDiscovery.realm\"</span>).build();</span><br><span class=\"line\">        Realm.setDefaultConfiguration(conf);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>作成したカスタムApplicationクラスはこのままでは実行されません、Activityよりも階層にしてみれば上に位置するものなのでActivityからも設定することはできません。<br>ここで出てくるのが<code>AndroidManifest.xml</code>です、API通信の実装の時にはインターネット通信を許可する設定を追記しました、今回は実行するApplicationクラスを設定を変更します。<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Androidアプリでインターネット通信を許可する設定 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\">        &lt;!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ --&gt;</span><br><span class=\"line\">        android:name=\".BDApplication\"</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\">        android:allowBackup=\"true\"</span><br><span class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</span><br><span class=\"line\">        android:label=\"@string/app_name\"</span><br><span class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</span><br><span class=\"line\">        android:supportsRtl=\"true\"</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 一部省略  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 一部省略  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上記で初期化、および<code>カスタムApplication</code>クラスの反映が完了しました。</p>\n<h2><span id=\"realmobject作成\">RealmObject作成</span></h2><p>通常データベースにはテーブルという概念があります、テーブルとは複数の項目とその項目に沿ったデータを複数もった表のようなもので、表で再現すると以下のようなデータの持ち方をしています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">検索日付</th>\n<th>検索文字列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">2018/2/6 13:02</td>\n<td>東京都</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/6 13:25</td>\n<td>Android入門</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/6 14:03</td>\n<td>ごはんのお供</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/13 16:46</td>\n<td>ミステリー小説</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/13 17:11</td>\n<td>プログラマー三代美徳</td>\n</tr>\n</tbody>\n</table>\n<p>例えば上記の表を<em>SearchHistory</em>というテーブルとした場合<br><blockquote><p><em>SearchHistory</em>テーブル[表]は”検索日付”、”検索文字列”というカラム[列、項目]を持ち、現状は５ロウ(Row)[行]分のデータを持っている。</p>\n</blockquote><br>と言い換えることができます。</p>\n<p>Realmでは上記のテーブルを<code>RealmObject</code>クラスを継承した自作クラスを作成するだけでテーブル構成が完成します。<br>今回作成する検索履歴機能は上記の表と同じ構成で作成します、新規javaファイルの作成から実装していきましょう。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create Custom Application\">\n<p>新しいクラスの作成に関する設定を行ったら<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm05.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>SearchHistoryModel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>io.realm.RealmObject</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>上記で作成された<code>SearchHistoryModel</code>クラスがテーブル（表）になります。<br>次にカラム(列)を作っていきます。<br><figure class=\"highlight java\"><figcaption><span>SearchHistoryModel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchHistoryModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">RealmObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索日時カラム</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String searchDate;</span><br><span class=\"line\">    <span class=\"comment\">// 検索文字列カラム</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String searchTerm;</span><br><span class=\"line\">\t<span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>次に各カラムのデータを参照、代入するメソッドを実装します。<br>それぞれ参照を<strong>ゲッター(getter)</strong>、代入を<strong>セッター(setter)</strong>と呼びます。<br><code>SearchHistoryModel</code>クラスを開いた状態で、<em>“Generate”</em>ショートカットを入力して<strong>Getter and Setter</strong>を選択します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable01.png\" width=\"400\" title=\"Create Custom Table\"><br>表示された２項目を選択し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable02.png\" width=\"300\" title=\"Create Custom Table\"><br>以下の通り４つのメソッドが追加されれば完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable03.png\" width=\"550\" title=\"Create Custom Table\"></p>\n<p>このように複数のデータを管理するためのクラスを<strong>モデルクラス</strong>と呼びます。<br>リスト構造の表示を行いたいときなどモデルクラスのように表示したい項目をまとめて保存しておくことでデータの管理が簡潔になり、プログラムが未訳なります。</p>\n<h2><span id=\"履歴登録機能\">履歴登録機能</span></h2><p>登録先となるRealmObjectが完成したので、実際にRealmDBへの登録処理を実装します。<br>今回データの登録タイミングは検索結果画面へ遷移する前とします。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を取得</span></span><br><span class=\"line\">            String termString = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// Realmインスタンスを生成</span></span><br><span class=\"line\">            Realm realm = Realm.getDefaultInstance();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴テーブルへのアクセスを開始</span></span><br><span class=\"line\">                realm.beginTransaction();</span><br><span class=\"line\">                <span class=\"comment\">// 新規検索履歴データを作成</span></span><br><span class=\"line\">                SearchHistoryModel history = realm.createObject(SearchHistoryModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// 検索文字列カラムにデータを登録</span></span><br><span class=\"line\">                history.setSearchTerm(termString);</span><br><span class=\"line\">                <span class=\"comment\">// 現在時刻を文字列で取得する</span></span><br><span class=\"line\">                Date now = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">                <span class=\"comment\">// 現在時刻を定まった形式で文字列に変換</span></span><br><span class=\"line\">                String dateStr = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy/MM/dd HH:mm\"</span>).format(now);</span><br><span class=\"line\">                <span class=\"comment\">// 現在日時の文字列をカラムデータに登録</span></span><br><span class=\"line\">                history.setSearchDate(dateStr);</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴テーブルへのアクセスを終了</span></span><br><span class=\"line\">                realm.commitTransaction();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Realmインスタンスがちゃんとクローズされること</span></span><br><span class=\"line\">                realm.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 検索結果画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"terms\"</span>, termString);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記の実装でRealm DBへのデータ登録処理は完了です。<br>モバイル向けデータベースのデメリットとして中身を直接確認しにくいという点があるのですが、これはRealmDBも同様です。<br>RealmにはGUIでデータを確認するアプリがありますが、データを保存した<code>BookDiscovery.realm</code>を取り出すのに手間がかかるため、実際に読み込んで参照した方がデータの確認は早いのです。</p>\n<p>データ確認のため、検索履歴一覧画面にTextViewを配置しRealmから<code>SearchHistoryModel</code>の内容を全て抽出し、表示してみます。<br>検索履歴一覧画面のレイアウトファイルを開きます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_history.xml</p>\n</blockquote>\n<p><code>activity_history.xml</code>を表示したら、”TextView”を画面に配置します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm01.png\" width=\"550\" title=\"realmconfirm\"><br>画面の上下左右と制約を設定します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm02.png\" width=\"550\" title=\"realmconfirm\"><br>最後に<strong>Attributes</strong>エリアから属性を設定します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm03.png\" width=\"550\" title=\"realmconfirm\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>HistoryText</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_sonstraint</td>\n</tr>\n<tr>\n<td>text</td>\n<td>テキストなし</td>\n</tr>\n</tbody>\n</table>\n<p>上記の表の通り、入力が完了したらレイアウトは一旦OKです！<br>最後に<code>HistoryActivity.java</code>でRealm Realm DBからデータを取得し、配置したTextViewに表示させていきます。<br><figure class=\"highlight java\"><figcaption><span>HistoryActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// Realmインスタンスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Realm realm;</span><br><span class=\"line\">    <span class=\"comment\">// 画面紐付けコンポーネントを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView historyTextView;</span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RealmResults&lt;SearchHistoryModel&gt; resultData;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_history);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面コンポーネント関連付け</span></span><br><span class=\"line\">        historyTextView = findViewById(R.id.HistoryText);</span><br><span class=\"line\">        <span class=\"comment\">// Realmクラスをインスタンス化</span></span><br><span class=\"line\">        realm = Realm.getDefaultInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">        resultData = realm.where(SearchHistoryModel.class).findAll();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultData.isEmpty() &amp;&amp; resultData.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴テーブルの行数分、繰り返し処理を実行する</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resultData.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面のtextViewに検索文字列を随時結合して表示する</span></span><br><span class=\"line\">                historyTextView.setText(historyTextView.getText() + resultData.get(i).getSearchTerm());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">// Realmインスタンスをちゃんとクローズすること</span></span><br><span class=\"line\">        realm.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記のコードを実装したら動作確認します。<br>動作確認の手順として以下の手順で操作を行い、[1.]のタイミングに入力した文字列が検索履歴一覧画面に表示されれば成功です。</p>\n<ol>\n<li>EditTextに何かしらの文字列を入力</li>\n<li>“蔵書検索”ボタンをクリック</li>\n<li>Androidエミュレータ(または実機)のバックボタンをクリック</li>\n<li>“検索履歴”ボタンをクリック</li>\n</ol>\n<p>Realmデータベースの基礎的な使い方は以上です。</p>\n<p>上記のコードでは新しく<code>onDestroy</code>というライフサイクルメソッドが登場しました、この<code>onDestroy</code>はActivityを表示するために保持しておいた領域を解放する前に実行されるメソッドです。<br>RealmインスタンスはActivityごとにインスタンス化して使用しているため、Activityが解放される前にRealmの領域も解放しないといけません、<strong>Realmの解放を忘れるとアプリの強制終了の原因にもなり得る</strong>のでRealmを利用する場合は注意して実装を行います。</p>\n<h1><span id=\"検索履歴一覧画面リスト表示対応\">検索履歴一覧画面リスト表示対応</span></h1><p>Realmにて検索した文字列が正常に保存されていることが確認できましたが、現状とても見難いレイアウトです、これをリスト表示にしていきます。</p>\n<p>検索履歴一覧画面での一覧表示には”ListView”ではなく、<strong>RecyclerView</strong>というコンポーネントを利用します。</p>\n<p><strong>RecyclerView</strong>は”Android API 22”の頃に追加されたコンポーネントでListViewや格子状にViewを表示するGridViewよりさらに自由な配置を行えるようになった一覧表示コンポーネントです。<br>またListViewやGridViewに比べ軽い動作が行えることから最近ではこちらのコンポーネントで一覧画面を作ることが増えています。</p>\n<h2><span id=\"検索履歴一覧画面レイアウト修正\">検索履歴一覧画面レイアウト修正</span></h2><p><strong>RecyclerView</strong>コンポーネントは以下の場所にあります。</p>\n<blockquote>\n<p>Palette -&gt; AppCmpat -&gt; RecyclerView</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler01.png\" width=\"450\" title=\"Add RecyclerView\">\n<p>続いて制約の設定です。<br>コンポーネントが端に寄っていて設定しにくい場合、少し上下させて右端/左端にドラッグ&amp;ドロップするとやりやすいです。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler02.png\" width=\"300\" title=\"Add RecyclerView\"><br>制約設定が終わったら<strong>RecyclerView</strong>の属性を設定していきます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler03.png\" width=\"450\" title=\"Add RecyclerView\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>HistoryRecycler</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_constraint</td>\n</tr>\n<tr>\n<td>layout_height</td>\n<td>match_constraint</td>\n</tr>\n</tbody>\n</table>\n<p>先ほど表示していたTextView(ID:HistoryText)は履歴が０件だった場合のメッセージを表示するように修正します、TextViewの用途が変わるのでIDも変更します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler04.png\" width=\"450\" title=\"Add RecyclerView\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>EmptyRecyclerText</td>\n</tr>\n<tr>\n<td>text</td>\n<td>検索履歴はありません</td>\n</tr>\n<tr>\n<td>visibility</td>\n<td>invisible</td>\n</tr>\n</tbody>\n</table>\n<p>テキストの配置が不恰好なので位置を調整します、TextViewの文字位置の調整は”textAlignment”属性を修正します。<br>“textAlignment”属性は基本属性の画面には表示されておらず、全属性を表示する詳細ウィンドウに切り替える必要があります、詳細ウィンドウへの切り替えはAttributesウィンドウの左右に矢印のアイコンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler04.png\" width=\"450\" title=\"Add RecyclerView\"><br>“textAlignment”属性を探し、”center”を選択して完了です。</p>\n<h2><span id=\"検索歴一覧画面一覧表示実装\">検索歴一覧画面一覧表示実装</span></h2><p>検索履歴一覧画面の行レイアウトを作成していきます。<br>新規でxmlレイアウトファイルを作成し、検索日時と検索時の文字列を表示する行レイアウトを作成します。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; XML &gt; Layout XML File</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler01.png\" width=\"450\" title=\"Add RecyclerView Row\">\n<p>xmlレイアウトファイル名と一番上の階層になるLayoutを設定して<code>Finish</code>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler02.png\" width=\"450\" title=\"Add RecyclerView Row\"><br>デザインビューが表示されたらXMLの編集画面に切り替えてレイアウトを実装していきます。<br>デザインエリアの左したにある<strong>Text</strong>と書かれてるタブをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler03.png\" width=\"450\" title=\"Add RecyclerView Row\"><br>検索履歴一覧画面の行レイアウトはLinearLayoutという初期からあるレイアウトコンポーネントを使います、またXMLを使った実装も試していきます。<br><figure class=\"highlight xml\"><figcaption><span>row_history_recycle.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/RowHistoryDate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"14dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書検索した日付を表示\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/RowHistoryTerm\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書検索した文字列を表示\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>toolsを設定する際にもjavaクラスでのimportと同じように自動的に追加が可能ですので、<code>tools:text..</code>と入力した後に<code>tools</code>にマウスカーソルでクリックし、以下のようにツールチップが表示されたら<br>Windowsの場合は[Alt + insert],Macの場合は[option + Enter]でxml内での参照が追加されます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler04.png\" width=\"500\" title=\"Add RecyclerView Row\"></p>\n<p>この<code>tools</code>という属性ですが、プレビューの際にだけ反映される項目を設定できる属性になります。そのため<strong>アプリを実行した際には追加した２つのTextViewはプログラム上、表示する文字列を持っていない状態</strong>となります。。</p>\n<p>そして上記xmlファイルで初めて利用した<code>LinearLayout</code>というコンポーネントは縦もしくは横どちらか一方方向に子Viewを並べて表示するという特性を持っています。<br>縦横の設定は<code>orientation</code>属性を使用します。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">設定値</th>\n<th style=\"text-align:left\">並べて表示する方向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">horizontal</td>\n<td style=\"text-align:left\">横(左から右)へ子Viewを並べて表示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vertical</td>\n<td style=\"text-align:left\">縦(上から下)へ子Viewを並べて表示</td>\n</tr>\n</tbody>\n</table>\n<p><code>orientation</code>属性が設定されていない場合は<strong>horizontal</strong>が設定されたと認識され、不具合通知は表示されないので注意しましょう。</p>\n<p>XMLでレイアウトの実装を行う時に気をつけるポイントとして<code>layout_width</code>属性、<code>layout_height</code>属性があります。<br>設定できる値とその意味合いをそれぞれ記述します。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">設定値</th>\n<th style=\"text-align:left\">設定値の意味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">wrap_content</td>\n<td style=\"text-align:left\">要素の表示に必要な領域を自動的に確保</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">match_parent</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">match_constraint(0dp)</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定ConstraintLayoutの場合で”Design”タブを開いている場合に設定できる。xml上の値は”0dp”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fill_parent</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定Android OS 2.2(API Level 8)以降は非推奨</td>\n</tr>\n</tbody>\n</table>\n<p>アプリ開発の上で端末の種類が多いAndroidでは固定値を設定することはほぼレイアウト崩れに直結するので基本的には”wrap_content”や”match_parent”を使い隣接するViewとのスペース設定で調整することになると思います。</p>\n<p>行レイアウトができたので行ごとの表示プロセスを担当するAdapterクラスを実装していきます。<br>一覧表示を行うViewを使う場合、Adapterクラスを継承して独自のレイアウト表示する方法はListViewと一緒です。<br>RecyclerViewには<code>RecyclerView.Adapter</code>というRecyclerView用のAdapterクラスがあるのでこれを継承した独自クラスを作成します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter01.png\" width=\"400\" title=\"Add RecyclerView Adapter\"><br>クラス作成時の設定項目を入力したら<code>OK</code>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter02.png\" width=\"400\" title=\"Add RecyclerView Adapter\"><br><code>HistoryRecyclerAdapter.java</code>が表示されたら<font color=\"red\">赤い電球</font>アイコンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter03.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>表示された小さいウィンドウから<em>Implement methods</em>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter04.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>３つのメソッドが選択状態（背景が青色）になっていることを確認し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter05.png\" width=\"300\" title=\"Add RecyclerView Adapter\"><br>選択した３つのメソッドが<code>HistoryRecyclerAdapter.java</code>に表示されたら新しいクラスの作成は完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter06.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>検索結果画面では利用していませんでしたが、検索履歴一覧画面では<strong>ViewHolderパターン</strong>での実装を行います。</p>\n<blockquote>\n<p><strong>ViewHolderパターン</strong>とはスクロールするたびにViewを生成/抽出(findViewById)などの処理コストが高く描画に時間がかかってしまうため、一度生成したViewHolderを再利用することでコストを軽減するパターンを指します。</p>\n</blockquote>\n<p><code>HistoryRecyclerAdapter</code>の主なメソッドを実装する前にViewHolderの実装を行なっていきます。<br><figure class=\"highlight java\"><figcaption><span>HistoryRecyclerAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">HistoryRecyclerAdapter</span>.<span class=\"title\">HistoryHolder</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ViewHolderパターンクラス</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Rowレイアウトと関連づけるコンポーネントを宣言</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> TextView historyDate;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TextView historyTerm;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HistoryHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">            <span class=\"comment\">// xmlファイルと関連付け</span></span><br><span class=\"line\">            historyDate = itemView.findViewById(R.id.RowHistoryDate);</span><br><span class=\"line\">            historyTerm = itemView.findViewById(R.id.RowHistoryTerm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記の実装で<strong>ViewHolderパターン</strong>での実装は完了です。<br>続いて履歴データを表示するための実装を進めます。<br>修正箇所等かなり多いので追加、修正箇所に注意しながら実装を進めてください。<br><figure class=\"highlight java\"><figcaption><span>HistoryRecyclerAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">HistoryRecyclerAdapter</span>.<span class=\"title\">HistoryHolder</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示に必要なクラスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater inflater;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RealmResults&lt;SearchHistoryModel&gt; historyData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HistoryRecyclerAdapter</span><span class=\"params\">(Context context, RealmResults&lt;SearchHistoryModel&gt; historyData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// レイアウトのインスタンス化に必要なクラス</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inflater = LayoutInflater.from(context);</span><br><span class=\"line\">        <span class=\"comment\">// 表示するデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.historyData = historyData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示するレイアウトを指定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HistoryHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// row_history_recycleのレイアウトをインスタンス化</span></span><br><span class=\"line\">        View view = inflater.inflate(R.layout.row_history_recycle, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// HistoryHolderクラスをインスタンス化して返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HistoryHolder(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示するレイアウトにデータを設定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(HistoryHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴一覧から一つの履歴データを抽出</span></span><br><span class=\"line\">        SearchHistoryModel history = historyData.get(position);</span><br><span class=\"line\">        <span class=\"comment\">// ViewHolderにデータをセット</span></span><br><span class=\"line\">        holder.historyDate.setText(history.getSearchDate());</span><br><span class=\"line\">        holder.historyTerm.setText(history.getSearchTerm());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示するリストの件数を指定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// RealmDBから取得した検索履歴全件分、行の表示処理を繰り返す</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> historyData.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>HistoryActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Realmインスタンスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Realm realm;</span><br><span class=\"line\">    <span class=\"comment\">// 履歴0件用TextView</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView historyTextView;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴RecyclerView</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerView historyRecycler;</span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴RecyclerAdapter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HistoryRecyclerAdapter historyAdapter;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴抽出データ</span></span><br><span class=\"line\">    RealmResults&lt;SearchHistoryModel&gt; resultData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_history);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 画面コンポーネント関連付け</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        historyTextView = findViewById(R.id.EmptyRecyclerText);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        historyRecycler = findViewById(R.id.HistoryRecycler);</span><br><span class=\"line\">        <span class=\"comment\">// Realmクラスをインスタンス化</span></span><br><span class=\"line\">        realm = Realm.getDefaultInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">        resultData = realm.where(SearchHistoryModel.class).findAll();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultData.isEmpty() &amp;&amp; resultData.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// adapterクラスをインスタンス化</span></span><br><span class=\"line\">            historyAdapter = <span class=\"keyword\">new</span> HistoryRecyclerAdapter(<span class=\"keyword\">this</span>, resultData);</span><br><span class=\"line\">            <span class=\"comment\">// RecyclerViewの表示形式を決める</span></span><br><span class=\"line\">            RecyclerView.LayoutManager layoutManager = <span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"comment\">// RecyclerViewの初期設定</span></span><br><span class=\"line\">            historyRecycler.setAdapter(historyAdapter);</span><br><span class=\"line\">            historyRecycler.setLayoutManager(layoutManager);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴の件数が１件もない場合、履歴0件のメッセージを表示する</span></span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴一覧を非表示に設定</span></span><br><span class=\"line\">            historyRecycler.setVisibility(View.GONE);</span><br><span class=\"line\">            historyTextView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最後に<code>historyTextView</code>ですが、変数としての意味合いが変わっているので変数名を変更します。<br>ただ、一箇所づつの変更は手間なので一気に全箇所が変更される方法をで修正します。<br>変数名にマウスカーソルを当て右クリックから</p>\n<blockquote>\n<p>Refactor -&gt; Rename…</p>\n</blockquote>\n<p>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid01.png\" width=\"500\" title=\"Refactor Valid Name\"><br>変更する変数名が赤枠で囲われるので変数名を修正します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid02.png\" width=\"500\" title=\"Refactor Valid Name\"><br>変数名の修正に合わせて他に使用されている同変数も修正されているのがわかります。<br>変数名の修正が終わったわ<code>Enter</code>キーを押下し完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid03.png\" width=\"500\" title=\"Refactor Valid Name\"></p>\n<p>上記までコードを実装したら動作確認します。<br>正常な動作では閲覧履歴ボタンをクリックし、画面遷移した検索履歴一覧画面に検索した文字列のリストが表示されます。</p>\n<p>以上で検索履歴一覧画面の実装は完了です。<br>次の<a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>では蔵書の詳細情報を表示する画面を作成しながらFragmentクラスの使い方やJson文字列の効率的なパースライブラリの使い方などを学習していきます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>検索履歴一覧画面を作成/実装しながらアプリ内データベースの利用方法を学習する。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#新しい画面を作成する\">新しい画面を作成する</a></li>\n<li><a href=\"#画面遷移処理機能\">画面遷移処理機能</a></li>\n<li><a href=\"#realmデータベースの導入\">Realmデータベースの導入</a></li>\n<li><a href=\"#検索履歴機能\">検索履歴機能</a><ul>\n<li><a href=\"#applicationクラス作成\">Applicationクラス作成</a></li>\n<li><a href=\"#realmobject作成\">RealmObject作成</a></li>\n<li><a href=\"#履歴登録機能\">履歴登録機能</a></li>\n</ul>\n</li>\n<li><a href=\"#検索履歴一覧画面リスト表示対応\">検索履歴一覧画面リスト表示対応</a><ul>\n<li><a href=\"#検索履歴一覧画面レイアウト修正\">検索履歴一覧画面レイアウト修正</a></li>\n<li><a href=\"#検索歴一覧画面一覧表示実装\">検索歴一覧画面一覧表示実装</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/07-AsyncProcess\">蔵書検索機能の作成</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>Realmデータベースの使い方</li>\n<li>RecyclerView, RecyclerViewAdapterの使い方</li>\n</ul>\n<p>Realmというデータベースライブラリを使いアプリが閉じたり端末電源が落ちた後でもデータが残る機能を使って検索を行った条件を保存しておき、過去の履歴が確認できる画面を作っていきます。<br>また、検索結果画面で使ったListViewとは別にRecyclerViewというListViewよりも自由度の高い一覧表示ができるコンポーネントを学習します。</p>\n<h1 id=\"新しい画面を作成する\"><a href=\"#新しい画面を作成する\" class=\"headerlink\" title=\"新しい画面を作成する\"></a>新しい画面を作成する</h1><p>検索履歴一覧画面の実装を進めるために、新しくActivityを作成します。</p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から新しいActivityの追加を行います。</p>\n<p>新しく作成するActivityは<strong>Empty Activity</strong>を選びます。</p>\n<ul>\n<li>メニュー &gt; File &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_1.png\" width=\"500\" title=\"CreateNewActivity\"></li>\n<li>ウィンドウ右クリック &gt; New &gt; Activity &gt; Empty Activity<img src=\"/AndroidCourse/android/06-TransitionScreen/createactivity01_2.png\" width=\"500\" title=\"CreateNewActivity\">\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Activity Name</td>\n<td>HistoryActivity</td>\n</tr>\n<tr>\n<td>Generate Layout File</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Layout Name</td>\n<td>activity_history</td>\n</tr>\n<tr>\n<td>Luncher Activity</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Backwords Compatibility(AppCompat)</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n</tbody>\n</table>\n<img src=\"/AndroidCourse/android/08-AppDataBase/crehistactivity.png\" width=\"500\" title=\"CreateNewActivity\">\n<p>項目の入力が終わったら<code>Finish</code>ボタンをクリックします。</p>\n<p>AndroidStudioでは作成したActivityのエディタ画面が表示されます。</p>\n<h1 id=\"画面遷移処理機能\"><a href=\"#画面遷移処理機能\" class=\"headerlink\" title=\"画面遷移処理機能\"></a>画面遷移処理機能</h1><p>検索履歴一覧画面、<code>HistoryActivity</code>ができたので<code>MainActivity</code>からの画面遷移処理を実装します。<br>“検索履歴”ボタンはまだ画面との関連付けを実装していないので、関連付けから実装します。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button historyBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EditText bookSearchEditor;</span><br><span class=\"line\">    <span class=\"comment\">// Timerクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに帰って来るためのハンドラー</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ハンドラーオブジェクトをMainThreadでインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンをjavaプログラムで操作できるように名前をつける</span></span><br><span class=\"line\">        bookSearchBtn = findViewById(R.id.BookSearchBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンを関連付ける</span></span><br><span class=\"line\">        historyBtn = findViewById(R.id.HistoryBtn);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">        historyBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, HistoryActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Realmデータベースの導入\"><a href=\"#Realmデータベースの導入\" class=\"headerlink\" title=\"Realmデータベースの導入\"></a>Realmデータベースの導入</h1><p><strong><a href=\"https://realm.io/docs/java/latest\" target=\"_blank\" rel=\"external\">Realm</a></strong>データベースは次世代次世代モバイル向けデータベースと言われており、データ抽出速度など基本的な機能が既存のモバイル向けデータベースより優れている点、またデータの登録、更新などの際に必要だったSQLと呼ばれるデータベースを操作する言語の学習も不要になっている点が大きい。</p>\n<p>では実際に導入していきます。<br>ライブラリの導入には<code>build.gradle</code>を修正します、今回はプロジェクト階層の<code>build.gradle</code>ファイルです。</p>\n<p>ファイルの”dependencies”にRealmの設定を追記します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm01.png\" width=\"450\" title=\"Include Realm\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Project: ***)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:3.0.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">\"io.realm:realm-gradle-plugin:4.3.3\"</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>続いて<strong>Module</strong>階層の<code>build.gradle</code>も修正します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm02.png\" width=\"450\" title=\"Include Realm\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'realm-android'</span></span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">26</span></span><br><span class=\"line\">    defaultConfig &#123;...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>２つの<code>build.gradle</code>コードを修正したら右上に表示された<font color=\"blue\">Sync Now</font>リンクをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/includeRealm03.png\" width=\"650\" title=\"Include Realm\"><br>Gradleの同期処理が実行されるので同期処理の終了にて<strong>Realm</strong>ライブラリの導入は完了です。</p>\n<h1 id=\"検索履歴機能\"><a href=\"#検索履歴機能\" class=\"headerlink\" title=\"検索履歴機能\"></a>検索履歴機能</h1><p>Realmデータベースを使うにはアプリの起動した時（MainActivity）など起動時画面が表示されるより前にRealmのインスタンスを初期化する必要があります。<br>起動時画面が表示される前にアプリ全体を管理する<code>Application</code>というクラスのライフサイクルが実行され、Activityが表示されています。<br>デフォルトのプロジェクトには<code>Application</code>クラスは存在せずAndroid SDK側で自動的に処理されています、そのため必要に応じて<code>Application</code>クラスを継承した自作クラスを作って実装していきます。</p>\n<h2 id=\"Applicationクラス作成\"><a href=\"#Applicationクラス作成\" class=\"headerlink\" title=\"Applicationクラス作成\"></a>Applicationクラス作成</h2><p>新規Javaファイルを作成します</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create Custom Application\">\n<p>新しいクラスの作成に関する設定を行ったら<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm01.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>BDApplication</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>android.app.Application</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p><code>Application</code>クラスが作成されたら、Realmのインスタンス化を実装します。<br>エラーはないですが、メソッドが実装されていないのでデベロッパが実装する必要があります。<br>Realmのインスタンス化までを実装します。<br><strong>開発時の便利ショートカットの紹介です。</strong><br>コンストラクタや継承メソッドやインターフェースメソッド(インターフェースは後で解説します)を自動的に実装してくれる<em>“Generate”</em>ショートカットがありますOSごとにコマンドは違いますが、<code>BDApplication.java</code>を表示して以下のコマンドを入力します。</p>\n<ul>\n<li>Windowsの場合：<kbd>Alt</kbd><kbd>+</kbd><kbd>Insert</kbd></li>\n<li>Macの場合：<kbd>command</kbd><kbd>+</kbd><kbd>n</kbd></li>\n</ul>\n<p>以下のウィンドウが表示されるので、今回は<strong><em>Override Methoeds…</em></strong>を選択します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm02.png\" width=\"400\" title=\"Create Custom Application\"><br>次のウィンドウでは<strong><em>onCreate():void</em></strong>を選択し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm03.png\" width=\"300\" title=\"Create Custom Application\"><br>以下の様に選択したメソッドがクラスに実装されます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm04.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<p>ではRealmインスタンスを初期化していきます。<br><figure class=\"highlight java\"><figcaption><span>BDApplication.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BDApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Realmをインスタンス化</span></span><br><span class=\"line\">        Realm.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Realm データベースを設定</span></span><br><span class=\"line\">        RealmConfiguration conf = <span class=\"keyword\">new</span> RealmConfiguration.Builder().name(<span class=\"string\">\"BookDiscovery.realm\"</span>).build();</span><br><span class=\"line\">        Realm.setDefaultConfiguration(conf);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>作成したカスタムApplicationクラスはこのままでは実行されません、Activityよりも階層にしてみれば上に位置するものなのでActivityからも設定することはできません。<br>ここで出てくるのが<code>AndroidManifest.xml</code>です、API通信の実装の時にはインターネット通信を許可する設定を追記しました、今回は実行するApplicationクラスを設定を変更します。<br><figure class=\"highlight xml\"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Androidアプリでインターネット通信を許可する設定 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\">        &lt;!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ --&gt;</span><br><span class=\"line\">        android:name=\".BDApplication\"</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\">        android:allowBackup=\"true\"</span><br><span class=\"line\">        android:icon=\"@mipmap/ic_launcher\"</span><br><span class=\"line\">        android:label=\"@string/app_name\"</span><br><span class=\"line\">        android:roundIcon=\"@mipmap/ic_launcher_round\"</span><br><span class=\"line\">        android:supportsRtl=\"true\"</span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 一部省略  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">     <span class=\"comment\">&lt;!-- 一部省略  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>上記で初期化、および<code>カスタムApplication</code>クラスの反映が完了しました。</p>\n<h2 id=\"RealmObject作成\"><a href=\"#RealmObject作成\" class=\"headerlink\" title=\"RealmObject作成\"></a>RealmObject作成</h2><p>通常データベースにはテーブルという概念があります、テーブルとは複数の項目とその項目に沿ったデータを複数もった表のようなもので、表で再現すると以下のようなデータの持ち方をしています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">検索日付</th>\n<th>検索文字列</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">2018/2/6 13:02</td>\n<td>東京都</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/6 13:25</td>\n<td>Android入門</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/6 14:03</td>\n<td>ごはんのお供</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/13 16:46</td>\n<td>ミステリー小説</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2018/2/13 17:11</td>\n<td>プログラマー三代美徳</td>\n</tr>\n</tbody>\n</table>\n<p>例えば上記の表を<em>SearchHistory</em>というテーブルとした場合<br><blockquote><p><em>SearchHistory</em>テーブル[表]は”検索日付”、”検索文字列”というカラム[列、項目]を持ち、現状は５ロウ(Row)[行]分のデータを持っている。</p>\n</blockquote><br>と言い換えることができます。</p>\n<p>Realmでは上記のテーブルを<code>RealmObject</code>クラスを継承した自作クラスを作成するだけでテーブル構成が完成します。<br>今回作成する検索履歴機能は上記の表と同じ構成で作成します、新規javaファイルの作成から実装していきましょう。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/06-TransitionScreen/createadpt01.png\" width=\"500\" title=\"Create Custom Application\">\n<p>新しいクラスの作成に関する設定を行ったら<code>OK</code>ボタンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/initialrealm05.png\" width=\"500\" title=\"Create Custom Application\"></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Name</td>\n<td>SearchHistoryModel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Kind</td>\n<td>Class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Superclass</td>\n<td>io.realm.RealmObject</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Interface(s)</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Package</td>\n<td>***.***.bookbookdiscovery</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Visibility</td>\n<td>Public</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Modifiers</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p>上記で作成された<code>SearchHistoryModel</code>クラスがテーブル（表）になります。<br>次にカラム(列)を作っていきます。<br><figure class=\"highlight java\"><figcaption><span>SearchHistoryModel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchHistoryModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">RealmObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索日時カラム</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String searchDate;</span><br><span class=\"line\">    <span class=\"comment\">// 検索文字列カラム</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String searchTerm;</span><br><span class=\"line\">\t<span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>次に各カラムのデータを参照、代入するメソッドを実装します。<br>それぞれ参照を<strong>ゲッター(getter)</strong>、代入を<strong>セッター(setter)</strong>と呼びます。<br><code>SearchHistoryModel</code>クラスを開いた状態で、<em>“Generate”</em>ショートカットを入力して<strong>Getter and Setter</strong>を選択します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable01.png\" width=\"400\" title=\"Create Custom Table\"><br>表示された２項目を選択し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable02.png\" width=\"300\" title=\"Create Custom Table\"><br>以下の通り４つのメソッドが追加されれば完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/realmtable03.png\" width=\"550\" title=\"Create Custom Table\"></p>\n<p>このように複数のデータを管理するためのクラスを<strong>モデルクラス</strong>と呼びます。<br>リスト構造の表示を行いたいときなどモデルクラスのように表示したい項目をまとめて保存しておくことでデータの管理が簡潔になり、プログラムが未訳なります。</p>\n<h2 id=\"履歴登録機能\"><a href=\"#履歴登録機能\" class=\"headerlink\" title=\"履歴登録機能\"></a>履歴登録機能</h2><p>登録先となるRealmObjectが完成したので、実際にRealmDBへの登録処理を実装します。<br>今回データの登録タイミングは検索結果画面へ遷移する前とします。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">    View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// コンソールログにボタンが押されたことを出力(表示)</span></span><br><span class=\"line\">            Log.d(<span class=\"string\">\"BookSearchBtn\"</span>, <span class=\"string\">\"onClick: BookSearch Button\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// EditTextの文字列を取得</span></span><br><span class=\"line\">            String termString = bookSearchEditor.getText().toString();</span><br><span class=\"line\">            <span class=\"comment\">// Timerスレッドを止める</span></span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// Realmインスタンスを生成</span></span><br><span class=\"line\">            Realm realm = Realm.getDefaultInstance();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴テーブルへのアクセスを開始</span></span><br><span class=\"line\">                realm.beginTransaction();</span><br><span class=\"line\">                <span class=\"comment\">// 新規検索履歴データを作成</span></span><br><span class=\"line\">                SearchHistoryModel history = realm.createObject(SearchHistoryModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// 検索文字列カラムにデータを登録</span></span><br><span class=\"line\">                history.setSearchTerm(termString);</span><br><span class=\"line\">                <span class=\"comment\">// 現在時刻を文字列で取得する</span></span><br><span class=\"line\">                Date now = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">                <span class=\"comment\">// 現在時刻を定まった形式で文字列に変換</span></span><br><span class=\"line\">                String dateStr = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy/MM/dd HH:mm\"</span>).format(now);</span><br><span class=\"line\">                <span class=\"comment\">// 現在日時の文字列をカラムデータに登録</span></span><br><span class=\"line\">                history.setSearchDate(dateStr);</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴テーブルへのアクセスを終了</span></span><br><span class=\"line\">                realm.commitTransaction();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Realmインスタンスがちゃんとクローズされること</span></span><br><span class=\"line\">                realm.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 検索結果画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">            <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">            intent.putExtra(<span class=\"string\">\"terms\"</span>, termString);</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">    bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記の実装でRealm DBへのデータ登録処理は完了です。<br>モバイル向けデータベースのデメリットとして中身を直接確認しにくいという点があるのですが、これはRealmDBも同様です。<br>RealmにはGUIでデータを確認するアプリがありますが、データを保存した<code>BookDiscovery.realm</code>を取り出すのに手間がかかるため、実際に読み込んで参照した方がデータの確認は早いのです。</p>\n<p>データ確認のため、検索履歴一覧画面にTextViewを配置しRealmから<code>SearchHistoryModel</code>の内容を全て抽出し、表示してみます。<br>検索履歴一覧画面のレイアウトファイルを開きます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; activity_history.xml</p>\n</blockquote>\n<p><code>activity_history.xml</code>を表示したら、”TextView”を画面に配置します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm01.png\" width=\"550\" title=\"realmconfirm\"><br>画面の上下左右と制約を設定します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm02.png\" width=\"550\" title=\"realmconfirm\"><br>最後に<strong>Attributes</strong>エリアから属性を設定します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/confirmrealm03.png\" width=\"550\" title=\"realmconfirm\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>HistoryText</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_sonstraint</td>\n</tr>\n<tr>\n<td>text</td>\n<td>テキストなし</td>\n</tr>\n</tbody>\n</table>\n<p>上記の表の通り、入力が完了したらレイアウトは一旦OKです！<br>最後に<code>HistoryActivity.java</code>でRealm Realm DBからデータを取得し、配置したTextViewに表示させていきます。<br><figure class=\"highlight java\"><figcaption><span>HistoryActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// Realmインスタンスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Realm realm;</span><br><span class=\"line\">    <span class=\"comment\">// 画面紐付けコンポーネントを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView historyTextView;</span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RealmResults&lt;SearchHistoryModel&gt; resultData;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_history);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面コンポーネント関連付け</span></span><br><span class=\"line\">        historyTextView = findViewById(R.id.HistoryText);</span><br><span class=\"line\">        <span class=\"comment\">// Realmクラスをインスタンス化</span></span><br><span class=\"line\">        realm = Realm.getDefaultInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">        resultData = realm.where(SearchHistoryModel.class).findAll();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultData.isEmpty() &amp;&amp; resultData.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴テーブルの行数分、繰り返し処理を実行する</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; resultData.size(); i++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面のtextViewに検索文字列を随時結合して表示する</span></span><br><span class=\"line\">                historyTextView.setText(historyTextView.getText() + resultData.get(i).getSearchTerm());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">// Realmインスタンスをちゃんとクローズすること</span></span><br><span class=\"line\">        realm.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記のコードを実装したら動作確認します。<br>動作確認の手順として以下の手順で操作を行い、[1.]のタイミングに入力した文字列が検索履歴一覧画面に表示されれば成功です。</p>\n<ol>\n<li>EditTextに何かしらの文字列を入力</li>\n<li>“蔵書検索”ボタンをクリック</li>\n<li>Androidエミュレータ(または実機)のバックボタンをクリック</li>\n<li>“検索履歴”ボタンをクリック</li>\n</ol>\n<p>Realmデータベースの基礎的な使い方は以上です。</p>\n<p>上記のコードでは新しく<code>onDestroy</code>というライフサイクルメソッドが登場しました、この<code>onDestroy</code>はActivityを表示するために保持しておいた領域を解放する前に実行されるメソッドです。<br>RealmインスタンスはActivityごとにインスタンス化して使用しているため、Activityが解放される前にRealmの領域も解放しないといけません、<strong>Realmの解放を忘れるとアプリの強制終了の原因にもなり得る</strong>のでRealmを利用する場合は注意して実装を行います。</p>\n<h1 id=\"検索履歴一覧画面リスト表示対応\"><a href=\"#検索履歴一覧画面リスト表示対応\" class=\"headerlink\" title=\"検索履歴一覧画面リスト表示対応\"></a>検索履歴一覧画面リスト表示対応</h1><p>Realmにて検索した文字列が正常に保存されていることが確認できましたが、現状とても見難いレイアウトです、これをリスト表示にしていきます。</p>\n<p>検索履歴一覧画面での一覧表示には”ListView”ではなく、<strong>RecyclerView</strong>というコンポーネントを利用します。</p>\n<p><strong>RecyclerView</strong>は”Android API 22”の頃に追加されたコンポーネントでListViewや格子状にViewを表示するGridViewよりさらに自由な配置を行えるようになった一覧表示コンポーネントです。<br>またListViewやGridViewに比べ軽い動作が行えることから最近ではこちらのコンポーネントで一覧画面を作ることが増えています。</p>\n<h2 id=\"検索履歴一覧画面レイアウト修正\"><a href=\"#検索履歴一覧画面レイアウト修正\" class=\"headerlink\" title=\"検索履歴一覧画面レイアウト修正\"></a>検索履歴一覧画面レイアウト修正</h2><p><strong>RecyclerView</strong>コンポーネントは以下の場所にあります。</p>\n<blockquote>\n<p>Palette -&gt; AppCmpat -&gt; RecyclerView</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler01.png\" width=\"450\" title=\"Add RecyclerView\">\n<p>続いて制約の設定です。<br>コンポーネントが端に寄っていて設定しにくい場合、少し上下させて右端/左端にドラッグ&amp;ドロップするとやりやすいです。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler02.png\" width=\"300\" title=\"Add RecyclerView\"><br>制約設定が終わったら<strong>RecyclerView</strong>の属性を設定していきます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler03.png\" width=\"450\" title=\"Add RecyclerView\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>HistoryRecycler</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_constraint</td>\n</tr>\n<tr>\n<td>layout_height</td>\n<td>match_constraint</td>\n</tr>\n</tbody>\n</table>\n<p>先ほど表示していたTextView(ID:HistoryText)は履歴が０件だった場合のメッセージを表示するように修正します、TextViewの用途が変わるのでIDも変更します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler04.png\" width=\"450\" title=\"Add RecyclerView\"></p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>EmptyRecyclerText</td>\n</tr>\n<tr>\n<td>text</td>\n<td>検索履歴はありません</td>\n</tr>\n<tr>\n<td>visibility</td>\n<td>invisible</td>\n</tr>\n</tbody>\n</table>\n<p>テキストの配置が不恰好なので位置を調整します、TextViewの文字位置の調整は”textAlignment”属性を修正します。<br>“textAlignment”属性は基本属性の画面には表示されておらず、全属性を表示する詳細ウィンドウに切り替える必要があります、詳細ウィンドウへの切り替えはAttributesウィンドウの左右に矢印のアイコンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrecycler04.png\" width=\"450\" title=\"Add RecyclerView\"><br>“textAlignment”属性を探し、”center”を選択して完了です。</p>\n<h2 id=\"検索歴一覧画面一覧表示実装\"><a href=\"#検索歴一覧画面一覧表示実装\" class=\"headerlink\" title=\"検索歴一覧画面一覧表示実装\"></a>検索歴一覧画面一覧表示実装</h2><p>検索履歴一覧画面の行レイアウトを作成していきます。<br>新規でxmlレイアウトファイルを作成し、検索日時と検索時の文字列を表示する行レイアウトを作成します。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; XML &gt; Layout XML File</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler01.png\" width=\"450\" title=\"Add RecyclerView Row\">\n<p>xmlレイアウトファイル名と一番上の階層になるLayoutを設定して<code>Finish</code>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler02.png\" width=\"450\" title=\"Add RecyclerView Row\"><br>デザインビューが表示されたらXMLの編集画面に切り替えてレイアウトを実装していきます。<br>デザインエリアの左したにある<strong>Text</strong>と書かれてるタブをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler03.png\" width=\"450\" title=\"Add RecyclerView Row\"><br>検索履歴一覧画面の行レイアウトはLinearLayoutという初期からあるレイアウトコンポーネントを使います、またXMLを使った実装も試していきます。<br><figure class=\"highlight xml\"><figcaption><span>row_history_recycle.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/RowHistoryDate\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"14dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書検索した日付を表示\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/RowHistoryTerm\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書検索した文字列を表示\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>toolsを設定する際にもjavaクラスでのimportと同じように自動的に追加が可能ですので、<code>tools:text..</code>と入力した後に<code>tools</code>にマウスカーソルでクリックし、以下のようにツールチップが表示されたら<br>Windowsの場合は[Alt + insert],Macの場合は[option + Enter]でxml内での参照が追加されます。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addrowrecycler04.png\" width=\"500\" title=\"Add RecyclerView Row\"></p>\n<p>この<code>tools</code>という属性ですが、プレビューの際にだけ反映される項目を設定できる属性になります。そのため<strong>アプリを実行した際には追加した２つのTextViewはプログラム上、表示する文字列を持っていない状態</strong>となります。。</p>\n<p>そして上記xmlファイルで初めて利用した<code>LinearLayout</code>というコンポーネントは縦もしくは横どちらか一方方向に子Viewを並べて表示するという特性を持っています。<br>縦横の設定は<code>orientation</code>属性を使用します。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">設定値</th>\n<th style=\"text-align:left\">並べて表示する方向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">horizontal</td>\n<td style=\"text-align:left\">横(左から右)へ子Viewを並べて表示</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vertical</td>\n<td style=\"text-align:left\">縦(上から下)へ子Viewを並べて表示</td>\n</tr>\n</tbody>\n</table>\n<p><code>orientation</code>属性が設定されていない場合は<strong>horizontal</strong>が設定されたと認識され、不具合通知は表示されないので注意しましょう。</p>\n<p>XMLでレイアウトの実装を行う時に気をつけるポイントとして<code>layout_width</code>属性、<code>layout_height</code>属性があります。<br>設定できる値とその意味合いをそれぞれ記述します。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">設定値</th>\n<th style=\"text-align:left\">設定値の意味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">wrap_content</td>\n<td style=\"text-align:left\">要素の表示に必要な領域を自動的に確保</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">match_parent</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">match_constraint(0dp)</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定ConstraintLayoutの場合で”Design”タブを開いている場合に設定できる。xml上の値は”0dp”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fill_parent</td>\n<td style=\"text-align:left\">親要素と同じ幅(縦/横)に設定Android OS 2.2(API Level 8)以降は非推奨</td>\n</tr>\n</tbody>\n</table>\n<p>アプリ開発の上で端末の種類が多いAndroidでは固定値を設定することはほぼレイアウト崩れに直結するので基本的には”wrap_content”や”match_parent”を使い隣接するViewとのスペース設定で調整することになると思います。</p>\n<p>行レイアウトができたので行ごとの表示プロセスを担当するAdapterクラスを実装していきます。<br>一覧表示を行うViewを使う場合、Adapterクラスを継承して独自のレイアウト表示する方法はListViewと一緒です。<br>RecyclerViewには<code>RecyclerView.Adapter</code>というRecyclerView用のAdapterクラスがあるのでこれを継承した独自クラスを作成します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter01.png\" width=\"400\" title=\"Add RecyclerView Adapter\"><br>クラス作成時の設定項目を入力したら<code>OK</code>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter02.png\" width=\"400\" title=\"Add RecyclerView Adapter\"><br><code>HistoryRecyclerAdapter.java</code>が表示されたら<font color=\"red\">赤い電球</font>アイコンをクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter03.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>表示された小さいウィンドウから<em>Implement methods</em>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter04.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>３つのメソッドが選択状態（背景が青色）になっていることを確認し<code>OK</code>をクリックします。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter05.png\" width=\"300\" title=\"Add RecyclerView Adapter\"><br>選択した３つのメソッドが<code>HistoryRecyclerAdapter.java</code>に表示されたら新しいクラスの作成は完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/addadapter06.png\" width=\"500\" title=\"Add RecyclerView Adapter\"><br>検索結果画面では利用していませんでしたが、検索履歴一覧画面では<strong>ViewHolderパターン</strong>での実装を行います。</p>\n<blockquote>\n<p><strong>ViewHolderパターン</strong>とはスクロールするたびにViewを生成/抽出(findViewById)などの処理コストが高く描画に時間がかかってしまうため、一度生成したViewHolderを再利用することでコストを軽減するパターンを指します。</p>\n</blockquote>\n<p><code>HistoryRecyclerAdapter</code>の主なメソッドを実装する前にViewHolderの実装を行なっていきます。<br><figure class=\"highlight java\"><figcaption><span>HistoryRecyclerAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">HistoryRecyclerAdapter</span>.<span class=\"title\">HistoryHolder</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ViewHolderパターンクラス</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Rowレイアウトと関連づけるコンポーネントを宣言</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> TextView historyDate;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TextView historyTerm;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HistoryHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">            <span class=\"comment\">// xmlファイルと関連付け</span></span><br><span class=\"line\">            historyDate = itemView.findViewById(R.id.RowHistoryDate);</span><br><span class=\"line\">            historyTerm = itemView.findViewById(R.id.RowHistoryTerm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記の実装で<strong>ViewHolderパターン</strong>での実装は完了です。<br>続いて履歴データを表示するための実装を進めます。<br>修正箇所等かなり多いので追加、修正箇所に注意しながら実装を進めてください。<br><figure class=\"highlight java\"><figcaption><span>HistoryRecyclerAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">HistoryRecyclerAdapter</span>.<span class=\"title\">HistoryHolder</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示に必要なクラスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater inflater;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RealmResults&lt;SearchHistoryModel&gt; historyData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HistoryRecyclerAdapter</span><span class=\"params\">(Context context, RealmResults&lt;SearchHistoryModel&gt; historyData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// レイアウトのインスタンス化に必要なクラス</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inflater = LayoutInflater.from(context);</span><br><span class=\"line\">        <span class=\"comment\">// 表示するデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.historyData = historyData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 表示するレイアウトを指定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HistoryHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// row_history_recycleのレイアウトをインスタンス化</span></span><br><span class=\"line\">        View view = inflater.inflate(R.layout.row_history_recycle, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// HistoryHolderクラスをインスタンス化して返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HistoryHolder(view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示するレイアウトにデータを設定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(HistoryHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴一覧から一つの履歴データを抽出</span></span><br><span class=\"line\">        SearchHistoryModel history = historyData.get(position);</span><br><span class=\"line\">        <span class=\"comment\">// ViewHolderにデータをセット</span></span><br><span class=\"line\">        holder.historyDate.setText(history.getSearchDate());</span><br><span class=\"line\">        holder.historyTerm.setText(history.getSearchTerm());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示するリストの件数を指定するメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// RealmDBから取得した検索履歴全件分、行の表示処理を繰り返す</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> historyData.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>HistoryActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HistoryActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Realmインスタンスを宣言</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Realm realm;</span><br><span class=\"line\">    <span class=\"comment\">// 履歴0件用TextView</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView historyTextView;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴RecyclerView</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerView historyRecycler;</span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴RecyclerAdapter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HistoryRecyclerAdapter historyAdapter;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索履歴抽出データ</span></span><br><span class=\"line\">    RealmResults&lt;SearchHistoryModel&gt; resultData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_history);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 画面コンポーネント関連付け</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        historyTextView = findViewById(R.id.EmptyRecyclerText);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        historyRecycler = findViewById(R.id.HistoryRecycler);</span><br><span class=\"line\">        <span class=\"comment\">// Realmクラスをインスタンス化</span></span><br><span class=\"line\">        realm = Realm.getDefaultInstance();</span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴テーブルのデータを全て取得</span></span><br><span class=\"line\">        resultData = realm.where(SearchHistoryModel.class).findAll();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴の件数が１件以上なら繰り返し処理でTextViewに表示する</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resultData.isEmpty() &amp;&amp; resultData.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// adapterクラスをインスタンス化</span></span><br><span class=\"line\">            historyAdapter = <span class=\"keyword\">new</span> HistoryRecyclerAdapter(<span class=\"keyword\">this</span>, resultData);</span><br><span class=\"line\">            <span class=\"comment\">// RecyclerViewの表示形式を決める</span></span><br><span class=\"line\">            RecyclerView.LayoutManager layoutManager = <span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"comment\">// RecyclerViewの初期設定</span></span><br><span class=\"line\">            historyRecycler.setAdapter(historyAdapter);</span><br><span class=\"line\">            historyRecycler.setLayoutManager(layoutManager);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴の件数が１件もない場合、履歴0件のメッセージを表示する</span></span><br><span class=\"line\">            <span class=\"comment\">// 検索履歴一覧を非表示に設定</span></span><br><span class=\"line\">            historyRecycler.setVisibility(View.GONE);</span><br><span class=\"line\">            historyTextView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最後に<code>historyTextView</code>ですが、変数としての意味合いが変わっているので変数名を変更します。<br>ただ、一箇所づつの変更は手間なので一気に全箇所が変更される方法をで修正します。<br>変数名にマウスカーソルを当て右クリックから</p>\n<blockquote>\n<p>Refactor -&gt; Rename…</p>\n</blockquote>\n<p>をクリックします<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid01.png\" width=\"500\" title=\"Refactor Valid Name\"><br>変更する変数名が赤枠で囲われるので変数名を修正します。<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid02.png\" width=\"500\" title=\"Refactor Valid Name\"><br>変数名の修正に合わせて他に使用されている同変数も修正されているのがわかります。<br>変数名の修正が終わったわ<code>Enter</code>キーを押下し完了です。<br><img src=\"/AndroidCourse/android/08-AppDataBase/refactvalid03.png\" width=\"500\" title=\"Refactor Valid Name\"></p>\n<p>上記までコードを実装したら動作確認します。<br>正常な動作では閲覧履歴ボタンをクリックし、画面遷移した検索履歴一覧画面に検索した文字列のリストが表示されます。</p>\n<p>以上で検索履歴一覧画面の実装は完了です。<br>次の<a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>では蔵書の詳細情報を表示する画面を作成しながらFragmentクラスの使い方やJson文字列の効率的なパースライブラリの使い方などを学習していきます。</p>\n"},{"title":"操作性・ユーザ体験の改善","date":"2017-11-10T15:00:00.000Z","_content":"操作性ユーザ体感の改善の中でダイアログやデータベース以外の保存機能を学習します。\n\n<!-- toc -->\n\n[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)からの引き続きの学習ページです。\n# 学習ポイント\n* DialogFragment\n* SharedPreference\n* プロジェクトのパッケージ整理\n\nAndroidアプリでデータ通信中にユーザ操作を受けずにユーザにアプリの状況を伝えるためにダイアログ表示の方法を学習します。\nまた、アプリ内でデータベース以外にデータを保持する方法としてSharedPreferenceの機能を学習します。\n\n# ユーザ体験の改善\n前ページまでに実装してきたアプリの中で、データ読み込み中に画面が真っ白になってしまい読み込み時間が長くなるとアプリが止まってしまったと感じてアプリを終了するユーザがいるかもしれません。\nそこで、アプリが動いていることを通知するためにダイアログ表示を行うように処理を実装していきます。\n\n# データ読み込み中のダイアログ表示機能\nAndroidアプリでダイアログを表示するためには`DialogFragment`クラスを継承したカスタムクラスを作成し、作成したカスタムクラスにどういった内容でダイアログ表示を行うか実装して行く。\n\n## カスタムDialogFragment作成\n以下の手順から新規javaクラスを作成します。\n\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/10-OrganizeExperience/cdialogfrag01.png 450 Create DialogFragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |ProgressDialogFragment                  |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_progress_dialog                |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\nダイアログ表示用のFragmentを作成したらレイアウトXMLを修正していきます。\nLayoutEditor左下から**Text**タブをクリックしテキストエディタを表示し、以下の修正通り修正します。\n以下レイアウトファイルを表示します。\n> app -> res -> layout -> fragment_progress_dialog.xml\n\nここでテキストエディタモードでレイアウトを編集するとき、画面右端に表示されている***Preview***をクリックすると、リアルタイムにプレビューを表示されるので利用してみてください。\n{% img /android/10-OrganizeExperience/prevtextmode.png 500 Preview in TextEditorMode %}\n```XML fragment_progress_dialog.xml\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.ProgressDialogFragment\">\n\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n\n</FrameLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <RelativeLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\">\n        <ProgressBar\n            android:id=\"@+id/ProgressCircle\"\n            style=\"@android:style/Widget.DeviceDefault.Light.ProgressBar.Large\"\n            android:layout_margin=\"10dp\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toRightOf=\"@+id/ProgressCircle\"\n            android:layout_centerVertical=\"true\"\n            android:layout_margin=\"10dp\"\n            android:text=\"書籍情報を検索中...\"\n            android:textSize=\"15dp\"\n            android:textColor=\"@color/colorAccent\"\n            android:textAlignment=\"center\"/>\n\n    </RelativeLayout>\n</RelativeLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n```\n\n`ProgressDialogFragment`が作成できたらダイアログ表示用のFragmentにするため、親クラスを**DialogFramgnet**に変更します。\nこの**DialogFragment**への変更で気をつけて欲しいのがインポートされるパッケージです。\n以下のパッケージが追加されていることを確認してください。\n> import android.support.v4.app.DialogFragment;\n\n```java ProgressDialogFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ProgressDialogFragment extends DialogFragment {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    ...一部省略\n\n        @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ソフトバックボタンを無効化\n        getDialog().setCancelable(false);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_progress_dialog, container, false);\n    }\n}\n```\n```java ResultListFragment.java\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener{\n\n\t...一部省略\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 検索文字列変数を初期化\n        term = \"Android\";\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            term = getArguments().getString(\"term\", \"Android\");\n        }\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // プログレスFragmentをインスタンス化\n        ProgressDialogFragment progressDialog = new ProgressDialogFragment();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n    }\n\n    ...一部省略\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n    \t...一部省略\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n\t        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // プログレスFragmentを終了させるためにマネージャークラスを取得\n            FragmentTransaction ft = getChildFragmentManager().beginTransaction();\n            // FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出\n            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(\"Dialog\");\n            // DialogFragmentを取得できた場合\n            if (progressDialog != null) {\n                // ダイアログを非表示にする\n                progressDialog.dismiss();\n                // FragmentManagerの管理から除外\n                ft.remove(progressDialog);\n            }\n            // FragmentManagerへの変更を反映(確定)\n            ft.commit();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(getContext(), resultList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n\t}\n```\n上記実装が終わったら動作確認してください。\n検索結果画面へ画面遷移した際に半透過に一部白いウィンドウのダイアログが表示されると思います。\n\n### DialogとAlertDialog\n`DialogFragment`クラスはDialogクラスのオブジェクトを保持しており、Dialogオブジェクトに生成したレイアウトを表示させます。\nまたDialogには利用方法によって利用するクラスが２種類ありますそれが**Dialog**と**AlertDialog**です。\nDialogは開発者が指定したレイアウトを表示するだけで、ユーザへの情報を表示するために利用することが多いと思われます。\n\nAlertDialogは開発者が指定したレイアウトの他に\"OK\",\"Cancel\"などのボタンがメインレイアウトとは別に準備されており、ユーザに応答を求めるときや確認のダイアログとして利用することが多いです。\n\n## 読み込みキャンセル機能\n先ほどの実装では検索結果が表示されるまでアプリユーザは何もすることができませんでしたが、読み込み中でも検索画面に戻れるように`AlertDialog`を使用してキャンセルボタンをダイアログに追加します。\n```java ProgressDialogFragment.java\npublic class ProgressDialogFragment extends DialogFragment {\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n\n        getDialog().setCancelable(false);\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_progress_dialog, container, false);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @NonNull\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        // ダイアログ表示するレイアウトを生成\n        View view = getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog, null, false);\n\n        // アラートダイアログビルダーを使ってボタン付きのダイアログを生成\n        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())\n                .setView(view)\n                .setPositiveButton(\"キャンセル\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        getActivity().finish();\n                    }\n                })\n                .setCancelable(false);\n        // 表示するダイアログを生成して返却\u000f\n        return builder.create();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListFragment.java\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n\n\t\t...一部省略\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n        \t//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // Activityが終了していたら処理をしない\n            if (getActivity() == null || getActivity().isFinishing() || getActivity().isDestroyed()) {\n                return;\n            }\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // プログレスFragmentを終了させるためにマネージャークラスを取得\n            FragmentTransaction ft = getChildFragmentManager().beginTransaction();\n            // FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出\n            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(\"Dialog\");\n            // DialogFragmentを取得できた場合\n            if (progressDialog != null) {\n                // ダイアログを非表示にする\n                progressDialog.dismiss();\n                // FragmentManagerの管理から除外\n                ft.remove(progressDialog);\n            }\n            // FragmentManagerへの変更を反映(確定)\n            ft.commit();\n\t\t\t...一部省略\n        }\n    }\n```\n上記コードが実装できたら動作確認してください。\n読み込み中のダイアログにキャンセルボタンが追加され、キャンセルボタンを押下すると検索画面に戻れるようになっているはずです。\n\n### DialogFragmentのライフサイクル\n`DialogFragment`を使用してダイアログ表示を行う場合に、ライフサイクルが通常のFragmentクラスと少し違うため、注意が必要です。\n\ngetLayoutInflater -> onCreateDialog -> onCreateView -> onActivityCreated\n\n# 最後に検索した文字列を保持する機能\n以前にアプリが終了されてもデータが残る機能としてデータベース(Realm)を紹介しましたが、\nデータの量が少ない場合などに手軽に使える機能をAndroidは備えており、容易に使えます。\n今回は`SharedPreference`という機能を使い検索した文言を保持する機能を実装していきます。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n\t//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 最後の検索文言を保持/取得するキー定数\n    private final static String PREF_KEY = \"LAST_TERM\";\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private Button historyBtn;\n\t...一部省略\n\n\t       View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n            \t...一部省略\n                } finally {\n                    // Realmインスタンスがちゃんとクローズされること\n                    realm.close();\n                }\n\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // SharedPreferenceに保存\n                SharedPreferences.Editor editor = MainActivity.this.getPreferences(Context.MODE_PRIVATE).edit();\n                editor.putString(PREF_KEY, termString).apply();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n                // 検索結果画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", termString);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n                // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 検索履歴ボタンをクリックした時の処理を実装\n        historyBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // 検索履歴画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, HistoryActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        });\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // SharedPreferenceに最後の検索条件が残っていたら登録する\n        // SharedPreferenceにデータがない場合は空文字を設定する\n        String lastTerm = this.getPreferences(Context.MODE_PRIVATE).getString(PREF_KEY, \"\");\n        bookSearchEditor.setText(lastTerm);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\t\t...一部省略\n}\n```\n上記コードを実装したら動作確認してください。\n初回起動時のEditTextは空文字(何も表示されてない)となっており、何かしらの文言で検索を行いアプリを終了させます。\n改めてアプリを起動したときにEditTextに検索した文言が表示されていることが確認できます。\n\n## SharedPreference\nAndroid端末のアプリ専用領域に環境設定としてKey-Value形式でデータを保存/参照できる機能。\nSharedPreferenceのインスタンス化の引数ではインスタンス化するSharedPreferenceのアクセス許容範囲を指定できます。\n今回は`Context.MODE_PRIVATE`ということで自アプリからしかアクセスできないSharedPreferenceを作成し、その中に\"LAST_TERM\"という鍵[Key]情報に[最後に検索した文字列]というデータ(Value)を保存しました。\nJSONの概念が理解できている方は`{\"LAST_TERM\":$term}`と保存されている認識で良いと思います。\n\nまたSharedPreferenceは名前をつけて複数作成することができ、**JSONファイルを作成してJSON形式でデータを保持している**と思っていただいても良いと思います。\n\n簡単に利用できるSharedPreferenceですが、起動時にメモリ上に読み込む仕様になっているため、大量のSharedPreferenceやデータの保持はアプリの挙動に影響を与える可能性があるので少量で使うようにすることをお勧めします。\n\n# Androidプロジェクトの整理\nここに至るまでに複数のActivityやFragmentを作成し、類似するネーミングのものも存在するため、ツリー表示が見にくく感じます。\nそこで作成したファイルごとにパッケージを分けて保存することで探しやすさと視認性をよくしていきます。\n\nこのときにマウス操作でドラッグ&ドロップを行うとjavaクラスファイルの格納場所を示すPackage(パッケージ)情報に不整合が発生してしまい、\n修正が大変になることがあります。\nPackage情報の整合性を保ちつつjavaクラスの格納場所を変更するにはAndroid Studioの`Refactor -> Move`機能を使って格納場所を変更します。\n方法としてはまず、分類分けするためのPackageを追加します、このPackageはフォルダとして実態が生成されます。\n**プロジェクトツリーで右クリックから以下を選択**\n> New -> Package\n\n{% img /android/10-OrganizeExperience/orgpackage01.png 550 Organaized Project Package %}\n続いて作成するPackage名を入力し、`OK`をクリック\n{% img /android/10-OrganizeExperience/orgpackage02.png 450 Organaized Project Package %}\n分類用のPackageが作成されたら**プロジェクトツリーで右クリックから以下を選択**\n> Refactor -> Mode...\n\n{% img /android/10-OrganizeExperience/orgpackage03.png 500 Organaized Project Package %}\n次に移動先を選択するために\"To Package\"列の`...`ボタンをクリック\n{% img /android/10-OrganizeExperience/orgpackage04.png 500 Organaized Project Package %}\n先ほど作成した`bookdiscovery.Activity`を選択し、`OK`をクリック\n{% img /android/10-OrganizeExperience/orgpackage05.png 500 Organaized Project Package %}\n`bookdiscovery.Activity`が選択されていることを確認し、`Refactor`をクリック\n{% img /android/10-OrganizeExperience/orgpackage06.png 500 Organaized Project Package %}\nプロジェクトツリー表示を確認すると`HistoryActivity.java`が**...\\*.bookdiscovery.Activity**配下に移動します\n{% img /android/10-OrganizeExperience/orgpackage07.png 500 Organaized Project Package %}\nこのときに`HistoryActivity.java`を参照している`MainActivity.java`や`AndroidManifest.xml`ファイルも変更が加わっています。\n{% img /android/10-OrganizeExperience/orgpackage08.png 500 Organaized Project Package %}\n{% img /android/10-OrganizeExperience/orgpackage09.png 500 Organaized Project Package %}\nまた作業中に以下のようなメッセージが下部のツールエリアに表示されることがありますが、これは置換箇所や深い階層での参照が見つかった場合などに表示されることがあります。\n置換箇所のプレビューになるのでないように問題がなければ`Do Refactor`をクリックします\n{% img /android/10-OrganizeExperience/orgpackage10.png 500 Organaized Project Package %}\n以上の手順でPackageの分割や不整合のないファイル移動を行います。\n今回は以下の通りに格納されるようにjavaクラスファイルを移動させて見てください\n{% img /android/10-OrganizeExperience/orgpackage10.png 500 Organaized Project Package %}\n\n\n以上で、操作性・ユーザ体験の改善に関する解説は終了です。\n次の[蔵書詳細の元ウェブページの表示](/AndroidCourse/android/11-BrowseWebPage)ではWebViewや他アプリへの連携などを学習します。\n","source":"_posts/android/10-OrganizeExperience.md","raw":"---\ntitle: 操作性・ユーザ体験の改善\ndate: 2017-11-11\ntags:\n---\n操作性ユーザ体感の改善の中でダイアログやデータベース以外の保存機能を学習します。\n\n<!-- toc -->\n\n[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)からの引き続きの学習ページです。\n# 学習ポイント\n* DialogFragment\n* SharedPreference\n* プロジェクトのパッケージ整理\n\nAndroidアプリでデータ通信中にユーザ操作を受けずにユーザにアプリの状況を伝えるためにダイアログ表示の方法を学習します。\nまた、アプリ内でデータベース以外にデータを保持する方法としてSharedPreferenceの機能を学習します。\n\n# ユーザ体験の改善\n前ページまでに実装してきたアプリの中で、データ読み込み中に画面が真っ白になってしまい読み込み時間が長くなるとアプリが止まってしまったと感じてアプリを終了するユーザがいるかもしれません。\nそこで、アプリが動いていることを通知するためにダイアログ表示を行うように処理を実装していきます。\n\n# データ読み込み中のダイアログ表示機能\nAndroidアプリでダイアログを表示するためには`DialogFragment`クラスを継承したカスタムクラスを作成し、作成したカスタムクラスにどういった内容でダイアログ表示を行うか実装して行く。\n\n## カスタムDialogFragment作成\n以下の手順から新規javaクラスを作成します。\n\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/10-OrganizeExperience/cdialogfrag01.png 450 Create DialogFragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |ProgressDialogFragment                  |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_progress_dialog                |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\nダイアログ表示用のFragmentを作成したらレイアウトXMLを修正していきます。\nLayoutEditor左下から**Text**タブをクリックしテキストエディタを表示し、以下の修正通り修正します。\n以下レイアウトファイルを表示します。\n> app -> res -> layout -> fragment_progress_dialog.xml\n\nここでテキストエディタモードでレイアウトを編集するとき、画面右端に表示されている***Preview***をクリックすると、リアルタイムにプレビューを表示されるので利用してみてください。\n{% img /android/10-OrganizeExperience/prevtextmode.png 500 Preview in TextEditorMode %}\n```XML fragment_progress_dialog.xml\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.ProgressDialogFragment\">\n\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n\n</FrameLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n<!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <RelativeLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\">\n        <ProgressBar\n            android:id=\"@+id/ProgressCircle\"\n            style=\"@android:style/Widget.DeviceDefault.Light.ProgressBar.Large\"\n            android:layout_margin=\"10dp\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"/>\n\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toRightOf=\"@+id/ProgressCircle\"\n            android:layout_centerVertical=\"true\"\n            android:layout_margin=\"10dp\"\n            android:text=\"書籍情報を検索中...\"\n            android:textSize=\"15dp\"\n            android:textColor=\"@color/colorAccent\"\n            android:textAlignment=\"center\"/>\n\n    </RelativeLayout>\n</RelativeLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n```\n\n`ProgressDialogFragment`が作成できたらダイアログ表示用のFragmentにするため、親クラスを**DialogFramgnet**に変更します。\nこの**DialogFragment**への変更で気をつけて欲しいのがインポートされるパッケージです。\n以下のパッケージが追加されていることを確認してください。\n> import android.support.v4.app.DialogFragment;\n\n```java ProgressDialogFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ProgressDialogFragment extends DialogFragment {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    ...一部省略\n\n        @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // ソフトバックボタンを無効化\n        getDialog().setCancelable(false);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_progress_dialog, container, false);\n    }\n}\n```\n```java ResultListFragment.java\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener{\n\n\t...一部省略\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 検索文字列変数を初期化\n        term = \"Android\";\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            term = getArguments().getString(\"term\", \"Android\");\n        }\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // プログレスFragmentをインスタンス化\n        ProgressDialogFragment progressDialog = new ProgressDialogFragment();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n    }\n\n    ...一部省略\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n    \t...一部省略\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n\t        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // プログレスFragmentを終了させるためにマネージャークラスを取得\n            FragmentTransaction ft = getChildFragmentManager().beginTransaction();\n            // FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出\n            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(\"Dialog\");\n            // DialogFragmentを取得できた場合\n            if (progressDialog != null) {\n                // ダイアログを非表示にする\n                progressDialog.dismiss();\n                // FragmentManagerの管理から除外\n                ft.remove(progressDialog);\n            }\n            // FragmentManagerへの変更を反映(確定)\n            ft.commit();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(getContext(), resultList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n\t}\n```\n上記実装が終わったら動作確認してください。\n検索結果画面へ画面遷移した際に半透過に一部白いウィンドウのダイアログが表示されると思います。\n\n### DialogとAlertDialog\n`DialogFragment`クラスはDialogクラスのオブジェクトを保持しており、Dialogオブジェクトに生成したレイアウトを表示させます。\nまたDialogには利用方法によって利用するクラスが２種類ありますそれが**Dialog**と**AlertDialog**です。\nDialogは開発者が指定したレイアウトを表示するだけで、ユーザへの情報を表示するために利用することが多いと思われます。\n\nAlertDialogは開発者が指定したレイアウトの他に\"OK\",\"Cancel\"などのボタンがメインレイアウトとは別に準備されており、ユーザに応答を求めるときや確認のダイアログとして利用することが多いです。\n\n## 読み込みキャンセル機能\n先ほどの実装では検索結果が表示されるまでアプリユーザは何もすることができませんでしたが、読み込み中でも検索画面に戻れるように`AlertDialog`を使用してキャンセルボタンをダイアログに追加します。\n```java ProgressDialogFragment.java\npublic class ProgressDialogFragment extends DialogFragment {\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n\n        getDialog().setCancelable(false);\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_progress_dialog, container, false);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @NonNull\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        // ダイアログ表示するレイアウトを生成\n        View view = getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog, null, false);\n\n        // アラートダイアログビルダーを使ってボタン付きのダイアログを生成\n        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())\n                .setView(view)\n                .setPositiveButton(\"キャンセル\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        getActivity().finish();\n                    }\n                })\n                .setCancelable(false);\n        // 表示するダイアログを生成して返却\u000f\n        return builder.create();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListFragment.java\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n\n\t\t...一部省略\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n        \t//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // Activityが終了していたら処理をしない\n            if (getActivity() == null || getActivity().isFinishing() || getActivity().isDestroyed()) {\n                return;\n            }\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // プログレスFragmentを終了させるためにマネージャークラスを取得\n            FragmentTransaction ft = getChildFragmentManager().beginTransaction();\n            // FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出\n            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(\"Dialog\");\n            // DialogFragmentを取得できた場合\n            if (progressDialog != null) {\n                // ダイアログを非表示にする\n                progressDialog.dismiss();\n                // FragmentManagerの管理から除外\n                ft.remove(progressDialog);\n            }\n            // FragmentManagerへの変更を反映(確定)\n            ft.commit();\n\t\t\t...一部省略\n        }\n    }\n```\n上記コードが実装できたら動作確認してください。\n読み込み中のダイアログにキャンセルボタンが追加され、キャンセルボタンを押下すると検索画面に戻れるようになっているはずです。\n\n### DialogFragmentのライフサイクル\n`DialogFragment`を使用してダイアログ表示を行う場合に、ライフサイクルが通常のFragmentクラスと少し違うため、注意が必要です。\n\ngetLayoutInflater -> onCreateDialog -> onCreateView -> onActivityCreated\n\n# 最後に検索した文字列を保持する機能\n以前にアプリが終了されてもデータが残る機能としてデータベース(Realm)を紹介しましたが、\nデータの量が少ない場合などに手軽に使える機能をAndroidは備えており、容易に使えます。\n今回は`SharedPreference`という機能を使い検索した文言を保持する機能を実装していきます。\n```java MainActivity.java\npublic class MainActivity extends AppCompatActivity {\n\n\t//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 最後の検索文言を保持/取得するキー定数\n    private final static String PREF_KEY = \"LAST_TERM\";\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // レイアウトxmlと関連付けるWidget\n    private Button bookSearchBtn;\n    private Button historyBtn;\n\t...一部省略\n\n\t       View.OnClickListener bookSearchEvent = new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n            \t...一部省略\n                } finally {\n                    // Realmインスタンスがちゃんとクローズされること\n                    realm.close();\n                }\n\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // SharedPreferenceに保存\n                SharedPreferences.Editor editor = MainActivity.this.getPreferences(Context.MODE_PRIVATE).edit();\n                editor.putString(PREF_KEY, termString).apply();\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n                // 検索結果画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, ResultListActivity.class);\n                // EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す\n                intent.putExtra(\"terms\", termString);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        };\n                // 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録\n        bookSearchBtn.setOnClickListener(bookSearchEvent);\n\n        // 検索履歴ボタンをクリックした時の処理を実装\n        historyBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // 検索履歴画面へ遷移するためのIntentをインスタンス化\n                Intent intent = new Intent(MainActivity.this, HistoryActivity.class);\n                // 画面遷移アクションを実行\n                startActivity(intent);\n            }\n        });\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // SharedPreferenceに最後の検索条件が残っていたら登録する\n        // SharedPreferenceにデータがない場合は空文字を設定する\n        String lastTerm = this.getPreferences(Context.MODE_PRIVATE).getString(PREF_KEY, \"\");\n        bookSearchEditor.setText(lastTerm);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\t\t...一部省略\n}\n```\n上記コードを実装したら動作確認してください。\n初回起動時のEditTextは空文字(何も表示されてない)となっており、何かしらの文言で検索を行いアプリを終了させます。\n改めてアプリを起動したときにEditTextに検索した文言が表示されていることが確認できます。\n\n## SharedPreference\nAndroid端末のアプリ専用領域に環境設定としてKey-Value形式でデータを保存/参照できる機能。\nSharedPreferenceのインスタンス化の引数ではインスタンス化するSharedPreferenceのアクセス許容範囲を指定できます。\n今回は`Context.MODE_PRIVATE`ということで自アプリからしかアクセスできないSharedPreferenceを作成し、その中に\"LAST_TERM\"という鍵[Key]情報に[最後に検索した文字列]というデータ(Value)を保存しました。\nJSONの概念が理解できている方は`{\"LAST_TERM\":$term}`と保存されている認識で良いと思います。\n\nまたSharedPreferenceは名前をつけて複数作成することができ、**JSONファイルを作成してJSON形式でデータを保持している**と思っていただいても良いと思います。\n\n簡単に利用できるSharedPreferenceですが、起動時にメモリ上に読み込む仕様になっているため、大量のSharedPreferenceやデータの保持はアプリの挙動に影響を与える可能性があるので少量で使うようにすることをお勧めします。\n\n# Androidプロジェクトの整理\nここに至るまでに複数のActivityやFragmentを作成し、類似するネーミングのものも存在するため、ツリー表示が見にくく感じます。\nそこで作成したファイルごとにパッケージを分けて保存することで探しやすさと視認性をよくしていきます。\n\nこのときにマウス操作でドラッグ&ドロップを行うとjavaクラスファイルの格納場所を示すPackage(パッケージ)情報に不整合が発生してしまい、\n修正が大変になることがあります。\nPackage情報の整合性を保ちつつjavaクラスの格納場所を変更するにはAndroid Studioの`Refactor -> Move`機能を使って格納場所を変更します。\n方法としてはまず、分類分けするためのPackageを追加します、このPackageはフォルダとして実態が生成されます。\n**プロジェクトツリーで右クリックから以下を選択**\n> New -> Package\n\n{% img /android/10-OrganizeExperience/orgpackage01.png 550 Organaized Project Package %}\n続いて作成するPackage名を入力し、`OK`をクリック\n{% img /android/10-OrganizeExperience/orgpackage02.png 450 Organaized Project Package %}\n分類用のPackageが作成されたら**プロジェクトツリーで右クリックから以下を選択**\n> Refactor -> Mode...\n\n{% img /android/10-OrganizeExperience/orgpackage03.png 500 Organaized Project Package %}\n次に移動先を選択するために\"To Package\"列の`...`ボタンをクリック\n{% img /android/10-OrganizeExperience/orgpackage04.png 500 Organaized Project Package %}\n先ほど作成した`bookdiscovery.Activity`を選択し、`OK`をクリック\n{% img /android/10-OrganizeExperience/orgpackage05.png 500 Organaized Project Package %}\n`bookdiscovery.Activity`が選択されていることを確認し、`Refactor`をクリック\n{% img /android/10-OrganizeExperience/orgpackage06.png 500 Organaized Project Package %}\nプロジェクトツリー表示を確認すると`HistoryActivity.java`が**...\\*.bookdiscovery.Activity**配下に移動します\n{% img /android/10-OrganizeExperience/orgpackage07.png 500 Organaized Project Package %}\nこのときに`HistoryActivity.java`を参照している`MainActivity.java`や`AndroidManifest.xml`ファイルも変更が加わっています。\n{% img /android/10-OrganizeExperience/orgpackage08.png 500 Organaized Project Package %}\n{% img /android/10-OrganizeExperience/orgpackage09.png 500 Organaized Project Package %}\nまた作業中に以下のようなメッセージが下部のツールエリアに表示されることがありますが、これは置換箇所や深い階層での参照が見つかった場合などに表示されることがあります。\n置換箇所のプレビューになるのでないように問題がなければ`Do Refactor`をクリックします\n{% img /android/10-OrganizeExperience/orgpackage10.png 500 Organaized Project Package %}\n以上の手順でPackageの分割や不整合のないファイル移動を行います。\n今回は以下の通りに格納されるようにjavaクラスファイルを移動させて見てください\n{% img /android/10-OrganizeExperience/orgpackage10.png 500 Organaized Project Package %}\n\n\n以上で、操作性・ユーザ体験の改善に関する解説は終了です。\n次の[蔵書詳細の元ウェブページの表示](/AndroidCourse/android/11-BrowseWebPage)ではWebViewや他アプリへの連携などを学習します。\n","slug":"10-OrganizeExperience","published":1,"updated":"2018-03-06T13:17:04.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0r000093l612ibogfi7","content":"<p>操作性ユーザ体感の改善の中でダイアログやデータベース以外の保存機能を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#ユーザ体験の改善\">ユーザ体験の改善</a></li>\n<li><a href=\"#データ読み込み中のダイアログ表示機能\">データ読み込み中のダイアログ表示機能</a><ul>\n<li><a href=\"#カスタムdialogfragment作成\">カスタムDialogFragment作成</a><ul>\n<li><a href=\"#dialogとalertdialog\">DialogとAlertDialog</a></li>\n</ul>\n</li>\n<li><a href=\"#読み込みキャンセル機能\">読み込みキャンセル機能</a><ul>\n<li><a href=\"#dialogfragmentのライフサイクル\">DialogFragmentのライフサイクル</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#最後に検索した文字列を保持する機能\">最後に検索した文字列を保持する機能</a><ul>\n<li><a href=\"#sharedpreference\">SharedPreference</a></li>\n</ul>\n</li>\n<li><a href=\"#androidプロジェクトの整理\">Androidプロジェクトの整理</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>DialogFragment</li>\n<li>SharedPreference</li>\n<li>プロジェクトのパッケージ整理</li>\n</ul>\n<p>Androidアプリでデータ通信中にユーザ操作を受けずにユーザにアプリの状況を伝えるためにダイアログ表示の方法を学習します。<br>また、アプリ内でデータベース以外にデータを保持する方法としてSharedPreferenceの機能を学習します。</p>\n<h1><span id=\"ユーザ体験の改善\">ユーザ体験の改善</span></h1><p>前ページまでに実装してきたアプリの中で、データ読み込み中に画面が真っ白になってしまい読み込み時間が長くなるとアプリが止まってしまったと感じてアプリを終了するユーザがいるかもしれません。<br>そこで、アプリが動いていることを通知するためにダイアログ表示を行うように処理を実装していきます。</p>\n<h1><span id=\"データ読み込み中のダイアログ表示機能\">データ読み込み中のダイアログ表示機能</span></h1><p>Androidアプリでダイアログを表示するためには<code>DialogFragment</code>クラスを継承したカスタムクラスを作成し、作成したカスタムクラスにどういった内容でダイアログ表示を行うか実装して行く。</p>\n<h2><span id=\"カスタムdialogfragment作成\">カスタムDialogFragment作成</span></h2><p>以下の手順から新規javaクラスを作成します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/cdialogfrag01.png\" width=\"450\" title=\"Create DialogFragment\">\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>ProgressDialogFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_progress_dialog</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p>ダイアログ表示用のFragmentを作成したらレイアウトXMLを修正していきます。<br>LayoutEditor左下から<strong>Text</strong>タブをクリックしテキストエディタを表示し、以下の修正通り修正します。<br>以下レイアウトファイルを表示します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; fragment_progress_dialog.xml</p>\n</blockquote>\n<p>ここでテキストエディタモードでレイアウトを編集するとき、画面右端に表示されている<strong><em>Preview</em></strong>をクリックすると、リアルタイムにプレビューを表示されるので利用してみてください。<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/prevtextmode.png\" width=\"500\" title=\"Preview in TextEditorMode\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_progress_dialog.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.ProgressDialogFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ProgressCircle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@android:style/Widget.DeviceDefault.Light.ProgressBar.Large\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@+id/ProgressCircle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"書籍情報を検索中...\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"15dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textAlignment</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>ProgressDialogFragment</code>が作成できたらダイアログ表示用のFragmentにするため、親クラスを<strong>DialogFramgnet</strong>に変更します。<br>この<strong>DialogFragment</strong>への変更で気をつけて欲しいのがインポートされるパッケージです。<br>以下のパッケージが追加されていることを確認してください。</p>\n<blockquote>\n<p>import android.support.v4.app.DialogFragment;</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption><span>ProgressDialogFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressDialogFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ソフトバックボタンを無効化</span></span><br><span class=\"line\">        getDialog().setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_progress_dialog, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列変数を初期化</span></span><br><span class=\"line\">        term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = getArguments().getString(<span class=\"string\">\"term\"</span>, <span class=\"string\">\"Android\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// プログレスFragmentをインスタンス化</span></span><br><span class=\"line\">        ProgressDialogFragment progressDialog = <span class=\"keyword\">new</span> ProgressDialogFragment();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    \t...一部省略</span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// プログレスFragmentを終了させるためにマネージャークラスを取得</span></span><br><span class=\"line\">            FragmentTransaction ft = getChildFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出</span></span><br><span class=\"line\">            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(<span class=\"string\">\"Dialog\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// DialogFragmentを取得できた場合</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (progressDialog != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ダイアログを非表示にする</span></span><br><span class=\"line\">                progressDialog.dismiss();</span><br><span class=\"line\">                <span class=\"comment\">// FragmentManagerの管理から除外</span></span><br><span class=\"line\">                ft.remove(progressDialog);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// FragmentManagerへの変更を反映(確定)</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), resultList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>上記実装が終わったら動作確認してください。<br>検索結果画面へ画面遷移した際に半透過に一部白いウィンドウのダイアログが表示されると思います。</p>\n<h3><span id=\"dialogとalertdialog\">DialogとAlertDialog</span></h3><p><code>DialogFragment</code>クラスはDialogクラスのオブジェクトを保持しており、Dialogオブジェクトに生成したレイアウトを表示させます。<br>またDialogには利用方法によって利用するクラスが２種類ありますそれが<strong>Dialog</strong>と<strong>AlertDialog</strong>です。<br>Dialogは開発者が指定したレイアウトを表示するだけで、ユーザへの情報を表示するために利用することが多いと思われます。</p>\n<p>AlertDialogは開発者が指定したレイアウトの他に”OK”,”Cancel”などのボタンがメインレイアウトとは別に準備されており、ユーザに応答を求めるときや確認のダイアログとして利用することが多いです。</p>\n<h2><span id=\"読み込みキャンセル機能\">読み込みキャンセル機能</span></h2><p>先ほどの実装では検索結果が表示されるまでアプリユーザは何もすることができませんでしたが、読み込み中でも検索画面に戻れるように<code>AlertDialog</code>を使用してキャンセルボタンをダイアログに追加します。<br><figure class=\"highlight java\"><figcaption><span>ProgressDialogFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressDialogFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        getDialog().setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_progress_dialog, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">onCreateDialog</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ダイアログ表示するレイアウトを生成</span></span><br><span class=\"line\">        View view = getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// アラートダイアログビルダーを使ってボタン付きのダイアログを生成</span></span><br><span class=\"line\">        AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">                .setView(view)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"キャンセル\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialogInterface, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">                        getActivity().finish();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 表示するダイアログを生成して返却\u000f</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">...一部省略</span><br><span class=\"line\">      <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">          <span class=\"comment\">// Activityが終了していたら処理をしない</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (getActivity() == <span class=\"keyword\">null</span> || getActivity().isFinishing() || getActivity().isDestroyed()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">          <span class=\"comment\">// プログレスFragmentを終了させるためにマネージャークラスを取得</span></span><br><span class=\"line\">          FragmentTransaction ft = getChildFragmentManager().beginTransaction();</span><br><span class=\"line\">          <span class=\"comment\">// FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出</span></span><br><span class=\"line\">          ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(<span class=\"string\">\"Dialog\"</span>);</span><br><span class=\"line\">          <span class=\"comment\">// DialogFragmentを取得できた場合</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (progressDialog != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// ダイアログを非表示にする</span></span><br><span class=\"line\">              progressDialog.dismiss();</span><br><span class=\"line\">              <span class=\"comment\">// FragmentManagerの管理から除外</span></span><br><span class=\"line\">              ft.remove(progressDialog);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// FragmentManagerへの変更を反映(確定)</span></span><br><span class=\"line\">          ft.commit();</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上記コードが実装できたら動作確認してください。<br>読み込み中のダイアログにキャンセルボタンが追加され、キャンセルボタンを押下すると検索画面に戻れるようになっているはずです。</p>\n<h3><span id=\"dialogfragmentのライフサイクル\">DialogFragmentのライフサイクル</span></h3><p><code>DialogFragment</code>を使用してダイアログ表示を行う場合に、ライフサイクルが通常のFragmentクラスと少し違うため、注意が必要です。</p>\n<p>getLayoutInflater -&gt; onCreateDialog -&gt; onCreateView -&gt; onActivityCreated</p>\n<h1><span id=\"最後に検索した文字列を保持する機能\">最後に検索した文字列を保持する機能</span></h1><p>以前にアプリが終了されてもデータが残る機能としてデータベース(Realm)を紹介しましたが、<br>データの量が少ない場合などに手軽に使える機能をAndroidは備えており、容易に使えます。<br>今回は<code>SharedPreference</code>という機能を使い検索した文言を保持する機能を実装していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 最後の検索文言を保持/取得するキー定数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREF_KEY = <span class=\"string\">\"LAST_TERM\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button historyBtn;</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">\t       View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            \t...一部省略</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Realmインスタンスがちゃんとクローズされること</span></span><br><span class=\"line\">                    realm.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// SharedPreferenceに保存</span></span><br><span class=\"line\">                SharedPreferences.Editor editor = MainActivity.<span class=\"keyword\">this</span>.getPreferences(Context.MODE_PRIVATE).edit();</span><br><span class=\"line\">                editor.putString(PREF_KEY, termString).apply();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 検索結果画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">\"terms\"</span>, termString);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">        historyBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, HistoryActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// SharedPreferenceに最後の検索条件が残っていたら登録する</span></span><br><span class=\"line\">        <span class=\"comment\">// SharedPreferenceにデータがない場合は空文字を設定する</span></span><br><span class=\"line\">        String lastTerm = <span class=\"keyword\">this</span>.getPreferences(Context.MODE_PRIVATE).getString(PREF_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        bookSearchEditor.setText(lastTerm);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認してください。<br>初回起動時のEditTextは空文字(何も表示されてない)となっており、何かしらの文言で検索を行いアプリを終了させます。<br>改めてアプリを起動したときにEditTextに検索した文言が表示されていることが確認できます。</p>\n<h2><span id=\"sharedpreference\">SharedPreference</span></h2><p>Android端末のアプリ専用領域に環境設定としてKey-Value形式でデータを保存/参照できる機能。<br>SharedPreferenceのインスタンス化の引数ではインスタンス化するSharedPreferenceのアクセス許容範囲を指定できます。<br>今回は<code>Context.MODE_PRIVATE</code>ということで自アプリからしかアクセスできないSharedPreferenceを作成し、その中に”LAST_TERM”という鍵[Key]情報に[最後に検索した文字列]というデータ(Value)を保存しました。<br>JSONの概念が理解できている方は<code>{&quot;LAST_TERM&quot;:$term}</code>と保存されている認識で良いと思います。</p>\n<p>またSharedPreferenceは名前をつけて複数作成することができ、<strong>JSONファイルを作成してJSON形式でデータを保持している</strong>と思っていただいても良いと思います。</p>\n<p>簡単に利用できるSharedPreferenceですが、起動時にメモリ上に読み込む仕様になっているため、大量のSharedPreferenceやデータの保持はアプリの挙動に影響を与える可能性があるので少量で使うようにすることをお勧めします。</p>\n<h1><span id=\"androidプロジェクトの整理\">Androidプロジェクトの整理</span></h1><p>ここに至るまでに複数のActivityやFragmentを作成し、類似するネーミングのものも存在するため、ツリー表示が見にくく感じます。<br>そこで作成したファイルごとにパッケージを分けて保存することで探しやすさと視認性をよくしていきます。</p>\n<p>このときにマウス操作でドラッグ&amp;ドロップを行うとjavaクラスファイルの格納場所を示すPackage(パッケージ)情報に不整合が発生してしまい、<br>修正が大変になることがあります。<br>Package情報の整合性を保ちつつjavaクラスの格納場所を変更するにはAndroid Studioの<code>Refactor -&gt; Move</code>機能を使って格納場所を変更します。<br>方法としてはまず、分類分けするためのPackageを追加します、このPackageはフォルダとして実態が生成されます。<br><strong>プロジェクトツリーで右クリックから以下を選択</strong></p>\n<blockquote>\n<p>New -&gt; Package</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage01.png\" width=\"550\" title=\"Organaized Project Package\">\n<p>続いて作成するPackage名を入力し、<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage02.png\" width=\"450\" title=\"Organaized Project Package\"><br>分類用のPackageが作成されたら<strong>プロジェクトツリーで右クリックから以下を選択</strong></p>\n<blockquote>\n<p>Refactor -&gt; Mode…</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage03.png\" width=\"500\" title=\"Organaized Project Package\">\n<p>次に移動先を選択するために”To Package”列の<code>...</code>ボタンをクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage04.png\" width=\"500\" title=\"Organaized Project Package\"><br>先ほど作成した<code>bookdiscovery.Activity</code>を選択し、<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage05.png\" width=\"500\" title=\"Organaized Project Package\"><br><code>bookdiscovery.Activity</code>が選択されていることを確認し、<code>Refactor</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage06.png\" width=\"500\" title=\"Organaized Project Package\"><br>プロジェクトツリー表示を確認すると<code>HistoryActivity.java</code>が<strong>…*.bookdiscovery.Activity</strong>配下に移動します<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage07.png\" width=\"500\" title=\"Organaized Project Package\"><br>このときに<code>HistoryActivity.java</code>を参照している<code>MainActivity.java</code>や<code>AndroidManifest.xml</code>ファイルも変更が加わっています。<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage08.png\" width=\"500\" title=\"Organaized Project Package\"><br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage09.png\" width=\"500\" title=\"Organaized Project Package\"><br>また作業中に以下のようなメッセージが下部のツールエリアに表示されることがありますが、これは置換箇所や深い階層での参照が見つかった場合などに表示されることがあります。<br>置換箇所のプレビューになるのでないように問題がなければ<code>Do Refactor</code>をクリックします<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage10.png\" width=\"500\" title=\"Organaized Project Package\"><br>以上の手順でPackageの分割や不整合のないファイル移動を行います。<br>今回は以下の通りに格納されるようにjavaクラスファイルを移動させて見てください<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage10.png\" width=\"500\" title=\"Organaized Project Package\"></p>\n<p>以上で、操作性・ユーザ体験の改善に関する解説は終了です。<br>次の<a href=\"/AndroidCourse/android/11-BrowseWebPage\">蔵書詳細の元ウェブページの表示</a>ではWebViewや他アプリへの連携などを学習します。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>操作性ユーザ体感の改善の中でダイアログやデータベース以外の保存機能を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#ユーザ体験の改善\">ユーザ体験の改善</a></li>\n<li><a href=\"#データ読み込み中のダイアログ表示機能\">データ読み込み中のダイアログ表示機能</a><ul>\n<li><a href=\"#カスタムdialogfragment作成\">カスタムDialogFragment作成</a><ul>\n<li><a href=\"#dialogとalertdialog\">DialogとAlertDialog</a></li>\n</ul>\n</li>\n<li><a href=\"#読み込みキャンセル機能\">読み込みキャンセル機能</a><ul>\n<li><a href=\"#dialogfragmentのライフサイクル\">DialogFragmentのライフサイクル</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#最後に検索した文字列を保持する機能\">最後に検索した文字列を保持する機能</a><ul>\n<li><a href=\"#sharedpreference\">SharedPreference</a></li>\n</ul>\n</li>\n<li><a href=\"#androidプロジェクトの整理\">Androidプロジェクトの整理</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>DialogFragment</li>\n<li>SharedPreference</li>\n<li>プロジェクトのパッケージ整理</li>\n</ul>\n<p>Androidアプリでデータ通信中にユーザ操作を受けずにユーザにアプリの状況を伝えるためにダイアログ表示の方法を学習します。<br>また、アプリ内でデータベース以外にデータを保持する方法としてSharedPreferenceの機能を学習します。</p>\n<h1 id=\"ユーザ体験の改善\"><a href=\"#ユーザ体験の改善\" class=\"headerlink\" title=\"ユーザ体験の改善\"></a>ユーザ体験の改善</h1><p>前ページまでに実装してきたアプリの中で、データ読み込み中に画面が真っ白になってしまい読み込み時間が長くなるとアプリが止まってしまったと感じてアプリを終了するユーザがいるかもしれません。<br>そこで、アプリが動いていることを通知するためにダイアログ表示を行うように処理を実装していきます。</p>\n<h1 id=\"データ読み込み中のダイアログ表示機能\"><a href=\"#データ読み込み中のダイアログ表示機能\" class=\"headerlink\" title=\"データ読み込み中のダイアログ表示機能\"></a>データ読み込み中のダイアログ表示機能</h1><p>Androidアプリでダイアログを表示するためには<code>DialogFragment</code>クラスを継承したカスタムクラスを作成し、作成したカスタムクラスにどういった内容でダイアログ表示を行うか実装して行く。</p>\n<h2 id=\"カスタムDialogFragment作成\"><a href=\"#カスタムDialogFragment作成\" class=\"headerlink\" title=\"カスタムDialogFragment作成\"></a>カスタムDialogFragment作成</h2><p>以下の手順から新規javaクラスを作成します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/cdialogfrag01.png\" width=\"450\" title=\"Create DialogFragment\">\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>ProgressDialogFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_progress_dialog</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p>ダイアログ表示用のFragmentを作成したらレイアウトXMLを修正していきます。<br>LayoutEditor左下から<strong>Text</strong>タブをクリックしテキストエディタを表示し、以下の修正通り修正します。<br>以下レイアウトファイルを表示します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; fragment_progress_dialog.xml</p>\n</blockquote>\n<p>ここでテキストエディタモードでレイアウトを編集するとき、画面右端に表示されている<strong><em>Preview</em></strong>をクリックすると、リアルタイムにプレビューを表示されるので利用してみてください。<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/prevtextmode.png\" width=\"500\" title=\"Preview in TextEditorMode\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_progress_dialog.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.ProgressDialogFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/ProgressCircle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">style</span>=<span class=\"string\">\"@android:style/Widget.DeviceDefault.Light.ProgressBar.Large\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@+id/ProgressCircle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"書籍情報を検索中...\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"15dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textAlignment</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>ProgressDialogFragment</code>が作成できたらダイアログ表示用のFragmentにするため、親クラスを<strong>DialogFramgnet</strong>に変更します。<br>この<strong>DialogFragment</strong>への変更で気をつけて欲しいのがインポートされるパッケージです。<br>以下のパッケージが追加されていることを確認してください。</p>\n<blockquote>\n<p>import android.support.v4.app.DialogFragment;</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption><span>ProgressDialogFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressDialogFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// ソフトバックボタンを無効化</span></span><br><span class=\"line\">        getDialog().setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_progress_dialog, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列変数を初期化</span></span><br><span class=\"line\">        term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = getArguments().getString(<span class=\"string\">\"term\"</span>, <span class=\"string\">\"Android\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// プログレスFragmentをインスタンス化</span></span><br><span class=\"line\">        ProgressDialogFragment progressDialog = <span class=\"keyword\">new</span> ProgressDialogFragment();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    \t...一部省略</span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// プログレスFragmentを終了させるためにマネージャークラスを取得</span></span><br><span class=\"line\">            FragmentTransaction ft = getChildFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出</span></span><br><span class=\"line\">            ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(<span class=\"string\">\"Dialog\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// DialogFragmentを取得できた場合</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (progressDialog != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ダイアログを非表示にする</span></span><br><span class=\"line\">                progressDialog.dismiss();</span><br><span class=\"line\">                <span class=\"comment\">// FragmentManagerの管理から除外</span></span><br><span class=\"line\">                ft.remove(progressDialog);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// FragmentManagerへの変更を反映(確定)</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), resultList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>上記実装が終わったら動作確認してください。<br>検索結果画面へ画面遷移した際に半透過に一部白いウィンドウのダイアログが表示されると思います。</p>\n<h3 id=\"DialogとAlertDialog\"><a href=\"#DialogとAlertDialog\" class=\"headerlink\" title=\"DialogとAlertDialog\"></a>DialogとAlertDialog</h3><p><code>DialogFragment</code>クラスはDialogクラスのオブジェクトを保持しており、Dialogオブジェクトに生成したレイアウトを表示させます。<br>またDialogには利用方法によって利用するクラスが２種類ありますそれが<strong>Dialog</strong>と<strong>AlertDialog</strong>です。<br>Dialogは開発者が指定したレイアウトを表示するだけで、ユーザへの情報を表示するために利用することが多いと思われます。</p>\n<p>AlertDialogは開発者が指定したレイアウトの他に”OK”,”Cancel”などのボタンがメインレイアウトとは別に準備されており、ユーザに応答を求めるときや確認のダイアログとして利用することが多いです。</p>\n<h2 id=\"読み込みキャンセル機能\"><a href=\"#読み込みキャンセル機能\" class=\"headerlink\" title=\"読み込みキャンセル機能\"></a>読み込みキャンセル機能</h2><p>先ほどの実装では検索結果が表示されるまでアプリユーザは何もすることができませんでしたが、読み込み中でも検索画面に戻れるように<code>AlertDialog</code>を使用してキャンセルボタンをダイアログに追加します。<br><figure class=\"highlight java\"><figcaption><span>ProgressDialogFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressDialogFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        getDialog().setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_progress_dialog, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">onCreateDialog</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ダイアログ表示するレイアウトを生成</span></span><br><span class=\"line\">        View view = getActivity().getLayoutInflater().inflate(R.layout.fragment_progress_dialog, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// アラートダイアログビルダーを使ってボタン付きのダイアログを生成</span></span><br><span class=\"line\">        AlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">                .setView(view)</span><br><span class=\"line\">                .setPositiveButton(<span class=\"string\">\"キャンセル\"</span>, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialogInterface, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">                        getActivity().finish();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 表示するダイアログを生成して返却\u000f</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">...一部省略</span><br><span class=\"line\">      <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      \t<span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">          <span class=\"comment\">// Activityが終了していたら処理をしない</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (getActivity() == <span class=\"keyword\">null</span> || getActivity().isFinishing() || getActivity().isDestroyed()) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">          <span class=\"comment\">// プログレスFragmentを終了させるためにマネージャークラスを取得</span></span><br><span class=\"line\">          FragmentTransaction ft = getChildFragmentManager().beginTransaction();</span><br><span class=\"line\">          <span class=\"comment\">// FragmentManagerに登録されたFragmentからダイアログフラグメントを抽出</span></span><br><span class=\"line\">          ProgressDialogFragment progressDialog = (ProgressDialogFragment) getChildFragmentManager().findFragmentByTag(<span class=\"string\">\"Dialog\"</span>);</span><br><span class=\"line\">          <span class=\"comment\">// DialogFragmentを取得できた場合</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (progressDialog != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// ダイアログを非表示にする</span></span><br><span class=\"line\">              progressDialog.dismiss();</span><br><span class=\"line\">              <span class=\"comment\">// FragmentManagerの管理から除外</span></span><br><span class=\"line\">              ft.remove(progressDialog);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// FragmentManagerへの変更を反映(確定)</span></span><br><span class=\"line\">          ft.commit();</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上記コードが実装できたら動作確認してください。<br>読み込み中のダイアログにキャンセルボタンが追加され、キャンセルボタンを押下すると検索画面に戻れるようになっているはずです。</p>\n<h3 id=\"DialogFragmentのライフサイクル\"><a href=\"#DialogFragmentのライフサイクル\" class=\"headerlink\" title=\"DialogFragmentのライフサイクル\"></a>DialogFragmentのライフサイクル</h3><p><code>DialogFragment</code>を使用してダイアログ表示を行う場合に、ライフサイクルが通常のFragmentクラスと少し違うため、注意が必要です。</p>\n<p>getLayoutInflater -&gt; onCreateDialog -&gt; onCreateView -&gt; onActivityCreated</p>\n<h1 id=\"最後に検索した文字列を保持する機能\"><a href=\"#最後に検索した文字列を保持する機能\" class=\"headerlink\" title=\"最後に検索した文字列を保持する機能\"></a>最後に検索した文字列を保持する機能</h1><p>以前にアプリが終了されてもデータが残る機能としてデータベース(Realm)を紹介しましたが、<br>データの量が少ない場合などに手軽に使える機能をAndroidは備えており、容易に使えます。<br>今回は<code>SharedPreference</code>という機能を使い検索した文言を保持する機能を実装していきます。<br><figure class=\"highlight java\"><figcaption><span>MainActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 最後の検索文言を保持/取得するキー定数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String PREF_KEY = <span class=\"string\">\"LAST_TERM\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// レイアウトxmlと関連付けるWidget</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button bookSearchBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button historyBtn;</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">\t       View.OnClickListener bookSearchEvent = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            \t...一部省略</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Realmインスタンスがちゃんとクローズされること</span></span><br><span class=\"line\">                    realm.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// SharedPreferenceに保存</span></span><br><span class=\"line\">                SharedPreferences.Editor editor = MainActivity.<span class=\"keyword\">this</span>.getPreferences(Context.MODE_PRIVATE).edit();</span><br><span class=\"line\">                editor.putString(PREF_KEY, termString).apply();</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 検索結果画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, ResultListActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// EditTextに入力された文字列を\"KeyValuePair\"でResultListActivityに渡す</span></span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">\"terms\"</span>, termString);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書検索ボタンが押された時に実行するプログラムをボタンに登録</span></span><br><span class=\"line\">        bookSearchBtn.setOnClickListener(bookSearchEvent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 検索履歴ボタンをクリックした時の処理を実装</span></span><br><span class=\"line\">        historyBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 検索履歴画面へ遷移するためのIntentをインスタンス化</span></span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, HistoryActivity.class);</span><br><span class=\"line\">                <span class=\"comment\">// 画面遷移アクションを実行</span></span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// SharedPreferenceに最後の検索条件が残っていたら登録する</span></span><br><span class=\"line\">        <span class=\"comment\">// SharedPreferenceにデータがない場合は空文字を設定する</span></span><br><span class=\"line\">        String lastTerm = <span class=\"keyword\">this</span>.getPreferences(Context.MODE_PRIVATE).getString(PREF_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        bookSearchEditor.setText(lastTerm);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認してください。<br>初回起動時のEditTextは空文字(何も表示されてない)となっており、何かしらの文言で検索を行いアプリを終了させます。<br>改めてアプリを起動したときにEditTextに検索した文言が表示されていることが確認できます。</p>\n<h2 id=\"SharedPreference\"><a href=\"#SharedPreference\" class=\"headerlink\" title=\"SharedPreference\"></a>SharedPreference</h2><p>Android端末のアプリ専用領域に環境設定としてKey-Value形式でデータを保存/参照できる機能。<br>SharedPreferenceのインスタンス化の引数ではインスタンス化するSharedPreferenceのアクセス許容範囲を指定できます。<br>今回は<code>Context.MODE_PRIVATE</code>ということで自アプリからしかアクセスできないSharedPreferenceを作成し、その中に”LAST_TERM”という鍵[Key]情報に[最後に検索した文字列]というデータ(Value)を保存しました。<br>JSONの概念が理解できている方は<code>{&quot;LAST_TERM&quot;:$term}</code>と保存されている認識で良いと思います。</p>\n<p>またSharedPreferenceは名前をつけて複数作成することができ、<strong>JSONファイルを作成してJSON形式でデータを保持している</strong>と思っていただいても良いと思います。</p>\n<p>簡単に利用できるSharedPreferenceですが、起動時にメモリ上に読み込む仕様になっているため、大量のSharedPreferenceやデータの保持はアプリの挙動に影響を与える可能性があるので少量で使うようにすることをお勧めします。</p>\n<h1 id=\"Androidプロジェクトの整理\"><a href=\"#Androidプロジェクトの整理\" class=\"headerlink\" title=\"Androidプロジェクトの整理\"></a>Androidプロジェクトの整理</h1><p>ここに至るまでに複数のActivityやFragmentを作成し、類似するネーミングのものも存在するため、ツリー表示が見にくく感じます。<br>そこで作成したファイルごとにパッケージを分けて保存することで探しやすさと視認性をよくしていきます。</p>\n<p>このときにマウス操作でドラッグ&amp;ドロップを行うとjavaクラスファイルの格納場所を示すPackage(パッケージ)情報に不整合が発生してしまい、<br>修正が大変になることがあります。<br>Package情報の整合性を保ちつつjavaクラスの格納場所を変更するにはAndroid Studioの<code>Refactor -&gt; Move</code>機能を使って格納場所を変更します。<br>方法としてはまず、分類分けするためのPackageを追加します、このPackageはフォルダとして実態が生成されます。<br><strong>プロジェクトツリーで右クリックから以下を選択</strong></p>\n<blockquote>\n<p>New -&gt; Package</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage01.png\" width=\"550\" title=\"Organaized Project Package\">\n<p>続いて作成するPackage名を入力し、<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage02.png\" width=\"450\" title=\"Organaized Project Package\"><br>分類用のPackageが作成されたら<strong>プロジェクトツリーで右クリックから以下を選択</strong></p>\n<blockquote>\n<p>Refactor -&gt; Mode…</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage03.png\" width=\"500\" title=\"Organaized Project Package\">\n<p>次に移動先を選択するために”To Package”列の<code>...</code>ボタンをクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage04.png\" width=\"500\" title=\"Organaized Project Package\"><br>先ほど作成した<code>bookdiscovery.Activity</code>を選択し、<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage05.png\" width=\"500\" title=\"Organaized Project Package\"><br><code>bookdiscovery.Activity</code>が選択されていることを確認し、<code>Refactor</code>をクリック<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage06.png\" width=\"500\" title=\"Organaized Project Package\"><br>プロジェクトツリー表示を確認すると<code>HistoryActivity.java</code>が<strong>…*.bookdiscovery.Activity</strong>配下に移動します<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage07.png\" width=\"500\" title=\"Organaized Project Package\"><br>このときに<code>HistoryActivity.java</code>を参照している<code>MainActivity.java</code>や<code>AndroidManifest.xml</code>ファイルも変更が加わっています。<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage08.png\" width=\"500\" title=\"Organaized Project Package\"><br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage09.png\" width=\"500\" title=\"Organaized Project Package\"><br>また作業中に以下のようなメッセージが下部のツールエリアに表示されることがありますが、これは置換箇所や深い階層での参照が見つかった場合などに表示されることがあります。<br>置換箇所のプレビューになるのでないように問題がなければ<code>Do Refactor</code>をクリックします<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage10.png\" width=\"500\" title=\"Organaized Project Package\"><br>以上の手順でPackageの分割や不整合のないファイル移動を行います。<br>今回は以下の通りに格納されるようにjavaクラスファイルを移動させて見てください<br><img src=\"/AndroidCourse/android/10-OrganizeExperience/orgpackage10.png\" width=\"500\" title=\"Organaized Project Package\"></p>\n<p>以上で、操作性・ユーザ体験の改善に関する解説は終了です。<br>次の<a href=\"/AndroidCourse/android/11-BrowseWebPage\">蔵書詳細の元ウェブページの表示</a>ではWebViewや他アプリへの連携などを学習します。</p>\n"},{"title":"蔵書詳細の元ウェブページの表示","date":"2018-03-05T15:00:00.000Z","_content":"蔵書詳細の元となるウェブページを表示する中でWebViewを使ったWebページの実装を学習します。\n\n<!-- toc -->\n\n[操作性・ユーザ体験の改善](/AndroidCourse/android/10-OrganiseExperience)からの引き続きの学習ページです。\n# 学習ポイント\n* WebView実装の基礎\n* 既存のブラウザアプリで指定のURLを表示\n* Chrome Custom Tabs\n\nAndroidアプリにて自身(または法人)で管理している既存のホームページなどを表示したいなどの場合があります。\nその場合にAndroidではアプリ内で表示する方法、またはAndroidデバイスにインストールされたブラウザアプリ(Chromeやmobile safari)にURLを教えて表示する２つの方法があります。\n本ページでは上記２つの機能を実装しながら機能を学習します。\n\n# WebView と Chrome Custom Tabs\n最近はAndroidに置いてChrome Custom TabsというWebViewやChromeアプリより高速な表示を行えるコンポーネントも出てきました、これには一部デメリットもあるのですが、非常に高速でセキュリティ面を考慮したコンポーネントになっています。\n\n## メリット & デメリット\n\n|コンポーネント       |メリット|デメリット|\n|:------------------|-------|---------|\n|WebView            |・URL毎のハンドリング可 <br> ・javascriptの実行可|・ソーシャルログイン不可|\n|Chrome Custom Tabs |・表示が早い <br> ・ソーシャルログイン可|・URL毎のハンドリング不可 <br> ・javascriptの実行不可|\n\nソーシャルログインに関しては[Google Developers](https://developers.googleblog.com/2016/08/modernizing-oauth-interactions-in-native-apps.html)でも勧告され2017/4/20よりWebViewでのソーシャルログインは廃止されGoogleのSDKかChrome Custom Tabsでの実装に切り替えるよう支持されています。\n\n# WebView表示の実装\n新しくFragmentを作成しレイアウトにWebViewを配置し、幅や高さを設定していきます。\n今回はProjectウィンドウから`Fragment`ディレクトリを選択した状態で新規Fragment作成の手順を行います。\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/11-BrowseWebPage/CrWebViewFragment.png 550 CreateWebViewFragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |BTWebViewFragment                       |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_btweb_view                     |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\n\n**WebViewでの表示を行うために現状からは以下３つの修正が必要になります。**\n1. Modelクラス(DetailDataModel.java)にWebページリンクを取得するパラメータ(変数)を追加\n2. WebView表示Fragmentの実装\n3. DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置\n\n## 1.DetailDataModelクラスを編集\nWebViewへのURLを調べるために[Google Androidアプリ開発ガイド](https://www.googleapis.com/books/v1/volumes/zgkQ8p4zUPsC)の蔵書単体情報を取得するAPIの検索結果を確認します。\nAPIの結果には**previewLink**、**infoLink**という項目があり、それぞれのURLをさらにブラウザで確認するとGoogle BooksのURLとPlayStoreの書籍画面のURLであることがわかります。\n{% img /android/11-BrowseWebPage/ConfirmParams.png 500 ConfirmResponse %}\nまた２つの情報の階層としては`VolumeInfo`の中であることがわかりましたので、一旦この項目２つを`DetailDataModel`クラスのパラメータに追加します。\n```java DetailDataModel.java\n    // 蔵書概要クラス\n    public class VolumeInfo {\n    \t...一部省略\n        // 蔵書サムネイル画像URL\n        public ImageLinks imageLinks;\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Google BooksへのリンクURL\n        public String previewLink;\n        // Play StoreへのリンクURL\n        public String infoLink;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    // 蔵書サムネイルクラス\n    public class ImageLinks {\n        // 蔵書小サイズサムネイル\n        public String smallThumbnail;\n        // 蔵書サムネイル\n        public String thumbnail;\n        // 中サイズ表示画像\n        public String medium;\n    }\n```\n\n取得パラメータの追加は完了しました、取得したパラメータのURLは`BTWebViewFragment`へ遷移する時の連携データとして使用します。\n\n## 2.WebView表示Fragmentの実装\n続いて実際に表示する`BTWebViewFragment`を実装していきます、レイアウトには`WebView`コンポーネントを配置し、BTWebViewFragmentクラスにはWebViewでの表示プログラムを実装します。\n\n### レイアウト作成\n以下ファイルを開き、テキストエディタモードでレイアウトを編集します。\n\n> app -> res -> layout -> fragment_btweb_view.xml\n\n```XML fragment_btweb_view.xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.Fragment.BTWebViewFragment\">\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n        <WebView\n        android:id=\"@+id/FragmentWebView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n</FrameLayout>\n```\n\n`BTWebViewFragment`に置けるレイアウトとしてはWebViewで対象URLのウェブページを表示するだけなので`WebView`コンポーネントをは配置し画面全体に表示して完了です。\n`FrameLayout`は他のLayout(LinearLayout,RelativeLayout,ConstraintLayout)と違い子Viewを配置するための便利な機能を持ち合わせていないことが特徴で、\n今回のように単純なレイアウトであったり、表示座標を固定して表示したい場合にのみ`FrameLayout`コンポーネントを使用することをお勧めします。\n\n### BTWebViewFragment実装\n`BTWebViewFragment`クラスは蔵書詳細画面から表示するURLデータを連携してもらい、\nアプリ内のWebViewで表示するための設定をしてからURLの読み込みを開始するよう実装します。\n```java BTWebViewFragment.java\npublic class BTWebViewFragment extends Fragment {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // データ連携用定数\n    public static final String BUNDLE_URL = \"BUNDLE_URL\";\n\n    // バインドコンポーネント\n    private WebView webview;\n    // メンバ変数\n    private String defaultUrl;\n\n    // スタティックコンストラクタ\n    public static BTWebViewFragment getInstance(String previewLink) {\n        // BTWebViewFragmentインスタンスを生成\n        BTWebViewFragment fragment = new BTWebViewFragment();\n        // BTWebViewFragmentへデータを渡すためのBundleを初期化\n        Bundle args = new Bundle();\n        // Google Booksのウェブページリンクをデータ渡し\n        args.putString(BUNDLE_URL, previewLink);\n        // データ格納クラスをBTWebViewFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n\t\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_web_view, container, false);\n    }\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // 遷移時の連携データを取得\n        if (getArguments() != null) {\n            // 遷移時に登録したKeyValueデータがない場合はGoogleページを表示\n            defaultUrl = getArguments().getString(BUNDLE_URL, \"https://www.google.co.jp/\");\n        }\n\n        // レイアウトのコンポーネントをバインド\n        webview = getView().findViewById(R.id.FragmentWebView);\n        // 自身のWebViewで表示するためにWebViewClientをWebViewに設定\n        webview.setWebViewClient(new WebViewClient());\n        // URLの読み込み\n        webview.loadUrl(defaultUrl);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\nこれで`BTWebViewFragment`クラスの実装も完了です。\n\n## 3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置\n最後に**DetailFragment**から`BTWebViewFragment`へ遷移するためのボタンを配置し、遷移するためのコードを実装します。\n以下のようなレイアウトになるように実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout01.png 250 UpdateDetailFragment %}\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n```java DetailFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    private ImageView detailImage;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transWebviewBtn;\n    // Play Store リンクURL\n    private String infoLink;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Play Store へのリンクを代入\n                infoLink = detailData.volumeInfo.infoLink;\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n                // MainThreadに処理を渡し画面にデータを反映する\n                handler.post(new ReflectDetail(detailData));\n            }\n        ...一部省略\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    ...一部省略\n}\n```\n上記の通り、実装を進めると以下の箇所でエラーが出てくると思われます。\n> ft.replace(R.id.FragmentContainer, fragment);\n\n原因は`BTWebViewFragment`クラスで継承している**Fragment**クラスの問題になります。\n以前に[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)でFragmentクラスは以下の２種類あると解説をしました。\n> Android SDK上にはFragmentクラスが２種類あります。\n> * android.app.Fragment\n> * android.support.v4.app.Fragment\n\nDetailFragmentが継承しているFragmentは**android.support.v4.app.Fragment**になっているため、`getFragmentManager()`メソッドで取得できるFragmentManagerクラスは**support.v4のFragment**クラスだけということになります。\nAppCompatAcvitiyクラスでは`getFragmentManager()`と`getSupportFragmentManager()`の２つメソッドがありFragmentとの関連は以下の通りになります。\n\n* getFragmentManager() -> android.app.Fragment管理用\n* getSupportFragmentManager() -> android.support.v4.app.Fragment管理用\n\nということになります、気になる場合は`ResultListActivity`の実装を確認してみてください。\nではDetailFragmentのエラーを解消するために`BTWebViewFragment`を修正します。\n```java BTWebViewFragment.java\npackage kuririnz.xyz.bookdiscovery.Fragment;\n\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nimport android.app.Fragment;\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nimport android.support.v4.app.Fragment;\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport kuririnz.xyz.bookdiscovery.R;\n\n/**\n * 蔵書詳細情報のウェブページを表示するFragment\n */\npublic class BTWebViewFragment extends Fragment {\n    ...一部省略\n}\n```\n上記実装ができたら動作確認します。\n蔵書詳細画面から追加した**WEBVIEWで確認**ボタンをクリックしてアプリ内webViewで表示されることを確認します。\n\n`BTWebViewFragment`クラスの実装でアプリ内のWebViewで指定URLのウェブページを表示することができました、WebView内でリンクをタップするなどして遷移したウェブページでソフトウェアバックボタンをクリックすると蔵書詳細画面に戻ってしまうと思いますが、ハンドリングするためには`BTWebViewFragment`で`onCreateView`メソッドでレイアウト生成したViewインスタンスの**setOnKeyLisner**メソッドを実装する必要があります。\n\nまた、WebViewをURL毎にハンドリングしたり、表示したウェブページに対してjavascriptのコードを実行する場合などは、\n`WebViewClient`クラスを継承した自作クラスを作成し、各メソッドをオーバーライドして実装する必要があります。\n```java BTWebViewFragment.java\n        // 自身のWebViewで表示するためにWebViewClientをWebViewに設定\n        webview.setWebViewClient(new WebViewClient());\n```\n\nWebViewでのハンドリング等は当ページの後半で解説します。\n一旦は指定URLをWebViewで表示する実装に関しては以上になります。\n\n# 既存のブラウザアプリでウェブページを表示する\nBTWebViewFragmentへの遷移ボタンの下にもう一つボタンを追加し、ブラウザで表示するための機能を実装します。\n他のアプリを動作させる時の要素としては`Intent`を使用することを以前のページにも記載していますが、ブラウザでURLを開く場合も`Intent`を使用して実装します。\nレイアウトは以下の様になる様に実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout02.png 250 UpdateDetailFragment %}\n**レイアウトの修正**\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionBrouser\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ブラウザアプリで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n**DetailFragment**の実装\n```java DetailFragment.java\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n\n    ...一部省略\n    private Button transWebviewBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transitionBrowserBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // Play Store リンクURL\n    private String infoLink;\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);\n\n        // クリック時にブラウザアプリでURLを表示する処理を実装\n        transitionBrowserBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n\n        ...一部省略\n    }\n\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        } else if (view.getId() == R.id.TransitionBrowser) {\n            // \"ブラウザアプリで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // ブラウザアプリで開くためのIntentをインスタンス化\n            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n            // ブラウザアプリで指定URLを表示する\n            startActivity(intent);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n    ...一部省略\n}\n```\n上記コードを実装したら動作確認します。\n蔵書詳細画面の**ブラウザアプリで確認**ボタンをクリックした時に正常にブラウザアプリが表示またはブラウザアプリの選択ダイアログが表示され、選択したブラウザアプリが立ち上がることを確認します。\n\nAndroid OSはIntentを受け取ると第二引数のスキーム設定によって表示するアプリを判断します。\nIntentのコンストラクタの第一引数ではIntentが実行する処理を指定します、今回の第一引数は`Intent.ACTION_VIEW`を設定しており、この属性は第二引数に設定されるUriデータを処理できるアプリを表示する役割をIntentに与えることができます。\n\nそして、第二引数で渡したUriデータは`https://..`のURL情報になっておりスキーム箇所は`:`の前までとして判断してください。\n今回のスキームは`https:`となっており、処理できるアプリとしてブラウザアプリ(Chromeなど)を起動するようAndroid OSが判断します、対応するアプリが複数ある場合は表示するアプリを選択するダイアログの様な画面が表示され、ダイアログから選択したアプリが起動します。\n\n電話アプリやメーラーアプリ、自社開発の他アプリを起動することが多く、ほとんどの場合Intentの第一引数は`Intent.ACTION_VIEW`を設定して使用します。\n\n以上でブラウザアプリでの確認機能の実装解説は終了です。\n\n# Chrome Custom Tabs\nブラウザアプリの様なレイアウトで表示され表示までの処理が最も早いコンポーネントとなる**Chrome Custom Tabs**での確認機能を実装します。\n\n**Chrome Custom Tabs**はSupport Libraryに含まれるコンポーネントのため、`build.gradle`ファイルを修正する必要があります。\n記述する\"customtabs\"のバージョン指定は`implementation 'com.android.support:appcompat-v7:XX.XX.XX'`と同じバージョンを指定します。\n以下は資料作成時のアプリのサンプルです。\n```gradle build.gradle(Module: app)\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:27.0.2'\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    compile 'com.google.code.gson:gson:2.2.4'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    compile 'com.android.support:customtabs:27.0.2'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n続いてレイアウトは以下の様になる様に実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout03.png 250 UpdateDetailFragment %}\n**レイアウトの修正**\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            ...一部省略\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionBrouser\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ブラウザアプリで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionCustomTabs\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ChromeCustomTabsで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n**DetailFragment**の実装\n```java DetailFragment.java\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n\n    ...一部省略\n    private Button transWebviewBtn;\n    private Button transitionBrowserBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transCustomTabsBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // Play Store リンクURL\n    private String infoLink;\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transCustomTabsBtn = getView().findViewById(R.id.TransitionBrowser);\n\n        // クリック時にChrome Custom TabsでURLを表示する処理を実装\n        transCustomTabsBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // クリック時にブラウザアプリでURLを表示する処理を実装\n        transitionBrowserBtn.setOnClickListener(this);\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n\n        ...一部省略\n    }\n\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        } else if (view.getId() == R.id.TransitionBrowser) {\n            // \"ブラウザアプリで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // ブラウザアプリで開くためのIntentをインスタンス化\n            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n            // ブラウザアプリで指定URLを表示する\n            startActivity(intent);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        } else if (view.getId() == R.id.TransitionCustomTabs) {\n            // \"ChromeCustomTabsで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // Chrome Custom Tabsをインスタンス化\n            CustomTabsIntent tabsIntent = new CustomTabsIntent.Builder()\n                    .setShowTitle(true)\n                    .build();\n            // Custom Tabsを表示\n            tabsIntent.launchUrl(getActivity(), uri);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n    ...一部省略\n}\n```\n以上のコードを実装したら動作確認します。\n蔵書詳細画面の**ChromeCustomTabsで確認**ボタンをクリックした時に正常にChrome Custom Tabsが表示、またはブラウザアプリの選択ダイアログが表示され、選択した後にChrome Custom Tabsが表示されることが確認できると思います。\n\nChrome Custom Tabsは特殊なコンポーネントになっており、\"Intent\"に関しても`CustomTabsIntent`クラスを使います、このクラスの初期化は\"Builderパターン\"という形式で初期化する形式になっています。\n今回はウェブページのタイトルを表示するオプション設定を行いましたが、他にも起動/終了時のアニメーションなど設定可能項目がいくつか存在します。\nさらにIntentを起動する場合は初期化した`CustomTabsIntent`から`launchUrl`メソッドを使いChrome Custom Tabsで対象URLのウェブページを表示します。\n\n以上でChrome Custom Tabsの実装解説は終了です。\n\n# WebViewでのURLハンドリング\nAndroidアプリでWebViewを使う場合、多くの場合は個人(または法人)の管理サイト、またはサービス対象のウェブページに限った範囲でウェブページリンク遷移する場合は開発者が管理できます。\nしかし、外部のウェブページなどにもアクセスできてしまう場合、開発者が管理できない場面(ブラウザアプリはログインできるが、WebViewではできないなど)が考えられるため、管理外のURLの表示などはブラウザアプリを起動したり、特定のURLを表示しようとした場合に管理内のURLを表示させるなどのハンドリング（ある状況における処理）を行うことが必要になります。\n\nそのためには`WebViewClient`クラスを継承した自作クラスを作成し、各メソッドをカスタマイズして実装する必要があります。\nWebViewが次に読み込むURLを判別した後は`WebViewClient`のActivityやFragmentのライフサイクルと似た形でメソッドが実行されます。\n実行されるメソッドは多いのでよく使うメソッドをいくつか紹介します。\n\n|メソッド名|実行されるタイミング|\n|---------|:----------------|\n|shouldInterceptRequest(WebView, String)|・API Level 23- <br> ・画像等リソース読み込み時|\n|shouldInterceptRequest(WebView, WebResourceRequest)|・API Level 24+ <br> ・画像等リソース読み込み時|\n|shouldOverrideUrlLoading(WebView, String)|・API Level 23- <br> ・次回読み込みURL確定時(読み込み前)|\n|shouldOverrideUrlLoading(WebView, WebResourceRequest)|・API Level 24+ <br> ・次回読み込みURL確定時(読み込み前)|\n|onPageStarted(WebView, String, Bitmap)|HTML表示開始時|\n|onLoadResource(WebView, String)|HTML表示中の画像等表示時|\n|onPageFinished(WebView, String)|HTML表示終了時|\n\n多くの場合には`shouldOverrideUrlLoading()`メソッドをオーバーライドしてカスタマイズすることで期待通りの動作に仕上げられると思います。\n各メソッドの引数にはURL情報が含まれているのでURLを元に**条件分岐 if構文**などを使いハンドリングすることができます。\n\n`shouldOverrideUrlLoading()`や`shouldInterceptRequest()`メソッドは古いバージョンもサポート対象都する場合は2つのメソッドまたは第二引数が**String**型のメソッドを実装する必要があります。\nただ、第二引数が**String**型のメソッドは<font color=\"red\">**deprecated(廃止予定)**</font>となっているため、サポート対象とするOSバージョンをAPI level 24以上にしてしまうことも検討すると良いと思います。\n\n今回の蔵書検索アプリの資料の中では実際に実装箇所は含んでいませんが、表示するウェブページで実行できるプログラム**javascript**をアプリから実行することで、ウェブページ上のデータを取得したり、表示内容を変更することもできます。\n実行の手順としては以下の通りです。\n\n1. WebViewインスタンスで**javascript**の実行を有効化\n最初の`webView.loadUrl()`メソッドを実行する前に設定します。\n```java\n    webview.getSettings().setJavaScriptEnabled(true);\n```\n2. `shouldOverrideUrlLoading()`メソッドで\"javascript\"のコードを実行\n```java\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // Android OS 4.4(kitkat)~\n        webView.evaluateJavascript(\"javascript:document.write('JavaScriptが実行!');\", new ValueCallback<string>() { ...});\n    } else {\n        // Andorid OS ~4.3(jelly bean)\n        webView.loadUrl(\"javascript:document.write('JavaScriptが実行!');\");\t\t\n    }\n```\n\n上記の通り、AndroidのOSバージョンによってjavascriptの実行方法に差異があるので注意して実装してください。\nまたAndroid OS 4.4(Kitkat)以降で使えるメソッドでは処理結果を受け取ることも簡単にできる様になっています。\n\n以上で蔵書詳細の元ウェブページの表示の解説は終了です。","source":"_posts/android/11-BrowseWebPage.md","raw":"---\ntitle: 蔵書詳細の元ウェブページの表示\ndate: 2018-03-06\ntags:\n---\n蔵書詳細の元となるウェブページを表示する中でWebViewを使ったWebページの実装を学習します。\n\n<!-- toc -->\n\n[操作性・ユーザ体験の改善](/AndroidCourse/android/10-OrganiseExperience)からの引き続きの学習ページです。\n# 学習ポイント\n* WebView実装の基礎\n* 既存のブラウザアプリで指定のURLを表示\n* Chrome Custom Tabs\n\nAndroidアプリにて自身(または法人)で管理している既存のホームページなどを表示したいなどの場合があります。\nその場合にAndroidではアプリ内で表示する方法、またはAndroidデバイスにインストールされたブラウザアプリ(Chromeやmobile safari)にURLを教えて表示する２つの方法があります。\n本ページでは上記２つの機能を実装しながら機能を学習します。\n\n# WebView と Chrome Custom Tabs\n最近はAndroidに置いてChrome Custom TabsというWebViewやChromeアプリより高速な表示を行えるコンポーネントも出てきました、これには一部デメリットもあるのですが、非常に高速でセキュリティ面を考慮したコンポーネントになっています。\n\n## メリット & デメリット\n\n|コンポーネント       |メリット|デメリット|\n|:------------------|-------|---------|\n|WebView            |・URL毎のハンドリング可 <br> ・javascriptの実行可|・ソーシャルログイン不可|\n|Chrome Custom Tabs |・表示が早い <br> ・ソーシャルログイン可|・URL毎のハンドリング不可 <br> ・javascriptの実行不可|\n\nソーシャルログインに関しては[Google Developers](https://developers.googleblog.com/2016/08/modernizing-oauth-interactions-in-native-apps.html)でも勧告され2017/4/20よりWebViewでのソーシャルログインは廃止されGoogleのSDKかChrome Custom Tabsでの実装に切り替えるよう支持されています。\n\n# WebView表示の実装\n新しくFragmentを作成しレイアウトにWebViewを配置し、幅や高さを設定していきます。\n今回はProjectウィンドウから`Fragment`ディレクトリを選択した状態で新規Fragment作成の手順を行います。\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/11-BrowseWebPage/CrWebViewFragment.png 550 CreateWebViewFragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |BTWebViewFragment                       |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_btweb_view                     |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\n\n**WebViewでの表示を行うために現状からは以下３つの修正が必要になります。**\n1. Modelクラス(DetailDataModel.java)にWebページリンクを取得するパラメータ(変数)を追加\n2. WebView表示Fragmentの実装\n3. DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置\n\n## 1.DetailDataModelクラスを編集\nWebViewへのURLを調べるために[Google Androidアプリ開発ガイド](https://www.googleapis.com/books/v1/volumes/zgkQ8p4zUPsC)の蔵書単体情報を取得するAPIの検索結果を確認します。\nAPIの結果には**previewLink**、**infoLink**という項目があり、それぞれのURLをさらにブラウザで確認するとGoogle BooksのURLとPlayStoreの書籍画面のURLであることがわかります。\n{% img /android/11-BrowseWebPage/ConfirmParams.png 500 ConfirmResponse %}\nまた２つの情報の階層としては`VolumeInfo`の中であることがわかりましたので、一旦この項目２つを`DetailDataModel`クラスのパラメータに追加します。\n```java DetailDataModel.java\n    // 蔵書概要クラス\n    public class VolumeInfo {\n    \t...一部省略\n        // 蔵書サムネイル画像URL\n        public ImageLinks imageLinks;\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Google BooksへのリンクURL\n        public String previewLink;\n        // Play StoreへのリンクURL\n        public String infoLink;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    // 蔵書サムネイルクラス\n    public class ImageLinks {\n        // 蔵書小サイズサムネイル\n        public String smallThumbnail;\n        // 蔵書サムネイル\n        public String thumbnail;\n        // 中サイズ表示画像\n        public String medium;\n    }\n```\n\n取得パラメータの追加は完了しました、取得したパラメータのURLは`BTWebViewFragment`へ遷移する時の連携データとして使用します。\n\n## 2.WebView表示Fragmentの実装\n続いて実際に表示する`BTWebViewFragment`を実装していきます、レイアウトには`WebView`コンポーネントを配置し、BTWebViewFragmentクラスにはWebViewでの表示プログラムを実装します。\n\n### レイアウト作成\n以下ファイルを開き、テキストエディタモードでレイアウトを編集します。\n\n> app -> res -> layout -> fragment_btweb_view.xml\n\n```XML fragment_btweb_view.xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.Fragment.BTWebViewFragment\">\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n    <!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ -->\n        <WebView\n        android:id=\"@+id/FragmentWebView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ -->\n</FrameLayout>\n```\n\n`BTWebViewFragment`に置けるレイアウトとしてはWebViewで対象URLのウェブページを表示するだけなので`WebView`コンポーネントをは配置し画面全体に表示して完了です。\n`FrameLayout`は他のLayout(LinearLayout,RelativeLayout,ConstraintLayout)と違い子Viewを配置するための便利な機能を持ち合わせていないことが特徴で、\n今回のように単純なレイアウトであったり、表示座標を固定して表示したい場合にのみ`FrameLayout`コンポーネントを使用することをお勧めします。\n\n### BTWebViewFragment実装\n`BTWebViewFragment`クラスは蔵書詳細画面から表示するURLデータを連携してもらい、\nアプリ内のWebViewで表示するための設定をしてからURLの読み込みを開始するよう実装します。\n```java BTWebViewFragment.java\npublic class BTWebViewFragment extends Fragment {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // データ連携用定数\n    public static final String BUNDLE_URL = \"BUNDLE_URL\";\n\n    // バインドコンポーネント\n    private WebView webview;\n    // メンバ変数\n    private String defaultUrl;\n\n    // スタティックコンストラクタ\n    public static BTWebViewFragment getInstance(String previewLink) {\n        // BTWebViewFragmentインスタンスを生成\n        BTWebViewFragment fragment = new BTWebViewFragment();\n        // BTWebViewFragmentへデータを渡すためのBundleを初期化\n        Bundle args = new Bundle();\n        // Google Booksのウェブページリンクをデータ渡し\n        args.putString(BUNDLE_URL, previewLink);\n        // データ格納クラスをBTWebViewFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n\t\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_web_view, container, false);\n    }\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // 遷移時の連携データを取得\n        if (getArguments() != null) {\n            // 遷移時に登録したKeyValueデータがない場合はGoogleページを表示\n            defaultUrl = getArguments().getString(BUNDLE_URL, \"https://www.google.co.jp/\");\n        }\n\n        // レイアウトのコンポーネントをバインド\n        webview = getView().findViewById(R.id.FragmentWebView);\n        // 自身のWebViewで表示するためにWebViewClientをWebViewに設定\n        webview.setWebViewClient(new WebViewClient());\n        // URLの読み込み\n        webview.loadUrl(defaultUrl);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\nこれで`BTWebViewFragment`クラスの実装も完了です。\n\n## 3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置\n最後に**DetailFragment**から`BTWebViewFragment`へ遷移するためのボタンを配置し、遷移するためのコードを実装します。\n以下のようなレイアウトになるように実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout01.png 250 UpdateDetailFragment %}\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n```java DetailFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    private ImageView detailImage;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transWebviewBtn;\n    // Play Store リンクURL\n    private String infoLink;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        ...一部省略\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // Play Store へのリンクを代入\n                infoLink = detailData.volumeInfo.infoLink;\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n                // MainThreadに処理を渡し画面にデータを反映する\n                handler.post(new ReflectDetail(detailData));\n            }\n        ...一部省略\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    ...一部省略\n}\n```\n上記の通り、実装を進めると以下の箇所でエラーが出てくると思われます。\n> ft.replace(R.id.FragmentContainer, fragment);\n\n原因は`BTWebViewFragment`クラスで継承している**Fragment**クラスの問題になります。\n以前に[蔵書詳細画面作成](/AndroidCourse/android/09-RefactorFragment)でFragmentクラスは以下の２種類あると解説をしました。\n> Android SDK上にはFragmentクラスが２種類あります。\n> * android.app.Fragment\n> * android.support.v4.app.Fragment\n\nDetailFragmentが継承しているFragmentは**android.support.v4.app.Fragment**になっているため、`getFragmentManager()`メソッドで取得できるFragmentManagerクラスは**support.v4のFragment**クラスだけということになります。\nAppCompatAcvitiyクラスでは`getFragmentManager()`と`getSupportFragmentManager()`の２つメソッドがありFragmentとの関連は以下の通りになります。\n\n* getFragmentManager() -> android.app.Fragment管理用\n* getSupportFragmentManager() -> android.support.v4.app.Fragment管理用\n\nということになります、気になる場合は`ResultListActivity`の実装を確認してみてください。\nではDetailFragmentのエラーを解消するために`BTWebViewFragment`を修正します。\n```java BTWebViewFragment.java\npackage kuririnz.xyz.bookdiscovery.Fragment;\n\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nimport android.app.Fragment;\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nimport android.support.v4.app.Fragment;\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport kuririnz.xyz.bookdiscovery.R;\n\n/**\n * 蔵書詳細情報のウェブページを表示するFragment\n */\npublic class BTWebViewFragment extends Fragment {\n    ...一部省略\n}\n```\n上記実装ができたら動作確認します。\n蔵書詳細画面から追加した**WEBVIEWで確認**ボタンをクリックしてアプリ内webViewで表示されることを確認します。\n\n`BTWebViewFragment`クラスの実装でアプリ内のWebViewで指定URLのウェブページを表示することができました、WebView内でリンクをタップするなどして遷移したウェブページでソフトウェアバックボタンをクリックすると蔵書詳細画面に戻ってしまうと思いますが、ハンドリングするためには`BTWebViewFragment`で`onCreateView`メソッドでレイアウト生成したViewインスタンスの**setOnKeyLisner**メソッドを実装する必要があります。\n\nまた、WebViewをURL毎にハンドリングしたり、表示したウェブページに対してjavascriptのコードを実行する場合などは、\n`WebViewClient`クラスを継承した自作クラスを作成し、各メソッドをオーバーライドして実装する必要があります。\n```java BTWebViewFragment.java\n        // 自身のWebViewで表示するためにWebViewClientをWebViewに設定\n        webview.setWebViewClient(new WebViewClient());\n```\n\nWebViewでのハンドリング等は当ページの後半で解説します。\n一旦は指定URLをWebViewで表示する実装に関しては以上になります。\n\n# 既存のブラウザアプリでウェブページを表示する\nBTWebViewFragmentへの遷移ボタンの下にもう一つボタンを追加し、ブラウザで表示するための機能を実装します。\n他のアプリを動作させる時の要素としては`Intent`を使用することを以前のページにも記載していますが、ブラウザでURLを開く場合も`Intent`を使用して実装します。\nレイアウトは以下の様になる様に実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout02.png 250 UpdateDetailFragment %}\n**レイアウトの修正**\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionBrouser\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ブラウザアプリで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n**DetailFragment**の実装\n```java DetailFragment.java\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n\n    ...一部省略\n    private Button transWebviewBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transitionBrowserBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // Play Store リンクURL\n    private String infoLink;\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);\n\n        // クリック時にブラウザアプリでURLを表示する処理を実装\n        transitionBrowserBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n\n        ...一部省略\n    }\n\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        } else if (view.getId() == R.id.TransitionBrowser) {\n            // \"ブラウザアプリで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // ブラウザアプリで開くためのIntentをインスタンス化\n            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n            // ブラウザアプリで指定URLを表示する\n            startActivity(intent);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n    ...一部省略\n}\n```\n上記コードを実装したら動作確認します。\n蔵書詳細画面の**ブラウザアプリで確認**ボタンをクリックした時に正常にブラウザアプリが表示またはブラウザアプリの選択ダイアログが表示され、選択したブラウザアプリが立ち上がることを確認します。\n\nAndroid OSはIntentを受け取ると第二引数のスキーム設定によって表示するアプリを判断します。\nIntentのコンストラクタの第一引数ではIntentが実行する処理を指定します、今回の第一引数は`Intent.ACTION_VIEW`を設定しており、この属性は第二引数に設定されるUriデータを処理できるアプリを表示する役割をIntentに与えることができます。\n\nそして、第二引数で渡したUriデータは`https://..`のURL情報になっておりスキーム箇所は`:`の前までとして判断してください。\n今回のスキームは`https:`となっており、処理できるアプリとしてブラウザアプリ(Chromeなど)を起動するようAndroid OSが判断します、対応するアプリが複数ある場合は表示するアプリを選択するダイアログの様な画面が表示され、ダイアログから選択したアプリが起動します。\n\n電話アプリやメーラーアプリ、自社開発の他アプリを起動することが多く、ほとんどの場合Intentの第一引数は`Intent.ACTION_VIEW`を設定して使用します。\n\n以上でブラウザアプリでの確認機能の実装解説は終了です。\n\n# Chrome Custom Tabs\nブラウザアプリの様なレイアウトで表示され表示までの処理が最も早いコンポーネントとなる**Chrome Custom Tabs**での確認機能を実装します。\n\n**Chrome Custom Tabs**はSupport Libraryに含まれるコンポーネントのため、`build.gradle`ファイルを修正する必要があります。\n記述する\"customtabs\"のバージョン指定は`implementation 'com.android.support:appcompat-v7:XX.XX.XX'`と同じバージョンを指定します。\n以下は資料作成時のアプリのサンプルです。\n```gradle build.gradle(Module: app)\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:27.0.2'\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    compile 'com.google.code.gson:gson:2.2.4'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    compile 'com.android.support:customtabs:27.0.2'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n続いてレイアウトは以下の様になる様に実装します。\n{% img /android/11-BrowseWebPage/UpdateDetailLayout03.png 250 UpdateDetailFragment %}\n**レイアウトの修正**\n```XML fragment_detail.xml\n...一部省略\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            ...一部省略\n            <Button\n                android:id=\"@+id/TransitionWebView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"WebViewで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionBrouser\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ブラウザアプリで確認\"/>\n            <Button\n                android:id=\"@+id/TransitionCustomTabs\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"ChromeCustomTabsで確認\"/>\n        </LinearLayout>\n    </LinearLayout>\n...一部省略\n```\n**DetailFragment**の実装\n```java DetailFragment.java\npublic class DetailFragment extends Fragment implements View.OnClickListener {\n\n    ...一部省略\n    private Button transWebviewBtn;\n    private Button transitionBrowserBtn;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private Button transCustomTabsBtn;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // Play Store リンクURL\n    private String infoLink;\n    // 個体リンクのURL\n    private String selfLink;\n\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        ...一部省略\n        detailImage = getView().findViewById(R.id.DetailImage);\n        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);\n        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        transCustomTabsBtn = getView().findViewById(R.id.TransitionBrowser);\n\n        // クリック時にChrome Custom TabsでURLを表示する処理を実装\n        transCustomTabsBtn.setOnClickListener(this);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // クリック時にブラウザアプリでURLを表示する処理を実装\n        transitionBrowserBtn.setOnClickListener(this);\n        // BTWebViewFragmentへの遷移処理を実装\n        transWebviewBtn.setOnClickListener(this);\n\n        ...一部省略\n    }\n\n    // ボタンクリック時のイベントを実装\n    @Override\n    public void onClick(View view) {\n        // クリックされたボタンをIDで判定\n        if (view.getId() == R.id.TransitionWebView) {\n            // \"WebViewで確認\"ボタンをクリックした場合\n            // BTWebViewFragmentをインスタンス化\n            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);\n            // 別のFragmentに遷移するためのクラスをインスタンス化\n            FragmentTransaction ft = getFragmentManager().beginTransaction();\n            // 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え\n            ft.replace(R.id.FragmentContainer, fragment);\n            // 表示していたFragmentをバックスタックに追加\n            ft.addToBackStack(null);\n            // 変更を反映\n            ft.commit();\n        } else if (view.getId() == R.id.TransitionBrowser) {\n            // \"ブラウザアプリで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // ブラウザアプリで開くためのIntentをインスタンス化\n            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n            // ブラウザアプリで指定URLを表示する\n            startActivity(intent);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        } else if (view.getId() == R.id.TransitionCustomTabs) {\n            // \"ChromeCustomTabsで確認\"ボタンをクリックした場合\n            // ブラウザアプリで表示するURLをUriクラスにキャスト\n            Uri uri = Uri.parse(infoLink);\n            // Chrome Custom Tabsをインスタンス化\n            CustomTabsIntent tabsIntent = new CustomTabsIntent.Builder()\n                    .setShowTitle(true)\n                    .build();\n            // Custom Tabsを表示\n            tabsIntent.launchUrl(getActivity(), uri);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n    ...一部省略\n}\n```\n以上のコードを実装したら動作確認します。\n蔵書詳細画面の**ChromeCustomTabsで確認**ボタンをクリックした時に正常にChrome Custom Tabsが表示、またはブラウザアプリの選択ダイアログが表示され、選択した後にChrome Custom Tabsが表示されることが確認できると思います。\n\nChrome Custom Tabsは特殊なコンポーネントになっており、\"Intent\"に関しても`CustomTabsIntent`クラスを使います、このクラスの初期化は\"Builderパターン\"という形式で初期化する形式になっています。\n今回はウェブページのタイトルを表示するオプション設定を行いましたが、他にも起動/終了時のアニメーションなど設定可能項目がいくつか存在します。\nさらにIntentを起動する場合は初期化した`CustomTabsIntent`から`launchUrl`メソッドを使いChrome Custom Tabsで対象URLのウェブページを表示します。\n\n以上でChrome Custom Tabsの実装解説は終了です。\n\n# WebViewでのURLハンドリング\nAndroidアプリでWebViewを使う場合、多くの場合は個人(または法人)の管理サイト、またはサービス対象のウェブページに限った範囲でウェブページリンク遷移する場合は開発者が管理できます。\nしかし、外部のウェブページなどにもアクセスできてしまう場合、開発者が管理できない場面(ブラウザアプリはログインできるが、WebViewではできないなど)が考えられるため、管理外のURLの表示などはブラウザアプリを起動したり、特定のURLを表示しようとした場合に管理内のURLを表示させるなどのハンドリング（ある状況における処理）を行うことが必要になります。\n\nそのためには`WebViewClient`クラスを継承した自作クラスを作成し、各メソッドをカスタマイズして実装する必要があります。\nWebViewが次に読み込むURLを判別した後は`WebViewClient`のActivityやFragmentのライフサイクルと似た形でメソッドが実行されます。\n実行されるメソッドは多いのでよく使うメソッドをいくつか紹介します。\n\n|メソッド名|実行されるタイミング|\n|---------|:----------------|\n|shouldInterceptRequest(WebView, String)|・API Level 23- <br> ・画像等リソース読み込み時|\n|shouldInterceptRequest(WebView, WebResourceRequest)|・API Level 24+ <br> ・画像等リソース読み込み時|\n|shouldOverrideUrlLoading(WebView, String)|・API Level 23- <br> ・次回読み込みURL確定時(読み込み前)|\n|shouldOverrideUrlLoading(WebView, WebResourceRequest)|・API Level 24+ <br> ・次回読み込みURL確定時(読み込み前)|\n|onPageStarted(WebView, String, Bitmap)|HTML表示開始時|\n|onLoadResource(WebView, String)|HTML表示中の画像等表示時|\n|onPageFinished(WebView, String)|HTML表示終了時|\n\n多くの場合には`shouldOverrideUrlLoading()`メソッドをオーバーライドしてカスタマイズすることで期待通りの動作に仕上げられると思います。\n各メソッドの引数にはURL情報が含まれているのでURLを元に**条件分岐 if構文**などを使いハンドリングすることができます。\n\n`shouldOverrideUrlLoading()`や`shouldInterceptRequest()`メソッドは古いバージョンもサポート対象都する場合は2つのメソッドまたは第二引数が**String**型のメソッドを実装する必要があります。\nただ、第二引数が**String**型のメソッドは<font color=\"red\">**deprecated(廃止予定)**</font>となっているため、サポート対象とするOSバージョンをAPI level 24以上にしてしまうことも検討すると良いと思います。\n\n今回の蔵書検索アプリの資料の中では実際に実装箇所は含んでいませんが、表示するウェブページで実行できるプログラム**javascript**をアプリから実行することで、ウェブページ上のデータを取得したり、表示内容を変更することもできます。\n実行の手順としては以下の通りです。\n\n1. WebViewインスタンスで**javascript**の実行を有効化\n最初の`webView.loadUrl()`メソッドを実行する前に設定します。\n```java\n    webview.getSettings().setJavaScriptEnabled(true);\n```\n2. `shouldOverrideUrlLoading()`メソッドで\"javascript\"のコードを実行\n```java\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        // Android OS 4.4(kitkat)~\n        webView.evaluateJavascript(\"javascript:document.write('JavaScriptが実行!');\", new ValueCallback<string>() { ...});\n    } else {\n        // Andorid OS ~4.3(jelly bean)\n        webView.loadUrl(\"javascript:document.write('JavaScriptが実行!');\");\t\t\n    }\n```\n\n上記の通り、AndroidのOSバージョンによってjavascriptの実行方法に差異があるので注意して実装してください。\nまたAndroid OS 4.4(Kitkat)以降で使えるメソッドでは処理結果を受け取ることも簡単にできる様になっています。\n\n以上で蔵書詳細の元ウェブページの表示の解説は終了です。","slug":"11-BrowseWebPage","published":1,"updated":"2018-03-07T02:26:16.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0r6000a3l6164y48l8q","content":"<p>蔵書詳細の元となるウェブページを表示する中でWebViewを使ったWebページの実装を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#webview-と-chrome-custom-tabs\">WebView と Chrome Custom Tabs</a><ul>\n<li><a href=\"#メリット-デメリット\">メリット &amp; デメリット</a></li>\n</ul>\n</li>\n<li><a href=\"#webview表示の実装\">WebView表示の実装</a><ul>\n<li><a href=\"#1detaildatamodelクラスを編集\">1.DetailDataModelクラスを編集</a></li>\n<li><a href=\"#2webview表示fragmentの実装\">2.WebView表示Fragmentの実装</a><ul>\n<li><a href=\"#レイアウト作成\">レイアウト作成</a></li>\n<li><a href=\"#btwebviewfragment実装\">BTWebViewFragment実装</a></li>\n</ul>\n</li>\n<li><a href=\"#3detailfragmentクラス-webview表示fragmentへの遷移ボタンを配置\">3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</a></li>\n</ul>\n</li>\n<li><a href=\"#既存のブラウザアプリでウェブページを表示する\">既存のブラウザアプリでウェブページを表示する</a></li>\n<li><a href=\"#chrome-custom-tabs\">Chrome Custom Tabs</a></li>\n<li><a href=\"#webviewでのurlハンドリング\">WebViewでのURLハンドリング</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/10-OrganiseExperience\">操作性・ユーザ体験の改善</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>WebView実装の基礎</li>\n<li>既存のブラウザアプリで指定のURLを表示</li>\n<li>Chrome Custom Tabs</li>\n</ul>\n<p>Androidアプリにて自身(または法人)で管理している既存のホームページなどを表示したいなどの場合があります。<br>その場合にAndroidではアプリ内で表示する方法、またはAndroidデバイスにインストールされたブラウザアプリ(Chromeやmobile safari)にURLを教えて表示する２つの方法があります。<br>本ページでは上記２つの機能を実装しながら機能を学習します。</p>\n<h1><span id=\"webview-と-chrome-custom-tabs\">WebView と Chrome Custom Tabs</span></h1><p>最近はAndroidに置いてChrome Custom TabsというWebViewやChromeアプリより高速な表示を行えるコンポーネントも出てきました、これには一部デメリットもあるのですが、非常に高速でセキュリティ面を考慮したコンポーネントになっています。</p>\n<h2><span id=\"メリット-amp-デメリット\">メリット &amp; デメリット</span></h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">コンポーネント</th>\n<th>メリット</th>\n<th>デメリット</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">WebView</td>\n<td>・URL毎のハンドリング可 <br> ・javascriptの実行可</td>\n<td>・ソーシャルログイン不可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Chrome Custom Tabs</td>\n<td>・表示が早い <br> ・ソーシャルログイン可</td>\n<td>・URL毎のハンドリング不可 <br> ・javascriptの実行不可</td>\n</tr>\n</tbody>\n</table>\n<p>ソーシャルログインに関しては<a href=\"https://developers.googleblog.com/2016/08/modernizing-oauth-interactions-in-native-apps.html\" target=\"_blank\" rel=\"external\">Google Developers</a>でも勧告され2017/4/20よりWebViewでのソーシャルログインは廃止されGoogleのSDKかChrome Custom Tabsでの実装に切り替えるよう支持されています。</p>\n<h1><span id=\"webview表示の実装\">WebView表示の実装</span></h1><p>新しくFragmentを作成しレイアウトにWebViewを配置し、幅や高さを設定していきます。<br>今回はProjectウィンドウから<code>Fragment</code>ディレクトリを選択した状態で新規Fragment作成の手順を行います。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/11-BrowseWebPage/CrWebViewFragment.png\" width=\"550\" title=\"CreateWebViewFragment\">\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>BTWebViewFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_btweb_view</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p><strong>WebViewでの表示を行うために現状からは以下３つの修正が必要になります。</strong></p>\n<ol>\n<li>Modelクラス(DetailDataModel.java)にWebページリンクを取得するパラメータ(変数)を追加</li>\n<li>WebView表示Fragmentの実装</li>\n<li>DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</li>\n</ol>\n<h2><span id=\"1detaildatamodelクラスを編集\">1.DetailDataModelクラスを編集</span></h2><p>WebViewへのURLを調べるために<a href=\"https://www.googleapis.com/books/v1/volumes/zgkQ8p4zUPsC\" target=\"_blank\" rel=\"external\">Google Androidアプリ開発ガイド</a>の蔵書単体情報を取得するAPIの検索結果を確認します。<br>APIの結果には<strong>previewLink</strong>、<strong>infoLink</strong>という項目があり、それぞれのURLをさらにブラウザで確認するとGoogle BooksのURLとPlayStoreの書籍画面のURLであることがわかります。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/ConfirmParams.png\" width=\"500\" title=\"ConfirmResponse\"><br>また２つの情報の階層としては<code>VolumeInfo</code>の中であることがわかりましたので、一旦この項目２つを<code>DetailDataModel</code>クラスのパラメータに追加します。<br><figure class=\"highlight java\"><figcaption><span>DetailDataModel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 蔵書概要クラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeInfo</span> </span>&#123;</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイル画像URL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ImageLinks imageLinks;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// Google BooksへのリンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String previewLink;</span><br><span class=\"line\">    <span class=\"comment\">// Play StoreへのリンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 蔵書サムネイルクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageLinks</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書小サイズサムネイル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String smallThumbnail;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String thumbnail;</span><br><span class=\"line\">    <span class=\"comment\">// 中サイズ表示画像</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String medium;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取得パラメータの追加は完了しました、取得したパラメータのURLは<code>BTWebViewFragment</code>へ遷移する時の連携データとして使用します。</p>\n<h2><span id=\"2webview表示fragmentの実装\">2.WebView表示Fragmentの実装</span></h2><p>続いて実際に表示する<code>BTWebViewFragment</code>を実装していきます、レイアウトには<code>WebView</code>コンポーネントを配置し、BTWebViewFragmentクラスにはWebViewでの表示プログラムを実装します。</p>\n<h3><span id=\"レイアウト作成\">レイアウト作成</span></h3><p>以下ファイルを開き、テキストエディタモードでレイアウトを編集します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; fragment_btweb_view.xml</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption><span>fragment_btweb_view.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.Fragment.BTWebViewFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/FragmentWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>BTWebViewFragment</code>に置けるレイアウトとしてはWebViewで対象URLのウェブページを表示するだけなので<code>WebView</code>コンポーネントをは配置し画面全体に表示して完了です。<br><code>FrameLayout</code>は他のLayout(LinearLayout,RelativeLayout,ConstraintLayout)と違い子Viewを配置するための便利な機能を持ち合わせていないことが特徴で、<br>今回のように単純なレイアウトであったり、表示座標を固定して表示したい場合にのみ<code>FrameLayout</code>コンポーネントを使用することをお勧めします。</p>\n<h3><span id=\"btwebviewfragment実装\">BTWebViewFragment実装</span></h3><p><code>BTWebViewFragment</code>クラスは蔵書詳細画面から表示するURLデータを連携してもらい、<br>アプリ内のWebViewで表示するための設定をしてからURLの読み込みを開始するよう実装します。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BTWebViewFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// データ連携用定数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUNDLE_URL = <span class=\"string\">\"BUNDLE_URL\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// バインドコンポーネント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebView webview;</span><br><span class=\"line\">    <span class=\"comment\">// メンバ変数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BTWebViewFragment <span class=\"title\">getInstance</span><span class=\"params\">(String previewLink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentインスタンスを生成</span></span><br><span class=\"line\">        BTWebViewFragment fragment = <span class=\"keyword\">new</span> BTWebViewFragment();</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへデータを渡すためのBundleを初期化</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// Google Booksのウェブページリンクをデータ渡し</span></span><br><span class=\"line\">        args.putString(BUNDLE_URL, previewLink);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをBTWebViewFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_web_view, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遷移時の連携データを取得</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遷移時に登録したKeyValueデータがない場合はGoogleページを表示</span></span><br><span class=\"line\">            defaultUrl = getArguments().getString(BUNDLE_URL, <span class=\"string\">\"https://www.google.co.jp/\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// レイアウトのコンポーネントをバインド</span></span><br><span class=\"line\">        webview = getView().findViewById(R.id.FragmentWebView);</span><br><span class=\"line\">        <span class=\"comment\">// 自身のWebViewで表示するためにWebViewClientをWebViewに設定</span></span><br><span class=\"line\">        webview.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient());</span><br><span class=\"line\">        <span class=\"comment\">// URLの読み込み</span></span><br><span class=\"line\">        webview.loadUrl(defaultUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>これで<code>BTWebViewFragment</code>クラスの実装も完了です。</p>\n<h2><span id=\"3detailfragmentクラス-webview表示fragmentへの遷移ボタンを配置\">3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</span></h2><p>最後に<strong>DetailFragment</strong>から<code>BTWebViewFragment</code>へ遷移するためのボタンを配置し、遷移するためのコードを実装します。<br>以下のようなレイアウトになるように実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout01.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView detailImage;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// Play Store へのリンクを代入</span></span><br><span class=\"line\">                infoLink = detailData.volumeInfo.infoLink;</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">                <span class=\"comment\">// MainThreadに処理を渡し画面にデータを反映する</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> ReflectDetail(detailData));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記の通り、実装を進めると以下の箇所でエラーが出てくると思われます。</p>\n<blockquote>\n<p>ft.replace(R.id.FragmentContainer, fragment);</p>\n</blockquote>\n<p>原因は<code>BTWebViewFragment</code>クラスで継承している<strong>Fragment</strong>クラスの問題になります。<br>以前に<a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>でFragmentクラスは以下の２種類あると解説をしました。</p>\n<blockquote>\n<p>Android SDK上にはFragmentクラスが２種類あります。</p>\n<ul>\n<li>android.app.Fragment</li>\n<li>android.support.v4.app.Fragment</li>\n</ul>\n</blockquote>\n<p>DetailFragmentが継承しているFragmentは<strong>android.support.v4.app.Fragment</strong>になっているため、<code>getFragmentManager()</code>メソッドで取得できるFragmentManagerクラスは<strong>support.v4のFragment</strong>クラスだけということになります。<br>AppCompatAcvitiyクラスでは<code>getFragmentManager()</code>と<code>getSupportFragmentManager()</code>の２つメソッドがありFragmentとの関連は以下の通りになります。</p>\n<ul>\n<li>getFragmentManager() -&gt; android.app.Fragment管理用</li>\n<li>getSupportFragmentManager() -&gt; android.support.v4.app.Fragment管理用</li>\n</ul>\n<p>ということになります、気になる場合は<code>ResultListActivity</code>の実装を確認してみてください。<br>ではDetailFragmentのエラーを解消するために<code>BTWebViewFragment</code>を修正します。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kuririnz.xyz.bookdiscovery.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Fragment;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> kuririnz.xyz.bookdiscovery.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 蔵書詳細情報のウェブページを表示するFragment</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BTWebViewFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記実装ができたら動作確認します。<br>蔵書詳細画面から追加した<strong>WEBVIEWで確認</strong>ボタンをクリックしてアプリ内webViewで表示されることを確認します。</p>\n<p><code>BTWebViewFragment</code>クラスの実装でアプリ内のWebViewで指定URLのウェブページを表示することができました、WebView内でリンクをタップするなどして遷移したウェブページでソフトウェアバックボタンをクリックすると蔵書詳細画面に戻ってしまうと思いますが、ハンドリングするためには<code>BTWebViewFragment</code>で<code>onCreateView</code>メソッドでレイアウト生成したViewインスタンスの<strong>setOnKeyLisner</strong>メソッドを実装する必要があります。</p>\n<p>また、WebViewをURL毎にハンドリングしたり、表示したウェブページに対してjavascriptのコードを実行する場合などは、<br><code>WebViewClient</code>クラスを継承した自作クラスを作成し、各メソッドをオーバーライドして実装する必要があります。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自身のWebViewで表示するためにWebViewClientをWebViewに設定</span></span><br><span class=\"line\">webview.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient());</span><br></pre></td></tr></table></figure></p>\n<p>WebViewでのハンドリング等は当ページの後半で解説します。<br>一旦は指定URLをWebViewで表示する実装に関しては以上になります。</p>\n<h1><span id=\"既存のブラウザアプリでウェブページを表示する\">既存のブラウザアプリでウェブページを表示する</span></h1><p>BTWebViewFragmentへの遷移ボタンの下にもう一つボタンを追加し、ブラウザで表示するための機能を実装します。<br>他のアプリを動作させる時の要素としては<code>Intent</code>を使用することを以前のページにも記載していますが、ブラウザでURLを開く場合も<code>Intent</code>を使用して実装します。<br>レイアウトは以下の様になる様に実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout02.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><strong>レイアウトの修正</strong><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionBrouser\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ブラウザアプリで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p><strong>DetailFragment</strong>の実装<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transitionBrowserBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にブラウザアプリでURLを表示する処理を実装</span></span><br><span class=\"line\">        transitionBrowserBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionBrowser) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ブラウザアプリで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで開くためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで指定URLを表示する</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>蔵書詳細画面の<strong>ブラウザアプリで確認</strong>ボタンをクリックした時に正常にブラウザアプリが表示またはブラウザアプリの選択ダイアログが表示され、選択したブラウザアプリが立ち上がることを確認します。</p>\n<p>Android OSはIntentを受け取ると第二引数のスキーム設定によって表示するアプリを判断します。<br>Intentのコンストラクタの第一引数ではIntentが実行する処理を指定します、今回の第一引数は<code>Intent.ACTION_VIEW</code>を設定しており、この属性は第二引数に設定されるUriデータを処理できるアプリを表示する役割をIntentに与えることができます。</p>\n<p>そして、第二引数で渡したUriデータは<code>https://..</code>のURL情報になっておりスキーム箇所は<code>:</code>の前までとして判断してください。<br>今回のスキームは<code>https:</code>となっており、処理できるアプリとしてブラウザアプリ(Chromeなど)を起動するようAndroid OSが判断します、対応するアプリが複数ある場合は表示するアプリを選択するダイアログの様な画面が表示され、ダイアログから選択したアプリが起動します。</p>\n<p>電話アプリやメーラーアプリ、自社開発の他アプリを起動することが多く、ほとんどの場合Intentの第一引数は<code>Intent.ACTION_VIEW</code>を設定して使用します。</p>\n<p>以上でブラウザアプリでの確認機能の実装解説は終了です。</p>\n<h1><span id=\"chrome-custom-tabs\">Chrome Custom Tabs</span></h1><p>ブラウザアプリの様なレイアウトで表示され表示までの処理が最も早いコンポーネントとなる<strong>Chrome Custom Tabs</strong>での確認機能を実装します。</p>\n<p><strong>Chrome Custom Tabs</strong>はSupport Libraryに含まれるコンポーネントのため、<code>build.gradle</code>ファイルを修正する必要があります。<br>記述する”customtabs”のバージョン指定は<code>implementation &#39;com.android.support:appcompat-v7:XX.XX.XX&#39;</code>と同じバージョンを指定します。<br>以下は資料作成時のアプリのサンプルです。<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:customtabs:27.0.2'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>続いてレイアウトは以下の様になる様に実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout03.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><strong>レイアウトの修正</strong><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            ...一部省略</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionBrouser\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ブラウザアプリで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionCustomTabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ChromeCustomTabsで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p><strong>DetailFragment</strong>の実装<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transitionBrowserBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transCustomTabsBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\">        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transCustomTabsBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にChrome Custom TabsでURLを表示する処理を実装</span></span><br><span class=\"line\">        transCustomTabsBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にブラウザアプリでURLを表示する処理を実装</span></span><br><span class=\"line\">        transitionBrowserBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionBrowser) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ブラウザアプリで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで開くためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで指定URLを表示する</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionCustomTabs) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ChromeCustomTabsで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// Chrome Custom Tabsをインスタンス化</span></span><br><span class=\"line\">            CustomTabsIntent tabsIntent = <span class=\"keyword\">new</span> CustomTabsIntent.Builder()</span><br><span class=\"line\">                    .setShowTitle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// Custom Tabsを表示</span></span><br><span class=\"line\">            tabsIntent.launchUrl(getActivity(), uri);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上のコードを実装したら動作確認します。<br>蔵書詳細画面の<strong>ChromeCustomTabsで確認</strong>ボタンをクリックした時に正常にChrome Custom Tabsが表示、またはブラウザアプリの選択ダイアログが表示され、選択した後にChrome Custom Tabsが表示されることが確認できると思います。</p>\n<p>Chrome Custom Tabsは特殊なコンポーネントになっており、”Intent”に関しても<code>CustomTabsIntent</code>クラスを使います、このクラスの初期化は”Builderパターン”という形式で初期化する形式になっています。<br>今回はウェブページのタイトルを表示するオプション設定を行いましたが、他にも起動/終了時のアニメーションなど設定可能項目がいくつか存在します。<br>さらにIntentを起動する場合は初期化した<code>CustomTabsIntent</code>から<code>launchUrl</code>メソッドを使いChrome Custom Tabsで対象URLのウェブページを表示します。</p>\n<p>以上でChrome Custom Tabsの実装解説は終了です。</p>\n<h1><span id=\"webviewでのurlハンドリング\">WebViewでのURLハンドリング</span></h1><p>AndroidアプリでWebViewを使う場合、多くの場合は個人(または法人)の管理サイト、またはサービス対象のウェブページに限った範囲でウェブページリンク遷移する場合は開発者が管理できます。<br>しかし、外部のウェブページなどにもアクセスできてしまう場合、開発者が管理できない場面(ブラウザアプリはログインできるが、WebViewではできないなど)が考えられるため、管理外のURLの表示などはブラウザアプリを起動したり、特定のURLを表示しようとした場合に管理内のURLを表示させるなどのハンドリング（ある状況における処理）を行うことが必要になります。</p>\n<p>そのためには<code>WebViewClient</code>クラスを継承した自作クラスを作成し、各メソッドをカスタマイズして実装する必要があります。<br>WebViewが次に読み込むURLを判別した後は<code>WebViewClient</code>のActivityやFragmentのライフサイクルと似た形でメソッドが実行されます。<br>実行されるメソッドは多いのでよく使うメソッドをいくつか紹介します。</p>\n<table>\n<thead>\n<tr>\n<th>メソッド名</th>\n<th style=\"text-align:left\">実行されるタイミング</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shouldInterceptRequest(WebView, String)</td>\n<td style=\"text-align:left\">・API Level 23- <br> ・画像等リソース読み込み時</td>\n</tr>\n<tr>\n<td>shouldInterceptRequest(WebView, WebResourceRequest)</td>\n<td style=\"text-align:left\">・API Level 24+ <br> ・画像等リソース読み込み時</td>\n</tr>\n<tr>\n<td>shouldOverrideUrlLoading(WebView, String)</td>\n<td style=\"text-align:left\">・API Level 23- <br> ・次回読み込みURL確定時(読み込み前)</td>\n</tr>\n<tr>\n<td>shouldOverrideUrlLoading(WebView, WebResourceRequest)</td>\n<td style=\"text-align:left\">・API Level 24+ <br> ・次回読み込みURL確定時(読み込み前)</td>\n</tr>\n<tr>\n<td>onPageStarted(WebView, String, Bitmap)</td>\n<td style=\"text-align:left\">HTML表示開始時</td>\n</tr>\n<tr>\n<td>onLoadResource(WebView, String)</td>\n<td style=\"text-align:left\">HTML表示中の画像等表示時</td>\n</tr>\n<tr>\n<td>onPageFinished(WebView, String)</td>\n<td style=\"text-align:left\">HTML表示終了時</td>\n</tr>\n</tbody>\n</table>\n<p>多くの場合には<code>shouldOverrideUrlLoading()</code>メソッドをオーバーライドしてカスタマイズすることで期待通りの動作に仕上げられると思います。<br>各メソッドの引数にはURL情報が含まれているのでURLを元に<strong>条件分岐 if構文</strong>などを使いハンドリングすることができます。</p>\n<p><code>shouldOverrideUrlLoading()</code>や<code>shouldInterceptRequest()</code>メソッドは古いバージョンもサポート対象都する場合は2つのメソッドまたは第二引数が<strong>String</strong>型のメソッドを実装する必要があります。<br>ただ、第二引数が<strong>String</strong>型のメソッドは<font color=\"red\"><strong>deprecated(廃止予定)</strong></font>となっているため、サポート対象とするOSバージョンをAPI level 24以上にしてしまうことも検討すると良いと思います。</p>\n<p>今回の蔵書検索アプリの資料の中では実際に実装箇所は含んでいませんが、表示するウェブページで実行できるプログラム<strong>javascript</strong>をアプリから実行することで、ウェブページ上のデータを取得したり、表示内容を変更することもできます。<br>実行の手順としては以下の通りです。</p>\n<ol>\n<li><p>WebViewインスタンスで<strong>javascript</strong>の実行を有効化<br>最初の<code>webView.loadUrl()</code>メソッドを実行する前に設定します。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webview.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>shouldOverrideUrlLoading()</code>メソッドで”javascript”のコードを実行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Android OS 4.4(kitkat)~</span></span><br><span class=\"line\">    webView.evaluateJavascript(<span class=\"string\">\"javascript:document.write('JavaScriptが実行!');\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;string&gt;() &#123; ...&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Andorid OS ~4.3(jelly bean)</span></span><br><span class=\"line\">    webView.loadUrl(<span class=\"string\">\"javascript:document.write('JavaScriptが実行!');\"</span>);\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上記の通り、AndroidのOSバージョンによってjavascriptの実行方法に差異があるので注意して実装してください。<br>またAndroid OS 4.4(Kitkat)以降で使えるメソッドでは処理結果を受け取ることも簡単にできる様になっています。</p>\n<p>以上で蔵書詳細の元ウェブページの表示の解説は終了です。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>蔵書詳細の元となるウェブページを表示する中でWebViewを使ったWebページの実装を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#webview-と-chrome-custom-tabs\">WebView と Chrome Custom Tabs</a><ul>\n<li><a href=\"#メリット-デメリット\">メリット &amp; デメリット</a></li>\n</ul>\n</li>\n<li><a href=\"#webview表示の実装\">WebView表示の実装</a><ul>\n<li><a href=\"#1detaildatamodelクラスを編集\">1.DetailDataModelクラスを編集</a></li>\n<li><a href=\"#2webview表示fragmentの実装\">2.WebView表示Fragmentの実装</a><ul>\n<li><a href=\"#レイアウト作成\">レイアウト作成</a></li>\n<li><a href=\"#btwebviewfragment実装\">BTWebViewFragment実装</a></li>\n</ul>\n</li>\n<li><a href=\"#3detailfragmentクラス-webview表示fragmentへの遷移ボタンを配置\">3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</a></li>\n</ul>\n</li>\n<li><a href=\"#既存のブラウザアプリでウェブページを表示する\">既存のブラウザアプリでウェブページを表示する</a></li>\n<li><a href=\"#chrome-custom-tabs\">Chrome Custom Tabs</a></li>\n<li><a href=\"#webviewでのurlハンドリング\">WebViewでのURLハンドリング</a></li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/10-OrganiseExperience\">操作性・ユーザ体験の改善</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>WebView実装の基礎</li>\n<li>既存のブラウザアプリで指定のURLを表示</li>\n<li>Chrome Custom Tabs</li>\n</ul>\n<p>Androidアプリにて自身(または法人)で管理している既存のホームページなどを表示したいなどの場合があります。<br>その場合にAndroidではアプリ内で表示する方法、またはAndroidデバイスにインストールされたブラウザアプリ(Chromeやmobile safari)にURLを教えて表示する２つの方法があります。<br>本ページでは上記２つの機能を実装しながら機能を学習します。</p>\n<h1 id=\"WebView-と-Chrome-Custom-Tabs\"><a href=\"#WebView-と-Chrome-Custom-Tabs\" class=\"headerlink\" title=\"WebView と Chrome Custom Tabs\"></a>WebView と Chrome Custom Tabs</h1><p>最近はAndroidに置いてChrome Custom TabsというWebViewやChromeアプリより高速な表示を行えるコンポーネントも出てきました、これには一部デメリットもあるのですが、非常に高速でセキュリティ面を考慮したコンポーネントになっています。</p>\n<h2 id=\"メリット-amp-デメリット\"><a href=\"#メリット-amp-デメリット\" class=\"headerlink\" title=\"メリット &amp; デメリット\"></a>メリット &amp; デメリット</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">コンポーネント</th>\n<th>メリット</th>\n<th>デメリット</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">WebView</td>\n<td>・URL毎のハンドリング可 <br> ・javascriptの実行可</td>\n<td>・ソーシャルログイン不可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Chrome Custom Tabs</td>\n<td>・表示が早い <br> ・ソーシャルログイン可</td>\n<td>・URL毎のハンドリング不可 <br> ・javascriptの実行不可</td>\n</tr>\n</tbody>\n</table>\n<p>ソーシャルログインに関しては<a href=\"https://developers.googleblog.com/2016/08/modernizing-oauth-interactions-in-native-apps.html\" target=\"_blank\" rel=\"external\">Google Developers</a>でも勧告され2017/4/20よりWebViewでのソーシャルログインは廃止されGoogleのSDKかChrome Custom Tabsでの実装に切り替えるよう支持されています。</p>\n<h1 id=\"WebView表示の実装\"><a href=\"#WebView表示の実装\" class=\"headerlink\" title=\"WebView表示の実装\"></a>WebView表示の実装</h1><p>新しくFragmentを作成しレイアウトにWebViewを配置し、幅や高さを設定していきます。<br>今回はProjectウィンドウから<code>Fragment</code>ディレクトリを選択した状態で新規Fragment作成の手順を行います。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/11-BrowseWebPage/CrWebViewFragment.png\" width=\"550\" title=\"CreateWebViewFragment\">\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>BTWebViewFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_btweb_view</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p><strong>WebViewでの表示を行うために現状からは以下３つの修正が必要になります。</strong></p>\n<ol>\n<li>Modelクラス(DetailDataModel.java)にWebページリンクを取得するパラメータ(変数)を追加</li>\n<li>WebView表示Fragmentの実装</li>\n<li>DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</li>\n</ol>\n<h2 id=\"1-DetailDataModelクラスを編集\"><a href=\"#1-DetailDataModelクラスを編集\" class=\"headerlink\" title=\"1.DetailDataModelクラスを編集\"></a>1.DetailDataModelクラスを編集</h2><p>WebViewへのURLを調べるために<a href=\"https://www.googleapis.com/books/v1/volumes/zgkQ8p4zUPsC\" target=\"_blank\" rel=\"external\">Google Androidアプリ開発ガイド</a>の蔵書単体情報を取得するAPIの検索結果を確認します。<br>APIの結果には<strong>previewLink</strong>、<strong>infoLink</strong>という項目があり、それぞれのURLをさらにブラウザで確認するとGoogle BooksのURLとPlayStoreの書籍画面のURLであることがわかります。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/ConfirmParams.png\" width=\"500\" title=\"ConfirmResponse\"><br>また２つの情報の階層としては<code>VolumeInfo</code>の中であることがわかりましたので、一旦この項目２つを<code>DetailDataModel</code>クラスのパラメータに追加します。<br><figure class=\"highlight java\"><figcaption><span>DetailDataModel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 蔵書概要クラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeInfo</span> </span>&#123;</span><br><span class=\"line\">\t...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイル画像URL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ImageLinks imageLinks;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// Google BooksへのリンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String previewLink;</span><br><span class=\"line\">    <span class=\"comment\">// Play StoreへのリンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 蔵書サムネイルクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageLinks</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書小サイズサムネイル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String smallThumbnail;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String thumbnail;</span><br><span class=\"line\">    <span class=\"comment\">// 中サイズ表示画像</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String medium;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取得パラメータの追加は完了しました、取得したパラメータのURLは<code>BTWebViewFragment</code>へ遷移する時の連携データとして使用します。</p>\n<h2 id=\"2-WebView表示Fragmentの実装\"><a href=\"#2-WebView表示Fragmentの実装\" class=\"headerlink\" title=\"2.WebView表示Fragmentの実装\"></a>2.WebView表示Fragmentの実装</h2><p>続いて実際に表示する<code>BTWebViewFragment</code>を実装していきます、レイアウトには<code>WebView</code>コンポーネントを配置し、BTWebViewFragmentクラスにはWebViewでの表示プログラムを実装します。</p>\n<h3 id=\"レイアウト作成\"><a href=\"#レイアウト作成\" class=\"headerlink\" title=\"レイアウト作成\"></a>レイアウト作成</h3><p>以下ファイルを開き、テキストエディタモードでレイアウトを編集します。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layout -&gt; fragment_btweb_view.xml</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption><span>fragment_btweb_view.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.Fragment.BTWebViewFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/FragmentWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>BTWebViewFragment</code>に置けるレイアウトとしてはWebViewで対象URLのウェブページを表示するだけなので<code>WebView</code>コンポーネントをは配置し画面全体に表示して完了です。<br><code>FrameLayout</code>は他のLayout(LinearLayout,RelativeLayout,ConstraintLayout)と違い子Viewを配置するための便利な機能を持ち合わせていないことが特徴で、<br>今回のように単純なレイアウトであったり、表示座標を固定して表示したい場合にのみ<code>FrameLayout</code>コンポーネントを使用することをお勧めします。</p>\n<h3 id=\"BTWebViewFragment実装\"><a href=\"#BTWebViewFragment実装\" class=\"headerlink\" title=\"BTWebViewFragment実装\"></a>BTWebViewFragment実装</h3><p><code>BTWebViewFragment</code>クラスは蔵書詳細画面から表示するURLデータを連携してもらい、<br>アプリ内のWebViewで表示するための設定をしてからURLの読み込みを開始するよう実装します。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BTWebViewFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// データ連携用定数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BUNDLE_URL = <span class=\"string\">\"BUNDLE_URL\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// バインドコンポーネント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebView webview;</span><br><span class=\"line\">    <span class=\"comment\">// メンバ変数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BTWebViewFragment <span class=\"title\">getInstance</span><span class=\"params\">(String previewLink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentインスタンスを生成</span></span><br><span class=\"line\">        BTWebViewFragment fragment = <span class=\"keyword\">new</span> BTWebViewFragment();</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへデータを渡すためのBundleを初期化</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// Google Booksのウェブページリンクをデータ渡し</span></span><br><span class=\"line\">        args.putString(BUNDLE_URL, previewLink);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをBTWebViewFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_web_view, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遷移時の連携データを取得</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 遷移時に登録したKeyValueデータがない場合はGoogleページを表示</span></span><br><span class=\"line\">            defaultUrl = getArguments().getString(BUNDLE_URL, <span class=\"string\">\"https://www.google.co.jp/\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// レイアウトのコンポーネントをバインド</span></span><br><span class=\"line\">        webview = getView().findViewById(R.id.FragmentWebView);</span><br><span class=\"line\">        <span class=\"comment\">// 自身のWebViewで表示するためにWebViewClientをWebViewに設定</span></span><br><span class=\"line\">        webview.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient());</span><br><span class=\"line\">        <span class=\"comment\">// URLの読み込み</span></span><br><span class=\"line\">        webview.loadUrl(defaultUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>これで<code>BTWebViewFragment</code>クラスの実装も完了です。</p>\n<h2 id=\"3-DetailFragmentクラス-→-WebView表示Fragmentへの遷移ボタンを配置\"><a href=\"#3-DetailFragmentクラス-→-WebView表示Fragmentへの遷移ボタンを配置\" class=\"headerlink\" title=\"3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置\"></a>3.DetailFragmentクラス → WebView表示Fragmentへの遷移ボタンを配置</h2><p>最後に<strong>DetailFragment</strong>から<code>BTWebViewFragment</code>へ遷移するためのボタンを配置し、遷移するためのコードを実装します。<br>以下のようなレイアウトになるように実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout01.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView detailImage;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// Play Store へのリンクを代入</span></span><br><span class=\"line\">                infoLink = detailData.volumeInfo.infoLink;</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">                <span class=\"comment\">// MainThreadに処理を渡し画面にデータを反映する</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> ReflectDetail(detailData));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記の通り、実装を進めると以下の箇所でエラーが出てくると思われます。</p>\n<blockquote>\n<p>ft.replace(R.id.FragmentContainer, fragment);</p>\n</blockquote>\n<p>原因は<code>BTWebViewFragment</code>クラスで継承している<strong>Fragment</strong>クラスの問題になります。<br>以前に<a href=\"/AndroidCourse/android/09-RefactorFragment\">蔵書詳細画面作成</a>でFragmentクラスは以下の２種類あると解説をしました。</p>\n<blockquote>\n<p>Android SDK上にはFragmentクラスが２種類あります。</p>\n<ul>\n<li>android.app.Fragment</li>\n<li>android.support.v4.app.Fragment</li>\n</ul>\n</blockquote>\n<p>DetailFragmentが継承しているFragmentは<strong>android.support.v4.app.Fragment</strong>になっているため、<code>getFragmentManager()</code>メソッドで取得できるFragmentManagerクラスは<strong>support.v4のFragment</strong>クラスだけということになります。<br>AppCompatAcvitiyクラスでは<code>getFragmentManager()</code>と<code>getSupportFragmentManager()</code>の２つメソッドがありFragmentとの関連は以下の通りになります。</p>\n<ul>\n<li>getFragmentManager() -&gt; android.app.Fragment管理用</li>\n<li>getSupportFragmentManager() -&gt; android.support.v4.app.Fragment管理用</li>\n</ul>\n<p>ということになります、気になる場合は<code>ResultListActivity</code>の実装を確認してみてください。<br>ではDetailFragmentのエラーを解消するために<code>BTWebViewFragment</code>を修正します。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> kuririnz.xyz.bookdiscovery.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Fragment;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.app.Fragment;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.webkit.WebViewClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> kuririnz.xyz.bookdiscovery.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 蔵書詳細情報のウェブページを表示するFragment</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BTWebViewFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記実装ができたら動作確認します。<br>蔵書詳細画面から追加した<strong>WEBVIEWで確認</strong>ボタンをクリックしてアプリ内webViewで表示されることを確認します。</p>\n<p><code>BTWebViewFragment</code>クラスの実装でアプリ内のWebViewで指定URLのウェブページを表示することができました、WebView内でリンクをタップするなどして遷移したウェブページでソフトウェアバックボタンをクリックすると蔵書詳細画面に戻ってしまうと思いますが、ハンドリングするためには<code>BTWebViewFragment</code>で<code>onCreateView</code>メソッドでレイアウト生成したViewインスタンスの<strong>setOnKeyLisner</strong>メソッドを実装する必要があります。</p>\n<p>また、WebViewをURL毎にハンドリングしたり、表示したウェブページに対してjavascriptのコードを実行する場合などは、<br><code>WebViewClient</code>クラスを継承した自作クラスを作成し、各メソッドをオーバーライドして実装する必要があります。<br><figure class=\"highlight java\"><figcaption><span>BTWebViewFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自身のWebViewで表示するためにWebViewClientをWebViewに設定</span></span><br><span class=\"line\">webview.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient());</span><br></pre></td></tr></table></figure></p>\n<p>WebViewでのハンドリング等は当ページの後半で解説します。<br>一旦は指定URLをWebViewで表示する実装に関しては以上になります。</p>\n<h1 id=\"既存のブラウザアプリでウェブページを表示する\"><a href=\"#既存のブラウザアプリでウェブページを表示する\" class=\"headerlink\" title=\"既存のブラウザアプリでウェブページを表示する\"></a>既存のブラウザアプリでウェブページを表示する</h1><p>BTWebViewFragmentへの遷移ボタンの下にもう一つボタンを追加し、ブラウザで表示するための機能を実装します。<br>他のアプリを動作させる時の要素としては<code>Intent</code>を使用することを以前のページにも記載していますが、ブラウザでURLを開く場合も<code>Intent</code>を使用して実装します。<br>レイアウトは以下の様になる様に実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout02.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><strong>レイアウトの修正</strong><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionBrouser\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ブラウザアプリで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p><strong>DetailFragment</strong>の実装<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transitionBrowserBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にブラウザアプリでURLを表示する処理を実装</span></span><br><span class=\"line\">        transitionBrowserBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionBrowser) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ブラウザアプリで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで開くためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで指定URLを表示する</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>蔵書詳細画面の<strong>ブラウザアプリで確認</strong>ボタンをクリックした時に正常にブラウザアプリが表示またはブラウザアプリの選択ダイアログが表示され、選択したブラウザアプリが立ち上がることを確認します。</p>\n<p>Android OSはIntentを受け取ると第二引数のスキーム設定によって表示するアプリを判断します。<br>Intentのコンストラクタの第一引数ではIntentが実行する処理を指定します、今回の第一引数は<code>Intent.ACTION_VIEW</code>を設定しており、この属性は第二引数に設定されるUriデータを処理できるアプリを表示する役割をIntentに与えることができます。</p>\n<p>そして、第二引数で渡したUriデータは<code>https://..</code>のURL情報になっておりスキーム箇所は<code>:</code>の前までとして判断してください。<br>今回のスキームは<code>https:</code>となっており、処理できるアプリとしてブラウザアプリ(Chromeなど)を起動するようAndroid OSが判断します、対応するアプリが複数ある場合は表示するアプリを選択するダイアログの様な画面が表示され、ダイアログから選択したアプリが起動します。</p>\n<p>電話アプリやメーラーアプリ、自社開発の他アプリを起動することが多く、ほとんどの場合Intentの第一引数は<code>Intent.ACTION_VIEW</code>を設定して使用します。</p>\n<p>以上でブラウザアプリでの確認機能の実装解説は終了です。</p>\n<h1 id=\"Chrome-Custom-Tabs\"><a href=\"#Chrome-Custom-Tabs\" class=\"headerlink\" title=\"Chrome Custom Tabs\"></a>Chrome Custom Tabs</h1><p>ブラウザアプリの様なレイアウトで表示され表示までの処理が最も早いコンポーネントとなる<strong>Chrome Custom Tabs</strong>での確認機能を実装します。</p>\n<p><strong>Chrome Custom Tabs</strong>はSupport Libraryに含まれるコンポーネントのため、<code>build.gradle</code>ファイルを修正する必要があります。<br>記述する”customtabs”のバージョン指定は<code>implementation &#39;com.android.support:appcompat-v7:XX.XX.XX&#39;</code>と同じバージョンを指定します。<br>以下は資料作成時のアプリのサンプルです。<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:customtabs:27.0.2'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>続いてレイアウトは以下の様になる様に実装します。<br><img src=\"/AndroidCourse/android/11-BrowseWebPage/UpdateDetailLayout03.png\" width=\"250\" title=\"UpdateDetailFragment\"><br><strong>レイアウトの修正</strong><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...一部省略</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            ...一部省略</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionWebView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionBrouser\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ブラウザアプリで確認\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/TransitionCustomTabs\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"ChromeCustomTabsで確認\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p><strong>DetailFragment</strong>の実装<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transWebviewBtn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transitionBrowserBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button transCustomTabsBtn;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// Play Store リンクURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String infoLink;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        transWebviewBtn = getView().findViewById(R.id.TransitionWebView);</span><br><span class=\"line\">        transitionBrowserBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        transCustomTabsBtn = getView().findViewById(R.id.TransitionBrowser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にChrome Custom TabsでURLを表示する処理を実装</span></span><br><span class=\"line\">        transCustomTabsBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// クリック時にブラウザアプリでURLを表示する処理を実装</span></span><br><span class=\"line\">        transitionBrowserBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">// BTWebViewFragmentへの遷移処理を実装</span></span><br><span class=\"line\">        transWebviewBtn.setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ボタンクリック時のイベントを実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックされたボタンをIDで判定</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionWebView) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"WebViewで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// BTWebViewFragmentをインスタンス化</span></span><br><span class=\"line\">            BTWebViewFragment fragment = BTWebViewFragment.getInstance(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">            FragmentTransaction ft = getFragmentManager().beginTransaction();</span><br><span class=\"line\">            <span class=\"comment\">// 現在、DetailFragmentを表示しているR.id.FragmentContainerをBTWebViewFragmentに置き換え</span></span><br><span class=\"line\">            ft.replace(R.id.FragmentContainer, fragment);</span><br><span class=\"line\">            <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">            ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 変更を反映</span></span><br><span class=\"line\">            ft.commit();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionBrowser) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ブラウザアプリで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで開くためのIntentをインスタンス化</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで指定URLを表示する</span></span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (view.getId() == R.id.TransitionCustomTabs) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// \"ChromeCustomTabsで確認\"ボタンをクリックした場合</span></span><br><span class=\"line\">            <span class=\"comment\">// ブラウザアプリで表示するURLをUriクラスにキャスト</span></span><br><span class=\"line\">            Uri uri = Uri.parse(infoLink);</span><br><span class=\"line\">            <span class=\"comment\">// Chrome Custom Tabsをインスタンス化</span></span><br><span class=\"line\">            CustomTabsIntent tabsIntent = <span class=\"keyword\">new</span> CustomTabsIntent.Builder()</span><br><span class=\"line\">                    .setShowTitle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">            <span class=\"comment\">// Custom Tabsを表示</span></span><br><span class=\"line\">            tabsIntent.launchUrl(getActivity(), uri);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上のコードを実装したら動作確認します。<br>蔵書詳細画面の<strong>ChromeCustomTabsで確認</strong>ボタンをクリックした時に正常にChrome Custom Tabsが表示、またはブラウザアプリの選択ダイアログが表示され、選択した後にChrome Custom Tabsが表示されることが確認できると思います。</p>\n<p>Chrome Custom Tabsは特殊なコンポーネントになっており、”Intent”に関しても<code>CustomTabsIntent</code>クラスを使います、このクラスの初期化は”Builderパターン”という形式で初期化する形式になっています。<br>今回はウェブページのタイトルを表示するオプション設定を行いましたが、他にも起動/終了時のアニメーションなど設定可能項目がいくつか存在します。<br>さらにIntentを起動する場合は初期化した<code>CustomTabsIntent</code>から<code>launchUrl</code>メソッドを使いChrome Custom Tabsで対象URLのウェブページを表示します。</p>\n<p>以上でChrome Custom Tabsの実装解説は終了です。</p>\n<h1 id=\"WebViewでのURLハンドリング\"><a href=\"#WebViewでのURLハンドリング\" class=\"headerlink\" title=\"WebViewでのURLハンドリング\"></a>WebViewでのURLハンドリング</h1><p>AndroidアプリでWebViewを使う場合、多くの場合は個人(または法人)の管理サイト、またはサービス対象のウェブページに限った範囲でウェブページリンク遷移する場合は開発者が管理できます。<br>しかし、外部のウェブページなどにもアクセスできてしまう場合、開発者が管理できない場面(ブラウザアプリはログインできるが、WebViewではできないなど)が考えられるため、管理外のURLの表示などはブラウザアプリを起動したり、特定のURLを表示しようとした場合に管理内のURLを表示させるなどのハンドリング（ある状況における処理）を行うことが必要になります。</p>\n<p>そのためには<code>WebViewClient</code>クラスを継承した自作クラスを作成し、各メソッドをカスタマイズして実装する必要があります。<br>WebViewが次に読み込むURLを判別した後は<code>WebViewClient</code>のActivityやFragmentのライフサイクルと似た形でメソッドが実行されます。<br>実行されるメソッドは多いのでよく使うメソッドをいくつか紹介します。</p>\n<table>\n<thead>\n<tr>\n<th>メソッド名</th>\n<th style=\"text-align:left\">実行されるタイミング</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>shouldInterceptRequest(WebView, String)</td>\n<td style=\"text-align:left\">・API Level 23- <br> ・画像等リソース読み込み時</td>\n</tr>\n<tr>\n<td>shouldInterceptRequest(WebView, WebResourceRequest)</td>\n<td style=\"text-align:left\">・API Level 24+ <br> ・画像等リソース読み込み時</td>\n</tr>\n<tr>\n<td>shouldOverrideUrlLoading(WebView, String)</td>\n<td style=\"text-align:left\">・API Level 23- <br> ・次回読み込みURL確定時(読み込み前)</td>\n</tr>\n<tr>\n<td>shouldOverrideUrlLoading(WebView, WebResourceRequest)</td>\n<td style=\"text-align:left\">・API Level 24+ <br> ・次回読み込みURL確定時(読み込み前)</td>\n</tr>\n<tr>\n<td>onPageStarted(WebView, String, Bitmap)</td>\n<td style=\"text-align:left\">HTML表示開始時</td>\n</tr>\n<tr>\n<td>onLoadResource(WebView, String)</td>\n<td style=\"text-align:left\">HTML表示中の画像等表示時</td>\n</tr>\n<tr>\n<td>onPageFinished(WebView, String)</td>\n<td style=\"text-align:left\">HTML表示終了時</td>\n</tr>\n</tbody>\n</table>\n<p>多くの場合には<code>shouldOverrideUrlLoading()</code>メソッドをオーバーライドしてカスタマイズすることで期待通りの動作に仕上げられると思います。<br>各メソッドの引数にはURL情報が含まれているのでURLを元に<strong>条件分岐 if構文</strong>などを使いハンドリングすることができます。</p>\n<p><code>shouldOverrideUrlLoading()</code>や<code>shouldInterceptRequest()</code>メソッドは古いバージョンもサポート対象都する場合は2つのメソッドまたは第二引数が<strong>String</strong>型のメソッドを実装する必要があります。<br>ただ、第二引数が<strong>String</strong>型のメソッドは<font color=\"red\"><strong>deprecated(廃止予定)</strong></font>となっているため、サポート対象とするOSバージョンをAPI level 24以上にしてしまうことも検討すると良いと思います。</p>\n<p>今回の蔵書検索アプリの資料の中では実際に実装箇所は含んでいませんが、表示するウェブページで実行できるプログラム<strong>javascript</strong>をアプリから実行することで、ウェブページ上のデータを取得したり、表示内容を変更することもできます。<br>実行の手順としては以下の通りです。</p>\n<ol>\n<li><p>WebViewインスタンスで<strong>javascript</strong>の実行を有効化<br>最初の<code>webView.loadUrl()</code>メソッドを実行する前に設定します。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webview.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>shouldOverrideUrlLoading()</code>メソッドで”javascript”のコードを実行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Android OS 4.4(kitkat)~</span></span><br><span class=\"line\">    webView.evaluateJavascript(<span class=\"string\">\"javascript:document.write('JavaScriptが実行!');\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;string&gt;() &#123; ...&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Andorid OS ~4.3(jelly bean)</span></span><br><span class=\"line\">    webView.loadUrl(<span class=\"string\">\"javascript:document.write('JavaScriptが実行!');\"</span>);\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上記の通り、AndroidのOSバージョンによってjavascriptの実行方法に差異があるので注意して実装してください。<br>またAndroid OS 4.4(Kitkat)以降で使えるメソッドでは処理結果を受け取ることも簡単にできる様になっています。</p>\n<p>以上で蔵書詳細の元ウェブページの表示の解説は終了です。</p>\n"},{"title":"Kotlin プログラミング基礎","date":"2018-03-30T08:06:33.000Z","_content":"Kotlinを使ったプログラミングとして基礎を学習します。\n\n<!-- toc -->\n\n# 学習ポイント\n* Kotlin言語の特徴\n* Kotlin - Javaの差分\n\nGoogle I/O 2017にて正式にAndroid開発言語として公式サポートとなった言語Kotlinについて学習します。\n\n# Kotlin言語の特徴\nJavaをベースに開発された言語であるため、Javaと同じくJVM上で動作する言語、そのため様々なプラットフォームでの実行が可能。\n開発元のJetBrains社もJavaと完全な相互運用可能を提言しています。\n\n完全互換性言語ということでAndroidアプリの開発においてJavaで作成したプロジェクトに対して１ファイルだけKotlinという導入も可能である。\nまたJavaを使い慣れていれば抵抗感が少なくKotlinのプログラムが行えるような設計がなされています。\nKotlinはjava言語ではないのでないのでファイル拡張子も変わるのですが、***[ファイル名].kt***の形式でファイルが作成されます。\n当ページでは以下の項目に関して解説をしていきます。\n\n* 変数\n* 関数\n* 制御構文の変更点\n* クラスの定義\n* Unit, Nothing, Any\n* object, companion object\n* スコープ関数\n* ラムダ式\n* try-catch\n\nKotlinは公式サイトより導入せずとも試すことができます。\n[Kotlin Playground](https://try.kotlinlang.org/)\n\n## 変数\nKotlinは最近の言語で増えてきた推論型変数、オプショナル（Null-safety）などの概念が追加されています。\n\n先ずは変数ですが宣言の方法が以下のキーワードを使います。\n\n* var -> 変更可能な変数\n* val -> １度だけ代入できる変数(ローカル変数としての利用を想定)\n\n**推論型変数**\n変数の宣言のみを記述する場合には明示的に型を指定する必要がありますが、\n宣言と同時に代入を行う場合、代入されたデータの型として推論されそれ以降では代入したデータの方として扱われる変数となりす。\nそのため他の型やクラス以外のデータは代入できなくなります。\n\nまた、Kotlinでは原則宣言時に初期化が必須なのですが、宣言時に値を入れない方法もあり、varキーワードの前に`lateinit`と記述することで宣言のみを記述できます。\n```java Java\n\t//変数宣言のみ\n\tString hoge;\n\t// 変数宣言と同時に初期化\n\tString fuga = \"Android\";\n```\n```kotlin Kotlin\n\t//変数宣言のみ\n\tlateinit var hoge: String\n\t// 変数宣言と同時に初期化\n\t// String型の変数として扱われる\n\tvar fuga = \"Android\"\n```\nそして変数の宣言時には合わせてそれ以降のプログラムで宣言した変数にNullの代入可否を設定する必要があり、その設定を***Null-Safety(オプショナル)***と呼びます\n```kotlin Kotlin\n\t// Nullを許容しない変数\n\tvar hoge = \"hogehoge\"\n\thoge = null\t\t\t// コンパイルエラー\n\t// Nullを許容する変数\n\tvar fuga: String? = \"fugafuga\"\n\tfuga = null\t\t\t// 代入可\n```\nオプショナルを設定することで実行時エラー（NullPointerException）などの発生をエラーを予測して実装と動作確認することができます。\nさらにNull許容型の変数を作成した場合でもNullのチェックは簡潔に行えるよう機能が追加されており、その機能が`let`関数になります。\n```java Java\n\tString hoge = fuga != null ? fuga : \"hogehoge\";\n```\n```kotlin Kotlin\n\tval hoge = fuga?.let { fuga } ?: else { \"hogehoge\" }\n```\n上記Kotlinの例では`fuga`がnullではない場合はfugaを代入、nullの場合は\"hogehoge\"をhogeに代入する式担っています。\n`let`単体の式の場合で変数の結果がnullの場合にはnullが代入される仕様になっています。\n`let`に関してはスコープ関数の項目で細かい話に触れていきます。\n\nまた、Kotlinではキャストの方法も変更されて変更されており、キャストには`as`キーワードを使用します。\n```java Java\n\tlong numLong = 10;\n\t// Long型をInt型にキャスト\n\tint num = (int) numLong;\n```\n```kotlin Kotlin\n\tval numLong: Long = 10\n\t// Long型をInt型にキャスト\n\tvar num: Int = num as Int\n```\n\n## 関数\n関数の定義方法に変更が加わりましたが、参照方法に変更はありません。\n\n以下はInt型引数が１つで戻り値型がInt型のメソッドの定義方法になります。\n```java Java\n// メソッドの定義\n// [アクセス修飾子] [戻り値型] [メソッド名]([引数型] [引数名], [引数型] [引数名]...) {\n//     メソッドの処理\n// }\n\tpublic int calc(int x) {\n\t   return x + 10;\n\t}\n\t// メソッドの参照\n\tcalc(20);\n}\n```\n```kotlin Kotlin\n// メソッドの定義\n// [アクセス修飾子] fun [メソッド名]([引数名]: [引数型], [引数名]: [引数型]): [戻り値型]...) {\n//     メソッドの処理\n// }\n\tpublic fun calc(x: Int): Int {\n\t\treturn x + 10\n\t}\n\t// メソッドの参照\n\tcalc(20)\n}\n```\n## 制御構文\nKotlinでもif文、for文、while、do-whileなどはある程度javaと同じように利用できると思います。\nKotlinではswitchの代わりになるもので**when**という制御構文が追加されています。\nまた、Kotlinには三項演算子(条件演算子)はなくなり、if文を短縮して記述することですることで三項演算子の様に利用することができます。\n\n### if文\njava言語と基本的な利用方法は同じです、Kotlinでの特殊な利用方法として代入式としてif文を利用することができます。\n\n代入式としてif文を利用する場合は最後に記述した変数や式が右辺の変数に代入されます。\nKotlinではif文が代入式として使用できるので三項演算子(条件演算子)は使えなくなっています。\n```java Java\n\t// 通常のif文の記述方法\n\tif (a > 1 && a < 31) {\n\t    // 実行したい処理を記述\n\t}\n\t// if文を利用した変数への代入\n\tint num  = a < i ? 0 : 10 ;\n```\n```kotlin Kotlin\n\t// 通常のif文の記述方法\n\tif (a > 1 && a < 31) {\n\t    // 実行したい処理を記述\n\t}\n\t// if文を利用した変数への代入\n\tvar num: Int = if(a < i) { 0 } else { 10 }\n```\n\n### when文\nJavaや他の言語であるswitchの置き換え構文になります。\ncase文の代わりには`->（アロー演算子）`を使用します、各条件の時に１行で済むコードであればアロー演算子の後に半角スペースを挟んで記述できます。\n複数行であればアロー演算子の後に`{}`をつけてブロック内にコードを記述します。\nさらに複数の条件を指定したい場合は、条件を`,（カンマ）`で区切り条件を設定します。\n```java Java\n\tswitch(num) {\n\t\tcase 0:\n\t\t    // numが0の場合の処理\n\t\tbreak;\n\t\tcase 1:\n\t\t    // numが1の場合の処理\n\t\tbreak;\n\t\tcase 2:\n\t\tcase 3:\n\t\t    // numが2,3の場合の処理\t\t\n\t\tdefault:\n\t\t    // 全てのcase条件に該当しなかった場合の処理\n\t}\n```\n```kotlin Kotlin\n\twhen(num) {\n\t\t0 ->    // numが0の場合の処理\n\t\t1 -> {\n\t\t    // numが1の場合の処理\n\t\t    // 処理が複数行の場合は{} ブロックをブロックを記述\n\t\t}\n\t\t2,3 ->  // numが2,3の場合の処理\n\t\telse -> // 上記全ての条件に該当しなかった場合\n\t}\n```\nwhen構文では分岐条件の設定に`in`で条件範囲を設けたり`is`で型のチェックを条件に設定することも可能です。\n`!in`や`!is`と使うことで範囲外、型ではないなどの判定条件としても設定できます。\n```kotlin Kotlin\n\twhen(num) {\n\t\tin 1..10 ->    // numが1~10の範囲内だった時の処理\n\t\tis Int ->      // numがInt型だった場合の処理\n\t}\n```\nwhen構文もif文と同様に代入式として使用することも可能です、さらにwhen構文に引数を与えなかった場合、if-else文代替えとして認識され分岐条件の設定は論理型の判定になります。\n```kotlin Kotlin\n\t// hogeにwhen文で判定した結果が代入される\n\tval hoge = when {\n\t\t// 条件設定はtrue/falseの結果になるよう記述が必要\n\t\tfuga == 0 -> 10\n\t\tfuga == 10 -> 20\n\t\telse -> 30\n\t}\n```\n\n### for文\nKotlinでのfor文はJavaに置ける拡張for(foreach)文の形式でしか使用することができません。\n拡張for文形式で指定回数の繰り返しを行う例も合わせ紹介します。\n```java Java\n\t// 0~10を2ずつ加算するfor文\n\tfor(int i=0; i<10; i+=2) {\n\t    // 繰り返し時の処理\n\t}\n\t// 拡張for文\n\tfor(int num: numbers) {\n\t    // 繰り返し時の処理\n\t}\n```\n```kotlin Kotlin\n\t// 0~10を2ずつ加算するfor文\n\tfor (i in 1..10 step 2) {\n\t    // 繰り返し時の処理\t\t\n\t}\n\t// イテレータによるfor文\n\tfor(num : numbers) {\n\t    // 繰り返し時の処理\t\t\n\t}\n```\nまた`downTo`キーワードを使うことで降順的にfor文を処理することも可能です。\n```kotlin Kotlin\n\t// 20 ~ 0までの範囲でfor文を実行\n\tfor(i in 20 downTo 0) {\n\t\t// 繰り返し時の処理\n\t}\n\n\t// 20 ~ 0までの範囲で2ずつ下げるfor文を実行\n\tfor(i in 20 downTo 0 step 2) {\n\t\t// 繰り返し時の処理\n\t}\n```\nもしインデックス付きのfor文を処理したい場合は`indices`メンバや`withIndex()`メソッドを使用するとインデックスを使いながらfor文を実行することもできます。\n```kotlin Kotlin\n\t// インデックスを使ったfor文\n\tfor(i in array.indices) {\n\t    println(array[i])\n\t}\n\t// インデックスと値を使ったfor文\n\tfor((index, value) in array.withIndex()) {\n\t    println(\"インデックス：${index}, \\t値：${value}\")\n\t}\n```\n\n### while文\nwhile, do-while文に関してはJavaや他の言語と同様の記述ルールになります。\n\n## クラス\nクラスに関してもJavaから一部変更が入っていますが、概ね同じルールで記述していきます。\nclass定義の際にpublic修飾は不要となり、コンストラクタの記述方法が変更されました。\n\n### クラス定義\n以下で紹介するのは引数が２つあり、コンストラクタが一つ（プライマリコンストラクタ）の実装例になります。\nコンストラクタに引数がない場合はJava同様記述する必要はなく、デフォルトコンストラクタが有効になります。\n``` java Java\n// 引数が２つありメンバを初期化しているクラス\npublic class hoge {\n\tint num;\n\tString str;\n\thoge(int num, String str) {\n\t\tthis.num = num;\n\t\tthis.str = str;\n\t}\n}\n// デフォルトコンストラクタを有効にしているクラス\npublic class fuga {\n\tint num;\n}\n```\n```kotlin Kotlin\n// 引数が２つありメンバを初期化しているクラス\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n}\n// デフォルトコンストラクタを有効にしているクラス\nclass fuga {\n\tint num\n}\n```\nプライマリコンストラクタに初期化時の処理をつける場合は以下の通り実装する\n```kotlin Kotlin\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n\tinit {\n\t\t// プライマリコンストラクタの\n\t\t// 初期化処理\n\t}\n}\n```\nセカンダリコンストラクタを定義する場合は`constructor`キーワードを使用して定義します。\n```kotlin Kotlin\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n\t// セカンダリコンストラクタの定義\n\t// プライマリコンストラクタへ移譲する定義が必要\n\tconstructor(num: Int): this(num, \"hoge\") {\n\t\t// セカンダリコンストラクタの初期化処理\n\t}\n}\n```\nインスタンスの作成はJavaと違い*new*キーワードなしでコンストラクタを呼び出します。\n```java Java\n\thoge inc = new hoge(0, \"str\");\n```\n```kotlin Kotlin\n\tval inc = hoge(0, \"str\");\n```\n### 継承、インターフェース\n継承や、インターフェースの実装に使用していた、**extends**や**implements**キーワードもなくなり,\nプライマリコンストラクタの後ろに`: [親Class名]([親Classプライマリコンストラクタの実引数])`の形式で継承関係を記述し、\n`,（カンマ）`区切りで実装するインターフェースを記述します。\nKotlinでは継承関係を記述しなかった場合、暗黙的に`Any`クラスの子クラスとなります。\n`Any`クラスと`java.util.Object`とは別のクラスになりますので注意してください。\nまたKotlinでは継承元となる親クラスの定義に`open`キーワードの修飾が必要になるので注意してください。\nメソッドを`orverride`させるにはメソッドの定義にも先頭に`open`を記述してください。\n```java Java\n// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義\n// SuperHogeクラスのプライマリコンストラクタは引数なしです。\npublic class Hoge extends SuperHoge inmplements Fuga {\n\t// SuperHogeクラスのfooメソッドをオーバーライド\n\t@orverride public void foo() {}\n}\n// 継承元の親クラスを定義\npublic classSuperHoge{\n\t// orvrerideできるメソッドの定義\n\tpublic void foo() {}\n}\n```\n```kotlin Kotlin\n// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義\n// SuperHogeクラスのプライマリコンストラクタは引数なしです。\nclass Hoge: SupreHoge(), Fuga {\n\t// SuperHogeクラスのfooメソッドをオーバーライド\n\torverride fun foo() {}\n}\n// 継承元の親クラスを定義\nopen class SuperHoge() {\n\t// orvrerideできるメソッドの定義\n\topen fun foo() {}\n}\n```\n**抽象クラス**に関してはJava同様`abstract`キーワードを使い抽象クラスとして定義することができます、また抽象クラスは`open`キーワードを付与しなくてもオーバーライドすることは可能です。\n\n### 静的メンバへのアクセス\nKotlinはJavaと違い**static**な変数や定数、メソッドを定義することができません。\nその場合の方法としてKotlinではクラスブロック外に変数、定数、メソッドを定義することができるので**static**メソッドの代わりに使用することができます。\nまた、クラスブロック内に`companion object`（コンパニオンオブジェクト）キーワードを使ったブロックを作りブロック内に変数、定数、メソッドを定義する方法もあります。\n前者の場合はクラス名の修飾なしに各定義を参照することができます、後者はクラス名の修飾を使って各定義を参照できます。\n\nクラス外に定義された内容はプロジェクト単位でユニークな扱いを受けるので、他のクラスで同名の定義を行うとコンパイルエラーが発生します。\nそのため、Fragmentなどのように静的コンストラクタを定義したい場合などは`companion object`に定義をし、クラス外には画面遷移時のパラメータキーやプロジェクト内でユニークな定数に分けるなどすると使い易くなります。\n```kotlin Kotlin\npackage com.sample\n// クラス外の定数定義\nconst val FOO = 10\n// クラス外のメソッド定義\nfun bar (a: Int): Int {\n\treturn a * 2\n}\n\nclass Hoge {\n\t// コンパニオンオブジェクトを使ったメソッドの定義\n\tcompanion object {\n\t\tfun fuga (b: Int): Int  {\n\t\t\treturn b *3\n\t\t}\n\t}\n}\n\n// Hogeクラス(Hoge.kt)の要素を参照するクラス\nclass Hogehoge {\n\n\tfun runMethod() {\n\t\t// Hoge.ktのbarメソッドを参照\n\t\tval res1 = bar(FOO)\n\t\t// Hoge.ktのfugaメソッドを参照\n\t\tval res2 = Hoge.fuga(FOO)\n\t}\n}\n```\n`const`キーワードを付けて記述した場合はJavaにおいて**static**な要素として扱われるのに対し、`const`なしで記述した物はJavaに変換された時にアクセサメソッドが定義されてしまうので、できるだけ`const`を付けて記述した方が良いです。\n\n## object\n`object`にはいつかの用途があり、一つが**クラス**内で紹介した`companion object`です。\nその他では以下の使い方で使用されることがあります、それぞれの使用方法について紹介していきます。\n\n* 無名オブジェクトの定義\n* シングルトンの定義\n\n### 無名オブジェクトの定義\nAndroid Javaにおいてはボタンなどのクリックイベントなど、引数にインスタンス化したオブジェクトを返す箇所などが無名クラスでの置き換えになります。\n\n以下例は画面のボタンコンポーネントに無名オブジェクトを使いクリックイベントをセットしています。\n```java Java\npublic class HogeActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.hogehoge);\n        Button btn = findViewById(R.id.button);\n        // インターフェースをオブジェクト化してクリックイベントをセット\n        btn.setOnClickListener(new View.OnClickListener() { ... });\n    }\n}\n```\n```kotlin Kotlin\nclass HogeActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val btn = findViewById(R.id.button)\n        // 無名オブジェクトを使ってクリックイベントをセット\n        btn.setOnClickListener(object : View.OnClickListener { ... }) \n    }\n```\n\n### シングルトンの定義\nAPIやデータベースなど都度インスタンス化して使うのが手間になるクラスも存在します、その場合にプロジェクト内でクラスのインスタンスが一つしか生成されない様に設計されたクラスをシングルトンと呼びます。\nJavaでのシングルトンの使い方はメソッドからメソッドへ繋ぐメソッドチェーンで使用するのが一般的でしたが\nKotlinでは`objectの宣言`によってJavaのクラスメソッドのようにシングルトンを使用できるようになりました。\n\n以下の例はシングルトンクラス'Hoge'を作成し、Fugaクラスにて利用している例になります。\n```java Java\n// シングルトンクラスHogeの定義\npublic class Hoge {\n    private static Hoge instance = new Hoge();\n\tprivate Hoge() {}\n    public static Hoge getInstance() {\n    \tif (instance == null) {\n    \t\tinstance = new Hoge();\n    \t} \n        return instance;\n    }\n    public double calcPlus10(double dec) {\n    \treturn dec + 10;\n    }\n}\n// Hogeクラスを使用するFugaクラス\npublic class Fuga {\n\tint a;\n\tpublic Fuga() {\n\t    // シングルトンHogeクラスを参照\n\t    a = Hoge.getInstance().calcPlus10(10);\n\t}\n}\n```\n```kotlin Kotlin\n// シングルトンクラスHogeの定義\nobject Hoge {\n\tfun calcPlus10(dec: Double): Double {\n\t\treturn dec + 10\n\t}\n}\n// Hogeクラスを使用するFugaクラス\nclass Fuga {\n\tvar a: int = 0;\n\tinit {\n\t    // シングルトンHogeクラスを参照\n\t    a = Hoge.calcPlus10(10)\n\t}\n}\n```\n## ラムダ式\nラムダ式は**メソッドの定義を式として扱い、即時実行された結果を機能**を指します。\n関数型リテラルとも呼ばれることがあり、関数が宣言されたのではなく式として宣言した変数に代入された形となります。\n実際に使用してみると、*'変数名(引数)'*の形式で参照するため、見栄えとして後から関数を作成したように感じます。\n\n以下の例は二つの値の和を求めるラムダ式になります。\n```kotlin Kotlin\n\t// 無名関数の定義\n\tval sum = {x: Int, y: Int -> x + y}\n\t// 無名関数の使用例\n\tval total = sum(3, 4)\n```\nまたラムダ式を使うことでリストなどのコレクション型のデータから特定の条件に該当するデータだけを抽出する時によく利用します。\nラムダ式を使う場合に引数の値が１つの場合、暗黙的に一時変数名`it`として設定されていることに注意してください。\n\n以下ではコレクションとの組み合わせによる例を紹介します。\n```kotlin Kotlin\n\tval tmpList: listOf(1,2,3)\n\t// コレクションのメソッドに対してラムダを適用した例\n\ttmpList.count {it % 2 ==1} // List型で奇数の1,3が含まれたオブジェクトを取得できる\n\ttmpList.filter {it == 2} // List型で2が含まれたオブジェクトを取得できる\n```\n## スコープ関数\nKotlin標準ライブラリに含まれている機能。\n対象オブジェクトやスコープ関数に渡した引数に限定して即時関数を実行する機能。\n利用できる種類としては現状(2018/05/19時点でkotlin 1.2.41が最新)では以下５つが有効なスコープ関数として登録されています。\n\n|関数 \\\\ 項目|操作オブジェクト|戻り値        |\n|:---------:|:------------|:-------------|\n|let        |it           |指定可         |\n|with       |this         |指定可         |\n|run        |this         |指定可         |\n|apply      |this         |操作オブジェクト|\n|also       |it           |操作オブジェクト|\n\nまた、スコープ関数の中でも`let`,`apply`はAndroid開発の中での利用頻度は高くなる印象があります。\n`let`はオプショナルのunwrappeで使用しますし、`apply`に関しては複数の項目を設定した場合などに使用できるのでFragmentの静的コンストラクタや\nHashMapによる複数項目の設定などを一括で行うような記述が行えるメリットがあります。\n> [Kotlinのスコープ関数を使い分けたい]を参照\n\n### let関数\n`let`関数の定義がこちら↓\n```kotlin\npublic inline fun <T, R> T.let(block: (T) -> R): R = block(this)\n```\n自身を引数としてラムダ式を実行する機能を持っている、ラムダブロック最後に記述されているオブジェクト（変数）を戻り値として返却する。\nまた、**Null許容変数のUnwappe(Nullチェック)によく使用される**\n`let`の実装サンプルは以下\n```kotlin Kotlin\n\t// [Object].let { [処理] }\n\t// 実際の使い方\n\tval fuga = 20\n\tvar hoge = fuga.let { it + 10 } // hoge: 30\n```\n上記のコードでい変数\"fugaが + 10\"を\"hoge\"に代入する式となりました、ではNullチェックでの使用方法を紹介します。\n```kotlin Kotlin\n\t// オプショナルの設定された変数のUnwrappeを行う\n\tval hoge = fuga?.let { [fugaがnullじゃない時の処理] } ?: { [fugaがnullの場合の処理] }\n```\n`let`に関してはNullのUnwrappeでの利用が大いのでまずは上記２つの内、後者を特に覚えておけば良いと思います。\n### with\n`with`関数の定義はこちら↓\n```kotlin\npublic inline fun <T, R> with(receiver: T, f: T.() -> R): R = receiver.f()\n```\n`with`はオブジェクトを修飾して呼び出す関数ではなく、通常の関数として用意されています。\n`with`関数は引数で指定されたオブジェクトをラムダ式で使用でき引数オブジェクトのメソッド等も参照することができます。\n処理の最後に記述されているオブジェクト(変数)が戻り値になります\nこの後に出てくる*apply*とにているが戻り値になる値が違う点に注意してください。\n```kotlin Kotlin\n\t// with([Object]) { [処理] }\n\tval fuga = fuga(123, \"田中\")\n\tval hoge = with(fuga) {\n\t\tprintln(\"id: ${getID()}\")\n\t\tgetName()\n\t}\n\tprintln(\"hoge: ${hoge}\") // hoge: 田中\n```\n### run\n`run`関数の定義はこちら↓\n```kotlin\npublic inline fun <T, R> T.run(block: T.() -> R): R = block()\n```\n*let*や*with*と同じように最後に記述されている式や値が戻り値として返却される\n参照方法が*let*、ブロック内のオブジェクト呼び出しが*with*のように実装でき、*let*と*with*が合わさったような関数\n```kotlin Kotlin\n\t// [Object].run { [処理] }\n\tval fuga = fuga(123, \"田中\")\n\tval hoge = fuga.run {\n\t\tprintln(\"id: ${getID()}\")\n\t\tgetName()\n\t}\n\tprintln(\"hoge: ${hoge}\") // hoge: 田中\n```\n### apply\n`apply`関数の定義はこちら↓\n```kotlin\npublic inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }\n```\n戻り値が`apply`関数を修飾したオブジェクトで固定されている、記述の方法などは*with*と同じ形で使用できる。\nAndroid開発に置けるFragmentの処理が一部簡潔に記述できたりする\n```\n\t// [Object].apply { [処理] }\n\tval fuga: Fuga = fuga(123, \"田中\")\n\t// 戻り値はFugaクラスのインスタンス\n\tval hoge = fuga.apply {\n\t\tprintln(\"id: ${getID()}\")\n\t\tsetName(\"山田\")\n\t}\n\tprintln(\"hoge: ${hoge.getName}\") // hoge: 山田\n```\n### also\n`also`関数の定義はこちら↓\n```kotlin\npublic inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }\n```\nKotlin Version:1.1から追加されたスコープ関数、使い方としては*apply*とほぼ同等だが、ラムダ式で修飾したオブジェクトに\n仮引数名が設定でき、ラムダ式内外でthisのスコープが変わらないという特徴がある。\n```\n\t// [Object].apply { [処理] }\n\tval fuga: Fuga = fuga(123, \"田中\")\n\t// 戻り値はFugaクラスのインスタンス\n\tval hoge = fuga.apply { f ->\n\t\tprintln(\"id: ${f.getID()}\")\n\t\tf.setName(\"山田\")\n\t\tstartActivity(Intent(this, NextActivity::class.java))\n\t}\n\tprintln(\"hoge: ${hoge.getName}\") // hoge: 山田\n```\n\n## Any, Unit, Nothing\nJavaには存在しなかったキーワードが出てきたのでいくつか紹介します。\n### Any\nJavaではルートクラスがObjectクラスでしたが、KotlinではルートクラスがObjectではなく`Any`になります、KotlinにおいてもJavaのObjectクラスは存在しますが、Anyのサブ(子)クラスとして存在します。\nKotlinにはプリミティブ型は存在せず、全てがクラスとして扱われるようになります。\nそのため、Javaでのプリミティブ型をBoxing(ボクシング)する必要がなく、コンパイラが自動的にプリミティブ型に最適化されるよう設計されています。\n### Unit\nまたJavaでメソッドなど戻り値がない場合に使うキーワードとして**void**がありますが`Unit`という**void**と同じく意味のない値を返すことを示すキーワードが追加されています、\nKotlinでのメソッドの戻り値がない場合は何も型の指定を行いませんが、暗黙的に`Unit`が戻り値として設定される仕様になっています。\n### Nothing\n`Nothing`は値が返されないことを示すキーワードになっており、メソッドの引数として設定すると、必ずExceptionをthrowするメソッドになります。\n場面としてはあまり使われない記号になります。\n## 検査例外\nKotlinにはJavaと違い検査例外がないため、Javaの場合にコンパイルエラーが発生する箇所でもKotlinではコンパイルエラーが発生しません。\nそのため、Kotlinではtry-catch文を一度も書かずとも実装を完結することができます。\nただコンパイル的な問題がないだけでプロジェクトとしての問題は別になるので、必要な箇所にはtry-catch文を記述するようにした方が良いでしょう。\n\n以上で、Kotlin言語の使い方であったり、Java言語の比較の内容を紹介してきました。\nこのページの情報があればJava→Kotlinへの移行を行うときの不具合などの対応はできると思われます。\n[Kotlinのスコープ関数を使い分けたい]: http://nyanyoni.hateblo.jp/entry/2017/08/19/152200","source":"_posts/android/12-KotlinBasic.md","raw":"---\ntitle: Kotlin プログラミング基礎\ndate: 2018-03-30 17:06:33\ntags:\n---\nKotlinを使ったプログラミングとして基礎を学習します。\n\n<!-- toc -->\n\n# 学習ポイント\n* Kotlin言語の特徴\n* Kotlin - Javaの差分\n\nGoogle I/O 2017にて正式にAndroid開発言語として公式サポートとなった言語Kotlinについて学習します。\n\n# Kotlin言語の特徴\nJavaをベースに開発された言語であるため、Javaと同じくJVM上で動作する言語、そのため様々なプラットフォームでの実行が可能。\n開発元のJetBrains社もJavaと完全な相互運用可能を提言しています。\n\n完全互換性言語ということでAndroidアプリの開発においてJavaで作成したプロジェクトに対して１ファイルだけKotlinという導入も可能である。\nまたJavaを使い慣れていれば抵抗感が少なくKotlinのプログラムが行えるような設計がなされています。\nKotlinはjava言語ではないのでないのでファイル拡張子も変わるのですが、***[ファイル名].kt***の形式でファイルが作成されます。\n当ページでは以下の項目に関して解説をしていきます。\n\n* 変数\n* 関数\n* 制御構文の変更点\n* クラスの定義\n* Unit, Nothing, Any\n* object, companion object\n* スコープ関数\n* ラムダ式\n* try-catch\n\nKotlinは公式サイトより導入せずとも試すことができます。\n[Kotlin Playground](https://try.kotlinlang.org/)\n\n## 変数\nKotlinは最近の言語で増えてきた推論型変数、オプショナル（Null-safety）などの概念が追加されています。\n\n先ずは変数ですが宣言の方法が以下のキーワードを使います。\n\n* var -> 変更可能な変数\n* val -> １度だけ代入できる変数(ローカル変数としての利用を想定)\n\n**推論型変数**\n変数の宣言のみを記述する場合には明示的に型を指定する必要がありますが、\n宣言と同時に代入を行う場合、代入されたデータの型として推論されそれ以降では代入したデータの方として扱われる変数となりす。\nそのため他の型やクラス以外のデータは代入できなくなります。\n\nまた、Kotlinでは原則宣言時に初期化が必須なのですが、宣言時に値を入れない方法もあり、varキーワードの前に`lateinit`と記述することで宣言のみを記述できます。\n```java Java\n\t//変数宣言のみ\n\tString hoge;\n\t// 変数宣言と同時に初期化\n\tString fuga = \"Android\";\n```\n```kotlin Kotlin\n\t//変数宣言のみ\n\tlateinit var hoge: String\n\t// 変数宣言と同時に初期化\n\t// String型の変数として扱われる\n\tvar fuga = \"Android\"\n```\nそして変数の宣言時には合わせてそれ以降のプログラムで宣言した変数にNullの代入可否を設定する必要があり、その設定を***Null-Safety(オプショナル)***と呼びます\n```kotlin Kotlin\n\t// Nullを許容しない変数\n\tvar hoge = \"hogehoge\"\n\thoge = null\t\t\t// コンパイルエラー\n\t// Nullを許容する変数\n\tvar fuga: String? = \"fugafuga\"\n\tfuga = null\t\t\t// 代入可\n```\nオプショナルを設定することで実行時エラー（NullPointerException）などの発生をエラーを予測して実装と動作確認することができます。\nさらにNull許容型の変数を作成した場合でもNullのチェックは簡潔に行えるよう機能が追加されており、その機能が`let`関数になります。\n```java Java\n\tString hoge = fuga != null ? fuga : \"hogehoge\";\n```\n```kotlin Kotlin\n\tval hoge = fuga?.let { fuga } ?: else { \"hogehoge\" }\n```\n上記Kotlinの例では`fuga`がnullではない場合はfugaを代入、nullの場合は\"hogehoge\"をhogeに代入する式担っています。\n`let`単体の式の場合で変数の結果がnullの場合にはnullが代入される仕様になっています。\n`let`に関してはスコープ関数の項目で細かい話に触れていきます。\n\nまた、Kotlinではキャストの方法も変更されて変更されており、キャストには`as`キーワードを使用します。\n```java Java\n\tlong numLong = 10;\n\t// Long型をInt型にキャスト\n\tint num = (int) numLong;\n```\n```kotlin Kotlin\n\tval numLong: Long = 10\n\t// Long型をInt型にキャスト\n\tvar num: Int = num as Int\n```\n\n## 関数\n関数の定義方法に変更が加わりましたが、参照方法に変更はありません。\n\n以下はInt型引数が１つで戻り値型がInt型のメソッドの定義方法になります。\n```java Java\n// メソッドの定義\n// [アクセス修飾子] [戻り値型] [メソッド名]([引数型] [引数名], [引数型] [引数名]...) {\n//     メソッドの処理\n// }\n\tpublic int calc(int x) {\n\t   return x + 10;\n\t}\n\t// メソッドの参照\n\tcalc(20);\n}\n```\n```kotlin Kotlin\n// メソッドの定義\n// [アクセス修飾子] fun [メソッド名]([引数名]: [引数型], [引数名]: [引数型]): [戻り値型]...) {\n//     メソッドの処理\n// }\n\tpublic fun calc(x: Int): Int {\n\t\treturn x + 10\n\t}\n\t// メソッドの参照\n\tcalc(20)\n}\n```\n## 制御構文\nKotlinでもif文、for文、while、do-whileなどはある程度javaと同じように利用できると思います。\nKotlinではswitchの代わりになるもので**when**という制御構文が追加されています。\nまた、Kotlinには三項演算子(条件演算子)はなくなり、if文を短縮して記述することですることで三項演算子の様に利用することができます。\n\n### if文\njava言語と基本的な利用方法は同じです、Kotlinでの特殊な利用方法として代入式としてif文を利用することができます。\n\n代入式としてif文を利用する場合は最後に記述した変数や式が右辺の変数に代入されます。\nKotlinではif文が代入式として使用できるので三項演算子(条件演算子)は使えなくなっています。\n```java Java\n\t// 通常のif文の記述方法\n\tif (a > 1 && a < 31) {\n\t    // 実行したい処理を記述\n\t}\n\t// if文を利用した変数への代入\n\tint num  = a < i ? 0 : 10 ;\n```\n```kotlin Kotlin\n\t// 通常のif文の記述方法\n\tif (a > 1 && a < 31) {\n\t    // 実行したい処理を記述\n\t}\n\t// if文を利用した変数への代入\n\tvar num: Int = if(a < i) { 0 } else { 10 }\n```\n\n### when文\nJavaや他の言語であるswitchの置き換え構文になります。\ncase文の代わりには`->（アロー演算子）`を使用します、各条件の時に１行で済むコードであればアロー演算子の後に半角スペースを挟んで記述できます。\n複数行であればアロー演算子の後に`{}`をつけてブロック内にコードを記述します。\nさらに複数の条件を指定したい場合は、条件を`,（カンマ）`で区切り条件を設定します。\n```java Java\n\tswitch(num) {\n\t\tcase 0:\n\t\t    // numが0の場合の処理\n\t\tbreak;\n\t\tcase 1:\n\t\t    // numが1の場合の処理\n\t\tbreak;\n\t\tcase 2:\n\t\tcase 3:\n\t\t    // numが2,3の場合の処理\t\t\n\t\tdefault:\n\t\t    // 全てのcase条件に該当しなかった場合の処理\n\t}\n```\n```kotlin Kotlin\n\twhen(num) {\n\t\t0 ->    // numが0の場合の処理\n\t\t1 -> {\n\t\t    // numが1の場合の処理\n\t\t    // 処理が複数行の場合は{} ブロックをブロックを記述\n\t\t}\n\t\t2,3 ->  // numが2,3の場合の処理\n\t\telse -> // 上記全ての条件に該当しなかった場合\n\t}\n```\nwhen構文では分岐条件の設定に`in`で条件範囲を設けたり`is`で型のチェックを条件に設定することも可能です。\n`!in`や`!is`と使うことで範囲外、型ではないなどの判定条件としても設定できます。\n```kotlin Kotlin\n\twhen(num) {\n\t\tin 1..10 ->    // numが1~10の範囲内だった時の処理\n\t\tis Int ->      // numがInt型だった場合の処理\n\t}\n```\nwhen構文もif文と同様に代入式として使用することも可能です、さらにwhen構文に引数を与えなかった場合、if-else文代替えとして認識され分岐条件の設定は論理型の判定になります。\n```kotlin Kotlin\n\t// hogeにwhen文で判定した結果が代入される\n\tval hoge = when {\n\t\t// 条件設定はtrue/falseの結果になるよう記述が必要\n\t\tfuga == 0 -> 10\n\t\tfuga == 10 -> 20\n\t\telse -> 30\n\t}\n```\n\n### for文\nKotlinでのfor文はJavaに置ける拡張for(foreach)文の形式でしか使用することができません。\n拡張for文形式で指定回数の繰り返しを行う例も合わせ紹介します。\n```java Java\n\t// 0~10を2ずつ加算するfor文\n\tfor(int i=0; i<10; i+=2) {\n\t    // 繰り返し時の処理\n\t}\n\t// 拡張for文\n\tfor(int num: numbers) {\n\t    // 繰り返し時の処理\n\t}\n```\n```kotlin Kotlin\n\t// 0~10を2ずつ加算するfor文\n\tfor (i in 1..10 step 2) {\n\t    // 繰り返し時の処理\t\t\n\t}\n\t// イテレータによるfor文\n\tfor(num : numbers) {\n\t    // 繰り返し時の処理\t\t\n\t}\n```\nまた`downTo`キーワードを使うことで降順的にfor文を処理することも可能です。\n```kotlin Kotlin\n\t// 20 ~ 0までの範囲でfor文を実行\n\tfor(i in 20 downTo 0) {\n\t\t// 繰り返し時の処理\n\t}\n\n\t// 20 ~ 0までの範囲で2ずつ下げるfor文を実行\n\tfor(i in 20 downTo 0 step 2) {\n\t\t// 繰り返し時の処理\n\t}\n```\nもしインデックス付きのfor文を処理したい場合は`indices`メンバや`withIndex()`メソッドを使用するとインデックスを使いながらfor文を実行することもできます。\n```kotlin Kotlin\n\t// インデックスを使ったfor文\n\tfor(i in array.indices) {\n\t    println(array[i])\n\t}\n\t// インデックスと値を使ったfor文\n\tfor((index, value) in array.withIndex()) {\n\t    println(\"インデックス：${index}, \\t値：${value}\")\n\t}\n```\n\n### while文\nwhile, do-while文に関してはJavaや他の言語と同様の記述ルールになります。\n\n## クラス\nクラスに関してもJavaから一部変更が入っていますが、概ね同じルールで記述していきます。\nclass定義の際にpublic修飾は不要となり、コンストラクタの記述方法が変更されました。\n\n### クラス定義\n以下で紹介するのは引数が２つあり、コンストラクタが一つ（プライマリコンストラクタ）の実装例になります。\nコンストラクタに引数がない場合はJava同様記述する必要はなく、デフォルトコンストラクタが有効になります。\n``` java Java\n// 引数が２つありメンバを初期化しているクラス\npublic class hoge {\n\tint num;\n\tString str;\n\thoge(int num, String str) {\n\t\tthis.num = num;\n\t\tthis.str = str;\n\t}\n}\n// デフォルトコンストラクタを有効にしているクラス\npublic class fuga {\n\tint num;\n}\n```\n```kotlin Kotlin\n// 引数が２つありメンバを初期化しているクラス\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n}\n// デフォルトコンストラクタを有効にしているクラス\nclass fuga {\n\tint num\n}\n```\nプライマリコンストラクタに初期化時の処理をつける場合は以下の通り実装する\n```kotlin Kotlin\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n\tinit {\n\t\t// プライマリコンストラクタの\n\t\t// 初期化処理\n\t}\n}\n```\nセカンダリコンストラクタを定義する場合は`constructor`キーワードを使用して定義します。\n```kotlin Kotlin\nclass hoge(num: Int, str: String) {\n\tvar num = num\n\tvar str = str\n\t// セカンダリコンストラクタの定義\n\t// プライマリコンストラクタへ移譲する定義が必要\n\tconstructor(num: Int): this(num, \"hoge\") {\n\t\t// セカンダリコンストラクタの初期化処理\n\t}\n}\n```\nインスタンスの作成はJavaと違い*new*キーワードなしでコンストラクタを呼び出します。\n```java Java\n\thoge inc = new hoge(0, \"str\");\n```\n```kotlin Kotlin\n\tval inc = hoge(0, \"str\");\n```\n### 継承、インターフェース\n継承や、インターフェースの実装に使用していた、**extends**や**implements**キーワードもなくなり,\nプライマリコンストラクタの後ろに`: [親Class名]([親Classプライマリコンストラクタの実引数])`の形式で継承関係を記述し、\n`,（カンマ）`区切りで実装するインターフェースを記述します。\nKotlinでは継承関係を記述しなかった場合、暗黙的に`Any`クラスの子クラスとなります。\n`Any`クラスと`java.util.Object`とは別のクラスになりますので注意してください。\nまたKotlinでは継承元となる親クラスの定義に`open`キーワードの修飾が必要になるので注意してください。\nメソッドを`orverride`させるにはメソッドの定義にも先頭に`open`を記述してください。\n```java Java\n// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義\n// SuperHogeクラスのプライマリコンストラクタは引数なしです。\npublic class Hoge extends SuperHoge inmplements Fuga {\n\t// SuperHogeクラスのfooメソッドをオーバーライド\n\t@orverride public void foo() {}\n}\n// 継承元の親クラスを定義\npublic classSuperHoge{\n\t// orvrerideできるメソッドの定義\n\tpublic void foo() {}\n}\n```\n```kotlin Kotlin\n// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義\n// SuperHogeクラスのプライマリコンストラクタは引数なしです。\nclass Hoge: SupreHoge(), Fuga {\n\t// SuperHogeクラスのfooメソッドをオーバーライド\n\torverride fun foo() {}\n}\n// 継承元の親クラスを定義\nopen class SuperHoge() {\n\t// orvrerideできるメソッドの定義\n\topen fun foo() {}\n}\n```\n**抽象クラス**に関してはJava同様`abstract`キーワードを使い抽象クラスとして定義することができます、また抽象クラスは`open`キーワードを付与しなくてもオーバーライドすることは可能です。\n\n### 静的メンバへのアクセス\nKotlinはJavaと違い**static**な変数や定数、メソッドを定義することができません。\nその場合の方法としてKotlinではクラスブロック外に変数、定数、メソッドを定義することができるので**static**メソッドの代わりに使用することができます。\nまた、クラスブロック内に`companion object`（コンパニオンオブジェクト）キーワードを使ったブロックを作りブロック内に変数、定数、メソッドを定義する方法もあります。\n前者の場合はクラス名の修飾なしに各定義を参照することができます、後者はクラス名の修飾を使って各定義を参照できます。\n\nクラス外に定義された内容はプロジェクト単位でユニークな扱いを受けるので、他のクラスで同名の定義を行うとコンパイルエラーが発生します。\nそのため、Fragmentなどのように静的コンストラクタを定義したい場合などは`companion object`に定義をし、クラス外には画面遷移時のパラメータキーやプロジェクト内でユニークな定数に分けるなどすると使い易くなります。\n```kotlin Kotlin\npackage com.sample\n// クラス外の定数定義\nconst val FOO = 10\n// クラス外のメソッド定義\nfun bar (a: Int): Int {\n\treturn a * 2\n}\n\nclass Hoge {\n\t// コンパニオンオブジェクトを使ったメソッドの定義\n\tcompanion object {\n\t\tfun fuga (b: Int): Int  {\n\t\t\treturn b *3\n\t\t}\n\t}\n}\n\n// Hogeクラス(Hoge.kt)の要素を参照するクラス\nclass Hogehoge {\n\n\tfun runMethod() {\n\t\t// Hoge.ktのbarメソッドを参照\n\t\tval res1 = bar(FOO)\n\t\t// Hoge.ktのfugaメソッドを参照\n\t\tval res2 = Hoge.fuga(FOO)\n\t}\n}\n```\n`const`キーワードを付けて記述した場合はJavaにおいて**static**な要素として扱われるのに対し、`const`なしで記述した物はJavaに変換された時にアクセサメソッドが定義されてしまうので、できるだけ`const`を付けて記述した方が良いです。\n\n## object\n`object`にはいつかの用途があり、一つが**クラス**内で紹介した`companion object`です。\nその他では以下の使い方で使用されることがあります、それぞれの使用方法について紹介していきます。\n\n* 無名オブジェクトの定義\n* シングルトンの定義\n\n### 無名オブジェクトの定義\nAndroid Javaにおいてはボタンなどのクリックイベントなど、引数にインスタンス化したオブジェクトを返す箇所などが無名クラスでの置き換えになります。\n\n以下例は画面のボタンコンポーネントに無名オブジェクトを使いクリックイベントをセットしています。\n```java Java\npublic class HogeActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.hogehoge);\n        Button btn = findViewById(R.id.button);\n        // インターフェースをオブジェクト化してクリックイベントをセット\n        btn.setOnClickListener(new View.OnClickListener() { ... });\n    }\n}\n```\n```kotlin Kotlin\nclass HogeActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val btn = findViewById(R.id.button)\n        // 無名オブジェクトを使ってクリックイベントをセット\n        btn.setOnClickListener(object : View.OnClickListener { ... }) \n    }\n```\n\n### シングルトンの定義\nAPIやデータベースなど都度インスタンス化して使うのが手間になるクラスも存在します、その場合にプロジェクト内でクラスのインスタンスが一つしか生成されない様に設計されたクラスをシングルトンと呼びます。\nJavaでのシングルトンの使い方はメソッドからメソッドへ繋ぐメソッドチェーンで使用するのが一般的でしたが\nKotlinでは`objectの宣言`によってJavaのクラスメソッドのようにシングルトンを使用できるようになりました。\n\n以下の例はシングルトンクラス'Hoge'を作成し、Fugaクラスにて利用している例になります。\n```java Java\n// シングルトンクラスHogeの定義\npublic class Hoge {\n    private static Hoge instance = new Hoge();\n\tprivate Hoge() {}\n    public static Hoge getInstance() {\n    \tif (instance == null) {\n    \t\tinstance = new Hoge();\n    \t} \n        return instance;\n    }\n    public double calcPlus10(double dec) {\n    \treturn dec + 10;\n    }\n}\n// Hogeクラスを使用するFugaクラス\npublic class Fuga {\n\tint a;\n\tpublic Fuga() {\n\t    // シングルトンHogeクラスを参照\n\t    a = Hoge.getInstance().calcPlus10(10);\n\t}\n}\n```\n```kotlin Kotlin\n// シングルトンクラスHogeの定義\nobject Hoge {\n\tfun calcPlus10(dec: Double): Double {\n\t\treturn dec + 10\n\t}\n}\n// Hogeクラスを使用するFugaクラス\nclass Fuga {\n\tvar a: int = 0;\n\tinit {\n\t    // シングルトンHogeクラスを参照\n\t    a = Hoge.calcPlus10(10)\n\t}\n}\n```\n## ラムダ式\nラムダ式は**メソッドの定義を式として扱い、即時実行された結果を機能**を指します。\n関数型リテラルとも呼ばれることがあり、関数が宣言されたのではなく式として宣言した変数に代入された形となります。\n実際に使用してみると、*'変数名(引数)'*の形式で参照するため、見栄えとして後から関数を作成したように感じます。\n\n以下の例は二つの値の和を求めるラムダ式になります。\n```kotlin Kotlin\n\t// 無名関数の定義\n\tval sum = {x: Int, y: Int -> x + y}\n\t// 無名関数の使用例\n\tval total = sum(3, 4)\n```\nまたラムダ式を使うことでリストなどのコレクション型のデータから特定の条件に該当するデータだけを抽出する時によく利用します。\nラムダ式を使う場合に引数の値が１つの場合、暗黙的に一時変数名`it`として設定されていることに注意してください。\n\n以下ではコレクションとの組み合わせによる例を紹介します。\n```kotlin Kotlin\n\tval tmpList: listOf(1,2,3)\n\t// コレクションのメソッドに対してラムダを適用した例\n\ttmpList.count {it % 2 ==1} // List型で奇数の1,3が含まれたオブジェクトを取得できる\n\ttmpList.filter {it == 2} // List型で2が含まれたオブジェクトを取得できる\n```\n## スコープ関数\nKotlin標準ライブラリに含まれている機能。\n対象オブジェクトやスコープ関数に渡した引数に限定して即時関数を実行する機能。\n利用できる種類としては現状(2018/05/19時点でkotlin 1.2.41が最新)では以下５つが有効なスコープ関数として登録されています。\n\n|関数 \\\\ 項目|操作オブジェクト|戻り値        |\n|:---------:|:------------|:-------------|\n|let        |it           |指定可         |\n|with       |this         |指定可         |\n|run        |this         |指定可         |\n|apply      |this         |操作オブジェクト|\n|also       |it           |操作オブジェクト|\n\nまた、スコープ関数の中でも`let`,`apply`はAndroid開発の中での利用頻度は高くなる印象があります。\n`let`はオプショナルのunwrappeで使用しますし、`apply`に関しては複数の項目を設定した場合などに使用できるのでFragmentの静的コンストラクタや\nHashMapによる複数項目の設定などを一括で行うような記述が行えるメリットがあります。\n> [Kotlinのスコープ関数を使い分けたい]を参照\n\n### let関数\n`let`関数の定義がこちら↓\n```kotlin\npublic inline fun <T, R> T.let(block: (T) -> R): R = block(this)\n```\n自身を引数としてラムダ式を実行する機能を持っている、ラムダブロック最後に記述されているオブジェクト（変数）を戻り値として返却する。\nまた、**Null許容変数のUnwappe(Nullチェック)によく使用される**\n`let`の実装サンプルは以下\n```kotlin Kotlin\n\t// [Object].let { [処理] }\n\t// 実際の使い方\n\tval fuga = 20\n\tvar hoge = fuga.let { it + 10 } // hoge: 30\n```\n上記のコードでい変数\"fugaが + 10\"を\"hoge\"に代入する式となりました、ではNullチェックでの使用方法を紹介します。\n```kotlin Kotlin\n\t// オプショナルの設定された変数のUnwrappeを行う\n\tval hoge = fuga?.let { [fugaがnullじゃない時の処理] } ?: { [fugaがnullの場合の処理] }\n```\n`let`に関してはNullのUnwrappeでの利用が大いのでまずは上記２つの内、後者を特に覚えておけば良いと思います。\n### with\n`with`関数の定義はこちら↓\n```kotlin\npublic inline fun <T, R> with(receiver: T, f: T.() -> R): R = receiver.f()\n```\n`with`はオブジェクトを修飾して呼び出す関数ではなく、通常の関数として用意されています。\n`with`関数は引数で指定されたオブジェクトをラムダ式で使用でき引数オブジェクトのメソッド等も参照することができます。\n処理の最後に記述されているオブジェクト(変数)が戻り値になります\nこの後に出てくる*apply*とにているが戻り値になる値が違う点に注意してください。\n```kotlin Kotlin\n\t// with([Object]) { [処理] }\n\tval fuga = fuga(123, \"田中\")\n\tval hoge = with(fuga) {\n\t\tprintln(\"id: ${getID()}\")\n\t\tgetName()\n\t}\n\tprintln(\"hoge: ${hoge}\") // hoge: 田中\n```\n### run\n`run`関数の定義はこちら↓\n```kotlin\npublic inline fun <T, R> T.run(block: T.() -> R): R = block()\n```\n*let*や*with*と同じように最後に記述されている式や値が戻り値として返却される\n参照方法が*let*、ブロック内のオブジェクト呼び出しが*with*のように実装でき、*let*と*with*が合わさったような関数\n```kotlin Kotlin\n\t// [Object].run { [処理] }\n\tval fuga = fuga(123, \"田中\")\n\tval hoge = fuga.run {\n\t\tprintln(\"id: ${getID()}\")\n\t\tgetName()\n\t}\n\tprintln(\"hoge: ${hoge}\") // hoge: 田中\n```\n### apply\n`apply`関数の定義はこちら↓\n```kotlin\npublic inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }\n```\n戻り値が`apply`関数を修飾したオブジェクトで固定されている、記述の方法などは*with*と同じ形で使用できる。\nAndroid開発に置けるFragmentの処理が一部簡潔に記述できたりする\n```\n\t// [Object].apply { [処理] }\n\tval fuga: Fuga = fuga(123, \"田中\")\n\t// 戻り値はFugaクラスのインスタンス\n\tval hoge = fuga.apply {\n\t\tprintln(\"id: ${getID()}\")\n\t\tsetName(\"山田\")\n\t}\n\tprintln(\"hoge: ${hoge.getName}\") // hoge: 山田\n```\n### also\n`also`関数の定義はこちら↓\n```kotlin\npublic inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }\n```\nKotlin Version:1.1から追加されたスコープ関数、使い方としては*apply*とほぼ同等だが、ラムダ式で修飾したオブジェクトに\n仮引数名が設定でき、ラムダ式内外でthisのスコープが変わらないという特徴がある。\n```\n\t// [Object].apply { [処理] }\n\tval fuga: Fuga = fuga(123, \"田中\")\n\t// 戻り値はFugaクラスのインスタンス\n\tval hoge = fuga.apply { f ->\n\t\tprintln(\"id: ${f.getID()}\")\n\t\tf.setName(\"山田\")\n\t\tstartActivity(Intent(this, NextActivity::class.java))\n\t}\n\tprintln(\"hoge: ${hoge.getName}\") // hoge: 山田\n```\n\n## Any, Unit, Nothing\nJavaには存在しなかったキーワードが出てきたのでいくつか紹介します。\n### Any\nJavaではルートクラスがObjectクラスでしたが、KotlinではルートクラスがObjectではなく`Any`になります、KotlinにおいてもJavaのObjectクラスは存在しますが、Anyのサブ(子)クラスとして存在します。\nKotlinにはプリミティブ型は存在せず、全てがクラスとして扱われるようになります。\nそのため、Javaでのプリミティブ型をBoxing(ボクシング)する必要がなく、コンパイラが自動的にプリミティブ型に最適化されるよう設計されています。\n### Unit\nまたJavaでメソッドなど戻り値がない場合に使うキーワードとして**void**がありますが`Unit`という**void**と同じく意味のない値を返すことを示すキーワードが追加されています、\nKotlinでのメソッドの戻り値がない場合は何も型の指定を行いませんが、暗黙的に`Unit`が戻り値として設定される仕様になっています。\n### Nothing\n`Nothing`は値が返されないことを示すキーワードになっており、メソッドの引数として設定すると、必ずExceptionをthrowするメソッドになります。\n場面としてはあまり使われない記号になります。\n## 検査例外\nKotlinにはJavaと違い検査例外がないため、Javaの場合にコンパイルエラーが発生する箇所でもKotlinではコンパイルエラーが発生しません。\nそのため、Kotlinではtry-catch文を一度も書かずとも実装を完結することができます。\nただコンパイル的な問題がないだけでプロジェクトとしての問題は別になるので、必要な箇所にはtry-catch文を記述するようにした方が良いでしょう。\n\n以上で、Kotlin言語の使い方であったり、Java言語の比較の内容を紹介してきました。\nこのページの情報があればJava→Kotlinへの移行を行うときの不具合などの対応はできると思われます。\n[Kotlinのスコープ関数を使い分けたい]: http://nyanyoni.hateblo.jp/entry/2017/08/19/152200","slug":"12-KotlinBasic","published":1,"updated":"2018-05-19T07:11:13.935Z","_id":"cjh4ui0rc000b3l616cpuzy9q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Kotlinを使ったプログラミングとして基礎を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#kotlin言語の特徴\">Kotlin言語の特徴</a><ul>\n<li><a href=\"#変数\">変数</a></li>\n<li><a href=\"#関数\">関数</a></li>\n<li><a href=\"#制御構文\">制御構文</a><ul>\n<li><a href=\"#if文\">if文</a></li>\n<li><a href=\"#when文\">when文</a></li>\n<li><a href=\"#for文\">for文</a></li>\n<li><a href=\"#while文\">while文</a></li>\n</ul>\n</li>\n<li><a href=\"#クラス\">クラス</a><ul>\n<li><a href=\"#クラス定義\">クラス定義</a></li>\n<li><a href=\"#継承-インターフェース\">継承、インターフェース</a></li>\n<li><a href=\"#静的メンバへのアクセス\">静的メンバへのアクセス</a></li>\n</ul>\n</li>\n<li><a href=\"#object\">object</a><ul>\n<li><a href=\"#無名オブジェクトの定義\">無名オブジェクトの定義</a></li>\n<li><a href=\"#シングルトンの定義\">シングルトンの定義</a></li>\n</ul>\n</li>\n<li><a href=\"#ラムダ式\">ラムダ式</a></li>\n<li><a href=\"#スコープ関数\">スコープ関数</a><ul>\n<li><a href=\"#let関数\">let関数</a></li>\n<li><a href=\"#with\">with</a></li>\n<li><a href=\"#run\">run</a></li>\n<li><a href=\"#apply\">apply</a></li>\n<li><a href=\"#also\">also</a></li>\n</ul>\n</li>\n<li><a href=\"#any-unit-nothing\">Any, Unit, Nothing</a><ul>\n<li><a href=\"#any\">Any</a></li>\n<li><a href=\"#unit\">Unit</a></li>\n<li><a href=\"#nothing\">Nothing</a></li>\n</ul>\n</li>\n<li><a href=\"#検査例外\">検査例外</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>Kotlin言語の特徴</li>\n<li>Kotlin - Javaの差分</li>\n</ul>\n<p>Google I/O 2017にて正式にAndroid開発言語として公式サポートとなった言語Kotlinについて学習します。</p>\n<h1><span id=\"kotlin言語の特徴\">Kotlin言語の特徴</span></h1><p>Javaをベースに開発された言語であるため、Javaと同じくJVM上で動作する言語、そのため様々なプラットフォームでの実行が可能。<br>開発元のJetBrains社もJavaと完全な相互運用可能を提言しています。</p>\n<p>完全互換性言語ということでAndroidアプリの開発においてJavaで作成したプロジェクトに対して１ファイルだけKotlinという導入も可能である。<br>またJavaを使い慣れていれば抵抗感が少なくKotlinのプログラムが行えるような設計がなされています。<br>Kotlinはjava言語ではないのでないのでファイル拡張子も変わるのですが、<strong><em>[ファイル名].kt</em></strong>の形式でファイルが作成されます。<br>当ページでは以下の項目に関して解説をしていきます。</p>\n<ul>\n<li>変数</li>\n<li>関数</li>\n<li>制御構文の変更点</li>\n<li>クラスの定義</li>\n<li>Unit, Nothing, Any</li>\n<li>object, companion object</li>\n<li>スコープ関数</li>\n<li>ラムダ式</li>\n<li>try-catch</li>\n</ul>\n<p>Kotlinは公式サイトより導入せずとも試すことができます。<br><a href=\"https://try.kotlinlang.org/\" target=\"_blank\" rel=\"external\">Kotlin Playground</a></p>\n<h2><span id=\"変数\">変数</span></h2><p>Kotlinは最近の言語で増えてきた推論型変数、オプショナル（Null-safety）などの概念が追加されています。</p>\n<p>先ずは変数ですが宣言の方法が以下のキーワードを使います。</p>\n<ul>\n<li>var -&gt; 変更可能な変数</li>\n<li>val -&gt; １度だけ代入できる変数(ローカル変数としての利用を想定)</li>\n</ul>\n<p><strong>推論型変数</strong><br>変数の宣言のみを記述する場合には明示的に型を指定する必要がありますが、<br>宣言と同時に代入を行う場合、代入されたデータの型として推論されそれ以降では代入したデータの方として扱われる変数となりす。<br>そのため他の型やクラス以外のデータは代入できなくなります。</p>\n<p>また、Kotlinでは原則宣言時に初期化が必須なのですが、宣言時に値を入れない方法もあり、varキーワードの前に<code>lateinit</code>と記述することで宣言のみを記述できます。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//変数宣言のみ</span></span><br><span class=\"line\">String hoge;</span><br><span class=\"line\"><span class=\"comment\">// 変数宣言と同時に初期化</span></span><br><span class=\"line\">String fuga = <span class=\"string\">\"Android\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//変数宣言のみ</span></span><br><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> hoge: String</span><br><span class=\"line\"><span class=\"comment\">// 変数宣言と同時に初期化</span></span><br><span class=\"line\"><span class=\"comment\">// String型の変数として扱われる</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fuga = <span class=\"string\">\"Android\"</span></span><br></pre></td></tr></table></figure>\n<p>そして変数の宣言時には合わせてそれ以降のプログラムで宣言した変数にNullの代入可否を設定する必要があり、その設定を<strong><em>Null-Safety(オプショナル)</em></strong>と呼びます<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Nullを許容しない変数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hoge = <span class=\"string\">\"hogehoge\"</span></span><br><span class=\"line\">hoge = <span class=\"literal\">null</span>\t\t\t<span class=\"comment\">// コンパイルエラー</span></span><br><span class=\"line\"><span class=\"comment\">// Nullを許容する変数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fuga: String? = <span class=\"string\">\"fugafuga\"</span></span><br><span class=\"line\">fuga = <span class=\"literal\">null</span>\t\t\t<span class=\"comment\">// 代入可</span></span><br></pre></td></tr></table></figure></p>\n<p>オプショナルを設定することで実行時エラー（NullPointerException）などの発生をエラーを予測して実装と動作確認することができます。<br>さらにNull許容型の変数を作成した場合でもNullのチェックは簡潔に行えるよう機能が追加されており、その機能が<code>let</code>関数になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String hoge = fuga != <span class=\"keyword\">null</span> ? fuga : <span class=\"string\">\"hogehoge\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga?.let &#123; fuga &#125; ?: <span class=\"keyword\">else</span> &#123; <span class=\"string\">\"hogehoge\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上記Kotlinの例では<code>fuga</code>がnullではない場合はfugaを代入、nullの場合は”hogehoge”をhogeに代入する式担っています。<br><code>let</code>単体の式の場合で変数の結果がnullの場合にはnullが代入される仕様になっています。<br><code>let</code>に関してはスコープ関数の項目で細かい話に触れていきます。</p>\n<p>また、Kotlinではキャストの方法も変更されて変更されており、キャストには<code>as</code>キーワードを使用します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> numLong = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// Long型をInt型にキャスト</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) numLong;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numLong: <span class=\"built_in\">Long</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// Long型をInt型にキャスト</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"built_in\">Int</span> = num <span class=\"keyword\">as</span> <span class=\"built_in\">Int</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"関数\">関数</span></h2><p>関数の定義方法に変更が加わりましたが、参照方法に変更はありません。</p>\n<p>以下はInt型引数が１つで戻り値型がInt型のメソッドの定義方法になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// メソッドの定義</span></span><br><span class=\"line\"><span class=\"comment\">// [アクセス修飾子] [戻り値型] [メソッド名]([引数型] [引数名], [引数型] [引数名]...) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     メソッドの処理</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> x + <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// メソッドの参照</span></span><br><span class=\"line\">\tcalc(<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// メソッドの定義</span></span><br><span class=\"line\"><span class=\"comment\">// [アクセス修飾子] fun [メソッド名]([引数名]: [引数型], [引数名]: [引数型]): [戻り値型]...) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     メソッドの処理</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calc</span><span class=\"params\">(x: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// メソッドの参照</span></span><br><span class=\"line\">\tcalc(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"制御構文\">制御構文</span></h2><p>Kotlinでもif文、for文、while、do-whileなどはある程度javaと同じように利用できると思います。<br>Kotlinではswitchの代わりになるもので<strong>when</strong>という制御構文が追加されています。<br>また、Kotlinには三項演算子(条件演算子)はなくなり、if文を短縮して記述することですることで三項演算子の様に利用することができます。</p>\n<h3><span id=\"if文\">if文</span></h3><p>java言語と基本的な利用方法は同じです、Kotlinでの特殊な利用方法として代入式としてif文を利用することができます。</p>\n<p>代入式としてif文を利用する場合は最後に記述した変数や式が右辺の変数に代入されます。<br>Kotlinではif文が代入式として使用できるので三項演算子(条件演算子)は使えなくなっています。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常のif文の記述方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">1</span> &amp;&amp; a &lt; <span class=\"number\">31</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 実行したい処理を記述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// if文を利用した変数への代入</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num  = a &lt; i ? <span class=\"number\">0</span> : <span class=\"number\">10</span> ;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常のif文の記述方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">1</span> &amp;&amp; a &lt; <span class=\"number\">31</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 実行したい処理を記述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// if文を利用した変数への代入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"built_in\">Int</span> = <span class=\"keyword\">if</span>(a &lt; i) &#123; <span class=\"number\">0</span> &#125; <span class=\"keyword\">else</span> &#123; <span class=\"number\">10</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"when文\">when文</span></h3><p>Javaや他の言語であるswitchの置き換え構文になります。<br>case文の代わりには<code>-&gt;（アロー演算子）</code>を使用します、各条件の時に１行で済むコードであればアロー演算子の後に半角スペースを挟んで記述できます。<br>複数行であればアロー演算子の後に<code>{}</code>をつけてブロック内にコードを記述します。<br>さらに複数の条件を指定したい場合は、条件を<code>,（カンマ）</code>で区切り条件を設定します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが0の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが1の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが2,3の場合の処理\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// 全てのcase条件に該当しなかった場合の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"number\">0</span> -&gt;    <span class=\"comment\">// numが0の場合の処理</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> -&gt; &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// numが1の場合の処理</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 処理が複数行の場合は&#123;&#125; ブロックをブロックを記述</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"number\">2</span>,<span class=\"number\">3</span> -&gt;  <span class=\"comment\">// numが2,3の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> -&gt; <span class=\"comment\">// 上記全ての条件に該当しなかった場合</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>when構文では分岐条件の設定に<code>in</code>で条件範囲を設けたり<code>is</code>で型のチェックを条件に設定することも可能です。<br><code>!in</code>や<code>!is</code>と使うことで範囲外、型ではないなどの判定条件としても設定できます。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt;    <span class=\"comment\">// numが1~10の範囲内だった時の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt;      <span class=\"comment\">// numがInt型だった場合の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>when構文もif文と同様に代入式として使用することも可能です、さらにwhen構文に引数を与えなかった場合、if-else文代替えとして認識され分岐条件の設定は論理型の判定になります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hogeにwhen文で判定した結果が代入される</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 条件設定はtrue/falseの結果になるよう記述が必要</span></span><br><span class=\"line\">\tfuga == <span class=\"number\">0</span> -&gt; <span class=\"number\">10</span></span><br><span class=\"line\">\tfuga == <span class=\"number\">10</span> -&gt; <span class=\"number\">20</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> -&gt; <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"for文\">for文</span></h3><p>Kotlinでのfor文はJavaに置ける拡張for(foreach)文の形式でしか使用することができません。<br>拡張for文形式で指定回数の繰り返しを行う例も合わせ紹介します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0~10を2ずつ加算するfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 拡張for文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num: numbers) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0~10を2ずつ加算するfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理\t\t</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// イテレータによるfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(num : numbers) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理\t\t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>また<code>downTo</code>キーワードを使うことで降順的にfor文を処理することも可能です。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 20 ~ 0までの範囲でfor文を実行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">20</span> downTo <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 20 ~ 0までの範囲で2ずつ下げるfor文を実行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">20</span> downTo <span class=\"number\">0</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>もしインデックス付きのfor文を処理したい場合は<code>indices</code>メンバや<code>withIndex()</code>メソッドを使用するとインデックスを使いながらfor文を実行することもできます。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// インデックスを使ったfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> array.indices) &#123;</span><br><span class=\"line\">    println(array[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// インデックスと値を使ったfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((index, value) <span class=\"keyword\">in</span> array.withIndex()) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"インデックス：<span class=\"subst\">$&#123;index&#125;</span>, \\t値：<span class=\"subst\">$&#123;value&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"while文\">while文</span></h3><p>while, do-while文に関してはJavaや他の言語と同様の記述ルールになります。</p>\n<h2><span id=\"クラス\">クラス</span></h2><p>クラスに関してもJavaから一部変更が入っていますが、概ね同じルールで記述していきます。<br>class定義の際にpublic修飾は不要となり、コンストラクタの記述方法が変更されました。</p>\n<h3><span id=\"クラス定義\">クラス定義</span></h3><p>以下で紹介するのは引数が２つあり、コンストラクタが一つ（プライマリコンストラクタ）の実装例になります。<br>コンストラクタに引数がない場合はJava同様記述する必要はなく、デフォルトコンストラクタが有効になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引数が２つありメンバを初期化しているクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\tString str;</span><br><span class=\"line\">\thoge(<span class=\"keyword\">int</span> num, String str) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// デフォルトコンストラクタを有効にしているクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引数が２つありメンバを初期化しているクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// デフォルトコンストラクタを有効にしているクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fuga</span> </span>&#123;</span><br><span class=\"line\">\tint num</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>プライマリコンストラクタに初期化時の処理をつける場合は以下の通り実装する<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">\tinit &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// プライマリコンストラクタの</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 初期化処理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>セカンダリコンストラクタを定義する場合は<code>constructor</code>キーワードを使用して定義します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">\t<span class=\"comment\">// セカンダリコンストラクタの定義</span></span><br><span class=\"line\">\t<span class=\"comment\">// プライマリコンストラクタへ移譲する定義が必要</span></span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(num: <span class=\"built_in\">Int</span>): <span class=\"keyword\">this</span>(num, <span class=\"string\">\"hoge\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// セカンダリコンストラクタの初期化処理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>インスタンスの作成はJavaと違い<em>new</em>キーワードなしでコンストラクタを呼び出します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hoge inc = <span class=\"keyword\">new</span> hoge(<span class=\"number\">0</span>, <span class=\"string\">\"str\"</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inc = hoge(<span class=\"number\">0</span>, <span class=\"string\">\"str\"</span>);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"継承-インターフェース\">継承、インターフェース</span></h3><p>継承や、インターフェースの実装に使用していた、<strong>extends</strong>や<strong>implements</strong>キーワードもなくなり,<br>プライマリコンストラクタの後ろに<code>: [親Class名]([親Classプライマリコンストラクタの実引数])</code>の形式で継承関係を記述し、<br><code>,（カンマ）</code>区切りで実装するインターフェースを記述します。<br>Kotlinでは継承関係を記述しなかった場合、暗黙的に<code>Any</code>クラスの子クラスとなります。<br><code>Any</code>クラスと<code>java.util.Object</code>とは別のクラスになりますので注意してください。<br>またKotlinでは継承元となる親クラスの定義に<code>open</code>キーワードの修飾が必要になるので注意してください。<br>メソッドを<code>orverride</code>させるにはメソッドの定義にも先頭に<code>open</code>を記述してください。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義</span></span><br><span class=\"line\"><span class=\"comment\">// SuperHogeクラスのプライマリコンストラクタは引数なしです。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperHoge</span> <span class=\"title\">inmplements</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SuperHogeクラスのfooメソッドをオーバーライド</span></span><br><span class=\"line\">\t<span class=\"meta\">@orverride</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 継承元の親クラスを定義</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classSuperHoge&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// orvrerideできるメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義</span></span><br><span class=\"line\"><span class=\"comment\">// SuperHogeクラスのプライマリコンストラクタは引数なしです。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span>: <span class=\"type\">SupreHoge</span></span>(), Fuga &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SuperHogeクラスのfooメソッドをオーバーライド</span></span><br><span class=\"line\">\torverride <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 継承元の親クラスを定義</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperHoge</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// orvrerideできるメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>抽象クラス</strong>に関してはJava同様<code>abstract</code>キーワードを使い抽象クラスとして定義することができます、また抽象クラスは<code>open</code>キーワードを付与しなくてもオーバーライドすることは可能です。</p>\n<h3><span id=\"静的メンバへのアクセス\">静的メンバへのアクセス</span></h3><p>KotlinはJavaと違い<strong>static</strong>な変数や定数、メソッドを定義することができません。<br>その場合の方法としてKotlinではクラスブロック外に変数、定数、メソッドを定義することができるので<strong>static</strong>メソッドの代わりに使用することができます。<br>また、クラスブロック内に<code>companion object</code>（コンパニオンオブジェクト）キーワードを使ったブロックを作りブロック内に変数、定数、メソッドを定義する方法もあります。<br>前者の場合はクラス名の修飾なしに各定義を参照することができます、後者はクラス名の修飾を使って各定義を参照できます。</p>\n<p>クラス外に定義された内容はプロジェクト単位でユニークな扱いを受けるので、他のクラスで同名の定義を行うとコンパイルエラーが発生します。<br>そのため、Fragmentなどのように静的コンストラクタを定義したい場合などは<code>companion object</code>に定義をし、クラス外には画面遷移時のパラメータキーやプロジェクト内でユニークな定数に分けるなどすると使い易くなります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sample</span><br><span class=\"line\"><span class=\"comment\">// クラス外の定数定義</span></span><br><span class=\"line\">const <span class=\"keyword\">val</span> FOO = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// クラス外のメソッド定義</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span> <span class=\"params\">(a: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// コンパニオンオブジェクトを使ったメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fuga</span> <span class=\"params\">(b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span>  &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> b *<span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hogeクラス(Hoge.kt)の要素を参照するクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hogehoge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Hoge.ktのbarメソッドを参照</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">val</span> res1 = bar(FOO)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Hoge.ktのfugaメソッドを参照</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">val</span> res2 = Hoge.fuga(FOO)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>const</code>キーワードを付けて記述した場合はJavaにおいて<strong>static</strong>な要素として扱われるのに対し、<code>const</code>なしで記述した物はJavaに変換された時にアクセサメソッドが定義されてしまうので、できるだけ<code>const</code>を付けて記述した方が良いです。</p>\n<h2><span id=\"object\">object</span></h2><p><code>object</code>にはいつかの用途があり、一つが<strong>クラス</strong>内で紹介した<code>companion object</code>です。<br>その他では以下の使い方で使用されることがあります、それぞれの使用方法について紹介していきます。</p>\n<ul>\n<li>無名オブジェクトの定義</li>\n<li>シングルトンの定義</li>\n</ul>\n<h3><span id=\"無名オブジェクトの定義\">無名オブジェクトの定義</span></h3><p>Android Javaにおいてはボタンなどのクリックイベントなど、引数にインスタンス化したオブジェクトを返す箇所などが無名クラスでの置き換えになります。</p>\n<p>以下例は画面のボタンコンポーネントに無名オブジェクトを使いクリックイベントをセットしています。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HogeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.hogehoge);</span><br><span class=\"line\">        Button btn = findViewById(R.id.button);</span><br><span class=\"line\">        <span class=\"comment\">// インターフェースをオブジェクト化してクリックイベントをセット</span></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123; ... &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HogeActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> btn = findViewById(R.id.button)</span><br><span class=\"line\">        <span class=\"comment\">// 無名オブジェクトを使ってクリックイベントをセット</span></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">object</span> : View.OnClickListener &#123; ... &#125;) </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"シングルトンの定義\">シングルトンの定義</span></h3><p>APIやデータベースなど都度インスタンス化して使うのが手間になるクラスも存在します、その場合にプロジェクト内でクラスのインスタンスが一つしか生成されない様に設計されたクラスをシングルトンと呼びます。<br>Javaでのシングルトンの使い方はメソッドからメソッドへ繋ぐメソッドチェーンで使用するのが一般的でしたが<br>Kotlinでは<code>objectの宣言</code>によってJavaのクラスメソッドのようにシングルトンを使用できるようになりました。</p>\n<p>以下の例はシングルトンクラス’Hoge’を作成し、Fugaクラスにて利用している例になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// シングルトンクラスHogeの定義</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Hoge instance = <span class=\"keyword\">new</span> Hoge();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Hoge</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hoge <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\tinstance = <span class=\"keyword\">new</span> Hoge();</span><br><span class=\"line\">    \t&#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPlus10</span><span class=\"params\">(<span class=\"keyword\">double</span> dec)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> dec + <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Hogeクラスを使用するFugaクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Fuga</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// シングルトンHogeクラスを参照</span></span><br><span class=\"line\">\t    a = Hoge.getInstance().calcPlus10(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// シングルトンクラスHogeの定義</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Hoge &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calcPlus10</span><span class=\"params\">(dec: <span class=\"type\">Double</span>)</span></span>: <span class=\"built_in\">Double</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dec + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Hogeクラスを使用するFugaクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a: int = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tinit &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// シングルトンHogeクラスを参照</span></span><br><span class=\"line\">\t    a = Hoge.calcPlus10(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"ラムダ式\">ラムダ式</span></h2><p>ラムダ式は<strong>メソッドの定義を式として扱い、即時実行された結果を機能</strong>を指します。<br>関数型リテラルとも呼ばれることがあり、関数が宣言されたのではなく式として宣言した変数に代入された形となります。<br>実際に使用してみると、<em>‘変数名(引数)’</em>の形式で参照するため、見栄えとして後から関数を作成したように感じます。</p>\n<p>以下の例は二つの値の和を求めるラムダ式になります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 無名関数の定義</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sum = &#123;x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span> -&gt; x + y&#125;</span><br><span class=\"line\"><span class=\"comment\">// 無名関数の使用例</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> total = sum(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>またラムダ式を使うことでリストなどのコレクション型のデータから特定の条件に該当するデータだけを抽出する時によく利用します。<br>ラムダ式を使う場合に引数の値が１つの場合、暗黙的に一時変数名<code>it</code>として設定されていることに注意してください。</p>\n<p>以下ではコレクションとの組み合わせによる例を紹介します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tmpList: listOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// コレクションのメソッドに対してラムダを適用した例</span></span><br><span class=\"line\">tmpList.count &#123;it % <span class=\"number\">2</span> ==<span class=\"number\">1</span>&#125; <span class=\"comment\">// List型で奇数の1,3が含まれたオブジェクトを取得できる</span></span><br><span class=\"line\">tmpList.filter &#123;it == <span class=\"number\">2</span>&#125; <span class=\"comment\">// List型で2が含まれたオブジェクトを取得できる</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"スコープ関数\">スコープ関数</span></h2><p>Kotlin標準ライブラリに含まれている機能。<br>対象オブジェクトやスコープ関数に渡した引数に限定して即時関数を実行する機能。<br>利用できる種類としては現状(2018/05/19時点でkotlin 1.2.41が最新)では以下５つが有効なスコープ関数として登録されています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">関数 \\ 項目</th>\n<th style=\"text-align:left\">操作オブジェクト</th>\n<th style=\"text-align:left\">戻り値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">let</td>\n<td style=\"text-align:left\">it</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">with</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">run</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">apply</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">操作オブジェクト</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">also</td>\n<td style=\"text-align:left\">it</td>\n<td style=\"text-align:left\">操作オブジェクト</td>\n</tr>\n</tbody>\n</table>\n<p>また、スコープ関数の中でも<code>let</code>,<code>apply</code>はAndroid開発の中での利用頻度は高くなる印象があります。<br><code>let</code>はオプショナルのunwrappeで使用しますし、<code>apply</code>に関しては複数の項目を設定した場合などに使用できるのでFragmentの静的コンストラクタや<br>HashMapによる複数項目の設定などを一括で行うような記述が行えるメリットがあります。</p>\n<blockquote>\n<p><a href=\"http://nyanyoni.hateblo.jp/entry/2017/08/19/152200\" target=\"_blank\" rel=\"external\">Kotlinのスコープ関数を使い分けたい</a>を参照</p>\n</blockquote>\n<h3><span id=\"let関数\">let関数</span></h3><p><code>let</code>関数の定義がこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> T.<span class=\"title\">let</span><span class=\"params\">(block: (<span class=\"type\">T</span>)</span></span> -&gt; R): R = block(<span class=\"keyword\">this</span>)</span><br></pre></td></tr></table></figure></p>\n<p>自身を引数としてラムダ式を実行する機能を持っている、ラムダブロック最後に記述されているオブジェクト（変数）を戻り値として返却する。<br>また、<strong>Null許容変数のUnwappe(Nullチェック)によく使用される</strong><br><code>let</code>の実装サンプルは以下<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [Object].let &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 実際の使い方</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hoge = fuga.let &#123; it + <span class=\"number\">10</span> &#125; <span class=\"comment\">// hoge: 30</span></span><br></pre></td></tr></table></figure></p>\n<p>上記のコードでい変数”fugaが + 10”を”hoge”に代入する式となりました、ではNullチェックでの使用方法を紹介します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// オプショナルの設定された変数のUnwrappeを行う</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga?.let &#123; [fugaが<span class=\"literal\">null</span>じゃない時の処理] &#125; ?: &#123; [fugaが<span class=\"literal\">null</span>の場合の処理] &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>let</code>に関してはNullのUnwrappeでの利用が大いのでまずは上記２つの内、後者を特に覚えておけば良いと思います。</p>\n<h3><span id=\"with\">with</span></h3><p><code>with</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> <span class=\"title\">with</span><span class=\"params\">(receiver: <span class=\"type\">T</span>, f: <span class=\"type\">T</span>.()</span></span> -&gt; R): R = receiver.f()</span><br></pre></td></tr></table></figure></p>\n<p><code>with</code>はオブジェクトを修飾して呼び出す関数ではなく、通常の関数として用意されています。<br><code>with</code>関数は引数で指定されたオブジェクトをラムダ式で使用でき引数オブジェクトのメソッド等も参照することができます。<br>処理の最後に記述されているオブジェクト(変数)が戻り値になります<br>この後に出てくる<em>apply</em>とにているが戻り値になる値が違う点に注意してください。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// with([Object]) &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = fuga(<span class=\"number\">123</span>, <span class=\"string\">\"田中\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = with(fuga) &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"id: <span class=\"subst\">$&#123;getID()&#125;</span>\"</span>)</span><br><span class=\"line\">\tgetName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"hoge: <span class=\"subst\">$&#123;hoge&#125;</span>\"</span>) <span class=\"comment\">// hoge: 田中</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"run\">run</span></h3><p><code>run</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> T.<span class=\"title\">run</span><span class=\"params\">(block: <span class=\"type\">T</span>.()</span></span> -&gt; R): R = block()</span><br></pre></td></tr></table></figure></p>\n<p><em>let</em>や<em>with</em>と同じように最後に記述されている式や値が戻り値として返却される<br>参照方法が<em>let</em>、ブロック内のオブジェクト呼び出しが<em>with</em>のように実装でき、<em>let</em>と<em>with</em>が合わさったような関数<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [Object].run &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = fuga(<span class=\"number\">123</span>, <span class=\"string\">\"田中\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga.run &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"id: <span class=\"subst\">$&#123;getID()&#125;</span>\"</span>)</span><br><span class=\"line\">\tgetName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"hoge: <span class=\"subst\">$&#123;hoge&#125;</span>\"</span>) <span class=\"comment\">// hoge: 田中</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"apply\">apply</span></h3><p><code>apply</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">apply</span><span class=\"params\">(block: <span class=\"type\">T</span>.()</span></span> -&gt; <span class=\"built_in\">Unit</span>): T &#123; block(); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>戻り値が<code>apply</code>関数を修飾したオブジェクトで固定されている、記述の方法などは<em>with</em>と同じ形で使用できる。<br>Android開発に置けるFragmentの処理が一部簡潔に記述できたりする<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [Object].apply &#123; [処理] &#125;</span><br><span class=\"line\">val fuga: Fuga = fuga(123, &quot;田中&quot;)</span><br><span class=\"line\">// 戻り値はFugaクラスのインスタンス</span><br><span class=\"line\">val hoge = fuga.apply &#123;</span><br><span class=\"line\">\tprintln(&quot;id: $&#123;getID()&#125;&quot;)</span><br><span class=\"line\">\tsetName(&quot;山田&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(&quot;hoge: $&#123;hoge.getName&#125;&quot;) // hoge: 山田</span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"also\">also</span></h3><p><code>also</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">also</span><span class=\"params\">(block: (<span class=\"type\">T</span>)</span></span> -&gt; <span class=\"built_in\">Unit</span>): T &#123; block(<span class=\"keyword\">this</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin Version:1.1から追加されたスコープ関数、使い方としては<em>apply</em>とほぼ同等だが、ラムダ式で修飾したオブジェクトに<br>仮引数名が設定でき、ラムダ式内外でthisのスコープが変わらないという特徴がある。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [Object].apply &#123; [処理] &#125;</span><br><span class=\"line\">val fuga: Fuga = fuga(123, &quot;田中&quot;)</span><br><span class=\"line\">// 戻り値はFugaクラスのインスタンス</span><br><span class=\"line\">val hoge = fuga.apply &#123; f -&gt;</span><br><span class=\"line\">\tprintln(&quot;id: $&#123;f.getID()&#125;&quot;)</span><br><span class=\"line\">\tf.setName(&quot;山田&quot;)</span><br><span class=\"line\">\tstartActivity(Intent(this, NextActivity::class.java))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(&quot;hoge: $&#123;hoge.getName&#125;&quot;) // hoge: 山田</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"any-unit-nothing\">Any, Unit, Nothing</span></h2><p>Javaには存在しなかったキーワードが出てきたのでいくつか紹介します。</p>\n<h3><span id=\"any\">Any</span></h3><p>JavaではルートクラスがObjectクラスでしたが、KotlinではルートクラスがObjectではなく<code>Any</code>になります、KotlinにおいてもJavaのObjectクラスは存在しますが、Anyのサブ(子)クラスとして存在します。<br>Kotlinにはプリミティブ型は存在せず、全てがクラスとして扱われるようになります。<br>そのため、Javaでのプリミティブ型をBoxing(ボクシング)する必要がなく、コンパイラが自動的にプリミティブ型に最適化されるよう設計されています。</p>\n<h3><span id=\"unit\">Unit</span></h3><p>またJavaでメソッドなど戻り値がない場合に使うキーワードとして<strong>void</strong>がありますが<code>Unit</code>という<strong>void</strong>と同じく意味のない値を返すことを示すキーワードが追加されています、<br>Kotlinでのメソッドの戻り値がない場合は何も型の指定を行いませんが、暗黙的に<code>Unit</code>が戻り値として設定される仕様になっています。</p>\n<h3><span id=\"nothing\">Nothing</span></h3><p><code>Nothing</code>は値が返されないことを示すキーワードになっており、メソッドの引数として設定すると、必ずExceptionをthrowするメソッドになります。<br>場面としてはあまり使われない記号になります。</p>\n<h2><span id=\"検査例外\">検査例外</span></h2><p>KotlinにはJavaと違い検査例外がないため、Javaの場合にコンパイルエラーが発生する箇所でもKotlinではコンパイルエラーが発生しません。<br>そのため、Kotlinではtry-catch文を一度も書かずとも実装を完結することができます。<br>ただコンパイル的な問題がないだけでプロジェクトとしての問題は別になるので、必要な箇所にはtry-catch文を記述するようにした方が良いでしょう。</p>\n<p>以上で、Kotlin言語の使い方であったり、Java言語の比較の内容を紹介してきました。<br>このページの情報があればJava→Kotlinへの移行を行うときの不具合などの対応はできると思われます。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Kotlinを使ったプログラミングとして基礎を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#kotlin言語の特徴\">Kotlin言語の特徴</a><ul>\n<li><a href=\"#変数\">変数</a></li>\n<li><a href=\"#関数\">関数</a></li>\n<li><a href=\"#制御構文\">制御構文</a><ul>\n<li><a href=\"#if文\">if文</a></li>\n<li><a href=\"#when文\">when文</a></li>\n<li><a href=\"#for文\">for文</a></li>\n<li><a href=\"#while文\">while文</a></li>\n</ul>\n</li>\n<li><a href=\"#クラス\">クラス</a><ul>\n<li><a href=\"#クラス定義\">クラス定義</a></li>\n<li><a href=\"#継承-インターフェース\">継承、インターフェース</a></li>\n<li><a href=\"#静的メンバへのアクセス\">静的メンバへのアクセス</a></li>\n</ul>\n</li>\n<li><a href=\"#object\">object</a><ul>\n<li><a href=\"#無名オブジェクトの定義\">無名オブジェクトの定義</a></li>\n<li><a href=\"#シングルトンの定義\">シングルトンの定義</a></li>\n</ul>\n</li>\n<li><a href=\"#ラムダ式\">ラムダ式</a></li>\n<li><a href=\"#スコープ関数\">スコープ関数</a><ul>\n<li><a href=\"#let関数\">let関数</a></li>\n<li><a href=\"#with\">with</a></li>\n<li><a href=\"#run\">run</a></li>\n<li><a href=\"#apply\">apply</a></li>\n<li><a href=\"#also\">also</a></li>\n</ul>\n</li>\n<li><a href=\"#any-unit-nothing\">Any, Unit, Nothing</a><ul>\n<li><a href=\"#any\">Any</a></li>\n<li><a href=\"#unit\">Unit</a></li>\n<li><a href=\"#nothing\">Nothing</a></li>\n</ul>\n</li>\n<li><a href=\"#検査例外\">検査例外</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>Kotlin言語の特徴</li>\n<li>Kotlin - Javaの差分</li>\n</ul>\n<p>Google I/O 2017にて正式にAndroid開発言語として公式サポートとなった言語Kotlinについて学習します。</p>\n<h1 id=\"Kotlin言語の特徴\"><a href=\"#Kotlin言語の特徴\" class=\"headerlink\" title=\"Kotlin言語の特徴\"></a>Kotlin言語の特徴</h1><p>Javaをベースに開発された言語であるため、Javaと同じくJVM上で動作する言語、そのため様々なプラットフォームでの実行が可能。<br>開発元のJetBrains社もJavaと完全な相互運用可能を提言しています。</p>\n<p>完全互換性言語ということでAndroidアプリの開発においてJavaで作成したプロジェクトに対して１ファイルだけKotlinという導入も可能である。<br>またJavaを使い慣れていれば抵抗感が少なくKotlinのプログラムが行えるような設計がなされています。<br>Kotlinはjava言語ではないのでないのでファイル拡張子も変わるのですが、<strong><em>[ファイル名].kt</em></strong>の形式でファイルが作成されます。<br>当ページでは以下の項目に関して解説をしていきます。</p>\n<ul>\n<li>変数</li>\n<li>関数</li>\n<li>制御構文の変更点</li>\n<li>クラスの定義</li>\n<li>Unit, Nothing, Any</li>\n<li>object, companion object</li>\n<li>スコープ関数</li>\n<li>ラムダ式</li>\n<li>try-catch</li>\n</ul>\n<p>Kotlinは公式サイトより導入せずとも試すことができます。<br><a href=\"https://try.kotlinlang.org/\" target=\"_blank\" rel=\"external\">Kotlin Playground</a></p>\n<h2 id=\"変数\"><a href=\"#変数\" class=\"headerlink\" title=\"変数\"></a>変数</h2><p>Kotlinは最近の言語で増えてきた推論型変数、オプショナル（Null-safety）などの概念が追加されています。</p>\n<p>先ずは変数ですが宣言の方法が以下のキーワードを使います。</p>\n<ul>\n<li>var -&gt; 変更可能な変数</li>\n<li>val -&gt; １度だけ代入できる変数(ローカル変数としての利用を想定)</li>\n</ul>\n<p><strong>推論型変数</strong><br>変数の宣言のみを記述する場合には明示的に型を指定する必要がありますが、<br>宣言と同時に代入を行う場合、代入されたデータの型として推論されそれ以降では代入したデータの方として扱われる変数となりす。<br>そのため他の型やクラス以外のデータは代入できなくなります。</p>\n<p>また、Kotlinでは原則宣言時に初期化が必須なのですが、宣言時に値を入れない方法もあり、varキーワードの前に<code>lateinit</code>と記述することで宣言のみを記述できます。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//変数宣言のみ</span></span><br><span class=\"line\">String hoge;</span><br><span class=\"line\"><span class=\"comment\">// 変数宣言と同時に初期化</span></span><br><span class=\"line\">String fuga = <span class=\"string\">\"Android\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//変数宣言のみ</span></span><br><span class=\"line\"><span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> hoge: String</span><br><span class=\"line\"><span class=\"comment\">// 変数宣言と同時に初期化</span></span><br><span class=\"line\"><span class=\"comment\">// String型の変数として扱われる</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fuga = <span class=\"string\">\"Android\"</span></span><br></pre></td></tr></table></figure>\n<p>そして変数の宣言時には合わせてそれ以降のプログラムで宣言した変数にNullの代入可否を設定する必要があり、その設定を<strong><em>Null-Safety(オプショナル)</em></strong>と呼びます<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Nullを許容しない変数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hoge = <span class=\"string\">\"hogehoge\"</span></span><br><span class=\"line\">hoge = <span class=\"literal\">null</span>\t\t\t<span class=\"comment\">// コンパイルエラー</span></span><br><span class=\"line\"><span class=\"comment\">// Nullを許容する変数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fuga: String? = <span class=\"string\">\"fugafuga\"</span></span><br><span class=\"line\">fuga = <span class=\"literal\">null</span>\t\t\t<span class=\"comment\">// 代入可</span></span><br></pre></td></tr></table></figure></p>\n<p>オプショナルを設定することで実行時エラー（NullPointerException）などの発生をエラーを予測して実装と動作確認することができます。<br>さらにNull許容型の変数を作成した場合でもNullのチェックは簡潔に行えるよう機能が追加されており、その機能が<code>let</code>関数になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String hoge = fuga != <span class=\"keyword\">null</span> ? fuga : <span class=\"string\">\"hogehoge\"</span>;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga?.let &#123; fuga &#125; ?: <span class=\"keyword\">else</span> &#123; <span class=\"string\">\"hogehoge\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上記Kotlinの例では<code>fuga</code>がnullではない場合はfugaを代入、nullの場合は”hogehoge”をhogeに代入する式担っています。<br><code>let</code>単体の式の場合で変数の結果がnullの場合にはnullが代入される仕様になっています。<br><code>let</code>に関してはスコープ関数の項目で細かい話に触れていきます。</p>\n<p>また、Kotlinではキャストの方法も変更されて変更されており、キャストには<code>as</code>キーワードを使用します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> numLong = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// Long型をInt型にキャスト</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>) numLong;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numLong: <span class=\"built_in\">Long</span> = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// Long型をInt型にキャスト</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"built_in\">Int</span> = num <span class=\"keyword\">as</span> <span class=\"built_in\">Int</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"関数\"><a href=\"#関数\" class=\"headerlink\" title=\"関数\"></a>関数</h2><p>関数の定義方法に変更が加わりましたが、参照方法に変更はありません。</p>\n<p>以下はInt型引数が１つで戻り値型がInt型のメソッドの定義方法になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// メソッドの定義</span></span><br><span class=\"line\"><span class=\"comment\">// [アクセス修飾子] [戻り値型] [メソッド名]([引数型] [引数名], [引数型] [引数名]...) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     メソッドの処理</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t   <span class=\"keyword\">return</span> x + <span class=\"number\">10</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// メソッドの参照</span></span><br><span class=\"line\">\tcalc(<span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// メソッドの定義</span></span><br><span class=\"line\"><span class=\"comment\">// [アクセス修飾子] fun [メソッド名]([引数名]: [引数型], [引数名]: [引数型]): [戻り値型]...) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     メソッドの処理</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calc</span><span class=\"params\">(x: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// メソッドの参照</span></span><br><span class=\"line\">\tcalc(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"制御構文\"><a href=\"#制御構文\" class=\"headerlink\" title=\"制御構文\"></a>制御構文</h2><p>Kotlinでもif文、for文、while、do-whileなどはある程度javaと同じように利用できると思います。<br>Kotlinではswitchの代わりになるもので<strong>when</strong>という制御構文が追加されています。<br>また、Kotlinには三項演算子(条件演算子)はなくなり、if文を短縮して記述することですることで三項演算子の様に利用することができます。</p>\n<h3 id=\"if文\"><a href=\"#if文\" class=\"headerlink\" title=\"if文\"></a>if文</h3><p>java言語と基本的な利用方法は同じです、Kotlinでの特殊な利用方法として代入式としてif文を利用することができます。</p>\n<p>代入式としてif文を利用する場合は最後に記述した変数や式が右辺の変数に代入されます。<br>Kotlinではif文が代入式として使用できるので三項演算子(条件演算子)は使えなくなっています。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常のif文の記述方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">1</span> &amp;&amp; a &lt; <span class=\"number\">31</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 実行したい処理を記述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// if文を利用した変数への代入</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num  = a &lt; i ? <span class=\"number\">0</span> : <span class=\"number\">10</span> ;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常のif文の記述方法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; <span class=\"number\">1</span> &amp;&amp; a &lt; <span class=\"number\">31</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 実行したい処理を記述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// if文を利用した変数への代入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num: <span class=\"built_in\">Int</span> = <span class=\"keyword\">if</span>(a &lt; i) &#123; <span class=\"number\">0</span> &#125; <span class=\"keyword\">else</span> &#123; <span class=\"number\">10</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"when文\"><a href=\"#when文\" class=\"headerlink\" title=\"when文\"></a>when文</h3><p>Javaや他の言語であるswitchの置き換え構文になります。<br>case文の代わりには<code>-&gt;（アロー演算子）</code>を使用します、各条件の時に１行で済むコードであればアロー演算子の後に半角スペースを挟んで記述できます。<br>複数行であればアロー演算子の後に<code>{}</code>をつけてブロック内にコードを記述します。<br>さらに複数の条件を指定したい場合は、条件を<code>,（カンマ）</code>で区切り条件を設定します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが0の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが1の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// numが2,3の場合の処理\t\t</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">// 全てのcase条件に該当しなかった場合の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"number\">0</span> -&gt;    <span class=\"comment\">// numが0の場合の処理</span></span><br><span class=\"line\">\t<span class=\"number\">1</span> -&gt; &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// numが1の場合の処理</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 処理が複数行の場合は&#123;&#125; ブロックをブロックを記述</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"number\">2</span>,<span class=\"number\">3</span> -&gt;  <span class=\"comment\">// numが2,3の場合の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> -&gt; <span class=\"comment\">// 上記全ての条件に該当しなかった場合</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>when構文では分岐条件の設定に<code>in</code>で条件範囲を設けたり<code>is</code>で型のチェックを条件に設定することも可能です。<br><code>!in</code>や<code>!is</code>と使うことで範囲外、型ではないなどの判定条件としても設定できます。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span>(num) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt;    <span class=\"comment\">// numが1~10の範囲内だった時の処理</span></span><br><span class=\"line\">\t<span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt;      <span class=\"comment\">// numがInt型だった場合の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>when構文もif文と同様に代入式として使用することも可能です、さらにwhen構文に引数を与えなかった場合、if-else文代替えとして認識され分岐条件の設定は論理型の判定になります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hogeにwhen文で判定した結果が代入される</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 条件設定はtrue/falseの結果になるよう記述が必要</span></span><br><span class=\"line\">\tfuga == <span class=\"number\">0</span> -&gt; <span class=\"number\">10</span></span><br><span class=\"line\">\tfuga == <span class=\"number\">10</span> -&gt; <span class=\"number\">20</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> -&gt; <span class=\"number\">30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"for文\"><a href=\"#for文\" class=\"headerlink\" title=\"for文\"></a>for文</h3><p>Kotlinでのfor文はJavaに置ける拡張for(foreach)文の形式でしか使用することができません。<br>拡張for文形式で指定回数の繰り返しを行う例も合わせ紹介します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0~10を2ずつ加算するfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 拡張for文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> num: numbers) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0~10を2ずつ加算するfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理\t\t</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// イテレータによるfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(num : numbers) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 繰り返し時の処理\t\t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>また<code>downTo</code>キーワードを使うことで降順的にfor文を処理することも可能です。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 20 ~ 0までの範囲でfor文を実行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">20</span> downTo <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 20 ~ 0までの範囲で2ずつ下げるfor文を実行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> <span class=\"number\">20</span> downTo <span class=\"number\">0</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し時の処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>もしインデックス付きのfor文を処理したい場合は<code>indices</code>メンバや<code>withIndex()</code>メソッドを使用するとインデックスを使いながらfor文を実行することもできます。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// インデックスを使ったfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i <span class=\"keyword\">in</span> array.indices) &#123;</span><br><span class=\"line\">    println(array[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// インデックスと値を使ったfor文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((index, value) <span class=\"keyword\">in</span> array.withIndex()) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"インデックス：<span class=\"subst\">$&#123;index&#125;</span>, \\t値：<span class=\"subst\">$&#123;value&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"while文\"><a href=\"#while文\" class=\"headerlink\" title=\"while文\"></a>while文</h3><p>while, do-while文に関してはJavaや他の言語と同様の記述ルールになります。</p>\n<h2 id=\"クラス\"><a href=\"#クラス\" class=\"headerlink\" title=\"クラス\"></a>クラス</h2><p>クラスに関してもJavaから一部変更が入っていますが、概ね同じルールで記述していきます。<br>class定義の際にpublic修飾は不要となり、コンストラクタの記述方法が変更されました。</p>\n<h3 id=\"クラス定義\"><a href=\"#クラス定義\" class=\"headerlink\" title=\"クラス定義\"></a>クラス定義</h3><p>以下で紹介するのは引数が２つあり、コンストラクタが一つ（プライマリコンストラクタ）の実装例になります。<br>コンストラクタに引数がない場合はJava同様記述する必要はなく、デフォルトコンストラクタが有効になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引数が２つありメンバを初期化しているクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\tString str;</span><br><span class=\"line\">\thoge(<span class=\"keyword\">int</span> num, String str) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.str = str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// デフォルトコンストラクタを有効にしているクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引数が２つありメンバを初期化しているクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// デフォルトコンストラクタを有効にしているクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fuga</span> </span>&#123;</span><br><span class=\"line\">\tint num</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>プライマリコンストラクタに初期化時の処理をつける場合は以下の通り実装する<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">\tinit &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// プライマリコンストラクタの</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 初期化処理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>セカンダリコンストラクタを定義する場合は<code>constructor</code>キーワードを使用して定義します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hoge</span></span>(num: <span class=\"built_in\">Int</span>, str: String) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> num = num</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str = str</span><br><span class=\"line\">\t<span class=\"comment\">// セカンダリコンストラクタの定義</span></span><br><span class=\"line\">\t<span class=\"comment\">// プライマリコンストラクタへ移譲する定義が必要</span></span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(num: <span class=\"built_in\">Int</span>): <span class=\"keyword\">this</span>(num, <span class=\"string\">\"hoge\"</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// セカンダリコンストラクタの初期化処理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>インスタンスの作成はJavaと違い<em>new</em>キーワードなしでコンストラクタを呼び出します。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hoge inc = <span class=\"keyword\">new</span> hoge(<span class=\"number\">0</span>, <span class=\"string\">\"str\"</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> inc = hoge(<span class=\"number\">0</span>, <span class=\"string\">\"str\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"継承、インターフェース\"><a href=\"#継承、インターフェース\" class=\"headerlink\" title=\"継承、インターフェース\"></a>継承、インターフェース</h3><p>継承や、インターフェースの実装に使用していた、<strong>extends</strong>や<strong>implements</strong>キーワードもなくなり,<br>プライマリコンストラクタの後ろに<code>: [親Class名]([親Classプライマリコンストラクタの実引数])</code>の形式で継承関係を記述し、<br><code>,（カンマ）</code>区切りで実装するインターフェースを記述します。<br>Kotlinでは継承関係を記述しなかった場合、暗黙的に<code>Any</code>クラスの子クラスとなります。<br><code>Any</code>クラスと<code>java.util.Object</code>とは別のクラスになりますので注意してください。<br>またKotlinでは継承元となる親クラスの定義に<code>open</code>キーワードの修飾が必要になるので注意してください。<br>メソッドを<code>orverride</code>させるにはメソッドの定義にも先頭に<code>open</code>を記述してください。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義</span></span><br><span class=\"line\"><span class=\"comment\">// SuperHogeクラスのプライマリコンストラクタは引数なしです。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperHoge</span> <span class=\"title\">inmplements</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SuperHogeクラスのfooメソッドをオーバーライド</span></span><br><span class=\"line\">\t<span class=\"meta\">@orverride</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 継承元の親クラスを定義</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classSuperHoge&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// orvrerideできるメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SuperHogeクラスを継承し、Fugaインターフェースを実装するHogeクラスの定義</span></span><br><span class=\"line\"><span class=\"comment\">// SuperHogeクラスのプライマリコンストラクタは引数なしです。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span>: <span class=\"type\">SupreHoge</span></span>(), Fuga &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// SuperHogeクラスのfooメソッドをオーバーライド</span></span><br><span class=\"line\">\torverride <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 継承元の親クラスを定義</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperHoge</span></span>() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// orvrerideできるメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"keyword\">open</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>抽象クラス</strong>に関してはJava同様<code>abstract</code>キーワードを使い抽象クラスとして定義することができます、また抽象クラスは<code>open</code>キーワードを付与しなくてもオーバーライドすることは可能です。</p>\n<h3 id=\"静的メンバへのアクセス\"><a href=\"#静的メンバへのアクセス\" class=\"headerlink\" title=\"静的メンバへのアクセス\"></a>静的メンバへのアクセス</h3><p>KotlinはJavaと違い<strong>static</strong>な変数や定数、メソッドを定義することができません。<br>その場合の方法としてKotlinではクラスブロック外に変数、定数、メソッドを定義することができるので<strong>static</strong>メソッドの代わりに使用することができます。<br>また、クラスブロック内に<code>companion object</code>（コンパニオンオブジェクト）キーワードを使ったブロックを作りブロック内に変数、定数、メソッドを定義する方法もあります。<br>前者の場合はクラス名の修飾なしに各定義を参照することができます、後者はクラス名の修飾を使って各定義を参照できます。</p>\n<p>クラス外に定義された内容はプロジェクト単位でユニークな扱いを受けるので、他のクラスで同名の定義を行うとコンパイルエラーが発生します。<br>そのため、Fragmentなどのように静的コンストラクタを定義したい場合などは<code>companion object</code>に定義をし、クラス外には画面遷移時のパラメータキーやプロジェクト内でユニークな定数に分けるなどすると使い易くなります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sample</span><br><span class=\"line\"><span class=\"comment\">// クラス外の定数定義</span></span><br><span class=\"line\">const <span class=\"keyword\">val</span> FOO = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">// クラス外のメソッド定義</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span> <span class=\"params\">(a: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// コンパニオンオブジェクトを使ったメソッドの定義</span></span><br><span class=\"line\">\t<span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fuga</span> <span class=\"params\">(b: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span>  &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> b *<span class=\"number\">3</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hogeクラス(Hoge.kt)の要素を参照するクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hogehoge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">runMethod</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Hoge.ktのbarメソッドを参照</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">val</span> res1 = bar(FOO)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Hoge.ktのfugaメソッドを参照</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">val</span> res2 = Hoge.fuga(FOO)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>const</code>キーワードを付けて記述した場合はJavaにおいて<strong>static</strong>な要素として扱われるのに対し、<code>const</code>なしで記述した物はJavaに変換された時にアクセサメソッドが定義されてしまうので、できるだけ<code>const</code>を付けて記述した方が良いです。</p>\n<h2 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h2><p><code>object</code>にはいつかの用途があり、一つが<strong>クラス</strong>内で紹介した<code>companion object</code>です。<br>その他では以下の使い方で使用されることがあります、それぞれの使用方法について紹介していきます。</p>\n<ul>\n<li>無名オブジェクトの定義</li>\n<li>シングルトンの定義</li>\n</ul>\n<h3 id=\"無名オブジェクトの定義\"><a href=\"#無名オブジェクトの定義\" class=\"headerlink\" title=\"無名オブジェクトの定義\"></a>無名オブジェクトの定義</h3><p>Android Javaにおいてはボタンなどのクリックイベントなど、引数にインスタンス化したオブジェクトを返す箇所などが無名クラスでの置き換えになります。</p>\n<p>以下例は画面のボタンコンポーネントに無名オブジェクトを使いクリックイベントをセットしています。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HogeActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.hogehoge);</span><br><span class=\"line\">        Button btn = findViewById(R.id.button);</span><br><span class=\"line\">        <span class=\"comment\">// インターフェースをオブジェクト化してクリックイベントをセット</span></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123; ... &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HogeActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> btn = findViewById(R.id.button)</span><br><span class=\"line\">        <span class=\"comment\">// 無名オブジェクトを使ってクリックイベントをセット</span></span><br><span class=\"line\">        btn.setOnClickListener(<span class=\"keyword\">object</span> : View.OnClickListener &#123; ... &#125;) </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"シングルトンの定義\"><a href=\"#シングルトンの定義\" class=\"headerlink\" title=\"シングルトンの定義\"></a>シングルトンの定義</h3><p>APIやデータベースなど都度インスタンス化して使うのが手間になるクラスも存在します、その場合にプロジェクト内でクラスのインスタンスが一つしか生成されない様に設計されたクラスをシングルトンと呼びます。<br>Javaでのシングルトンの使い方はメソッドからメソッドへ繋ぐメソッドチェーンで使用するのが一般的でしたが<br>Kotlinでは<code>objectの宣言</code>によってJavaのクラスメソッドのようにシングルトンを使用できるようになりました。</p>\n<p>以下の例はシングルトンクラス’Hoge’を作成し、Fugaクラスにて利用している例になります。<br><figure class=\"highlight java\"><figcaption><span>Java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// シングルトンクラスHogeの定義</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hoge</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Hoge instance = <span class=\"keyword\">new</span> Hoge();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Hoge</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hoge <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \t\tinstance = <span class=\"keyword\">new</span> Hoge();</span><br><span class=\"line\">    \t&#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">calcPlus10</span><span class=\"params\">(<span class=\"keyword\">double</span> dec)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> dec + <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Hogeクラスを使用するFugaクラス</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Fuga</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// シングルトンHogeクラスを参照</span></span><br><span class=\"line\">\t    a = Hoge.getInstance().calcPlus10(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// シングルトンクラスHogeの定義</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Hoge &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calcPlus10</span><span class=\"params\">(dec: <span class=\"type\">Double</span>)</span></span>: <span class=\"built_in\">Double</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dec + <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Hogeクラスを使用するFugaクラス</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fuga</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a: int = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tinit &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// シングルトンHogeクラスを参照</span></span><br><span class=\"line\">\t    a = Hoge.calcPlus10(<span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ラムダ式\"><a href=\"#ラムダ式\" class=\"headerlink\" title=\"ラムダ式\"></a>ラムダ式</h2><p>ラムダ式は<strong>メソッドの定義を式として扱い、即時実行された結果を機能</strong>を指します。<br>関数型リテラルとも呼ばれることがあり、関数が宣言されたのではなく式として宣言した変数に代入された形となります。<br>実際に使用してみると、<em>‘変数名(引数)’</em>の形式で参照するため、見栄えとして後から関数を作成したように感じます。</p>\n<p>以下の例は二つの値の和を求めるラムダ式になります。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 無名関数の定義</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sum = &#123;x: <span class=\"built_in\">Int</span>, y: <span class=\"built_in\">Int</span> -&gt; x + y&#125;</span><br><span class=\"line\"><span class=\"comment\">// 無名関数の使用例</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> total = sum(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></p>\n<p>またラムダ式を使うことでリストなどのコレクション型のデータから特定の条件に該当するデータだけを抽出する時によく利用します。<br>ラムダ式を使う場合に引数の値が１つの場合、暗黙的に一時変数名<code>it</code>として設定されていることに注意してください。</p>\n<p>以下ではコレクションとの組み合わせによる例を紹介します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tmpList: listOf(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// コレクションのメソッドに対してラムダを適用した例</span></span><br><span class=\"line\">tmpList.count &#123;it % <span class=\"number\">2</span> ==<span class=\"number\">1</span>&#125; <span class=\"comment\">// List型で奇数の1,3が含まれたオブジェクトを取得できる</span></span><br><span class=\"line\">tmpList.filter &#123;it == <span class=\"number\">2</span>&#125; <span class=\"comment\">// List型で2が含まれたオブジェクトを取得できる</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"スコープ関数\"><a href=\"#スコープ関数\" class=\"headerlink\" title=\"スコープ関数\"></a>スコープ関数</h2><p>Kotlin標準ライブラリに含まれている機能。<br>対象オブジェクトやスコープ関数に渡した引数に限定して即時関数を実行する機能。<br>利用できる種類としては現状(2018/05/19時点でkotlin 1.2.41が最新)では以下５つが有効なスコープ関数として登録されています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">関数 \\ 項目</th>\n<th style=\"text-align:left\">操作オブジェクト</th>\n<th style=\"text-align:left\">戻り値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">let</td>\n<td style=\"text-align:left\">it</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">with</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">run</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">指定可</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">apply</td>\n<td style=\"text-align:left\">this</td>\n<td style=\"text-align:left\">操作オブジェクト</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">also</td>\n<td style=\"text-align:left\">it</td>\n<td style=\"text-align:left\">操作オブジェクト</td>\n</tr>\n</tbody>\n</table>\n<p>また、スコープ関数の中でも<code>let</code>,<code>apply</code>はAndroid開発の中での利用頻度は高くなる印象があります。<br><code>let</code>はオプショナルのunwrappeで使用しますし、<code>apply</code>に関しては複数の項目を設定した場合などに使用できるのでFragmentの静的コンストラクタや<br>HashMapによる複数項目の設定などを一括で行うような記述が行えるメリットがあります。</p>\n<blockquote>\n<p><a href=\"http://nyanyoni.hateblo.jp/entry/2017/08/19/152200\" target=\"_blank\" rel=\"external\">Kotlinのスコープ関数を使い分けたい</a>を参照</p>\n</blockquote>\n<h3 id=\"let関数\"><a href=\"#let関数\" class=\"headerlink\" title=\"let関数\"></a>let関数</h3><p><code>let</code>関数の定義がこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> T.<span class=\"title\">let</span><span class=\"params\">(block: (<span class=\"type\">T</span>)</span></span> -&gt; R): R = block(<span class=\"keyword\">this</span>)</span><br></pre></td></tr></table></figure></p>\n<p>自身を引数としてラムダ式を実行する機能を持っている、ラムダブロック最後に記述されているオブジェクト（変数）を戻り値として返却する。<br>また、<strong>Null許容変数のUnwappe(Nullチェック)によく使用される</strong><br><code>let</code>の実装サンプルは以下<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [Object].let &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 実際の使い方</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hoge = fuga.let &#123; it + <span class=\"number\">10</span> &#125; <span class=\"comment\">// hoge: 30</span></span><br></pre></td></tr></table></figure></p>\n<p>上記のコードでい変数”fugaが + 10”を”hoge”に代入する式となりました、ではNullチェックでの使用方法を紹介します。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// オプショナルの設定された変数のUnwrappeを行う</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga?.let &#123; [fugaが<span class=\"literal\">null</span>じゃない時の処理] &#125; ?: &#123; [fugaが<span class=\"literal\">null</span>の場合の処理] &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>let</code>に関してはNullのUnwrappeでの利用が大いのでまずは上記２つの内、後者を特に覚えておけば良いと思います。</p>\n<h3 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h3><p><code>with</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> <span class=\"title\">with</span><span class=\"params\">(receiver: <span class=\"type\">T</span>, f: <span class=\"type\">T</span>.()</span></span> -&gt; R): R = receiver.f()</span><br></pre></td></tr></table></figure></p>\n<p><code>with</code>はオブジェクトを修飾して呼び出す関数ではなく、通常の関数として用意されています。<br><code>with</code>関数は引数で指定されたオブジェクトをラムダ式で使用でき引数オブジェクトのメソッド等も参照することができます。<br>処理の最後に記述されているオブジェクト(変数)が戻り値になります<br>この後に出てくる<em>apply</em>とにているが戻り値になる値が違う点に注意してください。<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// with([Object]) &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = fuga(<span class=\"number\">123</span>, <span class=\"string\">\"田中\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = with(fuga) &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"id: <span class=\"subst\">$&#123;getID()&#125;</span>\"</span>)</span><br><span class=\"line\">\tgetName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"hoge: <span class=\"subst\">$&#123;hoge&#125;</span>\"</span>) <span class=\"comment\">// hoge: 田中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p><code>run</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T, R&gt;</span> T.<span class=\"title\">run</span><span class=\"params\">(block: <span class=\"type\">T</span>.()</span></span> -&gt; R): R = block()</span><br></pre></td></tr></table></figure></p>\n<p><em>let</em>や<em>with</em>と同じように最後に記述されている式や値が戻り値として返却される<br>参照方法が<em>let</em>、ブロック内のオブジェクト呼び出しが<em>with</em>のように実装でき、<em>let</em>と<em>with</em>が合わさったような関数<br><figure class=\"highlight kotlin\"><figcaption><span>Kotlin</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [Object].run &#123; [処理] &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> fuga = fuga(<span class=\"number\">123</span>, <span class=\"string\">\"田中\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> hoge = fuga.run &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">\"id: <span class=\"subst\">$&#123;getID()&#125;</span>\"</span>)</span><br><span class=\"line\">\tgetName()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"hoge: <span class=\"subst\">$&#123;hoge&#125;</span>\"</span>) <span class=\"comment\">// hoge: 田中</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h3><p><code>apply</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">apply</span><span class=\"params\">(block: <span class=\"type\">T</span>.()</span></span> -&gt; <span class=\"built_in\">Unit</span>): T &#123; block(); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>戻り値が<code>apply</code>関数を修飾したオブジェクトで固定されている、記述の方法などは<em>with</em>と同じ形で使用できる。<br>Android開発に置けるFragmentの処理が一部簡潔に記述できたりする<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [Object].apply &#123; [処理] &#125;</span><br><span class=\"line\">val fuga: Fuga = fuga(123, &quot;田中&quot;)</span><br><span class=\"line\">// 戻り値はFugaクラスのインスタンス</span><br><span class=\"line\">val hoge = fuga.apply &#123;</span><br><span class=\"line\">\tprintln(&quot;id: $&#123;getID()&#125;&quot;)</span><br><span class=\"line\">\tsetName(&quot;山田&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(&quot;hoge: $&#123;hoge.getName&#125;&quot;) // hoge: 山田</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"also\"><a href=\"#also\" class=\"headerlink\" title=\"also\"></a>also</h3><p><code>also</code>関数の定義はこちら↓<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> T.<span class=\"title\">also</span><span class=\"params\">(block: (<span class=\"type\">T</span>)</span></span> -&gt; <span class=\"built_in\">Unit</span>): T &#123; block(<span class=\"keyword\">this</span>); <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>Kotlin Version:1.1から追加されたスコープ関数、使い方としては<em>apply</em>とほぼ同等だが、ラムダ式で修飾したオブジェクトに<br>仮引数名が設定でき、ラムダ式内外でthisのスコープが変わらないという特徴がある。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [Object].apply &#123; [処理] &#125;</span><br><span class=\"line\">val fuga: Fuga = fuga(123, &quot;田中&quot;)</span><br><span class=\"line\">// 戻り値はFugaクラスのインスタンス</span><br><span class=\"line\">val hoge = fuga.apply &#123; f -&gt;</span><br><span class=\"line\">\tprintln(&quot;id: $&#123;f.getID()&#125;&quot;)</span><br><span class=\"line\">\tf.setName(&quot;山田&quot;)</span><br><span class=\"line\">\tstartActivity(Intent(this, NextActivity::class.java))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(&quot;hoge: $&#123;hoge.getName&#125;&quot;) // hoge: 山田</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Any-Unit-Nothing\"><a href=\"#Any-Unit-Nothing\" class=\"headerlink\" title=\"Any, Unit, Nothing\"></a>Any, Unit, Nothing</h2><p>Javaには存在しなかったキーワードが出てきたのでいくつか紹介します。</p>\n<h3 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h3><p>JavaではルートクラスがObjectクラスでしたが、KotlinではルートクラスがObjectではなく<code>Any</code>になります、KotlinにおいてもJavaのObjectクラスは存在しますが、Anyのサブ(子)クラスとして存在します。<br>Kotlinにはプリミティブ型は存在せず、全てがクラスとして扱われるようになります。<br>そのため、Javaでのプリミティブ型をBoxing(ボクシング)する必要がなく、コンパイラが自動的にプリミティブ型に最適化されるよう設計されています。</p>\n<h3 id=\"Unit\"><a href=\"#Unit\" class=\"headerlink\" title=\"Unit\"></a>Unit</h3><p>またJavaでメソッドなど戻り値がない場合に使うキーワードとして<strong>void</strong>がありますが<code>Unit</code>という<strong>void</strong>と同じく意味のない値を返すことを示すキーワードが追加されています、<br>Kotlinでのメソッドの戻り値がない場合は何も型の指定を行いませんが、暗黙的に<code>Unit</code>が戻り値として設定される仕様になっています。</p>\n<h3 id=\"Nothing\"><a href=\"#Nothing\" class=\"headerlink\" title=\"Nothing\"></a>Nothing</h3><p><code>Nothing</code>は値が返されないことを示すキーワードになっており、メソッドの引数として設定すると、必ずExceptionをthrowするメソッドになります。<br>場面としてはあまり使われない記号になります。</p>\n<h2 id=\"検査例外\"><a href=\"#検査例外\" class=\"headerlink\" title=\"検査例外\"></a>検査例外</h2><p>KotlinにはJavaと違い検査例外がないため、Javaの場合にコンパイルエラーが発生する箇所でもKotlinではコンパイルエラーが発生しません。<br>そのため、Kotlinではtry-catch文を一度も書かずとも実装を完結することができます。<br>ただコンパイル的な問題がないだけでプロジェクトとしての問題は別になるので、必要な箇所にはtry-catch文を記述するようにした方が良いでしょう。</p>\n<p>以上で、Kotlin言語の使い方であったり、Java言語の比較の内容を紹介してきました。<br>このページの情報があればJava→Kotlinへの移行を行うときの不具合などの対応はできると思われます。</p>\n"},{"title":"蔵書詳細画面作成","date":"2017-11-09T15:00:00.000Z","_content":"蔵書詳細画面を作成する中でモデルクラスとFragmentの実装を学習します。\n\n<!-- toc -->\n\n[検索履歴一覧画面の作成](/AndroidCourse/android/08-AppDataBase)からの引き続きの学習ページです。\n# 学習ポイント\n* Fragment\n* Fragmentによる画面遷移\n* 定数\n* Gson\n* Glide\n\n複数のデータをひとまとめにして管理するための方法としてモデルクラスを学習します。\nまた、検索結果一覧画面の各蔵書ごとの詳細情報を表示する蔵書詳細画面を作成し、遷移できるように修正していきます、その工程の中でActivity内に配置できるライフサイクルを持ったViewコンポーネント**Fragment**の利用方法と**Fragment**間の画面遷移に関して学習します。\n\n# 検索結果一覧画面の構築移行\n[検索結果一覧画面の作成](/AndroidCourse/android/06-TransitionScreen)ページでActivityを使い画面実装を行なっていましたが、これをそっくり**Fragment**を利用した実装に書き換えます。\nさらに、複数表示されている検索結果一覧からクリックされた行の蔵書の詳細情報を表示する画面、\"蔵書詳細画面\"を**Fragment**で実装しこの画面に遷移するようアプリを作り変えていきます。\n\n## Fragmentとは\nFragmentはActivityのようにライフサイクルを持ったViewコンポーネントにあたり、ButtonやListViewなど複数のWidgetやViewを配置することが可能です、またActivity内に複数のFragmentを表示することができるので画面分割の必要な機能を作成する時には活躍が期待されます。\n\nまた、**Fragment**を利用するメリットはActivityに比べてAndroid端末が画面表示するコストが小さくなるため、アプリの強制終了のリスクを多少回避できることも上げられます。\n\n逆に**Fragment**の利用にあたり注意しなければいけないのはActivityとは別のライフサイクルになるため、Activityがすでに存在しないタイミングで**Fragment**のライフサイクルメソッドが実行され強制終了する可能性があります。\nまた、**Fragment**自身はContextとしての要素は持ち合わせていないため、ActivityやApplicationクラスからContextを取得するなどしてレイアウト表示を実装する必要があります。\n\nではまず、検索結果一覧画面を**Fragment**を使った実装に作り変えていきます。\n## 検索結果一覧Fragment作成\n新しくFragmentクラスを継承した独自クラスのjavaファイルを作成していきます。\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。\n\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/09-RefactorFragment/addfragment01.png 500 Create New Fragment %}\n新しいFragmentクラスを作成する時の設定項目は以下の通り入力したら`Finish`をクリックします。\n{% img /android/09-RefactorFragment/addfragment02.png 500 Create New Fragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |ResultListFragment                      |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_result_list                    |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\n新しく`ResultListFragment.java`と`fragment_result_list.xml`の2ファイルが作成されます。\n{% img /android/09-RefactorFragment/addfragment03.png 600 Create New Fragment %}\n\n## 検索結果一覧画面レイアウト実装\n作成した`fragment_resultlist.xml`と`activity_result_list.xml`を編集します。\n`fragment_result_list.xml`のファイルの場所は以下です。\n> app -> res -> layou -> fragment_result_list.xml\n\n`feagment_result_list.xml`を表示した時に**LayoutEditor**が表示されたら左下の\"Text\"タブをクリックしxmlでの編集画面に表示を切り替えます。\n{% img /android/09-RefactorFragment/editRLfrg01.png 600 Edit Result List Fragment %}\n```XML fragment_result_list.xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.ResultListFragment\">\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓ -->\n    <ListView\n        android:id=\"@+id/FragmentResultListView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"8dp\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑ -->\n\n</FrameLayout>\n```\n一覧表示用の\"ListView\"を配置して画面いっぱいに表示されるように設定します。\n次にFragmentを表示するactivityのレイアウトを修正していきます。\n> app -> res -> layou -> activity_result_list.xml\n\n上記レイアウトファイルを表示し、右下の\"Design\"タブをクリックします。\n{% img /android/09-RefactorFragment/migratefrg01.png 600 Edit Result List Activity %} \nデザインビューに表示されている`ResultListView`をクリックし、<kbd>delete</kbd>キーを押下して削除します。\n何も表示されていない状態になったら、`Palette -> Layouts -> FrameLayout`から\"FrameLayout\"をドラッグ&ドロップでデザインビューに表示します。\n{% img /android/09-RefactorFragment/migratefrg02.png 600 Edit Result List Activity %} \n制約と属性の設定を行います。\n{% img /android/09-RefactorFragment/migratefrg03.png 600 Edit Result List Activity %} \n\n**FrameLayout**に設定する制約\n\n|FrameLayoutの辺|隣り合わせる箇所|\n|:-------------|:-------------|\n|上辺           |画面上端       |\n|左辺           |画面左端       |\n|下辺           |画面下端       |\n|右辺           |画面右端       |\n\n**FrameLayout**に設定する属性\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |FragmentContainer    |\n|layout_width  |match_constraint     |\n|layout_height |match_constraint     |\n\nこれでレイアウトファイルの修正は完了です。\n\n### FrameLayout コンポーネント\n先ほどの実装で初めて出てきたコンポーネント\"FrameLayout\"です。\n\"FrameLayout\"はAndroid SDKがリリースされた時からある古いコンポーネントです。\n他の\"ConstraintLayout\"や\"LinearLayout\"、\"RelativeLayout\"などには子Viewを配置する上での便利な特徴がありますが、\"FrameLayout\"は特徴がないことが特徴となります。\n\"FrameLayout\"での子View配置は左上の角を横/縦の基準(0,0)として正確にポイントを設定して期待する位置に配置する必要があるため、複数のコンポーネント同士を関連付けて配置するのが難しくなります。\nまた、Androidでポイントを指定して配置を行うと、数多く販売されているAndroid端末の全画面サイズに対応仕切れず、レイアウト崩れの原因になってしまうので表示するコンポーネントの少ない場合など細かい配置のないような場合で用いられます。\n\n## 検索結果一覧Fragment機能実装\nレイアウトの修正が終わりましたので`ResultListFragment.java`、`ResultListActivity.java`ファイルを実装します。\n`ResultListFragment.java`の実装ほとんどが`ResultListActivity.java`のプログラムをコピーするだけで問題ないのですが、一部細かい違いがあるのでコピーしてエラーになった箇所など見比べて確認してみてください。\n\nまずFragmentクラスに少し手を加えていきます。\n`ResultListFragment.java`のクラス宣言より上に表示されている`import..`の一覧から\n*import android.app.Fragment;*を削除します。\n{% img /android/09-RefactorFragment/chngimport01.png 600 Import Change %} \n次に<font color=\"red\">赤くなった`Fragmet`</font>をクリックし上に表示されるツールチップに従い\n<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力\n{% img /android/09-RefactorFragment/chngimport02.png 600 Import Change %}\nウィンドウに選択肢が表示されたら**Fragment (android.support.v4.app)**を選択します。\n{% img /android/09-RefactorFragment/chngimport03.png 600 Import Change %} \n\nAndroid SDK上にはFragmentクラスが２種類あります。\n* android.app.Fragment\n* android.support.v4.app.Fragment\n\nGoogle者からは後者の”android.support.v4.app.Fragment”の使用を推奨されています。\n大きは違いとしてAndroid API 16(OS 4.1)以下にもアプリを配信する場合は\"android.support.v4.app.Fragment\"をimportしてFragmentを使用する必要があります。\n\nその他の違いとしては以下の通りです。\n* android.support.v4.app.Fragmentの方がバグが少ない。\n* android.app.Fragmentでは一部メソッドが使えない。\n\n実装中今までほとんど触れてこなかったimportエリアですが、この部分にはクラス内で利用している外部のクラスを指定する必要があり、ここに対象のクラスがインポートされていないとクラス内部の実装で使用することができません、実装する上で必要なクラスはここで全てインポートします。\n候補検索など小さなウィンドウから選択して実装する場合は自動的にインポートされるのであまり気にしないでプログラミングして問題ありません。\n\nでは機能の実装を進めていきます。\n```java ResultListFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_TERM\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    // MainActivityから渡されたデータを保持する\n    private String term;\n\n    // スタティックコンストラクタ\n    public static ResultListFragment getInstance(String term) {\n        // ResultListFragmentインスタンスを生成\n        ResultListFragment fragment = new ResultListFragment();\n        // ResultListFragmentに渡すデータ格納クラスを生成\n        Bundle args = new Bundle();\n        // 検索文字列データを連携データにセット\n        args.putString(BUNDLE_KEY, term);\n        // データ格納クラスをResultListFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したResultListFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // コンストラクタ\n    public ResultListFragment() {\n        // Required empty public constructor\n    }\n\n    // Fragmentが表示するレイアウトを指定するライフサイクルメソッド\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_result_list, container, false);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 親となるActivityが生成された後に実行されるライフサイクルメソッド\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 検索文字列変数を初期化\n        term = \"Android\";\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            term = getArguments().getString(BUNDLE_KEY, \"Android\");\n        }\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView =  getView().findViewById(R.id.FragmentResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でAPI通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(getContext(), titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListActivity.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListActivity extends AppCompatActivity {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // MainActivityから渡されたデータを保持する\n    private String term;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\t\t\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 画面遷移時のデータが空でない場合\n        if (getIntent().hasExtra(\"terms\")) {\n            // Key:termsにデータがあればValueを代入\n            term = getIntent().getStringExtra(\"terms\");\n        } else {\n            // 画面遷移時のデータがからの場合は \"Android\"と文字列を代入\n            term = \"Android\";\n        }\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でAPI通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // FragmentContainerにResultListFragmentを表示させる処理\n        ResultListFragment resultListFragment = ResultListFragment.getInstance(term);\n        // Activity内で表示するFragmentを管理するクラスをインスタンス化\n        FragmentManager fm = getSupportFragmentManager();\n        // Fragmentを表示、または別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // FragmentManagerに新しいFragmentを追加\n        // FragmentContainerにResultListFragmentを表示するよう設定\n        ft.add(R.id.FragmentContainer, resultListFragment);\n        // 上記の設定でFragmentManagerを更新\n        ft.commit();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(ResultListActivity.this, titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListActivity.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記のコード修正が終わったら動作確認します。\n正常に検索結果画面に遷移できるか確認してみましょう。\n\n今回Fragmentの実装では２つのライフサイクルメソッドを利用しました、[Androidの概念](/AndroidCourse/android/02-AndroidConcept)で一度ライフサイクルの図をご紹介しましたが、\nFragmentの`onCreateView()`、`onActivityCreated()`はActivityの`onCreate()`メソッドの後に実行されます。\n\nFragmentで画面の要素を取得するためには`getView()`メソッドを利用します。\n`getView()`メソッドはFragment内のどのライフサイクルでも参照できますが、`onAttach()`〜`onCtreateView()`のライフサイクルメソッドでは、ActivityにFragmentのレイアウトが反映されていないため\"null\"が返却されるので注意が必要です。\n\nまたFragmentは引数のないコンストラクタを必ず用意しないといけません。\nAndroid端末ではメモリが不足した場合にActivityやFragmentを一旦破棄し必要になったタイミングで再度生成される仕組みになっており、この時にFragmentは引数のないコンストラクタを実行しインスタンス化を行っています。\nメモリからFragmentが破棄されても`Bundle`は破棄されずに残るため、`fragment.setArguments(Bundle)`を使いFragmentでデータ渡しを行う必要があります。\nFragmentのインスタンス化時に引数ありのコンストラクタを使用していた場合、万が一メモリ不足からFragmentが再生成された時にアプリが強制終了する可能性が考えられます。\n画面が回転した時など画面サイズに変更が加わった場合などを考慮する場合は注意して実装する必要がある。\n\n## 定数\n文字通り宣言時にセットした値を変更することができない要素。\n上記で実装した通り**final**のキーワードを変数宣言時に記述することで定数としての扱いになります。\nまた**static**のキーワードをつけることでクラスがインスタンス化されていなくても参照することができるようになります。\njava,Androidでは定数と変数を見分けやすくするために全て大文字で定数名を宣言することが多いです。\n```java\n    private final static String BUNDLE_KEY = \"BUNDLE_TERM\";\n```\n\n## Context概要\nAndroidアプリ開発の中ではxmlレイアウトをjavaファイルで参照する時などには必ず必要になる\"Context\"は一体何か。\nActivity,Service,Applicationの親クラスであり、アプリケーショングローバル情報へアクセスするためのインターフェースの役割を持つクラス。\nアプリケーションのグローバル情報とは\n\n* パーミッション(インターネット接続などの許可設定)\n* アプリリソースへのアクセス(画像やレイアウトなど\"res\"ディレクトリ配下の要素を参照するための機能)\n* アプリ情報(コンポーネント、プロセス名、テーマなど)\n\nなどが該当します。\nContextを利用することで上記の情報を参照することが可能になります。\n\nContextの取得方法には`getActivity()[Activity内ではthis]`,`getApplicationContext()`などいくつか方法がありますが、各Contextは利用可能な寿命が違っており、Activityを対象にしたContext(`getActivity()`で取得したContext)の場合はActivityが破棄されると同時にContextも破棄されます。\n対して`getApplicationContext()`ではApplicationクラスに依存するため、アプリを破棄するまで使用できます。\n現状では影響のあるプログラムはありませんが、ActivityとApplicationに設定されているテーマ(Theme)がそれぞれ違う場合に期待しない表示になるなどの不具合が発生する可能性が考えられます。\n\nあまり使われないメソッドですが`getBaseContext()`というメソッドも存在しますが、深い話しで使用は推奨されていないようです。。。\n\nContextはレイアウトなどの\"res\"ディレクトリ内を参照したりレイアウトをjavaファイルで使うための便利かつ必要なものと認識して利用すれば問題ありません。\n実際にアプリ開発で内部情報に影響されることはないと思われます。\n\n# 蔵書詳細画面作成\nActivityからFragmentへの移行が完了したら蔵書詳細画面を作成していきます。\n{% img /android/09-RefactorFragment/detailExample.png 250 Detail Example %}\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。\n\n> New -> Fragment -> Fragment(Blank)\n\n作成するFragment名や同時に作成されるレイアウトファイル名を入力し、以下の項目の設定を修正したら`Finish`をクリックします。\n{% img /android/09-RefactorFragment/addDetail01.png 600 Add Detail Screen %} \n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |DetailFragment                          |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_detail                         |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n\n`DetailFragment.java`と`fragment_detail.xml`ファイルが生成されます。\nまずは蔵書詳細画面のレイアウトを修正していきます。\n`fragment_detail.xml`を開き、*Design*タブが表示されている場合は*Text*タブをクリックしてxmlファイルの実装画面に切り替えます。\n{% img /android/09-RefactorFragment/addDetail02.png 600 Add Detail Screen %} \n```XML fragment_detail.xml\n<!-- ↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓ -->\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.DetailFragment\">\n\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n\n</FrameLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑ -->\n<!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_margin=\"8dp\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.DetailFragment\">\n\n    <TextView\n        android:id=\"@+id/DetailTitle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"20dp\"\n        tools:text=\"蔵書タイトル\"/>\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n        </LinearLayout>\n    </LinearLayout>\n    <TextView\n        android:id=\"@+id/DetailDescription\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:lines=\"10\"\n        tools:text=\"蔵書概要を表示\" />\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\">\n        <TextView\n            android:id=\"@+id/DetailPageHeader\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentLeft=\"true\"\n            android:text=\"ページ数：\"/>\n        <TextView\n            android:id=\"@+id/DetailPageText\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toRightOf=\"@id/DetailPageHeader\"\n            tools:text=\"53ページ\"/>\n        <TextView\n            android:id=\"@+id/DetailPublishDateHeader\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toLeftOf=\"@id/DetailPublishDateText\"\n            android:text=\"発売日：\"/>\n        <TextView\n            android:id=\"@+id/DetailPublishDateText\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            tools:text=\"2018/02/06\"/>\n    </RelativeLayout>\n</LinearLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ -->\n```\nこれで蔵書詳細画面のレイアウトは完了です。\n\n\"LinearLayout\"や\"RelativeLayout\"を使用して画面レイアウトを作成するとこのようにLayoutの中にLayoutやTextViewなどのコンポーネントを配置するネスト構造での実装が必要になります。\n\"ConstraintLayout\"ではネスト構造にならずにレイアウトを作成することが可能です。\n\n今回出てきた属性について簡単に解説していきます。\n\n|対象のView|属性|説明|\n|---------|----|----|\n|LinearLayout|android:weightSum|縦または横方向に対して設定された数値分に均等分割する。縦横方向はorientation属性から判定される|\n|weightSum属性をセットしたLinearLayoutの子View|android:layout_weight|親のLinearLayoutで設定されたweightSumのうち占有する割合値を設定する、有効にする場合には\"layout_width\"または\"layout_height\"を0dpにする必要がある。android:layout_alignParentLeft|\n|RelativeLayoutの子View|android:layout_alignParentLeft|親のRelativeLayoutの左端に自Viewの左端を合わせて配置する|\n|RelativeLayoutの子View|android:layout_alignParentRight|親のRelativeLayoutの右端に自Viewの右端を合わせて配置する|\n|RelativeLayoutの子View|android:layout_toRightOf|設定したidを持つViewの右側に自Viewを配置する|\n|RelativeLayoutの子View|android:layout_toLeftOf|設定したidを持つViewの左側に自Viewを配置する|\n\n# 蔵書詳細画面遷移実装\n蔵書検索結果一覧画面から行アイテムをクリックしたら蔵書詳細画面に遷移するように実装を修正します。\n```java ResultListFragment.java\n\n    ...一部省略\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書詳細画面用Fragmentをインスタンス化\n        DetailFragment detailFragment = new DetailFragment();\n        // support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager\n        FragmentManager fm = getFragmentManager();\n        // 別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // Fragmentを表示させるViewのidとFragmentクラスを設定\n        ft.replace(R.id.FragmentContainer, detailFragment);\n        // 表示していたFragmentをバックスタックに追加\n        ft.addToBackStack(null);\n        // FragmentManagerに反映\n        ft.commit();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n\nこれで自動的に表示していたFragmentがスタック（破棄せず残っているデータ）され、スタックされたFragmentが残っている場合はActivityではなく、Fragmentが一つ戻るように実装されました。\nFragmentには\"ID\"や\"TAG\"という情報を設定することができ、一つ前のFragmentではなくスタックされいているFragmentから\"ID\"や\"TAG\"を指定して画面バックを行うことも可能です。\n\n# 蔵書詳細画面実装\n蔵書の詳細情報として著作者や概要などを表示していきます。\n蔵書を一つを特定するために今回は検索結果一覧画面でREST APIから取得したデータに含まれる\"selfLink\"キーに含まれるurl情報を蔵書詳細画面で改めてREST APIを使用して取得する形で実装していきます。\n蔵書詳細画面で取得したデータのパースに関してはJSONデータをモデルクラスに一発変換してくれるライブラリを使ってJSONObjectでの実装の手間を軽くする方法を使います。\nまた、検索結果一覧画面で表示するデータも増えてきたため、まとめてデータを持てるようにモデルクラスを作成して管理します。\n\nまずは、JSON文字列の簡単パースライブラリ**Gson**を導入します。\nプロジェクトからapp階層の`build.gradle`を開き、\"dependencies\" の \"{}\"内に以下のコードを記述します\n開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n{% img /android/07-AsyncProcess/includeokHttp01.png 550 IncludeokHttp %}\n```gradle build.gradle(Module: app)\ndependencies {\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    implementation 'com.google.code.gson:gson:2.2.4'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを追加後、<font color=\"blue\">**Sync Now**</font>をクリックしてGSONの導入は完了です。\n{% img /android/09-RefactorFragment/addDetail06.png 550 Include GSON %}\n次に新しくモデルクラスを作成します。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\nモデルクラスは２つ作成します。\n一つは検索結果一覧でデータを表示するためのモデルクラス、もう一つは蔵書詳細画面のREST APIをパースするためのモデルクラスです。\nまずは検索結果一覧に一覧表示しているデータをモデルクラスとしてまとめます。\n\nクラス名とパッケージを確認したら`OK`をクリック\n{% img /android/09-RefactorFragment/addDetail07.png 550 Include GSON %}\nこちらは検索結果一覧画面で利用するモデルクラスとして変数を宣言していきます。\n```java ResultListMdel.java\npublic class ResultListModel {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 蔵書タイトル\n    public String title;\n    // 蔵書概要\n    public String summary;\n    // 蔵書単体リンク\n    public String selfLink;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n\nクラス名とパッケージを確認したら`OK`をクリック\n{% img /android/09-RefactorFragment/addDetail08.png 550 Include GSON %}\n２つ目のクラスは蔵書詳細画面のREST APIデータをパースして使用するためのモデルクラスです。\n```java DetailDataModal.java\npublic class DetailDataModel {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 蔵書単体リンク\n    public String selfLink;\n    // 蔵書概要データ\n    public VolumeInfo volumeInfo;\n\n    // 蔵書概要クラス\n    public class VolumeInfo {\n        // 蔵書タイトル\n        public String title;\n        // 蔵書サブタイトル\n        public String subTitle;\n        // 蔵書著者リスト\n        public List<String> authors;\n        // 蔵書発売日\n        public String publishedDate;\n        // 蔵書概要\n        public String description;\n        // 蔵書ページ数\n        public int pageCount;\n        // 蔵書サムネイル画像URL\n        public ImageLinks imageLinks;\n    }\n\n    // 蔵書サムネイルクラス\n    public class ImageLinks {\n        // 蔵書小サイズサムネイル\n        public String smallThumbnail;\n        // 蔵書サムネイル\n        public String thumbnail;\n        // 中サイズ表示画像\n        public String medium;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n`DetailFragment.java`のプログラムを修正する前に\"import\"設定を修正します。\n`ResultListFragment.java`と同様に`import..`の一覧から\n*import android.app.Fragment;*を削除します。\n{% img /android/09-RefactorFragment/addDetail03.png 600 Import Change %} \n次に<font color=\"red\">赤くなった`Fragmet`</font>をクリックし上に表示されるツールチップに従い\n<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力\n{% img /android/09-RefactorFragment/addDetail04.png 600 Import Change %}\nウィンドウに選択肢が表示されたら**Fragment (android.support.v4.app)**を選択します。\n{% img /android/09-RefactorFragment/addDetail05.png 600 Import Change %} \n`DetailFragment.java`では取得したAPIデータをパースし、一旦タイトルをログに出力させてみます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n\t\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    // APIの検索に使うISBNコード\n    private String isbn;\n    // 個体リンクのURL\n    private String selfLink;\n    // APIのデータ取得後処理を行うためのHandler\n    private Handler handler;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n\n    // スタティックコンストラクタ\n    public static DetailFragment getInstance(String selfLink) {\n        // DetailFragmentインスタンスを生成\n        DetailFragment fragment = new DetailFragment();\n        // DetailFragmentに渡すデータ格納クラスを生成\n        Bundle args = new Bundle();\n        // 検索文字列データを連携データにセット\n        args.putString(BUNDLE_KEY, selfLink);\n        // データ格納クラスをDetailFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したResultListFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    public DetailFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_detail, container, false);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"BUNDLE_SELFLINK\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            selfLink = getArguments().getString(BUNDLE_KEY, \"\");\n        }\n\n        // selfLinkが空の場合は検索結果一覧画面に強制バック\n        if (TextUtils.isEmpty(selfLink)) {\n            getFragmentManager().popBackStack();\n        }\n\n        // xmlファイルのコンポーネントと関連付け\n        titleText = getView().findViewById(R.id.DetailTitle);\n        subTitleText = getView().findViewById(R.id.DetailSubTitle);\n        authorText = getView().findViewById(R.id.DetailAuthor);\n        descriptText = getView().findViewById(R.id.DetailDescription);\n        pageText = getView().findViewById(R.id.DetailPageText);\n        publishDateText = getView().findViewById(R.id.DetailPublishDateText);\n\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // ResultListFragmentから取得したselfLinkURLにREST API通信を行う\n        Request request = new Request.Builder().url(selfLink).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    // ListViewの描画に必要な変数を宣言\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<String> titleList;\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    public ResultListAdapter(Context context, List<String> titleList, List<String> summaryList) {\n        this.titleList = titleList;\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        return titleList.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<ResultListModel> resultList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ\n    public ResultListAdapter(Context context, List<ResultListModel> resultList) {\n        this.resultList = resultList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        return resultList.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(titleList.get(i));\n        summaryView.setText(summaryList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(resultList.get(i).title);\n        summaryView.setText(resultList.get(i).summary);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        // 文字情報を代入されたviewを返却\n        return view;\n    }\n```\n```java ResultListFragment.java\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener{\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索結果一覧データ\n    private List<ResultListModel> resultList;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        // 蔵書詳細画面用Fragmentをインスタンス化\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        DetailFragment detailFragment = new DetailFragment();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        DetailFragment detailFragment = DetailFragment.getInstance(resultList.get(i).selfLink);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager\n        FragmentManager fm = getFragmentManager();\n        // 別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // Fragmentを表示させるViewのidとFragmentクラスを設定\n        ft.replace(R.id.FragmentContainer, detailFragment);\n        // 表示していたFragmentをバックスタックに追加\n        ft.addToBackStack(null);\n        // FragmentManagerに反映\n        ft.commit();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        \n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // 蔵書モデルクラスリスト\n            resultList = new ArrayList<>();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // 蔵書データクラスをインスタンス化\n                    ResultListModel resultData = new ResultListModel();\n                    // タイトルをモデルクラスに代入\n                    resultData.title = volumeInfo.getString(\"title\");\n                    // 個体蔵書データURLをモデルクラスに代入\n                    resultData.selfLink = item.getString(\"selfLink\");\n                    // データに\"description\"キーが含まれている場合は情報を代入\n                    if (volumeInfo.has(\"description\")) {\n                        // 概要をモデルクラスに代入\n                        resultData.summary = volumeInfo.getString(\"description\");\n                    } else {\n                        // \"description\"キーが含まれていない場合は空文字データを代入\n                        resultData.summary = \"\";\n                    }\n                    // 蔵書情報をリストに登録\n                    resultList.add(resultData);\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            adapter = new ResultListAdapter(getContext(), titleList, summaryList);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            adapter = new ResultListAdapter(getContext(), resultList);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n    }\n}\n```\n上記コード修正が終わったら動作確認してみます。\n正常に処理が実行されれば蔵書詳細画面に遷移し、**Logcat**に検索結果一覧で選択した蔵書のタイトルが表示されると思います。\n\nAndroidアプリではREST API通信を行い取得したデータをGsonというライブラリを利用することで簡単にパースすることができます。\nただGsonでパースするときには取得データと同じ階層構造を指定したクラスを作成して上げる必要があるので期待通りパースされない場合、まずJSONデータと作成したクラスの階層構造をお確認すると良いでしょう。\nまた取得するデータキーとクラスの変数名を合わせて実装する必要があるので入力ミスにも注意が必要です。\n\n今回の実装で便利なUtilクラスを使いましたので紹介です、`DetailFragment.java`において\"selfLink\"変数にデータが格納されているか判定するために\n```java\nTextUtils.isEmpty(selfLink)\n```\nという実装をしています、`TextUtils`はString型変数の処理で便利な機能が揃っており上記のメソッドでは、引数の内容が\"null\"や空文字列かを判定し\"true\"を返却してくれます。\n多く使うメソッドはこの`TextUtils.isEmpty()`が多くなると思いますが、判定処理を完結しにてくれるのでとても有効です。\n\n続いて蔵書詳細データを画面のTextViewにセットしていきます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n\t    ...一部省略\n\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // MainThreadに処理を渡し画面にデータを反映する\n                handler.post(new ReflectDetail(detailData));\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // REST APIで取得したデータを画面に反映するためのクラス\n    private class ReflectDetail implements Runnable {\n        // 蔵書詳細データ\n        DetailDataModel detailData;\n\n        // コンストラクタ\n        public ReflectDetail(DetailDataModel detailData) {\n            this.detailData = detailData;\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // タイトルを反映\n            titleText.setText(detailData.volumeInfo.title);\n            // サブタイトルが取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.subTitle)) {\n                subTitleText.setText(detailData.volumeInfo.subTitle);\n            }\n            // 概要が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.description)) {\n                descriptText.setText(detailData.volumeInfo.description);\n            }\n            // 著作者名が取得できていたら反映\n            if (detailData.volumeInfo.authors != null && detailData.volumeInfo.authors.size() > 0) {\n                String authorString = new String();\n                // 著作者名が複数設定されていう場合があるので繰り返し処理で全て表示する\n                for (String author : detailData.volumeInfo.authors) {\n                    authorString += author + \",\";\n                }\n                authorText.setText(authorString);\n            }\n            // ページ数を反映\n            pageText.setText(String.valueOf(detailData.volumeInfo.pageCount));\n            // 発売日が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) {\n                publishDateText.setText(detailData.volumeInfo.publishedDate);\n            }\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを実装したら動作確認します。\n蔵書詳細画面に遷移してREST APIのデータを取得できるまでに少し間が空きますが、正常に実装されるとTextViewに文言が反映されます。\n\n上記の実装では必要なタイミングで**論理演算子(&&)**が使われました、そしてポイントは著作者名リストの**for**文の使い方です。\n## for-each\n繰り返し処理を実装する方法として\"for文\"を学習しました、今回の**for-each**文ではコレクション型の変数に登録されている要素の回数分、繰り返し処理を実行する時の実装方法です。\nコレクション型以外にもMap型(講座の中ではまだ未使用)や配列型の変数でも同様の実装が可能です。\n**for-each**文の実装テンプレート\n```java\nfor (配列要素の型 一時変数 : リスト型の変数) {\n\t// 繰り返し処理\n}\n```\n一時変数にはリスト型変数の要素が0番目〜最後の要素まで代入された状態で繰り返し処理で参照することが可能です。\n実際には**for-each**文の方が利用頻度は多いと思われます。\n\n## URL画像読み込み処理の実装\nこのページではActivity → Fragmentの移行に始まり、新規のクラスを作る回数も多かったので非常にコーディングに時間がかかったと思います。\nそれも今回の実装で終わりです！\n\nWeb上にアップロードされた画像をアプリで読み込みむためにも便利なライブラリがあります。\n本来はBitmapという形式で画像インスタンスを生成し使用しなくなるときにはちゃんとAndroid OSの処理の阻害にならないよう解放する必要があるのですが、\n**Glide**というライブラリを使用することでそういったメモリ管理などの忘れがちな処理を補ってくれます。\n\nでは他のライブラリと同様に`build.gradle`に依存関係を追加します。\nプロジェクトからappディレクトリの`build.gradle`を開き、\"dependencies\" の \"{}\"内に以下のコードを記述します\n開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n```gradle build.gradle(Module: app)\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId \"kuririnz.xyz.bookdiscovery\"\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:27.0.2'\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation 'com.android.support:design:27.0.2'\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    implementation 'com.google.code.gson:gson:2.2.4'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    implementation 'com.github.bumptech.glide:glide:4.6.1'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを追加後、<font color=\"blue\">**Sync Now**</font>をクリックして**Glide**の導入は完了です。\n**Glide**の最新版(バージョン4.6.1)を使用する際には`dependencies`内の`implementation 'com.android.support:appcompat-v7...'`と`implementation 'com.android.support:design...'`の指定バージョンを\"27.0.2\"に設定する必要があるため、合わせて\"compileSdkVersion\"、\"targetSdkVersion\"の指定を**27**に設定しなければいけません。\n\nこれは**Glide**が依存関係を持っているandroid.supportバージョンが**27**であることが原因で、**Glide**の古いバージョンの場合には開発アプリ側の\"compileSdkVersion\"、\"targetSdkVersion\"を古いものでも実装が可能だと思われます。\n\nでは**Glide**を使って蔵書詳細画面のImageViewに画像を読み込ませてみます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private ImageView detailImage;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 個体リンクのURL\n    private String selfLink;\n  \n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n       \n       ...一部省略\n        publishDateText = getView().findViewById(R.id.DetailPublishDateText);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        detailImage = getView().findViewById(R.id.DetailImage);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n       ...一部省略\n    }\n\n    // REST APIで取得したデータを画面に反映するためのクラス\n    private class ReflectDetail implements Runnable {\n       ...一部省略\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n    \n           ...一部省略\n    \n            // 発売日が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) {\n                publishDateText.setText(detailData.volumeInfo.publishedDate);\n            }\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // Glideを使ってWeb上の画像をImageViewに表示させる\n            if (detailData.volumeInfo.imageLinks != null) {\n                Glide.with(DetailFragment.this)\n                        .applyDefaultRequestOptions(RequestOptions.fitCenterTransform())\n                        .load(detailData.volumeInfo.imageLinks.medium)\n                        .into(detailImage);\n            }\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n}\n```\n上記コードを実装したら動作確認します。\n正常に動作した場合、蔵書詳細画面に蔵書の表紙画像が表示されます。\n\n**Glide**はメソッドからメソッドに繋げる形の実装でも画像のURLをImageViewに表示することができます。（変数を挟まなくていいのでコード量が少なくなります）\n`with()`ではContextを取得できるインスタンスを引数にセットします、`load()`の引数には画像のURLをセット、最後に`into()`の引数に画像を表示するImageViewをセットして表示します。\n`applyDefaultRequestOptions()`は画像の表示設定を指定できます、今回は画像をはい出さずに表示するように\"fitCenterTransform\"を指定しています。\n\n以上で、蔵書詳細画面作成の解説は完了です。\n次の[操作性・ユーザ体験の改善](/AndroidCourse/android/10-OrganaizeExperience)ではユーザがアプリを操作する中で気持ちよく操作するための手段として読み込み中を伝えるダイアログや、最後に検索した内容を保持しておくための設定ファイルなどの利用方法を学習します。","source":"_posts/android/09-RefactorFragment.md","raw":"---\ntitle: 蔵書詳細画面作成\ndate: 2017-11-10\ntags:\n---\n蔵書詳細画面を作成する中でモデルクラスとFragmentの実装を学習します。\n\n<!-- toc -->\n\n[検索履歴一覧画面の作成](/AndroidCourse/android/08-AppDataBase)からの引き続きの学習ページです。\n# 学習ポイント\n* Fragment\n* Fragmentによる画面遷移\n* 定数\n* Gson\n* Glide\n\n複数のデータをひとまとめにして管理するための方法としてモデルクラスを学習します。\nまた、検索結果一覧画面の各蔵書ごとの詳細情報を表示する蔵書詳細画面を作成し、遷移できるように修正していきます、その工程の中でActivity内に配置できるライフサイクルを持ったViewコンポーネント**Fragment**の利用方法と**Fragment**間の画面遷移に関して学習します。\n\n# 検索結果一覧画面の構築移行\n[検索結果一覧画面の作成](/AndroidCourse/android/06-TransitionScreen)ページでActivityを使い画面実装を行なっていましたが、これをそっくり**Fragment**を利用した実装に書き換えます。\nさらに、複数表示されている検索結果一覧からクリックされた行の蔵書の詳細情報を表示する画面、\"蔵書詳細画面\"を**Fragment**で実装しこの画面に遷移するようアプリを作り変えていきます。\n\n## Fragmentとは\nFragmentはActivityのようにライフサイクルを持ったViewコンポーネントにあたり、ButtonやListViewなど複数のWidgetやViewを配置することが可能です、またActivity内に複数のFragmentを表示することができるので画面分割の必要な機能を作成する時には活躍が期待されます。\n\nまた、**Fragment**を利用するメリットはActivityに比べてAndroid端末が画面表示するコストが小さくなるため、アプリの強制終了のリスクを多少回避できることも上げられます。\n\n逆に**Fragment**の利用にあたり注意しなければいけないのはActivityとは別のライフサイクルになるため、Activityがすでに存在しないタイミングで**Fragment**のライフサイクルメソッドが実行され強制終了する可能性があります。\nまた、**Fragment**自身はContextとしての要素は持ち合わせていないため、ActivityやApplicationクラスからContextを取得するなどしてレイアウト表示を実装する必要があります。\n\nではまず、検索結果一覧画面を**Fragment**を使った実装に作り変えていきます。\n## 検索結果一覧Fragment作成\n新しくFragmentクラスを継承した独自クラスのjavaファイルを作成していきます。\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。\n\n> New -> Fragment -> Fragment(Blank)\n\n{% img /android/09-RefactorFragment/addfragment01.png 500 Create New Fragment %}\n新しいFragmentクラスを作成する時の設定項目は以下の通り入力したら`Finish`をクリックします。\n{% img /android/09-RefactorFragment/addfragment02.png 500 Create New Fragment %}\n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |ResultListFragment                      |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_result_list                    |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n|Source Language                   |Java                                    |\n\n新しく`ResultListFragment.java`と`fragment_result_list.xml`の2ファイルが作成されます。\n{% img /android/09-RefactorFragment/addfragment03.png 600 Create New Fragment %}\n\n## 検索結果一覧画面レイアウト実装\n作成した`fragment_resultlist.xml`と`activity_result_list.xml`を編集します。\n`fragment_result_list.xml`のファイルの場所は以下です。\n> app -> res -> layou -> fragment_result_list.xml\n\n`feagment_result_list.xml`を表示した時に**LayoutEditor**が表示されたら左下の\"Text\"タブをクリックしxmlでの編集画面に表示を切り替えます。\n{% img /android/09-RefactorFragment/editRLfrg01.png 600 Edit Result List Fragment %}\n```XML fragment_result_list.xml\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.ResultListFragment\">\n\n    <!-- ↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓ -->\n    <ListView\n        android:id=\"@+id/FragmentResultListView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"8dp\" />\n    <!-- ↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑ -->\n\n</FrameLayout>\n```\n一覧表示用の\"ListView\"を配置して画面いっぱいに表示されるように設定します。\n次にFragmentを表示するactivityのレイアウトを修正していきます。\n> app -> res -> layou -> activity_result_list.xml\n\n上記レイアウトファイルを表示し、右下の\"Design\"タブをクリックします。\n{% img /android/09-RefactorFragment/migratefrg01.png 600 Edit Result List Activity %} \nデザインビューに表示されている`ResultListView`をクリックし、<kbd>delete</kbd>キーを押下して削除します。\n何も表示されていない状態になったら、`Palette -> Layouts -> FrameLayout`から\"FrameLayout\"をドラッグ&ドロップでデザインビューに表示します。\n{% img /android/09-RefactorFragment/migratefrg02.png 600 Edit Result List Activity %} \n制約と属性の設定を行います。\n{% img /android/09-RefactorFragment/migratefrg03.png 600 Edit Result List Activity %} \n\n**FrameLayout**に設定する制約\n\n|FrameLayoutの辺|隣り合わせる箇所|\n|:-------------|:-------------|\n|上辺           |画面上端       |\n|左辺           |画面左端       |\n|下辺           |画面下端       |\n|右辺           |画面右端       |\n\n**FrameLayout**に設定する属性\n\n|設定項目       |設定値                |\n|--------------|---------------------|\n|ID            |FragmentContainer    |\n|layout_width  |match_constraint     |\n|layout_height |match_constraint     |\n\nこれでレイアウトファイルの修正は完了です。\n\n### FrameLayout コンポーネント\n先ほどの実装で初めて出てきたコンポーネント\"FrameLayout\"です。\n\"FrameLayout\"はAndroid SDKがリリースされた時からある古いコンポーネントです。\n他の\"ConstraintLayout\"や\"LinearLayout\"、\"RelativeLayout\"などには子Viewを配置する上での便利な特徴がありますが、\"FrameLayout\"は特徴がないことが特徴となります。\n\"FrameLayout\"での子View配置は左上の角を横/縦の基準(0,0)として正確にポイントを設定して期待する位置に配置する必要があるため、複数のコンポーネント同士を関連付けて配置するのが難しくなります。\nまた、Androidでポイントを指定して配置を行うと、数多く販売されているAndroid端末の全画面サイズに対応仕切れず、レイアウト崩れの原因になってしまうので表示するコンポーネントの少ない場合など細かい配置のないような場合で用いられます。\n\n## 検索結果一覧Fragment機能実装\nレイアウトの修正が終わりましたので`ResultListFragment.java`、`ResultListActivity.java`ファイルを実装します。\n`ResultListFragment.java`の実装ほとんどが`ResultListActivity.java`のプログラムをコピーするだけで問題ないのですが、一部細かい違いがあるのでコピーしてエラーになった箇所など見比べて確認してみてください。\n\nまずFragmentクラスに少し手を加えていきます。\n`ResultListFragment.java`のクラス宣言より上に表示されている`import..`の一覧から\n*import android.app.Fragment;*を削除します。\n{% img /android/09-RefactorFragment/chngimport01.png 600 Import Change %} \n次に<font color=\"red\">赤くなった`Fragmet`</font>をクリックし上に表示されるツールチップに従い\n<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力\n{% img /android/09-RefactorFragment/chngimport02.png 600 Import Change %}\nウィンドウに選択肢が表示されたら**Fragment (android.support.v4.app)**を選択します。\n{% img /android/09-RefactorFragment/chngimport03.png 600 Import Change %} \n\nAndroid SDK上にはFragmentクラスが２種類あります。\n* android.app.Fragment\n* android.support.v4.app.Fragment\n\nGoogle者からは後者の”android.support.v4.app.Fragment”の使用を推奨されています。\n大きは違いとしてAndroid API 16(OS 4.1)以下にもアプリを配信する場合は\"android.support.v4.app.Fragment\"をimportしてFragmentを使用する必要があります。\n\nその他の違いとしては以下の通りです。\n* android.support.v4.app.Fragmentの方がバグが少ない。\n* android.app.Fragmentでは一部メソッドが使えない。\n\n実装中今までほとんど触れてこなかったimportエリアですが、この部分にはクラス内で利用している外部のクラスを指定する必要があり、ここに対象のクラスがインポートされていないとクラス内部の実装で使用することができません、実装する上で必要なクラスはここで全てインポートします。\n候補検索など小さなウィンドウから選択して実装する場合は自動的にインポートされるのであまり気にしないでプログラミングして問題ありません。\n\nでは機能の実装を進めていきます。\n```java ResultListFragment.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_TERM\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    // MainActivityから渡されたデータを保持する\n    private String term;\n\n    // スタティックコンストラクタ\n    public static ResultListFragment getInstance(String term) {\n        // ResultListFragmentインスタンスを生成\n        ResultListFragment fragment = new ResultListFragment();\n        // ResultListFragmentに渡すデータ格納クラスを生成\n        Bundle args = new Bundle();\n        // 検索文字列データを連携データにセット\n        args.putString(BUNDLE_KEY, term);\n        // データ格納クラスをResultListFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したResultListFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    // コンストラクタ\n    public ResultListFragment() {\n        // Required empty public constructor\n    }\n\n    // Fragmentが表示するレイアウトを指定するライフサイクルメソッド\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_result_list, container, false);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 親となるActivityが生成された後に実行されるライフサイクルメソッド\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 検索文字列変数を初期化\n        term = \"Android\";\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            term = getArguments().getString(BUNDLE_KEY, \"Android\");\n        }\n\n        // xmlファイルのコンポーネントと関連付け\n        resultListView =  getView().findViewById(R.id.FragmentResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でAPI通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n\n    }\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(getContext(), titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListActivity.java\n//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\npublic class ResultListActivity extends AppCompatActivity {\n//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // xmlファイルのコンポーネントと関連付ける要素\n    private ListView resultListView;\n    // ListViewの表示内容を管理するクラス\n    private ResultListAdapter adapter;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n    // メインスレッドに戻ってくるためのHandler\n    private Handler handler;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // MainActivityから渡されたデータを保持する\n    private String term;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_result_list);\n\t\t\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // Handlerをインスタンス化\n        handler = new Handler();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // 画面遷移時のデータが空でない場合\n        if (getIntent().hasExtra(\"terms\")) {\n            // Key:termsにデータがあればValueを代入\n            term = getIntent().getStringExtra(\"terms\");\n        } else {\n            // 画面遷移時のデータがからの場合は \"Android\"と文字列を代入\n            term = \"Android\";\n        }\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // xmlファイルのコンポーネントと関連付け\n        resultListView = findViewById(R.id.ResultListView);\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // MainActivityで入力された文字列で検索する様修正\n        Request request = new Request.Builder().url(\"https://www.googleapis.com/books/v1/volumes?q=\" + term).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 失敗した時の命令\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // 成功した時の命令\n                // Google Books APIから取得したデータをログに出力\n                // Jsonのパースが失敗してアプリの強制終了を回避する機能\n                try {\n                    // JsonデータをJSONObjectに変換\n                    JSONObject rootJson = new JSONObject(response.body().string());\n                    // Jsonデータから蔵書リストデータ\"items\"を取得\n                    JSONArray items = rootJson.getJSONArray(\"items\");\n                    Log.d(\"Success API Response\", \"APIから取得したデータの件数:\" +\n                            items.length());\n                    // メインスレッドで実行する処理をインスタンス化\n                    ReflectResult reflectResult = new ReflectResult(items);\n                    // Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する\n                    handler.post(reflectResult);\n                } catch (JSONException e) {\n                    // Jsonパースの時にエラーが発生したらログに出力する\n                    e.printStackTrace();\n                }\n            }\n        };\n        // 非同期処理でAPI通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // FragmentContainerにResultListFragmentを表示させる処理\n        ResultListFragment resultListFragment = ResultListFragment.getInstance(term);\n        // Activity内で表示するFragmentを管理するクラスをインスタンス化\n        FragmentManager fm = getSupportFragmentManager();\n        // Fragmentを表示、または別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // FragmentManagerに新しいFragmentを追加\n        // FragmentContainerにResultListFragmentを表示するよう設定\n        ft.add(R.id.FragmentContainer, resultListFragment);\n        // 上記の設定でFragmentManagerを更新\n        ft.commit();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(ResultListActivity.this\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n\n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            // リストデータを初期化\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            adapter = new ResultListAdapter(ResultListActivity.this, titleList, summaryList);\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListActivity.this);\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記のコード修正が終わったら動作確認します。\n正常に検索結果画面に遷移できるか確認してみましょう。\n\n今回Fragmentの実装では２つのライフサイクルメソッドを利用しました、[Androidの概念](/AndroidCourse/android/02-AndroidConcept)で一度ライフサイクルの図をご紹介しましたが、\nFragmentの`onCreateView()`、`onActivityCreated()`はActivityの`onCreate()`メソッドの後に実行されます。\n\nFragmentで画面の要素を取得するためには`getView()`メソッドを利用します。\n`getView()`メソッドはFragment内のどのライフサイクルでも参照できますが、`onAttach()`〜`onCtreateView()`のライフサイクルメソッドでは、ActivityにFragmentのレイアウトが反映されていないため\"null\"が返却されるので注意が必要です。\n\nまたFragmentは引数のないコンストラクタを必ず用意しないといけません。\nAndroid端末ではメモリが不足した場合にActivityやFragmentを一旦破棄し必要になったタイミングで再度生成される仕組みになっており、この時にFragmentは引数のないコンストラクタを実行しインスタンス化を行っています。\nメモリからFragmentが破棄されても`Bundle`は破棄されずに残るため、`fragment.setArguments(Bundle)`を使いFragmentでデータ渡しを行う必要があります。\nFragmentのインスタンス化時に引数ありのコンストラクタを使用していた場合、万が一メモリ不足からFragmentが再生成された時にアプリが強制終了する可能性が考えられます。\n画面が回転した時など画面サイズに変更が加わった場合などを考慮する場合は注意して実装する必要がある。\n\n## 定数\n文字通り宣言時にセットした値を変更することができない要素。\n上記で実装した通り**final**のキーワードを変数宣言時に記述することで定数としての扱いになります。\nまた**static**のキーワードをつけることでクラスがインスタンス化されていなくても参照することができるようになります。\njava,Androidでは定数と変数を見分けやすくするために全て大文字で定数名を宣言することが多いです。\n```java\n    private final static String BUNDLE_KEY = \"BUNDLE_TERM\";\n```\n\n## Context概要\nAndroidアプリ開発の中ではxmlレイアウトをjavaファイルで参照する時などには必ず必要になる\"Context\"は一体何か。\nActivity,Service,Applicationの親クラスであり、アプリケーショングローバル情報へアクセスするためのインターフェースの役割を持つクラス。\nアプリケーションのグローバル情報とは\n\n* パーミッション(インターネット接続などの許可設定)\n* アプリリソースへのアクセス(画像やレイアウトなど\"res\"ディレクトリ配下の要素を参照するための機能)\n* アプリ情報(コンポーネント、プロセス名、テーマなど)\n\nなどが該当します。\nContextを利用することで上記の情報を参照することが可能になります。\n\nContextの取得方法には`getActivity()[Activity内ではthis]`,`getApplicationContext()`などいくつか方法がありますが、各Contextは利用可能な寿命が違っており、Activityを対象にしたContext(`getActivity()`で取得したContext)の場合はActivityが破棄されると同時にContextも破棄されます。\n対して`getApplicationContext()`ではApplicationクラスに依存するため、アプリを破棄するまで使用できます。\n現状では影響のあるプログラムはありませんが、ActivityとApplicationに設定されているテーマ(Theme)がそれぞれ違う場合に期待しない表示になるなどの不具合が発生する可能性が考えられます。\n\nあまり使われないメソッドですが`getBaseContext()`というメソッドも存在しますが、深い話しで使用は推奨されていないようです。。。\n\nContextはレイアウトなどの\"res\"ディレクトリ内を参照したりレイアウトをjavaファイルで使うための便利かつ必要なものと認識して利用すれば問題ありません。\n実際にアプリ開発で内部情報に影響されることはないと思われます。\n\n# 蔵書詳細画面作成\nActivityからFragmentへの移行が完了したら蔵書詳細画面を作成していきます。\n{% img /android/09-RefactorFragment/detailExample.png 250 Detail Example %}\n\n検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。\n\n> New -> Fragment -> Fragment(Blank)\n\n作成するFragment名や同時に作成されるレイアウトファイル名を入力し、以下の項目の設定を修正したら`Finish`をクリックします。\n{% img /android/09-RefactorFragment/addDetail01.png 600 Add Detail Screen %} \n\n|項目                               |設定値                                  |\n|----------------------------------|----------------------------------------|\n|Fragment Name                     |DetailFragment                          |\n|Create Layout XML?                |チェックを<font color=\"blue\">つける</font>|\n|Fragment Layout Name              |fragment_detail                         |\n|Include fragment factory methods? |チェックを<font color=\"red\">つけない</font>|\n|Include interface callbacks?      |チェックを<font color=\"red\">つけない</font>|\n\n`DetailFragment.java`と`fragment_detail.xml`ファイルが生成されます。\nまずは蔵書詳細画面のレイアウトを修正していきます。\n`fragment_detail.xml`を開き、*Design*タブが表示されている場合は*Text*タブをクリックしてxmlファイルの実装画面に切り替えます。\n{% img /android/09-RefactorFragment/addDetail02.png 600 Add Detail Screen %} \n```XML fragment_detail.xml\n<!-- ↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓ -->\n<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.DetailFragment\">\n\n    <!-- TODO: Update blank fragment layout -->\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"@string/hello_blank_fragment\" />\n\n</FrameLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑ -->\n<!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_margin=\"8dp\"\n    tools:context=\"kuririnz.xyz.bookdiscovery.DetailFragment\">\n\n    <TextView\n        android:id=\"@+id/DetailTitle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"20dp\"\n        tools:text=\"蔵書タイトル\"/>\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:weightSum=\"2\">\n        <ImageView\n            android:id=\"@+id/DetailImage\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:paddingLeft=\"8dp\"\n            android:scaleType=\"fitCenter\"\n            android:adjustViewBounds=\"true\"/>\n        <LinearLayout\n            android:orientation=\"vertical\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\">\n            <TextView\n                android:id=\"@+id/DetailSubTitle\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"蔵書サブタイトル\"/>\n            <TextView\n                android:id=\"@+id/DetailAuthor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"8dp\"\n                tools:text=\"蔵書作者名\"/>\n        </LinearLayout>\n    </LinearLayout>\n    <TextView\n        android:id=\"@+id/DetailDescription\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:lines=\"10\"\n        tools:text=\"蔵書概要を表示\" />\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\">\n        <TextView\n            android:id=\"@+id/DetailPageHeader\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentLeft=\"true\"\n            android:text=\"ページ数：\"/>\n        <TextView\n            android:id=\"@+id/DetailPageText\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toRightOf=\"@id/DetailPageHeader\"\n            tools:text=\"53ページ\"/>\n        <TextView\n            android:id=\"@+id/DetailPublishDateHeader\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_toLeftOf=\"@id/DetailPublishDateText\"\n            android:text=\"発売日：\"/>\n        <TextView\n            android:id=\"@+id/DetailPublishDateText\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            tools:text=\"2018/02/06\"/>\n    </RelativeLayout>\n</LinearLayout>\n<!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ -->\n```\nこれで蔵書詳細画面のレイアウトは完了です。\n\n\"LinearLayout\"や\"RelativeLayout\"を使用して画面レイアウトを作成するとこのようにLayoutの中にLayoutやTextViewなどのコンポーネントを配置するネスト構造での実装が必要になります。\n\"ConstraintLayout\"ではネスト構造にならずにレイアウトを作成することが可能です。\n\n今回出てきた属性について簡単に解説していきます。\n\n|対象のView|属性|説明|\n|---------|----|----|\n|LinearLayout|android:weightSum|縦または横方向に対して設定された数値分に均等分割する。縦横方向はorientation属性から判定される|\n|weightSum属性をセットしたLinearLayoutの子View|android:layout_weight|親のLinearLayoutで設定されたweightSumのうち占有する割合値を設定する、有効にする場合には\"layout_width\"または\"layout_height\"を0dpにする必要がある。android:layout_alignParentLeft|\n|RelativeLayoutの子View|android:layout_alignParentLeft|親のRelativeLayoutの左端に自Viewの左端を合わせて配置する|\n|RelativeLayoutの子View|android:layout_alignParentRight|親のRelativeLayoutの右端に自Viewの右端を合わせて配置する|\n|RelativeLayoutの子View|android:layout_toRightOf|設定したidを持つViewの右側に自Viewを配置する|\n|RelativeLayoutの子View|android:layout_toLeftOf|設定したidを持つViewの左側に自Viewを配置する|\n\n# 蔵書詳細画面遷移実装\n蔵書検索結果一覧画面から行アイテムをクリックしたら蔵書詳細画面に遷移するように実装を修正します。\n```java ResultListFragment.java\n\n    ...一部省略\n\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書詳細画面用Fragmentをインスタンス化\n        DetailFragment detailFragment = new DetailFragment();\n        // support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager\n        FragmentManager fm = getFragmentManager();\n        // 別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // Fragmentを表示させるViewのidとFragmentクラスを設定\n        ft.replace(R.id.FragmentContainer, detailFragment);\n        // 表示していたFragmentをバックスタックに追加\n        ft.addToBackStack(null);\n        // FragmentManagerに反映\n        ft.commit();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    }\n    ...一部省略\n```\n上記コードを実装したら動作確認します。\n\nこれで自動的に表示していたFragmentがスタック（破棄せず残っているデータ）され、スタックされたFragmentが残っている場合はActivityではなく、Fragmentが一つ戻るように実装されました。\nFragmentには\"ID\"や\"TAG\"という情報を設定することができ、一つ前のFragmentではなくスタックされいているFragmentから\"ID\"や\"TAG\"を指定して画面バックを行うことも可能です。\n\n# 蔵書詳細画面実装\n蔵書の詳細情報として著作者や概要などを表示していきます。\n蔵書を一つを特定するために今回は検索結果一覧画面でREST APIから取得したデータに含まれる\"selfLink\"キーに含まれるurl情報を蔵書詳細画面で改めてREST APIを使用して取得する形で実装していきます。\n蔵書詳細画面で取得したデータのパースに関してはJSONデータをモデルクラスに一発変換してくれるライブラリを使ってJSONObjectでの実装の手間を軽くする方法を使います。\nまた、検索結果一覧画面で表示するデータも増えてきたため、まとめてデータを持てるようにモデルクラスを作成して管理します。\n\nまずは、JSON文字列の簡単パースライブラリ**Gson**を導入します。\nプロジェクトからapp階層の`build.gradle`を開き、\"dependencies\" の \"{}\"内に以下のコードを記述します\n開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n{% img /android/07-AsyncProcess/includeokHttp01.png 550 IncludeokHttp %}\n```gradle build.gradle(Module: app)\ndependencies {\n    ...一部省略\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    implementation 'com.google.code.gson:gson:2.2.4'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを追加後、<font color=\"blue\">**Sync Now**</font>をクリックしてGSONの導入は完了です。\n{% img /android/09-RefactorFragment/addDetail06.png 550 Include GSON %}\n次に新しくモデルクラスを作成します。\n> プロジェクトウィンドウ右クリック > New > Java Class\n\nモデルクラスは２つ作成します。\n一つは検索結果一覧でデータを表示するためのモデルクラス、もう一つは蔵書詳細画面のREST APIをパースするためのモデルクラスです。\nまずは検索結果一覧に一覧表示しているデータをモデルクラスとしてまとめます。\n\nクラス名とパッケージを確認したら`OK`をクリック\n{% img /android/09-RefactorFragment/addDetail07.png 550 Include GSON %}\nこちらは検索結果一覧画面で利用するモデルクラスとして変数を宣言していきます。\n```java ResultListMdel.java\npublic class ResultListModel {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 蔵書タイトル\n    public String title;\n    // 蔵書概要\n    public String summary;\n    // 蔵書単体リンク\n    public String selfLink;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n\nクラス名とパッケージを確認したら`OK`をクリック\n{% img /android/09-RefactorFragment/addDetail08.png 550 Include GSON %}\n２つ目のクラスは蔵書詳細画面のREST APIデータをパースして使用するためのモデルクラスです。\n```java DetailDataModal.java\npublic class DetailDataModel {\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 蔵書単体リンク\n    public String selfLink;\n    // 蔵書概要データ\n    public VolumeInfo volumeInfo;\n\n    // 蔵書概要クラス\n    public class VolumeInfo {\n        // 蔵書タイトル\n        public String title;\n        // 蔵書サブタイトル\n        public String subTitle;\n        // 蔵書著者リスト\n        public List<String> authors;\n        // 蔵書発売日\n        public String publishedDate;\n        // 蔵書概要\n        public String description;\n        // 蔵書ページ数\n        public int pageCount;\n        // 蔵書サムネイル画像URL\n        public ImageLinks imageLinks;\n    }\n\n    // 蔵書サムネイルクラス\n    public class ImageLinks {\n        // 蔵書小サイズサムネイル\n        public String smallThumbnail;\n        // 蔵書サムネイル\n        public String thumbnail;\n        // 中サイズ表示画像\n        public String medium;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n`DetailFragment.java`のプログラムを修正する前に\"import\"設定を修正します。\n`ResultListFragment.java`と同様に`import..`の一覧から\n*import android.app.Fragment;*を削除します。\n{% img /android/09-RefactorFragment/addDetail03.png 600 Import Change %} \n次に<font color=\"red\">赤くなった`Fragmet`</font>をクリックし上に表示されるツールチップに従い\n<kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力\n{% img /android/09-RefactorFragment/addDetail04.png 600 Import Change %}\nウィンドウに選択肢が表示されたら**Fragment (android.support.v4.app)**を選択します。\n{% img /android/09-RefactorFragment/addDetail05.png 600 Import Change %} \n`DetailFragment.java`では取得したAPIデータをパースし、一旦タイトルをログに出力させてみます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n\t\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    // APIの検索に使うISBNコード\n    private String isbn;\n    // 個体リンクのURL\n    private String selfLink;\n    // APIのデータ取得後処理を行うためのHandler\n    private Handler handler;\n    // OkHttp通信クライアント\n    private OkHttpClient okHttpClient;\n\n    // スタティックコンストラクタ\n    public static DetailFragment getInstance(String selfLink) {\n        // DetailFragmentインスタンスを生成\n        DetailFragment fragment = new DetailFragment();\n        // DetailFragmentに渡すデータ格納クラスを生成\n        Bundle args = new Bundle();\n        // 検索文字列データを連携データにセット\n        args.putString(BUNDLE_KEY, selfLink);\n        // データ格納クラスをDetailFragmentインスタンスにセット\n        fragment.setArguments(args);\n        // 生成したResultListFragmentを返却\n        return fragment;\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    public DetailFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_detail, container, false);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        // Handlerをインスタンス化\n        handler = new Handler();\n        // 連携データが存在するか確認\n        if (getArguments() != null) {\n            // 連携データ内から\"BUNDLE_SELFLINK\"キーのデータを代入、なければ\"Android\"と文字列を代入\n            selfLink = getArguments().getString(BUNDLE_KEY, \"\");\n        }\n\n        // selfLinkが空の場合は検索結果一覧画面に強制バック\n        if (TextUtils.isEmpty(selfLink)) {\n            getFragmentManager().popBackStack();\n        }\n\n        // xmlファイルのコンポーネントと関連付け\n        titleText = getView().findViewById(R.id.DetailTitle);\n        subTitleText = getView().findViewById(R.id.DetailSubTitle);\n        authorText = getView().findViewById(R.id.DetailAuthor);\n        descriptText = getView().findViewById(R.id.DetailDescription);\n        pageText = getView().findViewById(R.id.DetailPageText);\n        publishDateText = getView().findViewById(R.id.DetailPublishDateText);\n\n        // OkHttp通信クライアントをインスタンス化\n        okHttpClient = new OkHttpClient();\n        // 通信するための情報\n        // ResultListFragmentから取得したselfLinkURLにREST API通信を行う\n        Request request = new Request.Builder().url(selfLink).build();\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n```java ResultListAdapter.java\npublic class ResultListAdapter extends BaseAdapter {\n\n    // ListViewの描画に必要な変数を宣言\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<String> titleList;\n    private List<String> summaryList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)\n    public ResultListAdapter(Context context, List<String> titleList, List<String> summaryList) {\n        this.titleList = titleList;\n        this.summaryList = summaryList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        return titleList.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private List<ResultListModel> resultList;\n    private LayoutInflater layoutInflater;\n\n    // コンストラクタ\n    public ResultListAdapter(Context context, List<ResultListModel> resultList) {\n        this.resultList = resultList;\n        this.layoutInflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        // 一覧表示する要素数を返却する\n        return resultList.size();\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n        // 各行の表示レイアウト読み込みや、描画情報の設定を実装する\n        // getViewで返却されたViewがListViewに表示される\n\n        // viewの中身が空かチェック\n        if (view == null) {\n            // viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む\n            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, false);\n        }\n\n        // row_result_listのTitleとSummaryに文言を代入\n        TextView titleView = view.findViewById(R.id.RowListTitle);\n        TextView summaryView = view.findViewById(R.id.RowListSummary);\n\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(titleList.get(i));\n        summaryView.setText(summaryList.get(i));\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        titleView.setText(resultList.get(i).title);\n        summaryView.setText(resultList.get(i).summary);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n        // 文字情報を代入されたviewを返却\n        return view;\n    }\n```\n```java ResultListFragment.java\npublic class ResultListFragment extends Fragment implements AdapterView.OnItemClickListener{\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // 検索結果一覧データ\n    private List<ResultListModel> resultList;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n    ...一部省略\n    // ListViewの各行をクリックした時の命令を実装\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\n        // クリックした行番号をToastで表示する\n        Toast.makeText(getContext()\n                , (i + 1) + \"行目をクリックしました\"\n                , Toast.LENGTH_SHORT).show();\n        // 蔵書詳細画面用Fragmentをインスタンス化\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        DetailFragment detailFragment = new DetailFragment();\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        DetailFragment detailFragment = DetailFragment.getInstance(resultList.get(i).selfLink);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        // support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager\n        FragmentManager fm = getFragmentManager();\n        // 別のFragmentに遷移するためのクラスをインスタンス化\n        FragmentTransaction ft = fm.beginTransaction();\n        // Fragmentを表示させるViewのidとFragmentクラスを設定\n        ft.replace(R.id.FragmentContainer, detailFragment);\n        // 表示していたFragmentをバックスタックに追加\n        ft.addToBackStack(null);\n        // FragmentManagerに反映\n        ft.commit();\n    }\n\n    // 検索結果をListViewに反映するメインスレッドの処理クラス\n    private class ReflectResult implements Runnable {\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        // 蔵書一覧タイトルデータリスト\n        private List<String> titleList;\n        // 蔵書一覧概要データリスト\n        private List<String> summaryList;\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        \n        // コンストラクタ\n        public ReflectResult(JSONArray items) {\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            titleList = new ArrayList<>();\n            summaryList = new ArrayList<>();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // 蔵書モデルクラスリスト\n            resultList = new ArrayList<>();\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // Jsonのパースエラーが発生した時に備えてtry~catchする\n            try{\n                // 蔵書リストの件数分繰り返しタイトルをログ出力する\n                for (int i = 0; i < items.length(); i ++) {\n                    // 蔵書リストから i番目のデータを取得\n                    JSONObject item = items.getJSONObject(i);\n                    // 蔵書のi番目データから蔵書情報のグループを取得\n                    JSONObject volumeInfo = item.getJSONObject(\"volumeInfo\");\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // タイトルデータをリストに追加\n                    titleList.add(volumeInfo.getString(\"title\"));\n                    // 概要データをリストに追加\n                    summaryList.add(volumeInfo.getString(\"description\"));\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                    // 蔵書データクラスをインスタンス化\n                    ResultListModel resultData = new ResultListModel();\n                    // タイトルをモデルクラスに代入\n                    resultData.title = volumeInfo.getString(\"title\");\n                    // 個体蔵書データURLをモデルクラスに代入\n                    resultData.selfLink = item.getString(\"selfLink\");\n                    // データに\"description\"キーが含まれている場合は情報を代入\n                    if (volumeInfo.has(\"description\")) {\n                        // 概要をモデルクラスに代入\n                        resultData.summary = volumeInfo.getString(\"description\");\n                    } else {\n                        // \"description\"キーが含まれていない場合は空文字データを代入\n                        resultData.summary = \"\";\n                    }\n                    // 蔵書情報をリストに登録\n                    resultList.add(resultData);\n                    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // ListViewに表示する情報をまとめるAdapterをインスタンス化\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            adapter = new ResultListAdapter(getContext(), titleList, summaryList);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            adapter = new ResultListAdapter(getContext(), resultList);\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            // ListViewに表示情報をまとめたAdapterをセット\n            resultListView.setAdapter(adapter);\n            // ListViewに行をクリックした時のイベントを登録\n            resultListView.setOnItemClickListener(ResultListFragment.this);\n        }\n    }\n}\n```\n上記コード修正が終わったら動作確認してみます。\n正常に処理が実行されれば蔵書詳細画面に遷移し、**Logcat**に検索結果一覧で選択した蔵書のタイトルが表示されると思います。\n\nAndroidアプリではREST API通信を行い取得したデータをGsonというライブラリを利用することで簡単にパースすることができます。\nただGsonでパースするときには取得データと同じ階層構造を指定したクラスを作成して上げる必要があるので期待通りパースされない場合、まずJSONデータと作成したクラスの階層構造をお確認すると良いでしょう。\nまた取得するデータキーとクラスの変数名を合わせて実装する必要があるので入力ミスにも注意が必要です。\n\n今回の実装で便利なUtilクラスを使いましたので紹介です、`DetailFragment.java`において\"selfLink\"変数にデータが格納されているか判定するために\n```java\nTextUtils.isEmpty(selfLink)\n```\nという実装をしています、`TextUtils`はString型変数の処理で便利な機能が揃っており上記のメソッドでは、引数の内容が\"null\"や空文字列かを判定し\"true\"を返却してくれます。\n多く使うメソッドはこの`TextUtils.isEmpty()`が多くなると思いますが、判定処理を完結しにてくれるのでとても有効です。\n\n続いて蔵書詳細データを画面のTextViewにセットしていきます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n\t    ...一部省略\n\n        // データの取得後の命令を実装\n        Callback callBack = new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                // 通信に失敗した原因をログに出力\n                Log.e(\"failure API Response\", e.getLocalizedMessage());\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                // JsonパースライブラリGsonのインスタンス化\n                Gson gson = new Gson();\n                // 返却されたJson文字列を一旦変数に代入\n                String jsonString = response.body().string();\n                // DetailDataModelクラスに代入\n                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);\n                // パースが正常に行えたかLogcatに出力して確認。\n                Log.d(\"DetailFragment parse\", detailData.volumeInfo.title);\n                //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n                // MainThreadに処理を渡し画面にデータを反映する\n                handler.post(new ReflectDetail(detailData));\n                //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n            }\n        };\n        // 非同期処理でREST API通信を実行\n        okHttpClient.newCall(request).enqueue(callBack);\n    }\n\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    // REST APIで取得したデータを画面に反映するためのクラス\n    private class ReflectDetail implements Runnable {\n        // 蔵書詳細データ\n        DetailDataModel detailData;\n\n        // コンストラクタ\n        public ReflectDetail(DetailDataModel detailData) {\n            this.detailData = detailData;\n        }\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n            // タイトルを反映\n            titleText.setText(detailData.volumeInfo.title);\n            // サブタイトルが取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.subTitle)) {\n                subTitleText.setText(detailData.volumeInfo.subTitle);\n            }\n            // 概要が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.description)) {\n                descriptText.setText(detailData.volumeInfo.description);\n            }\n            // 著作者名が取得できていたら反映\n            if (detailData.volumeInfo.authors != null && detailData.volumeInfo.authors.size() > 0) {\n                String authorString = new String();\n                // 著作者名が複数設定されていう場合があるので繰り返し処理で全て表示する\n                for (String author : detailData.volumeInfo.authors) {\n                    authorString += author + \",\";\n                }\n                authorText.setText(authorString);\n            }\n            // ページ数を反映\n            pageText.setText(String.valueOf(detailData.volumeInfo.pageCount));\n            // 発売日が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) {\n                publishDateText.setText(detailData.volumeInfo.publishedDate);\n            }\n        }\n    }\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを実装したら動作確認します。\n蔵書詳細画面に遷移してREST APIのデータを取得できるまでに少し間が空きますが、正常に実装されるとTextViewに文言が反映されます。\n\n上記の実装では必要なタイミングで**論理演算子(&&)**が使われました、そしてポイントは著作者名リストの**for**文の使い方です。\n## for-each\n繰り返し処理を実装する方法として\"for文\"を学習しました、今回の**for-each**文ではコレクション型の変数に登録されている要素の回数分、繰り返し処理を実行する時の実装方法です。\nコレクション型以外にもMap型(講座の中ではまだ未使用)や配列型の変数でも同様の実装が可能です。\n**for-each**文の実装テンプレート\n```java\nfor (配列要素の型 一時変数 : リスト型の変数) {\n\t// 繰り返し処理\n}\n```\n一時変数にはリスト型変数の要素が0番目〜最後の要素まで代入された状態で繰り返し処理で参照することが可能です。\n実際には**for-each**文の方が利用頻度は多いと思われます。\n\n## URL画像読み込み処理の実装\nこのページではActivity → Fragmentの移行に始まり、新規のクラスを作る回数も多かったので非常にコーディングに時間がかかったと思います。\nそれも今回の実装で終わりです！\n\nWeb上にアップロードされた画像をアプリで読み込みむためにも便利なライブラリがあります。\n本来はBitmapという形式で画像インスタンスを生成し使用しなくなるときにはちゃんとAndroid OSの処理の阻害にならないよう解放する必要があるのですが、\n**Glide**というライブラリを使用することでそういったメモリ管理などの忘れがちな処理を補ってくれます。\n\nでは他のライブラリと同様に`build.gradle`に依存関係を追加します。\nプロジェクトからappディレクトリの`build.gradle`を開き、\"dependencies\" の \"{}\"内に以下のコードを記述します\n開くのは`build.gradle`の後ろに***(Module: app)***と表示されている方です。\n```gradle build.gradle(Module: app)\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId \"kuririnz.xyz.bookdiscovery\"\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:27.0.2'\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    implementation 'com.android.support:design:27.0.2'\n    implementation 'com.squareup.okhttp3:okhttp:3.9.1'\n    implementation 'com.google.code.gson:gson:2.2.4'\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    implementation 'com.github.bumptech.glide:glide:4.6.1'\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n}\n```\n上記コードを追加後、<font color=\"blue\">**Sync Now**</font>をクリックして**Glide**の導入は完了です。\n**Glide**の最新版(バージョン4.6.1)を使用する際には`dependencies`内の`implementation 'com.android.support:appcompat-v7...'`と`implementation 'com.android.support:design...'`の指定バージョンを\"27.0.2\"に設定する必要があるため、合わせて\"compileSdkVersion\"、\"targetSdkVersion\"の指定を**27**に設定しなければいけません。\n\nこれは**Glide**が依存関係を持っているandroid.supportバージョンが**27**であることが原因で、**Glide**の古いバージョンの場合には開発アプリ側の\"compileSdkVersion\"、\"targetSdkVersion\"を古いものでも実装が可能だと思われます。\n\nでは**Glide**を使って蔵書詳細画面のImageViewに画像を読み込ませてみます。\n```java DetailFragment.java\npublic class DetailFragment extends Fragment {\n\n    // 定数\n    // データ渡しのキー情報\n    private final static String BUNDLE_KEY = \"BUNDLE_SELFLINK\";\n\n    // xmlファイルのコンポーネントと関連付ける要素\n    private TextView titleText;\n    private TextView subTitleText;\n    private TextView authorText;\n    private TextView descriptText;\n    private TextView pageText;\n    private TextView publishDateText;\n    //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n    private ImageView detailImage;\n    //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n    // 個体リンクのURL\n    private String selfLink;\n  \n    ...一部省略\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n       \n       ...一部省略\n        publishDateText = getView().findViewById(R.id.DetailPublishDateText);\n        //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n        detailImage = getView().findViewById(R.id.DetailImage);\n        //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n       ...一部省略\n    }\n\n    // REST APIで取得したデータを画面に反映するためのクラス\n    private class ReflectDetail implements Runnable {\n       ...一部省略\n\n        // Handlerから実行されるメソッド\n        @Override\n        public void run() {\n    \n           ...一部省略\n    \n            // 発売日が取得できていたら反映\n            if (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) {\n                publishDateText.setText(detailData.volumeInfo.publishedDate);\n            }\n            //↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\n            // Glideを使ってWeb上の画像をImageViewに表示させる\n            if (detailData.volumeInfo.imageLinks != null) {\n                Glide.with(DetailFragment.this)\n                        .applyDefaultRequestOptions(RequestOptions.fitCenterTransform())\n                        .load(detailData.volumeInfo.imageLinks.medium)\n                        .into(detailImage);\n            }\n            //↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n        }\n    }\n}\n```\n上記コードを実装したら動作確認します。\n正常に動作した場合、蔵書詳細画面に蔵書の表紙画像が表示されます。\n\n**Glide**はメソッドからメソッドに繋げる形の実装でも画像のURLをImageViewに表示することができます。（変数を挟まなくていいのでコード量が少なくなります）\n`with()`ではContextを取得できるインスタンスを引数にセットします、`load()`の引数には画像のURLをセット、最後に`into()`の引数に画像を表示するImageViewをセットして表示します。\n`applyDefaultRequestOptions()`は画像の表示設定を指定できます、今回は画像をはい出さずに表示するように\"fitCenterTransform\"を指定しています。\n\n以上で、蔵書詳細画面作成の解説は完了です。\n次の[操作性・ユーザ体験の改善](/AndroidCourse/android/10-OrganaizeExperience)ではユーザがアプリを操作する中で気持ちよく操作するための手段として読み込み中を伝えるダイアログや、最後に検索した内容を保持しておくための設定ファイルなどの利用方法を学習します。","slug":"09-RefactorFragment","published":1,"updated":"2018-05-11T08:24:30.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh4ui0wp000c3l61qqn20uws","content":"<p>蔵書詳細画面を作成する中でモデルクラスとFragmentの実装を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#検索結果一覧画面の構築移行\">検索結果一覧画面の構築移行</a><ul>\n<li><a href=\"#fragmentとは\">Fragmentとは</a></li>\n<li><a href=\"#検索結果一覧fragment作成\">検索結果一覧Fragment作成</a></li>\n<li><a href=\"#検索結果一覧画面レイアウト実装\">検索結果一覧画面レイアウト実装</a><ul>\n<li><a href=\"#framelayout-コンポーネント\">FrameLayout コンポーネント</a></li>\n</ul>\n</li>\n<li><a href=\"#検索結果一覧fragment機能実装\">検索結果一覧Fragment機能実装</a></li>\n<li><a href=\"#定数\">定数</a></li>\n<li><a href=\"#context概要\">Context概要</a></li>\n</ul>\n</li>\n<li><a href=\"#蔵書詳細画面作成\">蔵書詳細画面作成</a></li>\n<li><a href=\"#蔵書詳細画面遷移実装\">蔵書詳細画面遷移実装</a></li>\n<li><a href=\"#蔵書詳細画面実装\">蔵書詳細画面実装</a><ul>\n<li><a href=\"#for-each\">for-each</a></li>\n<li><a href=\"#url画像読み込み処理の実装\">URL画像読み込み処理の実装</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/08-AppDataBase\">検索履歴一覧画面の作成</a>からの引き続きの学習ページです。</p>\n<h1><span id=\"学習ポイント\">学習ポイント</span></h1><ul>\n<li>Fragment</li>\n<li>Fragmentによる画面遷移</li>\n<li>定数</li>\n<li>Gson</li>\n<li>Glide</li>\n</ul>\n<p>複数のデータをひとまとめにして管理するための方法としてモデルクラスを学習します。<br>また、検索結果一覧画面の各蔵書ごとの詳細情報を表示する蔵書詳細画面を作成し、遷移できるように修正していきます、その工程の中でActivity内に配置できるライフサイクルを持ったViewコンポーネント<strong>Fragment</strong>の利用方法と<strong>Fragment</strong>間の画面遷移に関して学習します。</p>\n<h1><span id=\"検索結果一覧画面の構築移行\">検索結果一覧画面の構築移行</span></h1><p><a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面の作成</a>ページでActivityを使い画面実装を行なっていましたが、これをそっくり<strong>Fragment</strong>を利用した実装に書き換えます。<br>さらに、複数表示されている検索結果一覧からクリックされた行の蔵書の詳細情報を表示する画面、”蔵書詳細画面”を<strong>Fragment</strong>で実装しこの画面に遷移するようアプリを作り変えていきます。</p>\n<h2><span id=\"fragmentとは\">Fragmentとは</span></h2><p>FragmentはActivityのようにライフサイクルを持ったViewコンポーネントにあたり、ButtonやListViewなど複数のWidgetやViewを配置することが可能です、またActivity内に複数のFragmentを表示することができるので画面分割の必要な機能を作成する時には活躍が期待されます。</p>\n<p>また、<strong>Fragment</strong>を利用するメリットはActivityに比べてAndroid端末が画面表示するコストが小さくなるため、アプリの強制終了のリスクを多少回避できることも上げられます。</p>\n<p>逆に<strong>Fragment</strong>の利用にあたり注意しなければいけないのはActivityとは別のライフサイクルになるため、Activityがすでに存在しないタイミングで<strong>Fragment</strong>のライフサイクルメソッドが実行され強制終了する可能性があります。<br>また、<strong>Fragment</strong>自身はContextとしての要素は持ち合わせていないため、ActivityやApplicationクラスからContextを取得するなどしてレイアウト表示を実装する必要があります。</p>\n<p>ではまず、検索結果一覧画面を<strong>Fragment</strong>を使った実装に作り変えていきます。</p>\n<h2><span id=\"検索結果一覧fragment作成\">検索結果一覧Fragment作成</span></h2><p>新しくFragmentクラスを継承した独自クラスのjavaファイルを作成していきます。</p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment01.png\" width=\"500\" title=\"Create New Fragment\">\n<p>新しいFragmentクラスを作成する時の設定項目は以下の通り入力したら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment02.png\" width=\"500\" title=\"Create New Fragment\"></p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>ResultListFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_result_list</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p>新しく<code>ResultListFragment.java</code>と<code>fragment_result_list.xml</code>の2ファイルが作成されます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment03.png\" width=\"600\" title=\"Create New Fragment\"></p>\n<h2><span id=\"検索結果一覧画面レイアウト実装\">検索結果一覧画面レイアウト実装</span></h2><p>作成した<code>fragment_resultlist.xml</code>と<code>activity_result_list.xml</code>を編集します。<br><code>fragment_result_list.xml</code>のファイルの場所は以下です。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layou -&gt; fragment_result_list.xml</p>\n</blockquote>\n<p><code>feagment_result_list.xml</code>を表示した時に<strong>LayoutEditor</strong>が表示されたら左下の”Text”タブをクリックしxmlでの編集画面に表示を切り替えます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/editRLfrg01.png\" width=\"600\" title=\"Edit Result List Fragment\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_result_list.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.ResultListFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/FragmentResultListView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>一覧表示用の”ListView”を配置して画面いっぱいに表示されるように設定します。<br>次にFragmentを表示するactivityのレイアウトを修正していきます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layou -&gt; activity_result_list.xml</p>\n</blockquote>\n<p>上記レイアウトファイルを表示し、右下の”Design”タブをクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg01.png\" width=\"600\" title=\"Edit Result List Activity\"><br>デザインビューに表示されている<code>ResultListView</code>をクリックし、<kbd>delete</kbd>キーを押下して削除します。<br>何も表示されていない状態になったら、<code>Palette -&gt; Layouts -&gt; FrameLayout</code>から”FrameLayout”をドラッグ&amp;ドロップでデザインビューに表示します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg02.png\" width=\"600\" title=\"Edit Result List Activity\"><br>制約と属性の設定を行います。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg03.png\" width=\"600\" title=\"Edit Result List Activity\"> </p>\n<p><strong>FrameLayout</strong>に設定する制約</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">FrameLayoutの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">画面左端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p><strong>FrameLayout</strong>に設定する属性</p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>FragmentContainer</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_constraint</td>\n</tr>\n<tr>\n<td>layout_height</td>\n<td>match_constraint</td>\n</tr>\n</tbody>\n</table>\n<p>これでレイアウトファイルの修正は完了です。</p>\n<h3><span id=\"framelayout-コンポーネント\">FrameLayout コンポーネント</span></h3><p>先ほどの実装で初めて出てきたコンポーネント”FrameLayout”です。<br>“FrameLayout”はAndroid SDKがリリースされた時からある古いコンポーネントです。<br>他の”ConstraintLayout”や”LinearLayout”、”RelativeLayout”などには子Viewを配置する上での便利な特徴がありますが、”FrameLayout”は特徴がないことが特徴となります。<br>“FrameLayout”での子View配置は左上の角を横/縦の基準(0,0)として正確にポイントを設定して期待する位置に配置する必要があるため、複数のコンポーネント同士を関連付けて配置するのが難しくなります。<br>また、Androidでポイントを指定して配置を行うと、数多く販売されているAndroid端末の全画面サイズに対応仕切れず、レイアウト崩れの原因になってしまうので表示するコンポーネントの少ない場合など細かい配置のないような場合で用いられます。</p>\n<h2><span id=\"検索結果一覧fragment機能実装\">検索結果一覧Fragment機能実装</span></h2><p>レイアウトの修正が終わりましたので<code>ResultListFragment.java</code>、<code>ResultListActivity.java</code>ファイルを実装します。<br><code>ResultListFragment.java</code>の実装ほとんどが<code>ResultListActivity.java</code>のプログラムをコピーするだけで問題ないのですが、一部細かい違いがあるのでコピーしてエラーになった箇所など見比べて確認してみてください。</p>\n<p>まずFragmentクラスに少し手を加えていきます。<br><code>ResultListFragment.java</code>のクラス宣言より上に表示されている<code>import..</code>の一覧から<br><em>import android.app.Fragment;</em>を削除します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport01.png\" width=\"600\" title=\"Import Change\"><br>次に<font color=\"red\">赤くなった<code>Fragmet</code></font>をクリックし上に表示されるツールチップに従い<br><kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport02.png\" width=\"600\" title=\"Import Change\"><br>ウィンドウに選択肢が表示されたら<strong>Fragment (android.support.v4.app)</strong>を選択します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport03.png\" width=\"600\" title=\"Import Change\"> </p>\n<p>Android SDK上にはFragmentクラスが２種類あります。</p>\n<ul>\n<li>android.app.Fragment</li>\n<li>android.support.v4.app.Fragment</li>\n</ul>\n<p>Google者からは後者の”android.support.v4.app.Fragment”の使用を推奨されています。<br>大きは違いとしてAndroid API 16(OS 4.1)以下にもアプリを配信する場合は”android.support.v4.app.Fragment”をimportしてFragmentを使用する必要があります。</p>\n<p>その他の違いとしては以下の通りです。</p>\n<ul>\n<li>android.support.v4.app.Fragmentの方がバグが少ない。</li>\n<li>android.app.Fragmentでは一部メソッドが使えない。</li>\n</ul>\n<p>実装中今までほとんど触れてこなかったimportエリアですが、この部分にはクラス内で利用している外部のクラスを指定する必要があり、ここに対象のクラスがインポートされていないとクラス内部の実装で使用することができません、実装する上で必要なクラスはここで全てインポートします。<br>候補検索など小さなウィンドウから選択して実装する場合は自動的にインポートされるのであまり気にしないでプログラミングして問題ありません。</p>\n<p>では機能の実装を進めていきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_TERM\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResultListFragment <span class=\"title\">getInstance</span><span class=\"params\">(String term)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentインスタンスを生成</span></span><br><span class=\"line\">        ResultListFragment fragment = <span class=\"keyword\">new</span> ResultListFragment();</span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentに渡すデータ格納クラスを生成</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列データを連携データにセット</span></span><br><span class=\"line\">        args.putString(BUNDLE_KEY, term);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをResultListFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したResultListFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fragmentが表示するレイアウトを指定するライフサイクルメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_result_list, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 親となるActivityが生成された後に実行されるライフサイクルメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列変数を初期化</span></span><br><span class=\"line\">        term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = getArguments().getString(BUNDLE_KEY, <span class=\"string\">\"Android\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView =  getView().findViewById(R.id.FragmentResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でAPI通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(getContext()</span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面遷移時のデータが空でない場合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().hasExtra(<span class=\"string\">\"terms\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Key:termsにデータがあればValueを代入</span></span><br><span class=\"line\">            term = getIntent().getStringExtra(<span class=\"string\">\"terms\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移時のデータがからの場合は \"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でAPI通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// FragmentContainerにResultListFragmentを表示させる処理</span></span><br><span class=\"line\">        ResultListFragment resultListFragment = ResultListFragment.getInstance(term);</span><br><span class=\"line\">        <span class=\"comment\">// Activity内で表示するFragmentを管理するクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentManager fm = getSupportFragmentManager();</span><br><span class=\"line\">        <span class=\"comment\">// Fragmentを表示、または別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"comment\">// FragmentManagerに新しいFragmentを追加</span></span><br><span class=\"line\">        <span class=\"comment\">// FragmentContainerにResultListFragmentを表示するよう設定</span></span><br><span class=\"line\">        ft.add(R.id.FragmentContainer, resultListFragment);</span><br><span class=\"line\">        <span class=\"comment\">// 上記の設定でFragmentManagerを更新</span></span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記のコード修正が終わったら動作確認します。<br>正常に検索結果画面に遷移できるか確認してみましょう。</p>\n<p>今回Fragmentの実装では２つのライフサイクルメソッドを利用しました、<a href=\"/AndroidCourse/android/02-AndroidConcept\">Androidの概念</a>で一度ライフサイクルの図をご紹介しましたが、<br>Fragmentの<code>onCreateView()</code>、<code>onActivityCreated()</code>はActivityの<code>onCreate()</code>メソッドの後に実行されます。</p>\n<p>Fragmentで画面の要素を取得するためには<code>getView()</code>メソッドを利用します。<br><code>getView()</code>メソッドはFragment内のどのライフサイクルでも参照できますが、<code>onAttach()</code>〜<code>onCtreateView()</code>のライフサイクルメソッドでは、ActivityにFragmentのレイアウトが反映されていないため”null”が返却されるので注意が必要です。</p>\n<p>またFragmentは引数のないコンストラクタを必ず用意しないといけません。<br>Android端末ではメモリが不足した場合にActivityやFragmentを一旦破棄し必要になったタイミングで再度生成される仕組みになっており、この時にFragmentは引数のないコンストラクタを実行しインスタンス化を行っています。<br>メモリからFragmentが破棄されても<code>Bundle</code>は破棄されずに残るため、<code>fragment.setArguments(Bundle)</code>を使いFragmentでデータ渡しを行う必要があります。<br>Fragmentのインスタンス化時に引数ありのコンストラクタを使用していた場合、万が一メモリ不足からFragmentが再生成された時にアプリが強制終了する可能性が考えられます。<br>画面が回転した時など画面サイズに変更が加わった場合などを考慮する場合は注意して実装する必要がある。</p>\n<h2><span id=\"定数\">定数</span></h2><p>文字通り宣言時にセットした値を変更することができない要素。<br>上記で実装した通り<strong>final</strong>のキーワードを変数宣言時に記述することで定数としての扱いになります。<br>また<strong>static</strong>のキーワードをつけることでクラスがインスタンス化されていなくても参照することができるようになります。<br>java,Androidでは定数と変数を見分けやすくするために全て大文字で定数名を宣言することが多いです。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_TERM\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"context概要\">Context概要</span></h2><p>Androidアプリ開発の中ではxmlレイアウトをjavaファイルで参照する時などには必ず必要になる”Context”は一体何か。<br>Activity,Service,Applicationの親クラスであり、アプリケーショングローバル情報へアクセスするためのインターフェースの役割を持つクラス。<br>アプリケーションのグローバル情報とは</p>\n<ul>\n<li>パーミッション(インターネット接続などの許可設定)</li>\n<li>アプリリソースへのアクセス(画像やレイアウトなど”res”ディレクトリ配下の要素を参照するための機能)</li>\n<li>アプリ情報(コンポーネント、プロセス名、テーマなど)</li>\n</ul>\n<p>などが該当します。<br>Contextを利用することで上記の情報を参照することが可能になります。</p>\n<p>Contextの取得方法には<code>getActivity()[Activity内ではthis]</code>,<code>getApplicationContext()</code>などいくつか方法がありますが、各Contextは利用可能な寿命が違っており、Activityを対象にしたContext(<code>getActivity()</code>で取得したContext)の場合はActivityが破棄されると同時にContextも破棄されます。<br>対して<code>getApplicationContext()</code>ではApplicationクラスに依存するため、アプリを破棄するまで使用できます。<br>現状では影響のあるプログラムはありませんが、ActivityとApplicationに設定されているテーマ(Theme)がそれぞれ違う場合に期待しない表示になるなどの不具合が発生する可能性が考えられます。</p>\n<p>あまり使われないメソッドですが<code>getBaseContext()</code>というメソッドも存在しますが、深い話しで使用は推奨されていないようです。。。</p>\n<p>Contextはレイアウトなどの”res”ディレクトリ内を参照したりレイアウトをjavaファイルで使うための便利かつ必要なものと認識して利用すれば問題ありません。<br>実際にアプリ開発で内部情報に影響されることはないと思われます。</p>\n<h1><span id=\"蔵書詳細画面作成\">蔵書詳細画面作成</span></h1><p>ActivityからFragmentへの移行が完了したら蔵書詳細画面を作成していきます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/detailExample.png\" width=\"250\" title=\"Detail Example\"></p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<p>作成するFragment名や同時に作成されるレイアウトファイル名を入力し、以下の項目の設定を修正したら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail01.png\" width=\"600\" title=\"Add Detail Screen\"> </p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>DetailFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_detail</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n</tbody>\n</table>\n<p><code>DetailFragment.java</code>と<code>fragment_detail.xml</code>ファイルが生成されます。<br>まずは蔵書詳細画面のレイアウトを修正していきます。<br><code>fragment_detail.xml</code>を開き、<em>Design</em>タブが表示されている場合は<em>Text</em>タブをクリックしてxmlファイルの実装画面に切り替えます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail02.png\" width=\"600\" title=\"Add Detail Screen\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.DetailFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.DetailFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書タイトル\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailDescription\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:lines</span>=<span class=\"string\">\"10\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書概要を表示\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPageHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"ページ数：\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPageText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/DetailPageHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">tools:text</span>=<span class=\"string\">\"53ページ\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPublishDateHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toLeftOf</span>=<span class=\"string\">\"@id/DetailPublishDateText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"発売日：\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPublishDateText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">tools:text</span>=<span class=\"string\">\"2018/02/06\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>これで蔵書詳細画面のレイアウトは完了です。</p>\n<p>“LinearLayout”や”RelativeLayout”を使用して画面レイアウトを作成するとこのようにLayoutの中にLayoutやTextViewなどのコンポーネントを配置するネスト構造での実装が必要になります。<br>“ConstraintLayout”ではネスト構造にならずにレイアウトを作成することが可能です。</p>\n<p>今回出てきた属性について簡単に解説していきます。</p>\n<table>\n<thead>\n<tr>\n<th>対象のView</th>\n<th>属性</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LinearLayout</td>\n<td>android:weightSum</td>\n<td>縦または横方向に対して設定された数値分に均等分割する。縦横方向はorientation属性から判定される</td>\n</tr>\n<tr>\n<td>weightSum属性をセットしたLinearLayoutの子View</td>\n<td>android:layout_weight</td>\n<td>親のLinearLayoutで設定されたweightSumのうち占有する割合値を設定する、有効にする場合には”layout_width”または”layout_height”を0dpにする必要がある。android:layout_alignParentLeft</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_alignParentLeft</td>\n<td>親のRelativeLayoutの左端に自Viewの左端を合わせて配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_alignParentRight</td>\n<td>親のRelativeLayoutの右端に自Viewの右端を合わせて配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_toRightOf</td>\n<td>設定したidを持つViewの右側に自Viewを配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_toLeftOf</td>\n<td>設定したidを持つViewの左側に自Viewを配置する</td>\n</tr>\n</tbody>\n</table>\n<h1><span id=\"蔵書詳細画面遷移実装\">蔵書詳細画面遷移実装</span></h1><p>蔵書検索結果一覧画面から行アイテムをクリックしたら蔵書詳細画面に遷移するように実装を修正します。<br><figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">    Toast.makeText(getContext()</span><br><span class=\"line\">            , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">            , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書詳細画面用Fragmentをインスタンス化</span></span><br><span class=\"line\">    DetailFragment detailFragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">    <span class=\"comment\">// support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager</span></span><br><span class=\"line\">    FragmentManager fm = getFragmentManager();</span><br><span class=\"line\">    <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">    FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">    <span class=\"comment\">// Fragmentを表示させるViewのidとFragmentクラスを設定</span></span><br><span class=\"line\">    ft.replace(R.id.FragmentContainer, detailFragment);</span><br><span class=\"line\">    <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">    ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// FragmentManagerに反映</span></span><br><span class=\"line\">    ft.commit();</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。</p>\n<p>これで自動的に表示していたFragmentがスタック（破棄せず残っているデータ）され、スタックされたFragmentが残っている場合はActivityではなく、Fragmentが一つ戻るように実装されました。<br>Fragmentには”ID”や”TAG”という情報を設定することができ、一つ前のFragmentではなくスタックされいているFragmentから”ID”や”TAG”を指定して画面バックを行うことも可能です。</p>\n<h1><span id=\"蔵書詳細画面実装\">蔵書詳細画面実装</span></h1><p>蔵書の詳細情報として著作者や概要などを表示していきます。<br>蔵書を一つを特定するために今回は検索結果一覧画面でREST APIから取得したデータに含まれる”selfLink”キーに含まれるurl情報を蔵書詳細画面で改めてREST APIを使用して取得する形で実装していきます。<br>蔵書詳細画面で取得したデータのパースに関してはJSONデータをモデルクラスに一発変換してくれるライブラリを使ってJSONObjectでの実装の手間を軽くする方法を使います。<br>また、検索結果一覧画面で表示するデータも増えてきたため、まとめてデータを持てるようにモデルクラスを作成して管理します。</p>\n<p>まずは、JSON文字列の簡単パースライブラリ<strong>Gson</strong>を導入します。<br>プロジェクトからapp階層の<code>build.gradle</code>を開き、”dependencies” の “{}”内に以下のコードを記述します<br>開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp01.png\" width=\"550\" title=\"IncludeokHttp\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを追加後、<font color=\"blue\"><strong>Sync Now</strong></font>をクリックしてGSONの導入は完了です。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail06.png\" width=\"550\" title=\"Include GSON\"><br>次に新しくモデルクラスを作成します。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<p>モデルクラスは２つ作成します。<br>一つは検索結果一覧でデータを表示するためのモデルクラス、もう一つは蔵書詳細画面のREST APIをパースするためのモデルクラスです。<br>まずは検索結果一覧に一覧表示しているデータをモデルクラスとしてまとめます。</p>\n<p>クラス名とパッケージを確認したら<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail07.png\" width=\"550\" title=\"Include GSON\"><br>こちらは検索結果一覧画面で利用するモデルクラスとして変数を宣言していきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListMdel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書タイトル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String summary;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書単体リンク</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>クラス名とパッケージを確認したら<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail08.png\" width=\"550\" title=\"Include GSON\"><br>２つ目のクラスは蔵書詳細画面のREST APIデータをパースして使用するためのモデルクラスです。<br><figure class=\"highlight java\"><figcaption><span>DetailDataModal.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailDataModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書単体リンク</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要データ</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> VolumeInfo volumeInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeInfo</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書タイトル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サブタイトル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String subTitle;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書著者リスト</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;String&gt; authors;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書発売日</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String publishedDate;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書概要</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String description;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書ページ数</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> pageCount;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サムネイル画像URL</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ImageLinks imageLinks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイルクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageLinks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書小サイズサムネイル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String smallThumbnail;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サムネイル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String thumbnail;</span><br><span class=\"line\">        <span class=\"comment\">// 中サイズ表示画像</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String medium;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>DetailFragment.java</code>のプログラムを修正する前に”import”設定を修正します。<br><code>ResultListFragment.java</code>と同様に<code>import..</code>の一覧から<br><em>import android.app.Fragment;</em>を削除します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail03.png\" width=\"600\" title=\"Import Change\"><br>次に<font color=\"red\">赤くなった<code>Fragmet</code></font>をクリックし上に表示されるツールチップに従い<br><kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail04.png\" width=\"600\" title=\"Import Change\"><br>ウィンドウに選択肢が表示されたら<strong>Fragment (android.support.v4.app)</strong>を選択します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail05.png\" width=\"600\" title=\"Import Change\"><br><code>DetailFragment.java</code>では取得したAPIデータをパースし、一旦タイトルをログに出力させてみます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"comment\">// APIの検索に使うISBNコード</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String isbn;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">// APIのデータ取得後処理を行うためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DetailFragment <span class=\"title\">getInstance</span><span class=\"params\">(String selfLink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// DetailFragmentインスタンスを生成</span></span><br><span class=\"line\">        DetailFragment fragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">        <span class=\"comment\">// DetailFragmentに渡すデータ格納クラスを生成</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列データを連携データにセット</span></span><br><span class=\"line\">        args.putString(BUNDLE_KEY, selfLink);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをDetailFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したResultListFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DetailFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"BUNDLE_SELFLINK\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            selfLink = getArguments().getString(BUNDLE_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// selfLinkが空の場合は検索結果一覧画面に強制バック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(selfLink)) &#123;</span><br><span class=\"line\">            getFragmentManager().popBackStack();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        titleText = getView().findViewById(R.id.DetailTitle);</span><br><span class=\"line\">        subTitleText = getView().findViewById(R.id.DetailSubTitle);</span><br><span class=\"line\">        authorText = getView().findViewById(R.id.DetailAuthor);</span><br><span class=\"line\">        descriptText = getView().findViewById(R.id.DetailDescription);</span><br><span class=\"line\">        pageText = getView().findViewById(R.id.DetailPageText);</span><br><span class=\"line\">        publishDateText = getView().findViewById(R.id.DetailPublishDateText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentから取得したselfLinkURLにREST API通信を行う</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(selfLink).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; titleList, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleList = titleList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> titleList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResultListModel&gt; resultList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;ResultListModel&gt; resultList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resultList = resultList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(titleList.get(i));</span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(resultList.get(i).title);</span><br><span class=\"line\">        summaryView.setText(resultList.get(i).summary);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果一覧データ</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResultListModel&gt; resultList;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(getContext()</span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書詳細画面用Fragmentをインスタンス化</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        DetailFragment detailFragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        DetailFragment detailFragment = DetailFragment.getInstance(resultList.get(i).selfLink);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager</span></span><br><span class=\"line\">        FragmentManager fm = getFragmentManager();</span><br><span class=\"line\">        <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"comment\">// Fragmentを表示させるViewのidとFragmentクラスを設定</span></span><br><span class=\"line\">        ft.replace(R.id.FragmentContainer, detailFragment);</span><br><span class=\"line\">        <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">        ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// FragmentManagerに反映</span></span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 蔵書モデルクラスリスト</span></span><br><span class=\"line\">            resultList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書データクラスをインスタンス化</span></span><br><span class=\"line\">                    ResultListModel resultData = <span class=\"keyword\">new</span> ResultListModel();</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルをモデルクラスに代入</span></span><br><span class=\"line\">                    resultData.title = volumeInfo.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 個体蔵書データURLをモデルクラスに代入</span></span><br><span class=\"line\">                    resultData.selfLink = item.getString(<span class=\"string\">\"selfLink\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// データに\"description\"キーが含まれている場合は情報を代入</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (volumeInfo.has(<span class=\"string\">\"description\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 概要をモデルクラスに代入</span></span><br><span class=\"line\">                        resultData.summary = volumeInfo.getString(<span class=\"string\">\"description\"</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// \"description\"キーが含まれていない場合は空文字データを代入</span></span><br><span class=\"line\">                        resultData.summary = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書情報をリストに登録</span></span><br><span class=\"line\">                    resultList.add(resultData);</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), resultList);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記コード修正が終わったら動作確認してみます。<br>正常に処理が実行されれば蔵書詳細画面に遷移し、<strong>Logcat</strong>に検索結果一覧で選択した蔵書のタイトルが表示されると思います。</p>\n<p>AndroidアプリではREST API通信を行い取得したデータをGsonというライブラリを利用することで簡単にパースすることができます。<br>ただGsonでパースするときには取得データと同じ階層構造を指定したクラスを作成して上げる必要があるので期待通りパースされない場合、まずJSONデータと作成したクラスの階層構造をお確認すると良いでしょう。<br>また取得するデータキーとクラスの変数名を合わせて実装する必要があるので入力ミスにも注意が必要です。</p>\n<p>今回の実装で便利なUtilクラスを使いましたので紹介です、<code>DetailFragment.java</code>において”selfLink”変数にデータが格納されているか判定するために<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextUtils.isEmpty(selfLink)</span><br></pre></td></tr></table></figure></p>\n<p>という実装をしています、<code>TextUtils</code>はString型変数の処理で便利な機能が揃っており上記のメソッドでは、引数の内容が”null”や空文字列かを判定し”true”を返却してくれます。<br>多く使うメソッドはこの<code>TextUtils.isEmpty()</code>が多くなると思いますが、判定処理を完結しにてくれるのでとても有効です。</p>\n<p>続いて蔵書詳細データを画面のTextViewにセットしていきます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// MainThreadに処理を渡し画面にデータを反映する</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> ReflectDetail(detailData));</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// REST APIで取得したデータを画面に反映するためのクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書詳細データ</span></span><br><span class=\"line\">        DetailDataModel detailData;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectDetail</span><span class=\"params\">(DetailDataModel detailData)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.detailData = detailData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// タイトルを反映</span></span><br><span class=\"line\">            titleText.setText(detailData.volumeInfo.title);</span><br><span class=\"line\">            <span class=\"comment\">// サブタイトルが取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.subTitle)) &#123;</span><br><span class=\"line\">                subTitleText.setText(detailData.volumeInfo.subTitle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 概要が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.description)) &#123;</span><br><span class=\"line\">                descriptText.setText(detailData.volumeInfo.description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 著作者名が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (detailData.volumeInfo.authors != <span class=\"keyword\">null</span> &amp;&amp; detailData.volumeInfo.authors.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                String authorString = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">                <span class=\"comment\">// 著作者名が複数設定されていう場合があるので繰り返し処理で全て表示する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String author : detailData.volumeInfo.authors) &#123;</span><br><span class=\"line\">                    authorString += author + <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                authorText.setText(authorString);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ページ数を反映</span></span><br><span class=\"line\">            pageText.setText(String.valueOf(detailData.volumeInfo.pageCount));</span><br><span class=\"line\">            <span class=\"comment\">// 発売日が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) &#123;</span><br><span class=\"line\">                publishDateText.setText(detailData.volumeInfo.publishedDate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>蔵書詳細画面に遷移してREST APIのデータを取得できるまでに少し間が空きますが、正常に実装されるとTextViewに文言が反映されます。</p>\n<p>上記の実装では必要なタイミングで<strong>論理演算子(&amp;&amp;)</strong>が使われました、そしてポイントは著作者名リストの<strong>for</strong>文の使い方です。</p>\n<h2><span id=\"for-each\">for-each</span></h2><p>繰り返し処理を実装する方法として”for文”を学習しました、今回の<strong>for-each</strong>文ではコレクション型の変数に登録されている要素の回数分、繰り返し処理を実行する時の実装方法です。<br>コレクション型以外にもMap型(講座の中ではまだ未使用)や配列型の変数でも同様の実装が可能です。<br><strong>for-each</strong>文の実装テンプレート<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (配列要素の型 一時変数 : リスト型の変数) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一時変数にはリスト型変数の要素が0番目〜最後の要素まで代入された状態で繰り返し処理で参照することが可能です。<br>実際には<strong>for-each</strong>文の方が利用頻度は多いと思われます。</p>\n<h2><span id=\"url画像読み込み処理の実装\">URL画像読み込み処理の実装</span></h2><p>このページではActivity → Fragmentの移行に始まり、新規のクラスを作る回数も多かったので非常にコーディングに時間がかかったと思います。<br>それも今回の実装で終わりです！</p>\n<p>Web上にアップロードされた画像をアプリで読み込みむためにも便利なライブラリがあります。<br>本来はBitmapという形式で画像インスタンスを生成し使用しなくなるときにはちゃんとAndroid OSの処理の阻害にならないよう解放する必要があるのですが、<br><strong>Glide</strong>というライブラリを使用することでそういったメモリ管理などの忘れがちな処理を補ってくれます。</p>\n<p>では他のライブラリと同様に<code>build.gradle</code>に依存関係を追加します。<br>プロジェクトからappディレクトリの<code>build.gradle</code>を開き、”dependencies” の “{}”内に以下のコードを記述します<br>開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">27</span></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"kuririnz.xyz.bookdiscovery\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">27</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:design:27.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.github.bumptech.glide:glide:4.6.1'</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">'com.github.bumptech.glide:compiler:4.6.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを追加後、<font color=\"blue\"><strong>Sync Now</strong></font>をクリックして<strong>Glide</strong>の導入は完了です。<br><strong>Glide</strong>の最新版(バージョン4.6.1)を使用する際には<code>dependencies</code>内の<code>implementation &#39;com.android.support:appcompat-v7...&#39;</code>と<code>implementation &#39;com.android.support:design...&#39;</code>の指定バージョンを”27.0.2”に設定する必要があるため、合わせて”compileSdkVersion”、”targetSdkVersion”の指定を<strong>27</strong>に設定しなければいけません。</p>\n<p>これは<strong>Glide</strong>が依存関係を持っているandroid.supportバージョンが<strong>27</strong>であることが原因で、<strong>Glide</strong>の古いバージョンの場合には開発アプリ側の”compileSdkVersion”、”targetSdkVersion”を古いものでも実装が可能だと思われます。</p>\n<p>では<strong>Glide</strong>を使って蔵書詳細画面のImageViewに画像を読み込ませてみます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView detailImage;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\">  </span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\">        publishDateText = getView().findViewById(R.id.DetailPublishDateText);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// REST APIで取得したデータを画面に反映するためのクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">           ...一部省略</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"comment\">// 発売日が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) &#123;</span><br><span class=\"line\">                publishDateText.setText(detailData.volumeInfo.publishedDate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// Glideを使ってWeb上の画像をImageViewに表示させる</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (detailData.volumeInfo.imageLinks != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Glide.with(DetailFragment.<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                        .applyDefaultRequestOptions(RequestOptions.fitCenterTransform())</span><br><span class=\"line\">                        .load(detailData.volumeInfo.imageLinks.medium)</span><br><span class=\"line\">                        .into(detailImage);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>正常に動作した場合、蔵書詳細画面に蔵書の表紙画像が表示されます。</p>\n<p><strong>Glide</strong>はメソッドからメソッドに繋げる形の実装でも画像のURLをImageViewに表示することができます。（変数を挟まなくていいのでコード量が少なくなります）<br><code>with()</code>ではContextを取得できるインスタンスを引数にセットします、<code>load()</code>の引数には画像のURLをセット、最後に<code>into()</code>の引数に画像を表示するImageViewをセットして表示します。<br><code>applyDefaultRequestOptions()</code>は画像の表示設定を指定できます、今回は画像をはい出さずに表示するように”fitCenterTransform”を指定しています。</p>\n<p>以上で、蔵書詳細画面作成の解説は完了です。<br>次の<a href=\"/AndroidCourse/android/10-OrganaizeExperience\">操作性・ユーザ体験の改善</a>ではユーザがアプリを操作する中で気持ちよく操作するための手段として読み込み中を伝えるダイアログや、最後に検索した内容を保持しておくための設定ファイルなどの利用方法を学習します。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>蔵書詳細画面を作成する中でモデルクラスとFragmentの実装を学習します。</p>\n<!-- toc -->\n<ul>\n<li><a href=\"#学習ポイント\">学習ポイント</a></li>\n<li><a href=\"#検索結果一覧画面の構築移行\">検索結果一覧画面の構築移行</a><ul>\n<li><a href=\"#fragmentとは\">Fragmentとは</a></li>\n<li><a href=\"#検索結果一覧fragment作成\">検索結果一覧Fragment作成</a></li>\n<li><a href=\"#検索結果一覧画面レイアウト実装\">検索結果一覧画面レイアウト実装</a><ul>\n<li><a href=\"#framelayout-コンポーネント\">FrameLayout コンポーネント</a></li>\n</ul>\n</li>\n<li><a href=\"#検索結果一覧fragment機能実装\">検索結果一覧Fragment機能実装</a></li>\n<li><a href=\"#定数\">定数</a></li>\n<li><a href=\"#context概要\">Context概要</a></li>\n</ul>\n</li>\n<li><a href=\"#蔵書詳細画面作成\">蔵書詳細画面作成</a></li>\n<li><a href=\"#蔵書詳細画面遷移実装\">蔵書詳細画面遷移実装</a></li>\n<li><a href=\"#蔵書詳細画面実装\">蔵書詳細画面実装</a><ul>\n<li><a href=\"#for-each\">for-each</a></li>\n<li><a href=\"#url画像読み込み処理の実装\">URL画像読み込み処理の実装</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<p><a href=\"/AndroidCourse/android/08-AppDataBase\">検索履歴一覧画面の作成</a>からの引き続きの学習ページです。</p>\n<h1 id=\"学習ポイント\"><a href=\"#学習ポイント\" class=\"headerlink\" title=\"学習ポイント\"></a>学習ポイント</h1><ul>\n<li>Fragment</li>\n<li>Fragmentによる画面遷移</li>\n<li>定数</li>\n<li>Gson</li>\n<li>Glide</li>\n</ul>\n<p>複数のデータをひとまとめにして管理するための方法としてモデルクラスを学習します。<br>また、検索結果一覧画面の各蔵書ごとの詳細情報を表示する蔵書詳細画面を作成し、遷移できるように修正していきます、その工程の中でActivity内に配置できるライフサイクルを持ったViewコンポーネント<strong>Fragment</strong>の利用方法と<strong>Fragment</strong>間の画面遷移に関して学習します。</p>\n<h1 id=\"検索結果一覧画面の構築移行\"><a href=\"#検索結果一覧画面の構築移行\" class=\"headerlink\" title=\"検索結果一覧画面の構築移行\"></a>検索結果一覧画面の構築移行</h1><p><a href=\"/AndroidCourse/android/06-TransitionScreen\">検索結果一覧画面の作成</a>ページでActivityを使い画面実装を行なっていましたが、これをそっくり<strong>Fragment</strong>を利用した実装に書き換えます。<br>さらに、複数表示されている検索結果一覧からクリックされた行の蔵書の詳細情報を表示する画面、”蔵書詳細画面”を<strong>Fragment</strong>で実装しこの画面に遷移するようアプリを作り変えていきます。</p>\n<h2 id=\"Fragmentとは\"><a href=\"#Fragmentとは\" class=\"headerlink\" title=\"Fragmentとは\"></a>Fragmentとは</h2><p>FragmentはActivityのようにライフサイクルを持ったViewコンポーネントにあたり、ButtonやListViewなど複数のWidgetやViewを配置することが可能です、またActivity内に複数のFragmentを表示することができるので画面分割の必要な機能を作成する時には活躍が期待されます。</p>\n<p>また、<strong>Fragment</strong>を利用するメリットはActivityに比べてAndroid端末が画面表示するコストが小さくなるため、アプリの強制終了のリスクを多少回避できることも上げられます。</p>\n<p>逆に<strong>Fragment</strong>の利用にあたり注意しなければいけないのはActivityとは別のライフサイクルになるため、Activityがすでに存在しないタイミングで<strong>Fragment</strong>のライフサイクルメソッドが実行され強制終了する可能性があります。<br>また、<strong>Fragment</strong>自身はContextとしての要素は持ち合わせていないため、ActivityやApplicationクラスからContextを取得するなどしてレイアウト表示を実装する必要があります。</p>\n<p>ではまず、検索結果一覧画面を<strong>Fragment</strong>を使った実装に作り変えていきます。</p>\n<h2 id=\"検索結果一覧Fragment作成\"><a href=\"#検索結果一覧Fragment作成\" class=\"headerlink\" title=\"検索結果一覧Fragment作成\"></a>検索結果一覧Fragment作成</h2><p>新しくFragmentクラスを継承した独自クラスのjavaファイルを作成していきます。</p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment01.png\" width=\"500\" title=\"Create New Fragment\">\n<p>新しいFragmentクラスを作成する時の設定項目は以下の通り入力したら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment02.png\" width=\"500\" title=\"Create New Fragment\"></p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>ResultListFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_result_list</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Source Language</td>\n<td>Java</td>\n</tr>\n</tbody>\n</table>\n<p>新しく<code>ResultListFragment.java</code>と<code>fragment_result_list.xml</code>の2ファイルが作成されます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addfragment03.png\" width=\"600\" title=\"Create New Fragment\"></p>\n<h2 id=\"検索結果一覧画面レイアウト実装\"><a href=\"#検索結果一覧画面レイアウト実装\" class=\"headerlink\" title=\"検索結果一覧画面レイアウト実装\"></a>検索結果一覧画面レイアウト実装</h2><p>作成した<code>fragment_resultlist.xml</code>と<code>activity_result_list.xml</code>を編集します。<br><code>fragment_result_list.xml</code>のファイルの場所は以下です。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layou -&gt; fragment_result_list.xml</p>\n</blockquote>\n<p><code>feagment_result_list.xml</code>を表示した時に<strong>LayoutEditor</strong>が表示されたら左下の”Text”タブをクリックしxmlでの編集画面に表示を切り替えます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/editRLfrg01.png\" width=\"600\" title=\"Edit Result List Fragment\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_result_list.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.ResultListFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/FragmentResultListView\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>一覧表示用の”ListView”を配置して画面いっぱいに表示されるように設定します。<br>次にFragmentを表示するactivityのレイアウトを修正していきます。</p>\n<blockquote>\n<p>app -&gt; res -&gt; layou -&gt; activity_result_list.xml</p>\n</blockquote>\n<p>上記レイアウトファイルを表示し、右下の”Design”タブをクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg01.png\" width=\"600\" title=\"Edit Result List Activity\"><br>デザインビューに表示されている<code>ResultListView</code>をクリックし、<kbd>delete</kbd>キーを押下して削除します。<br>何も表示されていない状態になったら、<code>Palette -&gt; Layouts -&gt; FrameLayout</code>から”FrameLayout”をドラッグ&amp;ドロップでデザインビューに表示します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg02.png\" width=\"600\" title=\"Edit Result List Activity\"><br>制約と属性の設定を行います。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/migratefrg03.png\" width=\"600\" title=\"Edit Result List Activity\"> </p>\n<p><strong>FrameLayout</strong>に設定する制約</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">FrameLayoutの辺</th>\n<th style=\"text-align:left\">隣り合わせる箇所</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">上辺</td>\n<td style=\"text-align:left\">画面上端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">左辺</td>\n<td style=\"text-align:left\">画面左端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">下辺</td>\n<td style=\"text-align:left\">画面下端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">右辺</td>\n<td style=\"text-align:left\">画面右端</td>\n</tr>\n</tbody>\n</table>\n<p><strong>FrameLayout</strong>に設定する属性</p>\n<table>\n<thead>\n<tr>\n<th>設定項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ID</td>\n<td>FragmentContainer</td>\n</tr>\n<tr>\n<td>layout_width</td>\n<td>match_constraint</td>\n</tr>\n<tr>\n<td>layout_height</td>\n<td>match_constraint</td>\n</tr>\n</tbody>\n</table>\n<p>これでレイアウトファイルの修正は完了です。</p>\n<h3 id=\"FrameLayout-コンポーネント\"><a href=\"#FrameLayout-コンポーネント\" class=\"headerlink\" title=\"FrameLayout コンポーネント\"></a>FrameLayout コンポーネント</h3><p>先ほどの実装で初めて出てきたコンポーネント”FrameLayout”です。<br>“FrameLayout”はAndroid SDKがリリースされた時からある古いコンポーネントです。<br>他の”ConstraintLayout”や”LinearLayout”、”RelativeLayout”などには子Viewを配置する上での便利な特徴がありますが、”FrameLayout”は特徴がないことが特徴となります。<br>“FrameLayout”での子View配置は左上の角を横/縦の基準(0,0)として正確にポイントを設定して期待する位置に配置する必要があるため、複数のコンポーネント同士を関連付けて配置するのが難しくなります。<br>また、Androidでポイントを指定して配置を行うと、数多く販売されているAndroid端末の全画面サイズに対応仕切れず、レイアウト崩れの原因になってしまうので表示するコンポーネントの少ない場合など細かい配置のないような場合で用いられます。</p>\n<h2 id=\"検索結果一覧Fragment機能実装\"><a href=\"#検索結果一覧Fragment機能実装\" class=\"headerlink\" title=\"検索結果一覧Fragment機能実装\"></a>検索結果一覧Fragment機能実装</h2><p>レイアウトの修正が終わりましたので<code>ResultListFragment.java</code>、<code>ResultListActivity.java</code>ファイルを実装します。<br><code>ResultListFragment.java</code>の実装ほとんどが<code>ResultListActivity.java</code>のプログラムをコピーするだけで問題ないのですが、一部細かい違いがあるのでコピーしてエラーになった箇所など見比べて確認してみてください。</p>\n<p>まずFragmentクラスに少し手を加えていきます。<br><code>ResultListFragment.java</code>のクラス宣言より上に表示されている<code>import..</code>の一覧から<br><em>import android.app.Fragment;</em>を削除します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport01.png\" width=\"600\" title=\"Import Change\"><br>次に<font color=\"red\">赤くなった<code>Fragmet</code></font>をクリックし上に表示されるツールチップに従い<br><kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport02.png\" width=\"600\" title=\"Import Change\"><br>ウィンドウに選択肢が表示されたら<strong>Fragment (android.support.v4.app)</strong>を選択します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/chngimport03.png\" width=\"600\" title=\"Import Change\"> </p>\n<p>Android SDK上にはFragmentクラスが２種類あります。</p>\n<ul>\n<li>android.app.Fragment</li>\n<li>android.support.v4.app.Fragment</li>\n</ul>\n<p>Google者からは後者の”android.support.v4.app.Fragment”の使用を推奨されています。<br>大きは違いとしてAndroid API 16(OS 4.1)以下にもアプリを配信する場合は”android.support.v4.app.Fragment”をimportしてFragmentを使用する必要があります。</p>\n<p>その他の違いとしては以下の通りです。</p>\n<ul>\n<li>android.support.v4.app.Fragmentの方がバグが少ない。</li>\n<li>android.app.Fragmentでは一部メソッドが使えない。</li>\n</ul>\n<p>実装中今までほとんど触れてこなかったimportエリアですが、この部分にはクラス内で利用している外部のクラスを指定する必要があり、ここに対象のクラスがインポートされていないとクラス内部の実装で使用することができません、実装する上で必要なクラスはここで全てインポートします。<br>候補検索など小さなウィンドウから選択して実装する場合は自動的にインポートされるのであまり気にしないでプログラミングして問題ありません。</p>\n<p>では機能の実装を進めていきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_TERM\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResultListFragment <span class=\"title\">getInstance</span><span class=\"params\">(String term)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentインスタンスを生成</span></span><br><span class=\"line\">        ResultListFragment fragment = <span class=\"keyword\">new</span> ResultListFragment();</span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentに渡すデータ格納クラスを生成</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列データを連携データにセット</span></span><br><span class=\"line\">        args.putString(BUNDLE_KEY, term);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをResultListFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したResultListFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fragmentが表示するレイアウトを指定するライフサイクルメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_result_list, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 親となるActivityが生成された後に実行されるライフサイクルメソッド</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列変数を初期化</span></span><br><span class=\"line\">        term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"term\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = getArguments().getString(BUNDLE_KEY, <span class=\"string\">\"Android\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView =  getView().findViewById(R.id.FragmentResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でAPI通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(getContext()</span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListActivity.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓修正↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑修正↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ListView resultListView;</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの表示内容を管理するクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResultListAdapter adapter;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\">    <span class=\"comment\">// メインスレッドに戻ってくるためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// MainActivityから渡されたデータを保持する</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String term;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_result_list);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// 画面遷移時のデータが空でない場合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getIntent().hasExtra(<span class=\"string\">\"terms\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Key:termsにデータがあればValueを代入</span></span><br><span class=\"line\">            term = getIntent().getStringExtra(<span class=\"string\">\"terms\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 画面遷移時のデータがからの場合は \"Android\"と文字列を代入</span></span><br><span class=\"line\">            term = <span class=\"string\">\"Android\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        resultListView = findViewById(R.id.ResultListView);</span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// MainActivityで入力された文字列で検索する様修正</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(<span class=\"string\">\"https://www.googleapis.com/books/v1/volumes?q=\"</span> + term).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 失敗した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功した時の命令</span></span><br><span class=\"line\">                <span class=\"comment\">// Google Books APIから取得したデータをログに出力</span></span><br><span class=\"line\">                <span class=\"comment\">// Jsonのパースが失敗してアプリの強制終了を回避する機能</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// JsonデータをJSONObjectに変換</span></span><br><span class=\"line\">                    JSONObject rootJson = <span class=\"keyword\">new</span> JSONObject(response.body().string());</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonデータから蔵書リストデータ\"items\"を取得</span></span><br><span class=\"line\">                    JSONArray items = rootJson.getJSONArray(<span class=\"string\">\"items\"</span>);</span><br><span class=\"line\">                    Log.d(<span class=\"string\">\"Success API Response\"</span>, <span class=\"string\">\"APIから取得したデータの件数:\"</span> +</span><br><span class=\"line\">                            items.length());</span><br><span class=\"line\">                    <span class=\"comment\">// メインスレッドで実行する処理をインスタンス化</span></span><br><span class=\"line\">                    ReflectResult reflectResult = <span class=\"keyword\">new</span> ReflectResult(items);</span><br><span class=\"line\">                    <span class=\"comment\">// Handlerにてメインスレッドに処理を戻し、ReflectResultのrunメソッドを実行する</span></span><br><span class=\"line\">                    handler.post(reflectResult);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Jsonパースの時にエラーが発生したらログに出力する</span></span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でAPI通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// FragmentContainerにResultListFragmentを表示させる処理</span></span><br><span class=\"line\">        ResultListFragment resultListFragment = ResultListFragment.getInstance(term);</span><br><span class=\"line\">        <span class=\"comment\">// Activity内で表示するFragmentを管理するクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentManager fm = getSupportFragmentManager();</span><br><span class=\"line\">        <span class=\"comment\">// Fragmentを表示、または別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"comment\">// FragmentManagerに新しいFragmentを追加</span></span><br><span class=\"line\">        <span class=\"comment\">// FragmentContainerにResultListFragmentを表示するよう設定</span></span><br><span class=\"line\">        ft.add(R.id.FragmentContainer, resultListFragment);</span><br><span class=\"line\">        <span class=\"comment\">// 上記の設定でFragmentManagerを更新</span></span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(ResultListActivity.<span class=\"keyword\">this</span></span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// リストデータを初期化</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(ResultListActivity.<span class=\"keyword\">this</span>, titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記のコード修正が終わったら動作確認します。<br>正常に検索結果画面に遷移できるか確認してみましょう。</p>\n<p>今回Fragmentの実装では２つのライフサイクルメソッドを利用しました、<a href=\"/AndroidCourse/android/02-AndroidConcept\">Androidの概念</a>で一度ライフサイクルの図をご紹介しましたが、<br>Fragmentの<code>onCreateView()</code>、<code>onActivityCreated()</code>はActivityの<code>onCreate()</code>メソッドの後に実行されます。</p>\n<p>Fragmentで画面の要素を取得するためには<code>getView()</code>メソッドを利用します。<br><code>getView()</code>メソッドはFragment内のどのライフサイクルでも参照できますが、<code>onAttach()</code>〜<code>onCtreateView()</code>のライフサイクルメソッドでは、ActivityにFragmentのレイアウトが反映されていないため”null”が返却されるので注意が必要です。</p>\n<p>またFragmentは引数のないコンストラクタを必ず用意しないといけません。<br>Android端末ではメモリが不足した場合にActivityやFragmentを一旦破棄し必要になったタイミングで再度生成される仕組みになっており、この時にFragmentは引数のないコンストラクタを実行しインスタンス化を行っています。<br>メモリからFragmentが破棄されても<code>Bundle</code>は破棄されずに残るため、<code>fragment.setArguments(Bundle)</code>を使いFragmentでデータ渡しを行う必要があります。<br>Fragmentのインスタンス化時に引数ありのコンストラクタを使用していた場合、万が一メモリ不足からFragmentが再生成された時にアプリが強制終了する可能性が考えられます。<br>画面が回転した時など画面サイズに変更が加わった場合などを考慮する場合は注意して実装する必要がある。</p>\n<h2 id=\"定数\"><a href=\"#定数\" class=\"headerlink\" title=\"定数\"></a>定数</h2><p>文字通り宣言時にセットした値を変更することができない要素。<br>上記で実装した通り<strong>final</strong>のキーワードを変数宣言時に記述することで定数としての扱いになります。<br>また<strong>static</strong>のキーワードをつけることでクラスがインスタンス化されていなくても参照することができるようになります。<br>java,Androidでは定数と変数を見分けやすくするために全て大文字で定数名を宣言することが多いです。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_TERM\"</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Context概要\"><a href=\"#Context概要\" class=\"headerlink\" title=\"Context概要\"></a>Context概要</h2><p>Androidアプリ開発の中ではxmlレイアウトをjavaファイルで参照する時などには必ず必要になる”Context”は一体何か。<br>Activity,Service,Applicationの親クラスであり、アプリケーショングローバル情報へアクセスするためのインターフェースの役割を持つクラス。<br>アプリケーションのグローバル情報とは</p>\n<ul>\n<li>パーミッション(インターネット接続などの許可設定)</li>\n<li>アプリリソースへのアクセス(画像やレイアウトなど”res”ディレクトリ配下の要素を参照するための機能)</li>\n<li>アプリ情報(コンポーネント、プロセス名、テーマなど)</li>\n</ul>\n<p>などが該当します。<br>Contextを利用することで上記の情報を参照することが可能になります。</p>\n<p>Contextの取得方法には<code>getActivity()[Activity内ではthis]</code>,<code>getApplicationContext()</code>などいくつか方法がありますが、各Contextは利用可能な寿命が違っており、Activityを対象にしたContext(<code>getActivity()</code>で取得したContext)の場合はActivityが破棄されると同時にContextも破棄されます。<br>対して<code>getApplicationContext()</code>ではApplicationクラスに依存するため、アプリを破棄するまで使用できます。<br>現状では影響のあるプログラムはありませんが、ActivityとApplicationに設定されているテーマ(Theme)がそれぞれ違う場合に期待しない表示になるなどの不具合が発生する可能性が考えられます。</p>\n<p>あまり使われないメソッドですが<code>getBaseContext()</code>というメソッドも存在しますが、深い話しで使用は推奨されていないようです。。。</p>\n<p>Contextはレイアウトなどの”res”ディレクトリ内を参照したりレイアウトをjavaファイルで使うための便利かつ必要なものと認識して利用すれば問題ありません。<br>実際にアプリ開発で内部情報に影響されることはないと思われます。</p>\n<h1 id=\"蔵書詳細画面作成\"><a href=\"#蔵書詳細画面作成\" class=\"headerlink\" title=\"蔵書詳細画面作成\"></a>蔵書詳細画面作成</h1><p>ActivityからFragmentへの移行が完了したら蔵書詳細画面を作成していきます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/detailExample.png\" width=\"250\" title=\"Detail Example\"></p>\n<p>検索結果画面の時と同様にメニューもしくはプロジェクトツリーが表示されているウィンドウで右クリック(macでは２本指でクリック)から以下の項目を選択します。</p>\n<blockquote>\n<p>New -&gt; Fragment -&gt; Fragment(Blank)</p>\n</blockquote>\n<p>作成するFragment名や同時に作成されるレイアウトファイル名を入力し、以下の項目の設定を修正したら<code>Finish</code>をクリックします。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail01.png\" width=\"600\" title=\"Add Detail Screen\"> </p>\n<table>\n<thead>\n<tr>\n<th>項目</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Fragment Name</td>\n<td>DetailFragment</td>\n</tr>\n<tr>\n<td>Create Layout XML?</td>\n<td>チェックを<font color=\"blue\">つける</font></td>\n</tr>\n<tr>\n<td>Fragment Layout Name</td>\n<td>fragment_detail</td>\n</tr>\n<tr>\n<td>Include fragment factory methods?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n<tr>\n<td>Include interface callbacks?</td>\n<td>チェックを<font color=\"red\">つけない</font></td>\n</tr>\n</tbody>\n</table>\n<p><code>DetailFragment.java</code>と<code>fragment_detail.xml</code>ファイルが生成されます。<br>まずは蔵書詳細画面のレイアウトを修正していきます。<br><code>fragment_detail.xml</code>を開き、<em>Design</em>タブが表示されている場合は<em>Text</em>タブをクリックしてxmlファイルの実装画面に切り替えます。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail02.png\" width=\"600\" title=\"Add Detail Screen\"><br><figure class=\"highlight xml\"><figcaption><span>fragment_detail.xml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.DetailFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- <span class=\"doctag\">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/hello_blank_fragment\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓ --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\"kuririnz.xyz.bookdiscovery.DetailFragment\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書タイトル\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:weightSum</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"fitCenter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:adjustViewBounds</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailSubTitle\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書サブタイトル\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailAuthor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書作者名\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailDescription\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:lines</span>=<span class=\"string\">\"10\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">tools:text</span>=<span class=\"string\">\"蔵書概要を表示\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"8dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPageHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentLeft</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"ページ数：\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPageText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">\"@id/DetailPageHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">tools:text</span>=<span class=\"string\">\"53ページ\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPublishDateHeader\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_toLeftOf</span>=<span class=\"string\">\"@id/DetailPublishDateText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"発売日：\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/DetailPublishDateText\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">tools:text</span>=<span class=\"string\">\"2018/02/06\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- ↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑ --&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>これで蔵書詳細画面のレイアウトは完了です。</p>\n<p>“LinearLayout”や”RelativeLayout”を使用して画面レイアウトを作成するとこのようにLayoutの中にLayoutやTextViewなどのコンポーネントを配置するネスト構造での実装が必要になります。<br>“ConstraintLayout”ではネスト構造にならずにレイアウトを作成することが可能です。</p>\n<p>今回出てきた属性について簡単に解説していきます。</p>\n<table>\n<thead>\n<tr>\n<th>対象のView</th>\n<th>属性</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LinearLayout</td>\n<td>android:weightSum</td>\n<td>縦または横方向に対して設定された数値分に均等分割する。縦横方向はorientation属性から判定される</td>\n</tr>\n<tr>\n<td>weightSum属性をセットしたLinearLayoutの子View</td>\n<td>android:layout_weight</td>\n<td>親のLinearLayoutで設定されたweightSumのうち占有する割合値を設定する、有効にする場合には”layout_width”または”layout_height”を0dpにする必要がある。android:layout_alignParentLeft</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_alignParentLeft</td>\n<td>親のRelativeLayoutの左端に自Viewの左端を合わせて配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_alignParentRight</td>\n<td>親のRelativeLayoutの右端に自Viewの右端を合わせて配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_toRightOf</td>\n<td>設定したidを持つViewの右側に自Viewを配置する</td>\n</tr>\n<tr>\n<td>RelativeLayoutの子View</td>\n<td>android:layout_toLeftOf</td>\n<td>設定したidを持つViewの左側に自Viewを配置する</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"蔵書詳細画面遷移実装\"><a href=\"#蔵書詳細画面遷移実装\" class=\"headerlink\" title=\"蔵書詳細画面遷移実装\"></a>蔵書詳細画面遷移実装</h1><p>蔵書検索結果一覧画面から行アイテムをクリックしたら蔵書詳細画面に遷移するように実装を修正します。<br><figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">    Toast.makeText(getContext()</span><br><span class=\"line\">            , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">            , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書詳細画面用Fragmentをインスタンス化</span></span><br><span class=\"line\">    DetailFragment detailFragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">    <span class=\"comment\">// support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager</span></span><br><span class=\"line\">    FragmentManager fm = getFragmentManager();</span><br><span class=\"line\">    <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">    FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">    <span class=\"comment\">// Fragmentを表示させるViewのidとFragmentクラスを設定</span></span><br><span class=\"line\">    ft.replace(R.id.FragmentContainer, detailFragment);</span><br><span class=\"line\">    <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">    ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// FragmentManagerに反映</span></span><br><span class=\"line\">    ft.commit();</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...一部省略</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。</p>\n<p>これで自動的に表示していたFragmentがスタック（破棄せず残っているデータ）され、スタックされたFragmentが残っている場合はActivityではなく、Fragmentが一つ戻るように実装されました。<br>Fragmentには”ID”や”TAG”という情報を設定することができ、一つ前のFragmentではなくスタックされいているFragmentから”ID”や”TAG”を指定して画面バックを行うことも可能です。</p>\n<h1 id=\"蔵書詳細画面実装\"><a href=\"#蔵書詳細画面実装\" class=\"headerlink\" title=\"蔵書詳細画面実装\"></a>蔵書詳細画面実装</h1><p>蔵書の詳細情報として著作者や概要などを表示していきます。<br>蔵書を一つを特定するために今回は検索結果一覧画面でREST APIから取得したデータに含まれる”selfLink”キーに含まれるurl情報を蔵書詳細画面で改めてREST APIを使用して取得する形で実装していきます。<br>蔵書詳細画面で取得したデータのパースに関してはJSONデータをモデルクラスに一発変換してくれるライブラリを使ってJSONObjectでの実装の手間を軽くする方法を使います。<br>また、検索結果一覧画面で表示するデータも増えてきたため、まとめてデータを持てるようにモデルクラスを作成して管理します。</p>\n<p>まずは、JSON文字列の簡単パースライブラリ<strong>Gson</strong>を導入します。<br>プロジェクトからapp階層の<code>build.gradle</code>を開き、”dependencies” の “{}”内に以下のコードを記述します<br>開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><img src=\"/AndroidCourse/android/07-AsyncProcess/includeokHttp01.png\" width=\"550\" title=\"IncludeokHttp\"><br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを追加後、<font color=\"blue\"><strong>Sync Now</strong></font>をクリックしてGSONの導入は完了です。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail06.png\" width=\"550\" title=\"Include GSON\"><br>次に新しくモデルクラスを作成します。</p>\n<blockquote>\n<p>プロジェクトウィンドウ右クリック &gt; New &gt; Java Class</p>\n</blockquote>\n<p>モデルクラスは２つ作成します。<br>一つは検索結果一覧でデータを表示するためのモデルクラス、もう一つは蔵書詳細画面のREST APIをパースするためのモデルクラスです。<br>まずは検索結果一覧に一覧表示しているデータをモデルクラスとしてまとめます。</p>\n<p>クラス名とパッケージを確認したら<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail07.png\" width=\"550\" title=\"Include GSON\"><br>こちらは検索結果一覧画面で利用するモデルクラスとして変数を宣言していきます。<br><figure class=\"highlight java\"><figcaption><span>ResultListMdel.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書タイトル</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String summary;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書単体リンク</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>クラス名とパッケージを確認したら<code>OK</code>をクリック<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail08.png\" width=\"550\" title=\"Include GSON\"><br>２つ目のクラスは蔵書詳細画面のREST APIデータをパースして使用するためのモデルクラスです。<br><figure class=\"highlight java\"><figcaption><span>DetailDataModal.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailDataModel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書単体リンク</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要データ</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> VolumeInfo volumeInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書概要クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolumeInfo</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書タイトル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サブタイトル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String subTitle;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書著者リスト</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> List&lt;String&gt; authors;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書発売日</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String publishedDate;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書概要</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String description;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書ページ数</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> pageCount;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サムネイル画像URL</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ImageLinks imageLinks;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 蔵書サムネイルクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageLinks</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書小サイズサムネイル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String smallThumbnail;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書サムネイル</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String thumbnail;</span><br><span class=\"line\">        <span class=\"comment\">// 中サイズ表示画像</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String medium;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>DetailFragment.java</code>のプログラムを修正する前に”import”設定を修正します。<br><code>ResultListFragment.java</code>と同様に<code>import..</code>の一覧から<br><em>import android.app.Fragment;</em>を削除します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail03.png\" width=\"600\" title=\"Import Change\"><br>次に<font color=\"red\">赤くなった<code>Fragmet</code></font>をクリックし上に表示されるツールチップに従い<br><kbd>Alt</kbd><kbd>+</kbd><kbd>Enter</kbd>(Macは<kbd>option</kbd><kbd>+</kbd><kbd>Enter</kbd>)を入力<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail04.png\" width=\"600\" title=\"Import Change\"><br>ウィンドウに選択肢が表示されたら<strong>Fragment (android.support.v4.app)</strong>を選択します。<br><img src=\"/AndroidCourse/android/09-RefactorFragment/addDetail05.png\" width=\"600\" title=\"Import Change\"><br><code>DetailFragment.java</code>では取得したAPIデータをパースし、一旦タイトルをログに出力させてみます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"comment\">// APIの検索に使うISBNコード</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String isbn;</span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\">    <span class=\"comment\">// APIのデータ取得後処理を行うためのHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler handler;</span><br><span class=\"line\">    <span class=\"comment\">// OkHttp通信クライアント</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OkHttpClient okHttpClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// スタティックコンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DetailFragment <span class=\"title\">getInstance</span><span class=\"params\">(String selfLink)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// DetailFragmentインスタンスを生成</span></span><br><span class=\"line\">        DetailFragment fragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">        <span class=\"comment\">// DetailFragmentに渡すデータ格納クラスを生成</span></span><br><span class=\"line\">        Bundle args = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">        <span class=\"comment\">// 検索文字列データを連携データにセット</span></span><br><span class=\"line\">        args.putString(BUNDLE_KEY, selfLink);</span><br><span class=\"line\">        <span class=\"comment\">// データ格納クラスをDetailFragmentインスタンスにセット</span></span><br><span class=\"line\">        fragment.setArguments(args);</span><br><span class=\"line\">        <span class=\"comment\">// 生成したResultListFragmentを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fragment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DetailFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Required empty public constructor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Inflate the layout for this fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerをインスタンス化</span></span><br><span class=\"line\">        handler = <span class=\"keyword\">new</span> Handler();</span><br><span class=\"line\">        <span class=\"comment\">// 連携データが存在するか確認</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getArguments() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 連携データ内から\"BUNDLE_SELFLINK\"キーのデータを代入、なければ\"Android\"と文字列を代入</span></span><br><span class=\"line\">            selfLink = getArguments().getString(BUNDLE_KEY, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// selfLinkが空の場合は検索結果一覧画面に強制バック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(selfLink)) &#123;</span><br><span class=\"line\">            getFragmentManager().popBackStack();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// xmlファイルのコンポーネントと関連付け</span></span><br><span class=\"line\">        titleText = getView().findViewById(R.id.DetailTitle);</span><br><span class=\"line\">        subTitleText = getView().findViewById(R.id.DetailSubTitle);</span><br><span class=\"line\">        authorText = getView().findViewById(R.id.DetailAuthor);</span><br><span class=\"line\">        descriptText = getView().findViewById(R.id.DetailDescription);</span><br><span class=\"line\">        pageText = getView().findViewById(R.id.DetailPageText);</span><br><span class=\"line\">        publishDateText = getView().findViewById(R.id.DetailPublishDateText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// OkHttp通信クライアントをインスタンス化</span></span><br><span class=\"line\">        okHttpClient = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\">        <span class=\"comment\">// 通信するための情報</span></span><br><span class=\"line\">        <span class=\"comment\">// ResultListFragmentから取得したselfLinkURLにREST API通信を行う</span></span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request.Builder().url(selfLink).build();</span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>ResultListAdapter.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ListViewの描画に必要な変数を宣言</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ(インスタンス時に呼び出されるメソッドのようなもの)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;String&gt; titleList, List&lt;String&gt; summaryList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleList = titleList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.summaryList = summaryList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> titleList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResultListModel&gt; resultList;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater layoutInflater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultListAdapter</span><span class=\"params\">(Context context, List&lt;ResultListModel&gt; resultList)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resultList = resultList;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.layoutInflater = LayoutInflater.from(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一覧表示する要素数を返却する</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> i, View view, ViewGroup viewGroup)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 各行の表示レイアウト読み込みや、描画情報の設定を実装する</span></span><br><span class=\"line\">        <span class=\"comment\">// getViewで返却されたViewがListViewに表示される</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// viewの中身が空かチェック</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// viewがレイアウトを読み込んでいない場合は\"row_result_list\"を読み込む</span></span><br><span class=\"line\">            view = layoutInflater.inflate(R.layout.row_result_list, viewGroup, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// row_result_listのTitleとSummaryに文言を代入</span></span><br><span class=\"line\">        TextView titleView = view.findViewById(R.id.RowListTitle);</span><br><span class=\"line\">        TextView summaryView = view.findViewById(R.id.RowListSummary);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(titleList.get(i));</span><br><span class=\"line\">        summaryView.setText(summaryList.get(i));</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        titleView.setText(resultList.get(i).title);</span><br><span class=\"line\">        summaryView.setText(resultList.get(i).summary);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 文字情報を代入されたviewを返却</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><figcaption><span>ResultListFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">AdapterView</span>.<span class=\"title\">OnItemClickListener</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果一覧データ</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ResultListModel&gt; resultList;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\">    <span class=\"comment\">// ListViewの各行をクリックした時の命令を実装</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; adapterView, View view, <span class=\"keyword\">int</span> i, <span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// クリックした行番号をToastで表示する</span></span><br><span class=\"line\">        Toast.makeText(getContext()</span><br><span class=\"line\">                , (i + <span class=\"number\">1</span>) + <span class=\"string\">\"行目をクリックしました\"</span></span><br><span class=\"line\">                , Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書詳細画面用Fragmentをインスタンス化</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        DetailFragment detailFragment = <span class=\"keyword\">new</span> DetailFragment();</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        DetailFragment detailFragment = DetailFragment.getInstance(resultList.get(i).selfLink);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        <span class=\"comment\">// support.v4.app.Fragment内ではgetFragmentManager = Activity.getSupportFragmentManager</span></span><br><span class=\"line\">        FragmentManager fm = getFragmentManager();</span><br><span class=\"line\">        <span class=\"comment\">// 別のFragmentに遷移するためのクラスをインスタンス化</span></span><br><span class=\"line\">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"comment\">// Fragmentを表示させるViewのidとFragmentクラスを設定</span></span><br><span class=\"line\">        ft.replace(R.id.FragmentContainer, detailFragment);</span><br><span class=\"line\">        <span class=\"comment\">// 表示していたFragmentをバックスタックに追加</span></span><br><span class=\"line\">        ft.addToBackStack(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// FragmentManagerに反映</span></span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 検索結果をListViewに反映するメインスレッドの処理クラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectResult</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧タイトルデータリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; titleList;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書一覧概要データリスト</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; summaryList;</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectResult</span><span class=\"params\">(JSONArray items)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            titleList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            summaryList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// 蔵書モデルクラスリスト</span></span><br><span class=\"line\">            resultList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// Jsonのパースエラーが発生した時に備えてtry~catchする</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 蔵書リストの件数分繰り返しタイトルをログ出力する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; items.length(); i ++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書リストから i番目のデータを取得</span></span><br><span class=\"line\">                    JSONObject item = items.getJSONObject(i);</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書のi番目データから蔵書情報のグループを取得</span></span><br><span class=\"line\">                    JSONObject volumeInfo = item.getJSONObject(<span class=\"string\">\"volumeInfo\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// タイトルデータをリストに追加</span></span><br><span class=\"line\">                    titleList.add(volumeInfo.getString(<span class=\"string\">\"title\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">// 概要データをリストに追加</span></span><br><span class=\"line\">                    summaryList.add(volumeInfo.getString(<span class=\"string\">\"description\"</span>));</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書データクラスをインスタンス化</span></span><br><span class=\"line\">                    ResultListModel resultData = <span class=\"keyword\">new</span> ResultListModel();</span><br><span class=\"line\">                    <span class=\"comment\">// タイトルをモデルクラスに代入</span></span><br><span class=\"line\">                    resultData.title = volumeInfo.getString(<span class=\"string\">\"title\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 個体蔵書データURLをモデルクラスに代入</span></span><br><span class=\"line\">                    resultData.selfLink = item.getString(<span class=\"string\">\"selfLink\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// データに\"description\"キーが含まれている場合は情報を代入</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (volumeInfo.has(<span class=\"string\">\"description\"</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 概要をモデルクラスに代入</span></span><br><span class=\"line\">                        resultData.summary = volumeInfo.getString(<span class=\"string\">\"description\"</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// \"description\"キーが含まれていない場合は空文字データを代入</span></span><br><span class=\"line\">                        resultData.summary = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 蔵書情報をリストに登録</span></span><br><span class=\"line\">                    resultList.add(resultData);</span><br><span class=\"line\">                    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示する情報をまとめるAdapterをインスタンス化</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓削除↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), titleList, summaryList);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑削除↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            adapter = <span class=\"keyword\">new</span> ResultListAdapter(getContext(), resultList);</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            <span class=\"comment\">// ListViewに表示情報をまとめたAdapterをセット</span></span><br><span class=\"line\">            resultListView.setAdapter(adapter);</span><br><span class=\"line\">            <span class=\"comment\">// ListViewに行をクリックした時のイベントを登録</span></span><br><span class=\"line\">            resultListView.setOnItemClickListener(ResultListFragment.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上記コード修正が終わったら動作確認してみます。<br>正常に処理が実行されれば蔵書詳細画面に遷移し、<strong>Logcat</strong>に検索結果一覧で選択した蔵書のタイトルが表示されると思います。</p>\n<p>AndroidアプリではREST API通信を行い取得したデータをGsonというライブラリを利用することで簡単にパースすることができます。<br>ただGsonでパースするときには取得データと同じ階層構造を指定したクラスを作成して上げる必要があるので期待通りパースされない場合、まずJSONデータと作成したクラスの階層構造をお確認すると良いでしょう。<br>また取得するデータキーとクラスの変数名を合わせて実装する必要があるので入力ミスにも注意が必要です。</p>\n<p>今回の実装で便利なUtilクラスを使いましたので紹介です、<code>DetailFragment.java</code>において”selfLink”変数にデータが格納されているか判定するために<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextUtils.isEmpty(selfLink)</span><br></pre></td></tr></table></figure></p>\n<p>という実装をしています、<code>TextUtils</code>はString型変数の処理で便利な機能が揃っており上記のメソッドでは、引数の内容が”null”や空文字列かを判定し”true”を返却してくれます。<br>多く使うメソッドはこの<code>TextUtils.isEmpty()</code>が多くなると思いますが、判定処理を完結しにてくれるのでとても有効です。</p>\n<p>続いて蔵書詳細データを画面のTextViewにセットしていきます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// データの取得後の命令を実装</span></span><br><span class=\"line\">        Callback callBack = <span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 通信に失敗した原因をログに出力</span></span><br><span class=\"line\">                Log.e(<span class=\"string\">\"failure API Response\"</span>, e.getLocalizedMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// JsonパースライブラリGsonのインスタンス化</span></span><br><span class=\"line\">                Gson gson = <span class=\"keyword\">new</span> Gson();</span><br><span class=\"line\">                <span class=\"comment\">// 返却されたJson文字列を一旦変数に代入</span></span><br><span class=\"line\">                String jsonString = response.body().string();</span><br><span class=\"line\">                <span class=\"comment\">// DetailDataModelクラスに代入</span></span><br><span class=\"line\">                DetailDataModel detailData = gson.fromJson(jsonString, DetailDataModel.class);</span><br><span class=\"line\">                <span class=\"comment\">// パースが正常に行えたかLogcatに出力して確認。</span></span><br><span class=\"line\">                Log.d(<span class=\"string\">\"DetailFragment parse\"</span>, detailData.volumeInfo.title);</span><br><span class=\"line\">                <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">                <span class=\"comment\">// MainThreadに処理を渡し画面にデータを反映する</span></span><br><span class=\"line\">                handler.post(<span class=\"keyword\">new</span> ReflectDetail(detailData));</span><br><span class=\"line\">                <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 非同期処理でREST API通信を実行</span></span><br><span class=\"line\">        okHttpClient.newCall(request).enqueue(callBack);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"comment\">// REST APIで取得したデータを画面に反映するためのクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 蔵書詳細データ</span></span><br><span class=\"line\">        DetailDataModel detailData;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// コンストラクタ</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReflectDetail</span><span class=\"params\">(DetailDataModel detailData)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.detailData = detailData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// タイトルを反映</span></span><br><span class=\"line\">            titleText.setText(detailData.volumeInfo.title);</span><br><span class=\"line\">            <span class=\"comment\">// サブタイトルが取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.subTitle)) &#123;</span><br><span class=\"line\">                subTitleText.setText(detailData.volumeInfo.subTitle);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 概要が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.description)) &#123;</span><br><span class=\"line\">                descriptText.setText(detailData.volumeInfo.description);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 著作者名が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (detailData.volumeInfo.authors != <span class=\"keyword\">null</span> &amp;&amp; detailData.volumeInfo.authors.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                String authorString = <span class=\"keyword\">new</span> String();</span><br><span class=\"line\">                <span class=\"comment\">// 著作者名が複数設定されていう場合があるので繰り返し処理で全て表示する</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String author : detailData.volumeInfo.authors) &#123;</span><br><span class=\"line\">                    authorString += author + <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                authorText.setText(authorString);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// ページ数を反映</span></span><br><span class=\"line\">            pageText.setText(String.valueOf(detailData.volumeInfo.pageCount));</span><br><span class=\"line\">            <span class=\"comment\">// 発売日が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) &#123;</span><br><span class=\"line\">                publishDateText.setText(detailData.volumeInfo.publishedDate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>蔵書詳細画面に遷移してREST APIのデータを取得できるまでに少し間が空きますが、正常に実装されるとTextViewに文言が反映されます。</p>\n<p>上記の実装では必要なタイミングで<strong>論理演算子(&amp;&amp;)</strong>が使われました、そしてポイントは著作者名リストの<strong>for</strong>文の使い方です。</p>\n<h2 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for-each\"></a>for-each</h2><p>繰り返し処理を実装する方法として”for文”を学習しました、今回の<strong>for-each</strong>文ではコレクション型の変数に登録されている要素の回数分、繰り返し処理を実行する時の実装方法です。<br>コレクション型以外にもMap型(講座の中ではまだ未使用)や配列型の変数でも同様の実装が可能です。<br><strong>for-each</strong>文の実装テンプレート<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (配列要素の型 一時変数 : リスト型の変数) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 繰り返し処理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一時変数にはリスト型変数の要素が0番目〜最後の要素まで代入された状態で繰り返し処理で参照することが可能です。<br>実際には<strong>for-each</strong>文の方が利用頻度は多いと思われます。</p>\n<h2 id=\"URL画像読み込み処理の実装\"><a href=\"#URL画像読み込み処理の実装\" class=\"headerlink\" title=\"URL画像読み込み処理の実装\"></a>URL画像読み込み処理の実装</h2><p>このページではActivity → Fragmentの移行に始まり、新規のクラスを作る回数も多かったので非常にコーディングに時間がかかったと思います。<br>それも今回の実装で終わりです！</p>\n<p>Web上にアップロードされた画像をアプリで読み込みむためにも便利なライブラリがあります。<br>本来はBitmapという形式で画像インスタンスを生成し使用しなくなるときにはちゃんとAndroid OSの処理の阻害にならないよう解放する必要があるのですが、<br><strong>Glide</strong>というライブラリを使用することでそういったメモリ管理などの忘れがちな処理を補ってくれます。</p>\n<p>では他のライブラリと同様に<code>build.gradle</code>に依存関係を追加します。<br>プロジェクトからappディレクトリの<code>build.gradle</code>を開き、”dependencies” の “{}”内に以下のコードを記述します<br>開くのは<code>build.gradle</code>の後ろに<strong><em>(Module: app)</em></strong>と表示されている方です。<br><figure class=\"highlight gradle\"><figcaption><span>build.gradle(Module: app)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">27</span></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"kuririnz.xyz.bookdiscovery\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">27</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">        testInstrumentationRunner <span class=\"string\">\"android.support.test.runner.AndroidJUnitRunner\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:appcompat-v7:27.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support.constraint:constraint-layout:1.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.android.support:design:27.0.2'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.9.1'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.code.gson:gson:2.2.4'</span></span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    implementation <span class=\"string\">'com.github.bumptech.glide:glide:4.6.1'</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">'com.github.bumptech.glide:compiler:4.6.1'</span></span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを追加後、<font color=\"blue\"><strong>Sync Now</strong></font>をクリックして<strong>Glide</strong>の導入は完了です。<br><strong>Glide</strong>の最新版(バージョン4.6.1)を使用する際には<code>dependencies</code>内の<code>implementation &#39;com.android.support:appcompat-v7...&#39;</code>と<code>implementation &#39;com.android.support:design...&#39;</code>の指定バージョンを”27.0.2”に設定する必要があるため、合わせて”compileSdkVersion”、”targetSdkVersion”の指定を<strong>27</strong>に設定しなければいけません。</p>\n<p>これは<strong>Glide</strong>が依存関係を持っているandroid.supportバージョンが<strong>27</strong>であることが原因で、<strong>Glide</strong>の古いバージョンの場合には開発アプリ側の”compileSdkVersion”、”targetSdkVersion”を古いものでも実装が可能だと思われます。</p>\n<p>では<strong>Glide</strong>を使って蔵書詳細画面のImageViewに画像を読み込ませてみます。<br><figure class=\"highlight java\"><figcaption><span>DetailFragment.java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定数</span></span><br><span class=\"line\">    <span class=\"comment\">// データ渡しのキー情報</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String BUNDLE_KEY = <span class=\"string\">\"BUNDLE_SELFLINK\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// xmlファイルのコンポーネントと関連付ける要素</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView titleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView subTitleText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView authorText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView descriptText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView pageText;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView publishDateText;</span><br><span class=\"line\">    <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView detailImage;</span><br><span class=\"line\">    <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">    <span class=\"comment\">// 個体リンクのURL</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String selfLink;</span><br><span class=\"line\">  </span><br><span class=\"line\">    ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\">        publishDateText = getView().findViewById(R.id.DetailPublishDateText);</span><br><span class=\"line\">        <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">        detailImage = getView().findViewById(R.id.DetailImage);</span><br><span class=\"line\">        <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\"></span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// REST APIで取得したデータを画面に反映するためのクラス</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectDetail</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">       ...一部省略</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Handlerから実行されるメソッド</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">           ...一部省略</span><br><span class=\"line\">    </span><br><span class=\"line\">            <span class=\"comment\">// 発売日が取得できていたら反映</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!TextUtils.isEmpty(detailData.volumeInfo.publishedDate)) &#123;</span><br><span class=\"line\">                publishDateText.setText(detailData.volumeInfo.publishedDate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓追加↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span></span><br><span class=\"line\">            <span class=\"comment\">// Glideを使ってWeb上の画像をImageViewに表示させる</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (detailData.volumeInfo.imageLinks != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Glide.with(DetailFragment.<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                        .applyDefaultRequestOptions(RequestOptions.fitCenterTransform())</span><br><span class=\"line\">                        .load(detailData.volumeInfo.imageLinks.medium)</span><br><span class=\"line\">                        .into(detailImage);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑追加↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上記コードを実装したら動作確認します。<br>正常に動作した場合、蔵書詳細画面に蔵書の表紙画像が表示されます。</p>\n<p><strong>Glide</strong>はメソッドからメソッドに繋げる形の実装でも画像のURLをImageViewに表示することができます。（変数を挟まなくていいのでコード量が少なくなります）<br><code>with()</code>ではContextを取得できるインスタンスを引数にセットします、<code>load()</code>の引数には画像のURLをセット、最後に<code>into()</code>の引数に画像を表示するImageViewをセットして表示します。<br><code>applyDefaultRequestOptions()</code>は画像の表示設定を指定できます、今回は画像をはい出さずに表示するように”fitCenterTransform”を指定しています。</p>\n<p>以上で、蔵書詳細画面作成の解説は完了です。<br>次の<a href=\"/AndroidCourse/android/10-OrganaizeExperience\">操作性・ユーザ体験の改善</a>ではユーザがアプリを操作する中で気持ちよく操作するための手段として読み込み中を伝えるダイアログや、最後に検索した内容を保持しておくための設定ファイルなどの利用方法を学習します。</p>\n"}],"PostAsset":[{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_03.png","slug":"as_i_03.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_07.png","slug":"as_s_07.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_07.png","slug":"j8_i_07.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad03.png","slug":"sad03.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad06.png","slug":"sad06.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad05.png","slug":"sad05.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad10.png","slug":"sad10.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le12.png","slug":"le12.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le6.png","slug":"le6.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le7.png","slug":"le7.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le9.png","slug":"le9.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu01.png","slug":"runemu01.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu05.png","slug":"runemu05.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu11.png","slug":"runemu11.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/importclass01.png","slug":"importclass01.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid04.png","slug":"setid04.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid05.png","slug":"setid05.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid08.png","slug":"setid08.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/additemclick02.png","slug":"additemclick02.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity02.png","slug":"createactivity02.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity03.png","slug":"createactivity03.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt04.png","slug":"createadpt04.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt06.png","slug":"createadpt06.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow02.png","slug":"createrow02.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow09.png","slug":"createrow09.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/re_le02.png","slug":"re_le02.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/re_le01.png","slug":"re_le01.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/re_le00.png","slug":"re_le00.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/scopedetail.png","slug":"scopedetail.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/AsyncTimerToast.png","slug":"AsyncTimerToast.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/custom_list00.png","slug":"custom_list00.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/includeokHttp01.png","slug":"includeokHttp01.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrecycler01.png","slug":"addrecycler01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter06.png","slug":"addadapter06.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler03.png","slug":"addrowrecycler03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler04.png","slug":"addrowrecycler04.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/crehistactivity.png","slug":"crehistactivity.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/includeRealm02-1.png","slug":"includeRealm02-1.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/cdialogfrag01.png","slug":"cdialogfrag01.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage07.png","slug":"orgpackage07.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage11.png","slug":"orgpackage11.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/prevtextmode.png","slug":"prevtextmode.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/11-BrowseWebPage/CrWebViewFragment.png","slug":"CrWebViewFragment.png","post":"cjh4ui0r6000a3l6164y48l8q","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad04.png","slug":"sad04.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad11.png","slug":"sad11.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad12.png","slug":"sad12.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad07.png","slug":"sad07.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le10.png","slug":"le10.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le11.png","slug":"le11.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le2.png","slug":"le2.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le3.png","slug":"le3.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le4.png","slug":"le4.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu03.png","slug":"runemu03.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu06.png","slug":"runemu06.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le5.png","slug":"le5.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu08.png","slug":"runemu08.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/addClickEvent01.png","slug":"addClickEvent01.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid06.png","slug":"setid06.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/additemclick01.png","slug":"additemclick01.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/additemclick04.png","slug":"additemclick04.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity05.png","slug":"createactivity05.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt01.png","slug":"createadpt01.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow03.png","slug":"createrow03.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow08.png","slug":"createrow08.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/includeokHttp02.png","slug":"includeokHttp02.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrecycler04.png","slug":"addrecycler04.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm01.png","slug":"confirmrealm01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/includeRealm01.png","slug":"includeRealm01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/includeRealm02.png","slug":"includeRealm02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/initialrealm03.png","slug":"initialrealm03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/refactvalid03.png","slug":"refactvalid03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail02.png","slug":"addDetail02.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail06.png","slug":"addDetail06.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/refactvalid02.png","slug":"refactvalid02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addfragment03.png","slug":"addfragment03.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/chngimport02.png","slug":"chngimport02.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/editRLfrg01.png","slug":"editRLfrg01.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg03.png","slug":"migratefrg03.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage10.png","slug":"orgpackage10.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_02.png","slug":"as_i_02.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad09.png","slug":"sad09.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le8.png","slug":"le8.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu04.png","slug":"runemu04.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu07.png","slug":"runemu07.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid03.png","slug":"setid03.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/timerexample.png","slug":"timerexample.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/reflectresult.png","slug":"reflectresult.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/chngimport01.png","slug":"chngimport01.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/02-AndroidConcept/viewinlifecycle.png","slug":"viewinlifecycle.png","post":"cjh4ui0q200023l61362llho6","modified":0,"renderable":0},{"_id":"source/_posts/android/01-CurrentStatus/JapanShare.png","slug":"JapanShare.png","post":"cjh4ui0pw00013l61lbwvc1f4","modified":0,"renderable":0},{"_id":"source/_posts/android/01-CurrentStatus/WorldShare.png","slug":"WorldShare.png","post":"cjh4ui0pw00013l61lbwvc1f4","modified":0,"renderable":0},{"_id":"source/_posts/android/11-BrowseWebPage/ConfirmParams.png","slug":"ConfirmParams.png","post":"cjh4ui0r6000a3l6164y48l8q","modified":0,"renderable":0},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout01.png","slug":"UpdateDetailLayout01.png","post":"cjh4ui0r6000a3l6164y48l8q","modified":0,"renderable":0},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout02.png","slug":"UpdateDetailLayout02.png","post":"cjh4ui0r6000a3l6164y48l8q","modified":0,"renderable":0},{"_id":"source/_posts/android/11-BrowseWebPage/UpdateDetailLayout03.png","slug":"UpdateDetailLayout03.png","post":"cjh4ui0r6000a3l6164y48l8q","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/APISequence.svg","slug":"APISequence.svg","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/MainThreadError.png","slug":"MainThreadError.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/apiresponse.png","slug":"apiresponse.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/07-AsyncProcess/jsonparse.png","slug":"jsonparse.png","post":"cjh4ui0qp00073l61boynt3p4","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu10.png","slug":"runemu10.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad01.png","slug":"sad01.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad02.png","slug":"sad02.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/03-StartAndroidDevelopment/sad08.png","slug":"sad08.png","post":"cjh4ui0q600033l61zp7231p7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage01.png","slug":"orgpackage01.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage02.png","slug":"orgpackage02.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage03.png","slug":"orgpackage03.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage04.png","slug":"orgpackage04.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage05.png","slug":"orgpackage05.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage06.png","slug":"orgpackage06.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage08.png","slug":"orgpackage08.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/10-OrganizeExperience/orgpackage09.png","slug":"orgpackage09.png","post":"cjh4ui0r000093l612ibogfi7","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/DesignCode.png","slug":"DesignCode.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/LoadLayout.png","slug":"LoadLayout.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/addClickEvent02.png","slug":"addClickEvent02.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/importclass02.png","slug":"importclass02.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/rerationcode01.png","slug":"rerationcode01.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid01.png","slug":"setid01.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid02.png","slug":"setid02.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/05-ButtonAction/setid07.png","slug":"setid07.png","post":"cjh4ui0qh00053l616w6hn7jk","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler01.png","slug":"addrowrecycler01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/CompleteScreen.png","slug":"CompleteScreen.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/MakeLayoutTask.png","slug":"MakeLayoutTask.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le0.png","slug":"le0.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/le1.png","slug":"le1.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu02.png","slug":"runemu02.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/04-MakeLayoutDesign/runemu09.png","slug":"runemu09.png","post":"cjh4ui0qd00043l61bw7h54nw","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/includeRealm03.png","slug":"includeRealm03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_01.png","slug":"as_i_01.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_04.png","slug":"as_i_04.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_05.png","slug":"as_i_05.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_06.png","slug":"as_i_06.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_07.png","slug":"as_i_07.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_08.png","slug":"as_i_08.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_09.png","slug":"as_i_09.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_10.png","slug":"as_i_10.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_i_11.png","slug":"as_i_11.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_01.png","slug":"as_s_01.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_02.png","slug":"as_s_02.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_03.png","slug":"as_s_03.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_04.png","slug":"as_s_04.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_05.png","slug":"as_s_05.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_06.png","slug":"as_s_06.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/as_s_08.png","slug":"as_s_08.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_01.png","slug":"j8_c_01.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_c_02.png","slug":"j8_c_02.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_dl.png","slug":"j8_dl.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_01.png","slug":"j8_i_01.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_02.png","slug":"j8_i_02.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_03.png","slug":"j8_i_03.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_04.png","slug":"j8_i_04.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_05.png","slug":"j8_i_05.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_06.png","slug":"j8_i_06.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/00-EnvironmentStructure/j8_i_08.png","slug":"j8_i_08.png","post":"cjh4ui0pr00003l61pbskqwj9","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/refactvalid01.png","slug":"refactvalid01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/BackScreen.png","slug":"BackScreen.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/TransitionScreen.gif","slug":"TransitionScreen.gif","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/additemclick03.png","slug":"additemclick03.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity01_1.png","slug":"createactivity01_1.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity01_2.png","slug":"createactivity01_2.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createactivity04.png","slug":"createactivity04.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt02.png","slug":"createadpt02.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt03.png","slug":"createadpt03.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createadpt05.png","slug":"createadpt05.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow01.png","slug":"createrow01.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow04.png","slug":"createrow04.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow05.png","slug":"createrow05.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow06.png","slug":"createrow06.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow07.png","slug":"createrow07.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/createrow10.png","slug":"createrow10.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/06-TransitionScreen/re_le03.png","slug":"re_le03.png","post":"cjh4ui0ql00063l61re6x5ert","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg01.png","slug":"migratefrg01.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter01.png","slug":"addadapter01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter02.png","slug":"addadapter02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter03.png","slug":"addadapter03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter04.png","slug":"addadapter04.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addadapter05.png","slug":"addadapter05.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrecycler02.png","slug":"addrecycler02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrecycler03.png","slug":"addrecycler03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrecycler05.png","slug":"addrecycler05.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/addrowrecycler02.png","slug":"addrowrecycler02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm02.png","slug":"confirmrealm02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/confirmrealm03.png","slug":"confirmrealm03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/includeRealm01-1.png","slug":"includeRealm01-1.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/initialrealm01.png","slug":"initialrealm01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/initialrealm02.png","slug":"initialrealm02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/initialrealm04.png","slug":"initialrealm04.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/initialrealm05.png","slug":"initialrealm05.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/realmtable01.png","slug":"realmtable01.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/realmtable02.png","slug":"realmtable02.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/08-AppDataBase/realmtable03.png","slug":"realmtable03.png","post":"cjh4ui0qt00083l61zz0ylal8","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/detailExample.png","slug":"detailExample.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail01.png","slug":"addDetail01.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail03.png","slug":"addDetail03.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail04.png","slug":"addDetail04.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail05.png","slug":"addDetail05.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail07.png","slug":"addDetail07.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addDetail08.png","slug":"addDetail08.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addfragment01.png","slug":"addfragment01.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/addfragment02.png","slug":"addfragment02.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/chngimport03.png","slug":"chngimport03.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0},{"_id":"source/_posts/android/09-RefactorFragment/migratefrg02.png","slug":"migratefrg02.png","post":"cjh4ui0wp000c3l61qqn20uws","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}